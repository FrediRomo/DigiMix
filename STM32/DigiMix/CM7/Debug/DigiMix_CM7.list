
DigiMix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .buffers      0001c000  30000000  30000000  00040000  2**5
                  ALLOC
  1 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013e74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d08  08014118  08014118  00024118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08014e20  08014e20  000301f8  2**0
                  CONTENTS
  5 .ARM          00000008  08014e20  08014e20  00024e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08014e28  08014e28  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08014e28  08014e28  00024e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08014e2c  08014e2c  00024e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001f8  24000000  08014e30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004fe0  240001f8  08015028  000301f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240051d8  08015028  000351d8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025702  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004426  00000000  00000000  00055928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c30  00000000  00000000  00059d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a98  00000000  00000000  0005b980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d02b  00000000  00000000  0005d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e88  00000000  00000000  0009a443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00192966  00000000  00000000  000bd2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0024fc31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009098  00000000  00000000  0024fc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080140fc 	.word	0x080140fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	080140fc 	.word	0x080140fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <IFX_PeakingFilter_Init>:


#include "IFX_PeakingFilter.h"

// Initialize
void IFX_PeakingFilter_Init(IFX_PeakingFilter *filt, float sampleRate_Hz) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	ed87 0a00 	vstr	s0, [r7]

	// Sample time
	filt->sampleTime_s = 1.0f / sampleRate_Hz;
 8000bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bb8:	ed97 7a00 	vldr	s14, [r7]
 8000bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	edc3 7a00 	vstr	s15, [r3]

	// Clear mem
	for(uint8_t n = 0; n < 3; n++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e012      	b.n	8000bf2 <IFX_PeakingFilter_Init+0x4a>
		filt->x[n] = 0.0f;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	3304      	adds	r3, #4
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < 3; n++) {
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d9e9      	bls.n	8000bcc <IFX_PeakingFilter_Init+0x24>
	}

	// Calculate all-pass filter
	IFX_PeakingFilter_SetParameters(filt, 1.0f, 1.0f, 1.0f);
 8000bf8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000bfc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f807 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	0000      	movs	r0, r0
 8000c14:	0000      	movs	r0, r0
	...

08000c18 <IFX_PeakingFilter_SetParameters>:

// Compute filter coefficients. (	 > 1.0f = boost | boostCut_linear < 1.0f = cut)
void IFX_PeakingFilter_SetParameters(IFX_PeakingFilter *filt, float centerFrequency_Hz, float Q, float boostCut_linear) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c24:	edc7 0a01 	vstr	s1, [r7, #4]
 8000c28:	ed87 1a00 	vstr	s2, [r7]

	// Convert Hz to rad/s, pre-warp cut off frequency, multiply by sampling time (wc*T = ...)
	float wcT = 2.0f * tanf(M_PI * centerFrequency_Hz * filt->sampleTime_s);
 8000c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c34:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8000d70 <IFX_PeakingFilter_SetParameters+0x158>
 8000c38:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c52:	f012 fc95 	bl	8013580 <tanf>
 8000c56:	eef0 7a40 	vmov.f32	s15, s0
 8000c5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c5e:	edc7 7a07 	vstr	s15, [r7, #28]
	float wcT2 = wcT * wcT;
 8000c62:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c6a:	edc7 7a06 	vstr	s15, [r7, #24]
	// Compute quality factor (Q = f(Center) / f(bandwidth))
	float invQ = 1.0f / Q;
 8000c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000c72:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7a:	edc7 7a05 	vstr	s15, [r7, #20]

	// Compute filter coefficients
	filt->a[0] = 4.0f + 2.0f * (boostCut_linear * invQ) * wcT + wcT2;
 8000c7e:	ed97 7a00 	vldr	s14, [r7]
 8000c82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c96:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->a[1] = 2.0f * wcT2 - 8.0f;
 8000cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cb4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000cb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	edc3 7a08 	vstr	s15, [r3, #32]
	filt->a[2] = 4.0f - 2.0f * (boostCut_linear * invQ) * wcT + wcT2;
 8000cc2:	ed97 7a00 	vldr	s14, [r7]
 8000cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000cd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ce2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	filt->b[0] = 1.0f / (4.0f + 2.0f * invQ * wcT + wcT2);	// 1 / coefficient
 8000cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000cf8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d00:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	filt->b[1] = -(2.0f * wcT2 - 8.0f);					// -coefficient
 8000d1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d26:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d2e:	eef1 7a67 	vneg.f32	s15, s15
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	filt->b[2] = -(4.0f - 2.0f * invQ * wcT + wcT2);			// -coefficient
 8000d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d48:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d50:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d58:	eef1 7a67 	vneg.f32	s15, s15
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

}
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	f3af 8000 	nop.w
 8000d70:	54442d18 	.word	0x54442d18
 8000d74:	400921fb 	.word	0x400921fb

08000d78 <IFX_PeakingFilter_Update>:

float IFX_PeakingFilter_Update(IFX_PeakingFilter *filt, float in) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	ed87 0a00 	vstr	s0, [r7]

	// Shift samples
	filt->x[2] = filt->x[1];
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
	filt->x[1] = filt->x[0];
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]
	filt->x[0] = in;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	605a      	str	r2, [r3, #4]

	filt->y[2] = filt->y[1];
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	619a      	str	r2, [r3, #24]
	filt->y[1] = filt->y[0];
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	615a      	str	r2, [r3, #20]

	// Compute new filter output
	filt->y[0] = (filt->a[0] * filt->x[0] + filt->a[1] * filt->x[1] + filt->a[2] * filt->x[2]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	ed93 7a07 	vldr	s14, [r3, #28]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	edd3 6a08 	vldr	s13, [r3, #32]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dde:	ee37 7a27 	vadd.f32	s14, s14, s15
			+    (filt->b[1] * filt->y[1] + filt->b[2] * filt->y[2])) * filt->b[0];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000e10:	ee67 7a27 	vmul.f32	s15, s14, s15
	filt->y[0] = (filt->a[0] * filt->x[0] + filt->a[1] * filt->x[1] + filt->a[2] * filt->x[2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	edc3 7a04 	vstr	s15, [r3, #16]

	// Return current output sample
	return(filt->y[0]);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	ee07 3a90 	vmov	s15, r3

}
 8000e22:	eeb0 0a67 	vmov.f32	s0, s15
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e36:	f000 ff4d 	bl	8001cd4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e3a:	4ba8      	ldr	r3, [pc, #672]	; (80010dc <main+0x2ac>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d11b      	bne.n	8000e7e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e46:	f3bf 8f4f 	dsb	sy
}
 8000e4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e4c:	f3bf 8f6f 	isb	sy
}
 8000e50:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e52:	4ba2      	ldr	r3, [pc, #648]	; (80010dc <main+0x2ac>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5a:	f3bf 8f4f 	dsb	sy
}
 8000e5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e60:	f3bf 8f6f 	isb	sy
}
 8000e64:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e66:	4b9d      	ldr	r3, [pc, #628]	; (80010dc <main+0x2ac>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a9c      	ldr	r2, [pc, #624]	; (80010dc <main+0x2ac>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e72:	f3bf 8f4f 	dsb	sy
}
 8000e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e78:	f3bf 8f6f 	isb	sy
}
 8000e7c:	e000      	b.n	8000e80 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e7e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e80:	4b96      	ldr	r3, [pc, #600]	; (80010dc <main+0x2ac>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d138      	bne.n	8000efe <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e8c:	4b93      	ldr	r3, [pc, #588]	; (80010dc <main+0x2ac>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e94:	f3bf 8f4f 	dsb	sy
}
 8000e98:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e9a:	4b90      	ldr	r3, [pc, #576]	; (80010dc <main+0x2ac>)
 8000e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ea0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	0b5b      	lsrs	r3, r3, #13
 8000ea6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000eaa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	015a      	lsls	r2, r3, #5
 8000eba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ebe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ec4:	4985      	ldr	r1, [pc, #532]	; (80010dc <main+0x2ac>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1ef      	bne.n	8000eb6 <main+0x86>
    } while(sets-- != 0U);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	60fa      	str	r2, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1e5      	bne.n	8000eac <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee0:	f3bf 8f4f 	dsb	sy
}
 8000ee4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ee6:	4b7d      	ldr	r3, [pc, #500]	; (80010dc <main+0x2ac>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a7c      	ldr	r2, [pc, #496]	; (80010dc <main+0x2ac>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef2:	f3bf 8f4f 	dsb	sy
}
 8000ef6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef8:	f3bf 8f6f 	isb	sy
}
 8000efc:	e000      	b.n	8000f00 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000efe:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	  /* Wait until CPU2 boots and enters in stop mode or timeout*/
	  timeout = 0xFFFF;
 8000f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f04:	617b      	str	r3, [r7, #20]
	  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000f06:	bf00      	nop
 8000f08:	4b75      	ldr	r3, [pc, #468]	; (80010e0 <main+0x2b0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <main+0xee>
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	617a      	str	r2, [r7, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	dcf4      	bgt.n	8000f08 <main+0xd8>
	  if ( timeout < 0 )
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da01      	bge.n	8000f28 <main+0xf8>
	  {
	  Error_Handler();
 8000f24:	f000 ff16 	bl	8001d54 <Error_Handler>
	  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f001 fb7c 	bl	8002624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f914 	bl	8001158 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f30:	f000 f992 	bl	8001258 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000f34:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <main+0x2b0>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a69      	ldr	r2, [pc, #420]	; (80010e0 <main+0x2b0>)
 8000f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <main+0x2b0>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f003 ffae 	bl	8004eb4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f003 ffc4 	bl	8004ee8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f64:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f66:	bf00      	nop
 8000f68:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <main+0x2b0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <main+0x14e>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	1e5a      	subs	r2, r3, #1
 8000f78:	617a      	str	r2, [r7, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	dcf4      	bgt.n	8000f68 <main+0x138>
	if ( timeout < 0 )
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	da01      	bge.n	8000f88 <main+0x158>
	{
	Error_Handler();
 8000f84:	f000 fee6 	bl	8001d54 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f000 faec 	bl	8001564 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f8c:	f000 fa92 	bl	80014b4 <MX_DMA_Init>
  MX_I2S3_Init();
 8000f90:	f000 f9c4 	bl	800131c <MX_I2S3_Init>
  MX_USART3_UART_Init();
 8000f94:	f000 fa42 	bl	800141c <MX_USART3_UART_Init>
  MX_I2S1_Init();
 8000f98:	f000 f98e 	bl	80012b8 <MX_I2S1_Init>
  MX_USART2_UART_Init();
 8000f9c:	f000 f9f2 	bl	8001384 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	  memset(dacData, 0, sizeof(dacData));
 8000fa0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	484f      	ldr	r0, [pc, #316]	; (80010e4 <main+0x2b4>)
 8000fa8:	f00d f96a 	bl	800e280 <memset>

	  IFX_PeakingFilter_Init(&filt1, SAMPLE_RATE_HZ);
 8000fac:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80010e8 <main+0x2b8>
 8000fb0:	484e      	ldr	r0, [pc, #312]	; (80010ec <main+0x2bc>)
 8000fb2:	f7ff fdf9 	bl	8000ba8 <IFX_PeakingFilter_Init>
	  IFX_PeakingFilter_Init(&filt2, SAMPLE_RATE_HZ);
 8000fb6:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80010e8 <main+0x2b8>
 8000fba:	484d      	ldr	r0, [pc, #308]	; (80010f0 <main+0x2c0>)
 8000fbc:	f7ff fdf4 	bl	8000ba8 <IFX_PeakingFilter_Init>
	  IFX_PeakingFilter_Init(&filt3, SAMPLE_RATE_HZ);
 8000fc0:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80010e8 <main+0x2b8>
 8000fc4:	484b      	ldr	r0, [pc, #300]	; (80010f4 <main+0x2c4>)
 8000fc6:	f7ff fdef 	bl	8000ba8 <IFX_PeakingFilter_Init>
	  //  IFX_PeakingFilter_Init(&filt4, SAMPLE_RATE_HZ);
	  //  IFX_PeakingFilter_Init(&filt5, SAMPLE_RATE_HZ);

	  UART_Printf("Readyy!\r\n");
 8000fca:	484b      	ldr	r0, [pc, #300]	; (80010f8 <main+0x2c8>)
 8000fcc:	f000 fb02 	bl	80015d4 <UART_Printf>

	  // CH1
	  IFX_PeakingFilter_SetParameters(&filt1, 1.0f, 1.0f, 1.0f);
 8000fd0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000fd4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000fd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fdc:	4843      	ldr	r0, [pc, #268]	; (80010ec <main+0x2bc>)
 8000fde:	f7ff fe1b 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
	  IFX_PeakingFilter_SetParameters(&filt2, 1.0f, 1.0f, 1.0f);
 8000fe2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000fe6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000fea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fee:	4840      	ldr	r0, [pc, #256]	; (80010f0 <main+0x2c0>)
 8000ff0:	f7ff fe12 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
	  IFX_PeakingFilter_SetParameters(&filt3, 1.0f, 1.0f, 1.0f);
 8000ff4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000ff8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ffc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001000:	483c      	ldr	r0, [pc, #240]	; (80010f4 <main+0x2c4>)
 8001002:	f7ff fe09 	bl	8000c18 <IFX_PeakingFilter_SetParameters>

	  // CH2
	  IFX_PeakingFilter_SetParameters(&filt4, 1.0f, 1.0f, 1.0f);
 8001006:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800100a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800100e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001012:	483a      	ldr	r0, [pc, #232]	; (80010fc <main+0x2cc>)
 8001014:	f7ff fe00 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
	  IFX_PeakingFilter_SetParameters(&filt5, 1.0f, 1.0f, 1.0f);
 8001018:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800101c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001020:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001024:	4836      	ldr	r0, [pc, #216]	; (8001100 <main+0x2d0>)
 8001026:	f7ff fdf7 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
	  IFX_PeakingFilter_SetParameters(&filt6, 1.0f, 1.0f, 1.0f);
 800102a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800102e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001032:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001036:	4833      	ldr	r0, [pc, #204]	; (8001104 <main+0x2d4>)
 8001038:	f7ff fdee 	bl	8000c18 <IFX_PeakingFilter_SetParameters>

	  if (HAL_I2SEx_TransmitReceive_DMA(&hi2s3, (uint16_t *) dacData, (uint16_t *) adcData, BUFFER_SIZE) != HAL_OK) {
 800103c:	23c0      	movs	r3, #192	; 0xc0
 800103e:	4a32      	ldr	r2, [pc, #200]	; (8001108 <main+0x2d8>)
 8001040:	4928      	ldr	r1, [pc, #160]	; (80010e4 <main+0x2b4>)
 8001042:	4832      	ldr	r0, [pc, #200]	; (800110c <main+0x2dc>)
 8001044:	f004 f886 	bl	8005154 <HAL_I2SEx_TransmitReceive_DMA>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d004      	beq.n	8001058 <main+0x228>
		UART_Printf("I2S Full-Duplex DMA initialization failed\n");
 800104e:	4830      	ldr	r0, [pc, #192]	; (8001110 <main+0x2e0>)
 8001050:	f000 fac0 	bl	80015d4 <UART_Printf>
		Error_Handler();
 8001054:	f000 fe7e 	bl	8001d54 <Error_Handler>
	  }

	  if (HAL_UART_Receive_DMA(&huart2, uartData, sizeof(uartData)) != HAL_OK) {
 8001058:	2241      	movs	r2, #65	; 0x41
 800105a:	492e      	ldr	r1, [pc, #184]	; (8001114 <main+0x2e4>)
 800105c:	482e      	ldr	r0, [pc, #184]	; (8001118 <main+0x2e8>)
 800105e:	f008 faef 	bl	8009640 <HAL_UART_Receive_DMA>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <main+0x242>
		UART_Printf("UART DMA Receive initialization failed\n");
 8001068:	482c      	ldr	r0, [pc, #176]	; (800111c <main+0x2ec>)
 800106a:	f000 fab3 	bl	80015d4 <UART_Printf>
		Error_Handler();
 800106e:	f000 fe71 	bl	8001d54 <Error_Handler>
//	  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001072:	f009 fdfb 	bl	800ac6c <osKernelInitialize>
	  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of i2sHalfFull */
  i2sHalfFullHandle = osSemaphoreNew(1, 1, &i2sHalfFull_attributes);
 8001076:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <main+0x2f0>)
 8001078:	2101      	movs	r1, #1
 800107a:	2001      	movs	r0, #1
 800107c:	f009 fef2 	bl	800ae64 <osSemaphoreNew>
 8001080:	4603      	mov	r3, r0
 8001082:	4a28      	ldr	r2, [pc, #160]	; (8001124 <main+0x2f4>)
 8001084:	6013      	str	r3, [r2, #0]

  /* creation of i2sFull */
  i2sFullHandle = osSemaphoreNew(1, 1, &i2sFull_attributes);
 8001086:	4a28      	ldr	r2, [pc, #160]	; (8001128 <main+0x2f8>)
 8001088:	2101      	movs	r1, #1
 800108a:	2001      	movs	r0, #1
 800108c:	f009 feea 	bl	800ae64 <osSemaphoreNew>
 8001090:	4603      	mov	r3, r0
 8001092:	4a26      	ldr	r2, [pc, #152]	; (800112c <main+0x2fc>)
 8001094:	6013      	str	r3, [r2, #0]

  /* creation of uartFull */
  uartFullHandle = osSemaphoreNew(1, 1, &uartFull_attributes);
 8001096:	4a26      	ldr	r2, [pc, #152]	; (8001130 <main+0x300>)
 8001098:	2101      	movs	r1, #1
 800109a:	2001      	movs	r0, #1
 800109c:	f009 fee2 	bl	800ae64 <osSemaphoreNew>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a24      	ldr	r2, [pc, #144]	; (8001134 <main+0x304>)
 80010a4:	6013      	str	r3, [r2, #0]
	  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uartQueue_attributes);
 80010a6:	4a24      	ldr	r2, [pc, #144]	; (8001138 <main+0x308>)
 80010a8:	2102      	movs	r1, #2
 80010aa:	2010      	movs	r0, #16
 80010ac:	f009 fffa 	bl	800b0a4 <osMessageQueueNew>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <main+0x30c>)
 80010b4:	6013      	str	r3, [r2, #0]
	  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of filterTask */
  filterTaskHandle = osThreadNew(setFilterTask, NULL, &filterTask_attributes);
 80010b6:	4a22      	ldr	r2, [pc, #136]	; (8001140 <main+0x310>)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <main+0x314>)
 80010bc:	f009 fe20 	bl	800ad00 <osThreadNew>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <main+0x318>)
 80010c4:	6013      	str	r3, [r2, #0]

  /* creation of processData */
  processDataHandle = osThreadNew(processDataTask, NULL, &processData_attributes);
 80010c6:	4a21      	ldr	r2, [pc, #132]	; (800114c <main+0x31c>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	4821      	ldr	r0, [pc, #132]	; (8001150 <main+0x320>)
 80010cc:	f009 fe18 	bl	800ad00 <osThreadNew>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a20      	ldr	r2, [pc, #128]	; (8001154 <main+0x324>)
 80010d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010d6:	f009 fded 	bl	800acb4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
 80010da:	e7fe      	b.n	80010da <main+0x2aa>
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	58024400 	.word	0x58024400
 80010e4:	30012000 	.word	0x30012000
 80010e8:	473b8000 	.word	0x473b8000
 80010ec:	240006d4 	.word	0x240006d4
 80010f0:	24000708 	.word	0x24000708
 80010f4:	2400073c 	.word	0x2400073c
 80010f8:	0801415c 	.word	0x0801415c
 80010fc:	24000770 	.word	0x24000770
 8001100:	240007a4 	.word	0x240007a4
 8001104:	240007d8 	.word	0x240007d8
 8001108:	30010000 	.word	0x30010000
 800110c:	24000268 	.word	0x24000268
 8001110:	08014168 	.word	0x08014168
 8001114:	30018000 	.word	0x30018000
 8001118:	240003ac 	.word	0x240003ac
 800111c:	08014194 	.word	0x08014194
 8001120:	080142c4 	.word	0x080142c4
 8001124:	240006c0 	.word	0x240006c0
 8001128:	080142d4 	.word	0x080142d4
 800112c:	240006c4 	.word	0x240006c4
 8001130:	080142e4 	.word	0x080142e4
 8001134:	240006c8 	.word	0x240006c8
 8001138:	080142ac 	.word	0x080142ac
 800113c:	240006bc 	.word	0x240006bc
 8001140:	08014264 	.word	0x08014264
 8001144:	08001c85 	.word	0x08001c85
 8001148:	240006b4 	.word	0x240006b4
 800114c:	08014288 	.word	0x08014288
 8001150:	08001c95 	.word	0x08001c95
 8001154:	240006b8 	.word	0x240006b8

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b09c      	sub	sp, #112	; 0x70
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	224c      	movs	r2, #76	; 0x4c
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00d f88a 	bl	800e280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2220      	movs	r2, #32
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f00d f884 	bl	800e280 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001178:	2004      	movs	r0, #4
 800117a:	f004 f935 	bl	80053e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b33      	ldr	r3, [pc, #204]	; (8001250 <SystemClock_Config+0xf8>)
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	4a32      	ldr	r2, [pc, #200]	; (8001250 <SystemClock_Config+0xf8>)
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <SystemClock_Config+0xf8>)
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <SystemClock_Config+0xfc>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <SystemClock_Config+0xfc>)
 800119e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <SystemClock_Config+0xfc>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011b0:	bf00      	nop
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <SystemClock_Config+0xfc>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011be:	d1f8      	bne.n	80011b2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 80011c0:	2311      	movs	r3, #17
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80011ce:	2320      	movs	r3, #32
 80011d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d6:	2302      	movs	r3, #2
 80011d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011da:	2310      	movs	r3, #16
 80011dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 500;
 80011de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4618      	mov	r0, r3
 8001202:	f004 f94b 	bl	800549c <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800120c:	f000 fda2 	bl	8001d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	233f      	movs	r3, #63	; 0x3f
 8001212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2303      	movs	r3, #3
 8001216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800121c:	2308      	movs	r3, #8
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001220:	2340      	movs	r3, #64	; 0x40
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001224:	2340      	movs	r3, #64	; 0x40
 8001226:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f004 fd8a 	bl	8005d50 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001242:	f000 fd87 	bl	8001d54 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3770      	adds	r7, #112	; 0x70
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	58000400 	.word	0x58000400
 8001254:	58024800 	.word	0x58024800

08001258 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0b0      	sub	sp, #192	; 0xc0
 800125c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	22c0      	movs	r2, #192	; 0xc0
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f00d f80b 	bl	800e280 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1;
 800126a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 16;
 8001276:	2310      	movs	r3, #16
 8001278:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800127e:	2308      	movs	r3, #8
 8001280:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8001282:	2308      	movs	r3, #8
 8001284:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 f924 	bl	80064ec <HAL_RCCEx_PeriphCLKConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80012aa:	f000 fd53 	bl	8001d54 <Error_Handler>
  }
}
 80012ae:	bf00      	nop
 80012b0:	37c0      	adds	r7, #192	; 0xc0
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <MX_I2S1_Init+0x60>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80012e0:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2S1_Init+0x5c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_I2S1_Init+0x5c>)
 8001302:	f003 fe05 	bl	8004f10 <HAL_I2S_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2S1_Init+0x58>
  {
    Error_Handler();
 800130c:	f000 fd22 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	24000214 	.word	0x24000214
 8001318:	40013000 	.word	0x40013000

0800131c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_I2S3_Init+0x60>)
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <MX_I2S3_Init+0x64>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_I2S3_Init+0x60>)
 8001328:	220a      	movs	r2, #10
 800132a:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_I2S3_Init+0x60>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2S3_Init+0x60>)
 8001334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001338:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_I2S3_Init+0x60>)
 800133c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001340:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2S3_Init+0x60>)
 8001344:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001348:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2S3_Init+0x60>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2S3_Init+0x60>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2S3_Init+0x60>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2S3_Init+0x60>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2S3_Init+0x60>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2S3_Init+0x60>)
 800136a:	f003 fdd1 	bl	8004f10 <HAL_I2S_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2S3_Init+0x5c>
  {
    Error_Handler();
 8001374:	f000 fcee 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	24000268 	.word	0x24000268
 8001380:	40003c00 	.word	0x40003c00

08001384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <MX_USART2_UART_Init+0x90>)
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <MX_USART2_UART_Init+0x94>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_USART2_UART_Init+0x90>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_USART2_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_USART2_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013cc:	4811      	ldr	r0, [pc, #68]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013ce:	f008 f859 	bl	8009484 <HAL_UART_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013d8:	f000 fcbc 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013dc:	2100      	movs	r1, #0
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013e0:	f009 fb36 	bl	800aa50 <HAL_UARTEx_SetTxFifoThreshold>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013ea:	f000 fcb3 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ee:	2100      	movs	r1, #0
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013f2:	f009 fb6b 	bl	800aacc <HAL_UARTEx_SetRxFifoThreshold>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013fc:	f000 fcaa 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_USART2_UART_Init+0x90>)
 8001402:	f009 faec 	bl	800a9de <HAL_UARTEx_DisableFifoMode>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800140c:	f000 fca2 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	240003ac 	.word	0x240003ac
 8001418:	40004400 	.word	0x40004400

0800141c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001422:	4a23      	ldr	r2, [pc, #140]	; (80014b0 <MX_USART3_UART_Init+0x94>)
 8001424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001464:	4811      	ldr	r0, [pc, #68]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001466:	f008 f80d 	bl	8009484 <HAL_UART_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001470:	f000 fc70 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001474:	2100      	movs	r1, #0
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001478:	f009 faea 	bl	800aa50 <HAL_UARTEx_SetTxFifoThreshold>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001482:	f000 fc67 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001486:	2100      	movs	r1, #0
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800148a:	f009 fb1f 	bl	800aacc <HAL_UARTEx_SetRxFifoThreshold>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001494:	f000 fc5e 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800149a:	f009 faa0 	bl	800a9de <HAL_UARTEx_DisableFifoMode>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014a4:	f000 fc56 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	24000440 	.word	0x24000440
 80014b0:	40004800 	.word	0x40004800

080014b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <MX_DMA_Init+0xac>)
 80014bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <MX_DMA_Init+0xac>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <MX_DMA_Init+0xac>)
 80014cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_DMA_Init+0xac>)
 80014da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014de:	4a20      	ldr	r2, [pc, #128]	; (8001560 <MX_DMA_Init+0xac>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_DMA_Init+0xac>)
 80014ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2105      	movs	r1, #5
 80014fa:	200b      	movs	r0, #11
 80014fc:	f001 f9b2 	bl	8002864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001500:	200b      	movs	r0, #11
 8001502:	f001 f9c9 	bl	8002898 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2105      	movs	r1, #5
 800150a:	200c      	movs	r0, #12
 800150c:	f001 f9aa 	bl	8002864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001510:	200c      	movs	r0, #12
 8001512:	f001 f9c1 	bl	8002898 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	200f      	movs	r0, #15
 800151c:	f001 f9a2 	bl	8002864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001520:	200f      	movs	r0, #15
 8001522:	f001 f9b9 	bl	8002898 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2105      	movs	r1, #5
 800152a:	2010      	movs	r0, #16
 800152c:	f001 f99a 	bl	8002864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001530:	2010      	movs	r0, #16
 8001532:	f001 f9b1 	bl	8002898 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2045      	movs	r0, #69	; 0x45
 800153c:	f001 f992 	bl	8002864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001540:	2045      	movs	r0, #69	; 0x45
 8001542:	f001 f9a9 	bl	8002898 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2046      	movs	r0, #70	; 0x46
 800154c:	f001 f98a 	bl	8002864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001550:	2046      	movs	r0, #70	; 0x46
 8001552:	f001 f9a1 	bl	8002898 <HAL_NVIC_EnableIRQ>

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	58024400 	.word	0x58024400

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_GPIO_Init+0x6c>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <MX_GPIO_Init+0x6c>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_GPIO_Init+0x6c>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_GPIO_Init+0x6c>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <MX_GPIO_Init+0x6c>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_GPIO_Init+0x6c>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_GPIO_Init+0x6c>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ac:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <MX_GPIO_Init+0x6c>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_GPIO_Init+0x6c>)
 80015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	58024400 	.word	0x58024400

080015d4 <UART_Printf>:

/* USER CODE BEGIN 4 */
	void UART_Printf(const char* fmt, ...) {
 80015d4:	b40f      	push	{r0, r1, r2, r3}
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b0c2      	sub	sp, #264	; 0x108
 80015da:	af00      	add	r7, sp, #0
	  char buff[256];
	  va_list args;
	  va_start(args, fmt);
 80015dc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80015e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015e8:	601a      	str	r2, [r3, #0]
	  vsnprintf(buff, sizeof(buff), fmt, args);
 80015ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015f2:	f107 0008 	add.w	r0, r7, #8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001600:	f00e fbe2 	bl	800fdc8 <vsniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe fe69 	bl	80002e0 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	f107 0108 	add.w	r1, r7, #8
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <UART_Printf+0x5c>)
 800161c:	f007 ff82 	bl	8009524 <HAL_UART_Transmit>
	  va_end(args);
	}
 8001620:	bf00      	nop
 8001622:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001626:	46bd      	mov	sp, r7
 8001628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800162c:	b004      	add	sp, #16
 800162e:	4770      	bx	lr
 8001630:	24000440 	.word	0x24000440

08001634 <HAL_UART_RxCpltCallback>:


	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b0a0      	sub	sp, #128	; 0x80
 8001638:	af06      	add	r7, sp, #24
 800163a:	6078      	str	r0, [r7, #4]
		UART_Printf("callback");
 800163c:	48bd      	ldr	r0, [pc, #756]	; (8001934 <HAL_UART_RxCpltCallback+0x300>)
 800163e:	f7ff ffc9 	bl	80015d4 <UART_Printf>
		HAL_UART_Transmit(&huart3, (uint8_t*)uartData, sizeof(uartData), HAL_MAX_DELAY);
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	2241      	movs	r2, #65	; 0x41
 8001648:	49bb      	ldr	r1, [pc, #748]	; (8001938 <HAL_UART_RxCpltCallback+0x304>)
 800164a:	48bc      	ldr	r0, [pc, #752]	; (800193c <HAL_UART_RxCpltCallback+0x308>)
 800164c:	f007 ff6a 	bl	8009524 <HAL_UART_Transmit>
		if (uartData[0] == 'f') {
 8001650:	4bb9      	ldr	r3, [pc, #740]	; (8001938 <HAL_UART_RxCpltCallback+0x304>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b66      	cmp	r3, #102	; 0x66
 8001656:	f040 80fa 	bne.w	800184e <HAL_UART_RxCpltCallback+0x21a>
		  FilterParams newParams = {0.0f, 0.0f, 0.0f};
 800165a:	2300      	movs	r3, #0
 800165c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	657b      	str	r3, [r7, #84]	; 0x54
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	65bb      	str	r3, [r7, #88]	; 0x58
		  uint8_t channel = 0, filter = 0, freq = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001672:	2300      	movs	r3, #0
 8001674:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001678:	2300      	movs	r3, #0
 800167a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		  sscanf(uartData, "%c,%d,%d,%d,%f,%f", NULL, &channel, &filter, &newParams.centerFrequency, &newParams.gain, &newParams.qFactor);
 800167e:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 8001682:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001686:	3304      	adds	r3, #4
 8001688:	9303      	str	r3, [sp, #12]
 800168a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800168e:	3308      	adds	r3, #8
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4613      	mov	r3, r2
 80016a0:	2200      	movs	r2, #0
 80016a2:	49a7      	ldr	r1, [pc, #668]	; (8001940 <HAL_UART_RxCpltCallback+0x30c>)
 80016a4:	48a4      	ldr	r0, [pc, #656]	; (8001938 <HAL_UART_RxCpltCallback+0x304>)
 80016a6:	f00d fc95 	bl	800efd4 <siscanf>
		  //sscanf(uartData, "%c,%f,%f,%f", NULL, &newParams.centerFrequency, &newParams.qFactor, &newParams.gain);

		  newParams.gain = powf(10.0f, newParams.gain / 20.0f);
 80016aa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80016ae:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80016b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016b6:	eef0 0a47 	vmov.f32	s1, s14
 80016ba:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80016be:	f011 fdff 	bl	80132c0 <powf>
 80016c2:	eef0 7a40 	vmov.f32	s15, s0
 80016c6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		  char printBuffer[64];
		  snprintf(printBuffer, sizeof(printBuffer), "CH: %d\n\r#F: %d\n\rCF: %d \n\rQ: %.5f \n\rGain: %.5f \n\r", channel, filter, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 80016ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016ce:	4619      	mov	r1, r3
 80016d0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80016d4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80016d8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80016e4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016e8:	f107 000c 	add.w	r0, r7, #12
 80016ec:	ed8d 6b04 	vstr	d6, [sp, #16]
 80016f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80016f4:	9201      	str	r2, [sp, #4]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	460b      	mov	r3, r1
 80016fa:	4a92      	ldr	r2, [pc, #584]	; (8001944 <HAL_UART_RxCpltCallback+0x310>)
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	f00d fc15 	bl	800ef2c <sniprintf>

		  // f, #CH, #FILTRO, FREQ, GAIN, Q
		  if (channel == 0) {
 8001702:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001706:	2b00      	cmp	r3, #0
 8001708:	d147      	bne.n	800179a <HAL_UART_RxCpltCallback+0x166>
			if (filter == 0) {
 800170a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800170e:	2b00      	cmp	r3, #0
 8001710:	d113      	bne.n	800173a <HAL_UART_RxCpltCallback+0x106>
			  IFX_PeakingFilter_SetParameters(&filt1, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 8001712:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001722:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001726:	eeb0 1a66 	vmov.f32	s2, s13
 800172a:	eef0 0a47 	vmov.f32	s1, s14
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	4885      	ldr	r0, [pc, #532]	; (8001948 <HAL_UART_RxCpltCallback+0x314>)
 8001734:	f7ff fa70 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
 8001738:	e07a      	b.n	8001830 <HAL_UART_RxCpltCallback+0x1fc>
			} else if (filter == 1) {
 800173a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800173e:	2b01      	cmp	r3, #1
 8001740:	d113      	bne.n	800176a <HAL_UART_RxCpltCallback+0x136>
			  IFX_PeakingFilter_SetParameters(&filt2, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 8001742:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001752:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001756:	eeb0 1a66 	vmov.f32	s2, s13
 800175a:	eef0 0a47 	vmov.f32	s1, s14
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	487a      	ldr	r0, [pc, #488]	; (800194c <HAL_UART_RxCpltCallback+0x318>)
 8001764:	f7ff fa58 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
 8001768:	e062      	b.n	8001830 <HAL_UART_RxCpltCallback+0x1fc>
			} else if (filter == 2) {
 800176a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800176e:	2b02      	cmp	r3, #2
 8001770:	d15e      	bne.n	8001830 <HAL_UART_RxCpltCallback+0x1fc>
			  IFX_PeakingFilter_SetParameters(&filt3, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 8001772:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001782:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001786:	eeb0 1a66 	vmov.f32	s2, s13
 800178a:	eef0 0a47 	vmov.f32	s1, s14
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	486f      	ldr	r0, [pc, #444]	; (8001950 <HAL_UART_RxCpltCallback+0x31c>)
 8001794:	f7ff fa40 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
 8001798:	e04a      	b.n	8001830 <HAL_UART_RxCpltCallback+0x1fc>
			}
		  } else if (channel == 1) {
 800179a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d146      	bne.n	8001830 <HAL_UART_RxCpltCallback+0x1fc>
		    if (filter == 0) {
 80017a2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d113      	bne.n	80017d2 <HAL_UART_RxCpltCallback+0x19e>
		      IFX_PeakingFilter_SetParameters(&filt4, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 80017aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80017ba:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80017be:	eeb0 1a66 	vmov.f32	s2, s13
 80017c2:	eef0 0a47 	vmov.f32	s1, s14
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	4862      	ldr	r0, [pc, #392]	; (8001954 <HAL_UART_RxCpltCallback+0x320>)
 80017cc:	f7ff fa24 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
 80017d0:	e02e      	b.n	8001830 <HAL_UART_RxCpltCallback+0x1fc>
			} else if (filter == 1) {
 80017d2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d113      	bne.n	8001802 <HAL_UART_RxCpltCallback+0x1ce>
		      IFX_PeakingFilter_SetParameters(&filt5, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 80017da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80017ea:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80017ee:	eeb0 1a66 	vmov.f32	s2, s13
 80017f2:	eef0 0a47 	vmov.f32	s1, s14
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	4857      	ldr	r0, [pc, #348]	; (8001958 <HAL_UART_RxCpltCallback+0x324>)
 80017fc:	f7ff fa0c 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
 8001800:	e016      	b.n	8001830 <HAL_UART_RxCpltCallback+0x1fc>
			} else if (filter == 2) {
 8001802:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001806:	2b02      	cmp	r3, #2
 8001808:	d112      	bne.n	8001830 <HAL_UART_RxCpltCallback+0x1fc>
			  IFX_PeakingFilter_SetParameters(&filt6, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 800180a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001816:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800181a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800181e:	eeb0 1a66 	vmov.f32	s2, s13
 8001822:	eef0 0a47 	vmov.f32	s1, s14
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	484c      	ldr	r0, [pc, #304]	; (800195c <HAL_UART_RxCpltCallback+0x328>)
 800182c:	f7ff f9f4 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
			}
		  }


		  HAL_UART_Transmit(&huart3, (uint8_t*)printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fd53 	bl	80002e0 <strlen>
 800183a:	4603      	mov	r3, r0
 800183c:	b29a      	uxth	r2, r3
 800183e:	f107 010c 	add.w	r1, r7, #12
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	483d      	ldr	r0, [pc, #244]	; (800193c <HAL_UART_RxCpltCallback+0x308>)
 8001848:	f007 fe6c 	bl	8009524 <HAL_UART_Transmit>
 800184c:	e069      	b.n	8001922 <HAL_UART_RxCpltCallback+0x2ee>

		} else if (uartData[0] == 'v') {
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_UART_RxCpltCallback+0x304>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b76      	cmp	r3, #118	; 0x76
 8001854:	d165      	bne.n	8001922 <HAL_UART_RxCpltCallback+0x2ee>
		  uint8_t volume = 0, channel = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800185c:	2300      	movs	r3, #0
 800185e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		  sscanf(uartData, "%c,%d,%d", NULL, &channel, &volume);
 8001862:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001866:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	2200      	movs	r2, #0
 8001870:	493b      	ldr	r1, [pc, #236]	; (8001960 <HAL_UART_RxCpltCallback+0x32c>)
 8001872:	4831      	ldr	r0, [pc, #196]	; (8001938 <HAL_UART_RxCpltCallback+0x304>)
 8001874:	f00d fbae 	bl	800efd4 <siscanf>

		  float normalizedVolume = volume / 100.0f;
 8001878:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001884:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001964 <HAL_UART_RxCpltCallback+0x330>
 8001888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		  float volumeMultiplier = powf(10.0f, (normalizedVolume - 1.0f) * 20.0f / 10.0f);
 8001890:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800189c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018ac:	eef0 0a47 	vmov.f32	s1, s14
 80018b0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80018b4:	f011 fd04 	bl	80132c0 <powf>
 80018b8:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60

		  char printBuffer[64];
		  snprintf(printBuffer, sizeof(printBuffer), "CH: %d \n\rV: %d \n\r", channel, volumeMultiplier);
 80018bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80018c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018c8:	f107 000c 	add.w	r0, r7, #12
 80018cc:	ed8d 7b00 	vstr	d7, [sp]
 80018d0:	4a25      	ldr	r2, [pc, #148]	; (8001968 <HAL_UART_RxCpltCallback+0x334>)
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	f00d fb2a 	bl	800ef2c <sniprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fcff 	bl	80002e0 <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f107 010c 	add.w	r1, r7, #12
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	4813      	ldr	r0, [pc, #76]	; (800193c <HAL_UART_RxCpltCallback+0x308>)
 80018f0:	f007 fe18 	bl	8009524 <HAL_UART_Transmit>


		  if (channel == 0) {
 80018f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <HAL_UART_RxCpltCallback+0x2d0>
			  vch1 = volumeMultiplier;
 80018fc:	4a1b      	ldr	r2, [pc, #108]	; (800196c <HAL_UART_RxCpltCallback+0x338>)
 80018fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e00e      	b.n	8001922 <HAL_UART_RxCpltCallback+0x2ee>
		  } else if (channel == 1) {
 8001904:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001908:	2b01      	cmp	r3, #1
 800190a:	d103      	bne.n	8001914 <HAL_UART_RxCpltCallback+0x2e0>
			  vch2 = volumeMultiplier;
 800190c:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_UART_RxCpltCallback+0x33c>)
 800190e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e006      	b.n	8001922 <HAL_UART_RxCpltCallback+0x2ee>
		  } else if (channel == 9) {
 8001914:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001918:	2b09      	cmp	r3, #9
 800191a:	d102      	bne.n	8001922 <HAL_UART_RxCpltCallback+0x2ee>
			  vmaster = volumeMultiplier;
 800191c:	4a15      	ldr	r2, [pc, #84]	; (8001974 <HAL_UART_RxCpltCallback+0x340>)
 800191e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001920:	6013      	str	r3, [r2, #0]
		  }


		}
		HAL_UART_Receive_DMA(&huart2, uartData, sizeof(uartData));
 8001922:	2241      	movs	r2, #65	; 0x41
 8001924:	4904      	ldr	r1, [pc, #16]	; (8001938 <HAL_UART_RxCpltCallback+0x304>)
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <HAL_UART_RxCpltCallback+0x344>)
 8001928:	f007 fe8a 	bl	8009640 <HAL_UART_Receive_DMA>
	}
 800192c:	bf00      	nop
 800192e:	3768      	adds	r7, #104	; 0x68
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	080141bc 	.word	0x080141bc
 8001938:	30018000 	.word	0x30018000
 800193c:	24000440 	.word	0x24000440
 8001940:	080141c8 	.word	0x080141c8
 8001944:	080141dc 	.word	0x080141dc
 8001948:	240006d4 	.word	0x240006d4
 800194c:	24000708 	.word	0x24000708
 8001950:	2400073c 	.word	0x2400073c
 8001954:	24000770 	.word	0x24000770
 8001958:	240007a4 	.word	0x240007a4
 800195c:	240007d8 	.word	0x240007d8
 8001960:	08014210 	.word	0x08014210
 8001964:	42c80000 	.word	0x42c80000
 8001968:	0801421c 	.word	0x0801421c
 800196c:	2400000c 	.word	0x2400000c
 8001970:	24000010 	.word	0x24000010
 8001974:	24000014 	.word	0x24000014
 8001978:	240003ac 	.word	0x240003ac

0800197c <HAL_I2SEx_TxRxHalfCpltCallback>:

	void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	  inBufPtr = &adcData[0];
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8001988:	601a      	str	r2, [r3, #0]
	  outBufPtr = &dacData[0];
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 800198e:	601a      	str	r2, [r3, #0]
	  memcpy(uartBuffer, dacData, sizeof(dacData));
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_I2SEx_TxRxHalfCpltCallback+0x50>)
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199c:	461a      	mov	r2, r3
 800199e:	f00c fc61 	bl	800e264 <memcpy>

	  if(osSemaphoreRelease(i2sHalfFullHandle) == osOK) {
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_I2SEx_TxRxHalfCpltCallback+0x54>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f009 fb38 	bl	800b01c <osSemaphoreRelease>
		//UART_Printf("i2s half released..");
	  } else {
		//UART_Printf("i2s failed..");
	  }
	  dataReadyFlag = 1;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_I2SEx_TxRxHalfCpltCallback+0x58>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
	}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	240006cc 	.word	0x240006cc
 80019c0:	30010000 	.word	0x30010000
 80019c4:	24000008 	.word	0x24000008
 80019c8:	30012000 	.word	0x30012000
 80019cc:	3001a000 	.word	0x3001a000
 80019d0:	240006c0 	.word	0x240006c0
 80019d4:	240006d0 	.word	0x240006d0

080019d8 <HAL_I2SEx_TxRxCpltCallback>:

	void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	  inBufPtr = &adcData[BUFFER_SIZE];
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_I2SEx_TxRxCpltCallback+0x44>)
 80019e4:	601a      	str	r2, [r3, #0]
	  outBufPtr = &dacData[BUFFER_SIZE];
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 80019ea:	601a      	str	r2, [r3, #0]
	  memcpy(uartBuffer, dacData, sizeof(dacData));
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_I2SEx_TxRxCpltCallback+0x50>)
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_I2SEx_TxRxCpltCallback+0x54>)
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f8:	461a      	mov	r2, r3
 80019fa:	f00c fc33 	bl	800e264 <memcpy>

	  if(osSemaphoreRelease(i2sHalfFullHandle) == osOK) {
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_I2SEx_TxRxCpltCallback+0x58>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f009 fb0a 	bl	800b01c <osSemaphoreRelease>
		//UART_Printf("i2s full released..");
	  } else {
		//UART_Printf("i2s failed..");
	  }
	  dataReadyFlag = 1;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_I2SEx_TxRxCpltCallback+0x5c>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
	}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	240006cc 	.word	0x240006cc
 8001a1c:	30010180 	.word	0x30010180
 8001a20:	24000008 	.word	0x24000008
 8001a24:	30012180 	.word	0x30012180
 8001a28:	3001a000 	.word	0x3001a000
 8001a2c:	30012000 	.word	0x30012000
 8001a30:	240006c0 	.word	0x240006c0
 8001a34:	240006d0 	.word	0x240006d0

08001a38 <processData>:

	void processData() {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
	  static float leftIn, leftProcessed, leftProcessed2, leftOut;
	  static float rightIn, rightProcessed, rightProcessed2, rightOut;

	  for (uint8_t n = 0; n < (BUFFER_SIZE) - 1; n+=4) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]
 8001a42:	e0f4      	b.n	8001c2e <processData+0x1f6>
		// LEFT

		//  CONVERTIR ENTRADA ADC A FLOAT
		leftIn = INT16_TO_FLOAT(inBufPtr[n]);
 8001a44:	4b7f      	ldr	r3, [pc, #508]	; (8001c44 <processData+0x20c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a5a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001c48 <processData+0x210>
 8001a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a62:	4b7a      	ldr	r3, [pc, #488]	; (8001c4c <processData+0x214>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]
		if (leftIn > 1.0f) {
 8001a68:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <processData+0x214>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	dd09      	ble.n	8001a90 <processData+0x58>
		  leftIn -= 2.0f;
 8001a7c:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <processData+0x214>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a8a:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <processData+0x214>)
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
		}

		leftProcessed = IFX_PeakingFilter_Update(&filt1, leftIn);
 8001a90:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <processData+0x214>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9a:	486d      	ldr	r0, [pc, #436]	; (8001c50 <processData+0x218>)
 8001a9c:	f7ff f96c 	bl	8000d78 <IFX_PeakingFilter_Update>
 8001aa0:	eef0 7a40 	vmov.f32	s15, s0
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <processData+0x21c>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]

		leftProcessed = IFX_PeakingFilter_Update(&filt2, leftProcessed);
 8001aaa:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <processData+0x21c>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab4:	4868      	ldr	r0, [pc, #416]	; (8001c58 <processData+0x220>)
 8001ab6:	f7ff f95f 	bl	8000d78 <IFX_PeakingFilter_Update>
 8001aba:	eef0 7a40 	vmov.f32	s15, s0
 8001abe:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <processData+0x21c>)
 8001ac0:	edc3 7a00 	vstr	s15, [r3]

		leftProcessed = IFX_PeakingFilter_Update(&filt3, leftProcessed);
 8001ac4:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <processData+0x21c>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	4863      	ldr	r0, [pc, #396]	; (8001c5c <processData+0x224>)
 8001ad0:	f7ff f952 	bl	8000d78 <IFX_PeakingFilter_Update>
 8001ad4:	eef0 7a40 	vmov.f32	s15, s0
 8001ad8:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <processData+0x21c>)
 8001ada:	edc3 7a00 	vstr	s15, [r3]

		// OUTPUT LEFT
		leftOut = leftProcessed * vch1 * vmaster;
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <processData+0x21c>)
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <processData+0x228>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aee:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <processData+0x22c>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <processData+0x230>)
 8001afa:	edc3 7a00 	vstr	s15, [r3]

		// CONVERTIR SALIDA DAC A SIGNED INT
		outBufPtr[n] = (int16_t) (FLOAT_TO_INT16(leftOut));
 8001afe:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <processData+0x230>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001c48 <processData+0x210>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b10:	ee17 3a90 	vmov	r3, s15
 8001b14:	b219      	sxth	r1, r3
 8001b16:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <processData+0x234>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	b28a      	uxth	r2, r1
 8001b22:	801a      	strh	r2, [r3, #0]
		outBufPtr[n+1] = 0;//(int16_t) (FLOAT_TO_INT16(leftOut));
 8001b24:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <processData+0x234>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	2200      	movs	r2, #0
 8001b32:	801a      	strh	r2, [r3, #0]
		// RIGHT

		//  CONVERTIR ENTRADA ADC A FLOAT
		rightIn = INT16_TO_FLOAT(inBufPtr[n+2]);
 8001b34:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <processData+0x20c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b4c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001c48 <processData+0x210>
 8001b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b54:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <processData+0x238>)
 8001b56:	edc3 7a00 	vstr	s15, [r3]
		if (rightIn > 1.0f) {
 8001b5a:	4b45      	ldr	r3, [pc, #276]	; (8001c70 <processData+0x238>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	dd09      	ble.n	8001b82 <processData+0x14a>
		  rightIn -= 2.0f;
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <processData+0x238>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b7c:	4b3c      	ldr	r3, [pc, #240]	; (8001c70 <processData+0x238>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
		}

		rightProcessed = IFX_PeakingFilter_Update(&filt1, rightIn);
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <processData+0x238>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	4830      	ldr	r0, [pc, #192]	; (8001c50 <processData+0x218>)
 8001b8e:	f7ff f8f3 	bl	8000d78 <IFX_PeakingFilter_Update>
 8001b92:	eef0 7a40 	vmov.f32	s15, s0
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <processData+0x23c>)
 8001b98:	edc3 7a00 	vstr	s15, [r3]

		rightProcessed = IFX_PeakingFilter_Update(&filt2, rightProcessed);
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <processData+0x23c>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	482c      	ldr	r0, [pc, #176]	; (8001c58 <processData+0x220>)
 8001ba8:	f7ff f8e6 	bl	8000d78 <IFX_PeakingFilter_Update>
 8001bac:	eef0 7a40 	vmov.f32	s15, s0
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <processData+0x23c>)
 8001bb2:	edc3 7a00 	vstr	s15, [r3]

		rightProcessed = IFX_PeakingFilter_Update(&filt3, rightProcessed);
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <processData+0x23c>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc0:	4826      	ldr	r0, [pc, #152]	; (8001c5c <processData+0x224>)
 8001bc2:	f7ff f8d9 	bl	8000d78 <IFX_PeakingFilter_Update>
 8001bc6:	eef0 7a40 	vmov.f32	s15, s0
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <processData+0x23c>)
 8001bcc:	edc3 7a00 	vstr	s15, [r3]

		// OUTPUT RIGHT
		rightOut = rightProcessed * vch2 * vmaster;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <processData+0x23c>)
 8001bd2:	ed93 7a00 	vldr	s14, [r3]
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <processData+0x240>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <processData+0x22c>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <processData+0x244>)
 8001bec:	edc3 7a00 	vstr	s15, [r3]

		// CONVERTIR SALIDA DAC A SIGNED INT
		outBufPtr[n+2] = (int16_t) (FLOAT_TO_INT16(rightOut));
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <processData+0x244>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001c48 <processData+0x210>
 8001bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c02:	ee17 3a90 	vmov	r3, s15
 8001c06:	b219      	sxth	r1, r3
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <processData+0x234>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	b28a      	uxth	r2, r1
 8001c16:	801a      	strh	r2, [r3, #0]
		outBufPtr[n+3] = 0;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <processData+0x234>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	3303      	adds	r3, #3
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	801a      	strh	r2, [r3, #0]
	  for (uint8_t n = 0; n < (BUFFER_SIZE) - 1; n+=4) {
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2bbe      	cmp	r3, #190	; 0xbe
 8001c32:	f67f af07 	bls.w	8001a44 <processData+0xc>
	  }

		dataReadyFlag = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <processData+0x248>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
	}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	240006cc 	.word	0x240006cc
 8001c48:	46fffe00 	.word	0x46fffe00
 8001c4c:	2400080c 	.word	0x2400080c
 8001c50:	240006d4 	.word	0x240006d4
 8001c54:	24000810 	.word	0x24000810
 8001c58:	24000708 	.word	0x24000708
 8001c5c:	2400073c 	.word	0x2400073c
 8001c60:	2400000c 	.word	0x2400000c
 8001c64:	24000014 	.word	0x24000014
 8001c68:	24000814 	.word	0x24000814
 8001c6c:	24000008 	.word	0x24000008
 8001c70:	24000818 	.word	0x24000818
 8001c74:	2400081c 	.word	0x2400081c
 8001c78:	24000010 	.word	0x24000010
 8001c7c:	24000820 	.word	0x24000820
 8001c80:	240006d0 	.word	0x240006d0

08001c84 <setFilterTask>:
	  * @param  argument: Not used
	  * @retval None
	  */
/* USER CODE END Header_setFilterTask */
void setFilterTask(void *argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  /* Infinite loop */
	  for(;;)
	  {

		osThreadYield();
 8001c8c:	f009 f8ca 	bl	800ae24 <osThreadYield>
 8001c90:	e7fc      	b.n	8001c8c <setFilterTask+0x8>
	...

08001c94 <processDataTask>:
	* @param argument: Not used
	* @retval None
	*/
/* USER CODE END Header_processDataTask */
void processDataTask(void *argument)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN processDataTask */
	  /* Infinite loop */
	  for(;;)
	  {
		if (osSemaphoreAcquire(i2sHalfFullHandle, 0) == osOK) {
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <processDataTask+0x3c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f009 f968 	bl	800af78 <osSemaphoreAcquire>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <processDataTask+0x1e>
		  processData();
 8001cae:	f7ff fec3 	bl	8001a38 <processData>
		}

		if (osSemaphoreAcquire(i2sHalfFullHandle, 0) == osOK) {
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <processDataTask+0x3c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f009 f95d 	bl	800af78 <osSemaphoreAcquire>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <processDataTask+0x34>
		  processData();
 8001cc4:	f7ff feb8 	bl	8001a38 <processData>

//		if (osSemaphoreAcquire(i2sFullHandle, 0) == osOK) {
//		  processData();
//		}

		osThreadYield();
 8001cc8:	f009 f8ac 	bl	800ae24 <osThreadYield>
		if (osSemaphoreAcquire(i2sHalfFullHandle, 0) == osOK) {
 8001ccc:	e7e6      	b.n	8001c9c <processDataTask+0x8>
 8001cce:	bf00      	nop
 8001cd0:	240006c0 	.word	0x240006c0

08001cd4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001ce6:	f000 fde5 	bl	80028b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cea:	2301      	movs	r3, #1
 8001cec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30010000;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MPU_Config+0x58>)
 8001cf4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d02:	2303      	movs	r3, #3
 8001d04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d06:	2301      	movs	r3, #1
 8001d08:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fe03 	bl	8002924 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d1e:	2004      	movs	r0, #4
 8001d20:	f000 fde0 	bl	80028e4 <HAL_MPU_Enable>

}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	30010000 	.word	0x30010000

08001d30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d42:	f000 fcab 	bl	800269c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40010000 	.word	0x40010000

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <Error_Handler+0x8>
	...

08001d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_MspInit+0x38>)
 8001d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_MspInit+0x38>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_MspInit+0x38>)
 8001d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	210f      	movs	r1, #15
 8001d88:	f06f 0001 	mvn.w	r0, #1
 8001d8c:	f000 fd6a 	bl	8002864 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58024400 	.word	0x58024400

08001d9c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a76      	ldr	r2, [pc, #472]	; (8001f94 <HAL_I2S_MspInit+0x1f8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12f      	bne.n	8001e1e <HAL_I2S_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc4:	4a74      	ldr	r2, [pc, #464]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001dc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a6d      	ldr	r2, [pc, #436]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    /**I2S1 GPIO Configuration
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PA15 (JTDI)     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8001dfa:	f248 0360 	movw	r3, #32864	; 0x8060
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e0c:	2305      	movs	r3, #5
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4861      	ldr	r0, [pc, #388]	; (8001f9c <HAL_I2S_MspInit+0x200>)
 8001e18:	f002 fe9c 	bl	8004b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e1c:	e0b5      	b.n	8001f8a <HAL_I2S_MspInit+0x1ee>
  else if(hi2s->Instance==SPI3)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5f      	ldr	r2, [pc, #380]	; (8001fa0 <HAL_I2S_MspInit+0x204>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	f040 80b0 	bne.w	8001f8a <HAL_I2S_MspInit+0x1ee>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e30:	4a59      	ldr	r2, [pc, #356]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e3a:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4e:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e58:	4b4f      	ldr	r3, [pc, #316]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <HAL_I2S_MspInit+0x1fc>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e84:	2310      	movs	r3, #16
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e94:	2306      	movs	r3, #6
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	483f      	ldr	r0, [pc, #252]	; (8001f9c <HAL_I2S_MspInit+0x200>)
 8001ea0:	f002 fe58 	bl	8004b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ea4:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4838      	ldr	r0, [pc, #224]	; (8001fa4 <HAL_I2S_MspInit+0x208>)
 8001ec2:	f002 fe47 	bl	8004b54 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001ec6:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001ec8:	4a38      	ldr	r2, [pc, #224]	; (8001fac <HAL_I2S_MspInit+0x210>)
 8001eca:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001ecc:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001ece:	223d      	movs	r2, #61	; 0x3d
 8001ed0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed2:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001ee8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eec:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001ef0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efc:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001f00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f04:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f06:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001f0c:	4826      	ldr	r0, [pc, #152]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001f0e:	f000 fd49 	bl	80029a4 <HAL_DMA_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_I2S_MspInit+0x180>
      Error_Handler();
 8001f18:	f7ff ff1c 	bl	8001d54 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001f20:	649a      	str	r2, [r3, #72]	; 0x48
 8001f22:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <HAL_I2S_MspInit+0x20c>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream1;
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f2a:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_I2S_MspInit+0x218>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f30:	223e      	movs	r2, #62	; 0x3e
 8001f32:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f46:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f56:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f66:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001f6e:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f70:	f000 fd18 	bl	80029a4 <HAL_DMA_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_I2S_MspInit+0x1e2>
      Error_Handler();
 8001f7a:	f7ff feeb 	bl	8001d54 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_I2S_MspInit+0x214>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f8a:	bf00      	nop
 8001f8c:	3730      	adds	r7, #48	; 0x30
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40013000 	.word	0x40013000
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	58020000 	.word	0x58020000
 8001fa0:	40003c00 	.word	0x40003c00
 8001fa4:	58020800 	.word	0x58020800
 8001fa8:	240002bc 	.word	0x240002bc
 8001fac:	40020010 	.word	0x40020010
 8001fb0:	24000334 	.word	0x24000334
 8001fb4:	40020028 	.word	0x40020028

08001fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0bc      	sub	sp, #240	; 0xf0
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	22c0      	movs	r2, #192	; 0xc0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00c f951 	bl	800e280 <memset>
  if(huart->Instance==USART2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4aac      	ldr	r2, [pc, #688]	; (8002294 <HAL_UART_MspInit+0x2dc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 80a6 	bne.w	8002136 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fea:	f04f 0202 	mov.w	r2, #2
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	4618      	mov	r0, r3
 8002002:	f004 fa73 	bl	80064ec <HAL_RCCEx_PeriphCLKConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800200c:	f7ff fea2 	bl	8001d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002010:	4ba1      	ldr	r3, [pc, #644]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002016:	4aa0      	ldr	r2, [pc, #640]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002020:	4b9d      	ldr	r3, [pc, #628]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	4b9a      	ldr	r3, [pc, #616]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	4a98      	ldr	r2, [pc, #608]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203e:	4b96      	ldr	r3, [pc, #600]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800204c:	230c      	movs	r3, #12
 800204e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002064:	2307      	movs	r3, #7
 8002066:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800206e:	4619      	mov	r1, r3
 8002070:	488a      	ldr	r0, [pc, #552]	; (800229c <HAL_UART_MspInit+0x2e4>)
 8002072:	f002 fd6f 	bl	8004b54 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream6;
 8002076:	4b8a      	ldr	r3, [pc, #552]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 8002078:	4a8a      	ldr	r2, [pc, #552]	; (80022a4 <HAL_UART_MspInit+0x2ec>)
 800207a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800207c:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 800207e:	222b      	movs	r2, #43	; 0x2b
 8002080:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002082:	4b87      	ldr	r3, [pc, #540]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002088:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800208e:	4b84      	ldr	r3, [pc, #528]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 8002090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002094:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002096:	4b82      	ldr	r3, [pc, #520]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800209c:	4b80      	ldr	r3, [pc, #512]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80020a2:	4b7f      	ldr	r3, [pc, #508]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 80020a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020aa:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 80020ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b2:	4b7b      	ldr	r3, [pc, #492]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020b8:	4879      	ldr	r0, [pc, #484]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 80020ba:	f000 fc73 	bl	80029a4 <HAL_DMA_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80020c4:	f7ff fe46 	bl	8001d54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 80020cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80020d0:	4a73      	ldr	r2, [pc, #460]	; (80022a0 <HAL_UART_MspInit+0x2e8>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream7;
 80020d6:	4b74      	ldr	r3, [pc, #464]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 80020d8:	4a74      	ldr	r2, [pc, #464]	; (80022ac <HAL_UART_MspInit+0x2f4>)
 80020da:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80020dc:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 80020de:	222c      	movs	r2, #44	; 0x2c
 80020e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e2:	4b71      	ldr	r3, [pc, #452]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b6e      	ldr	r3, [pc, #440]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 80020f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f6:	4b6c      	ldr	r3, [pc, #432]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002102:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 8002104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002108:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 800210c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002110:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002118:	4863      	ldr	r0, [pc, #396]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 800211a:	f000 fc43 	bl	80029a4 <HAL_DMA_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8002124:	f7ff fe16 	bl	8001d54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 800212c:	67da      	str	r2, [r3, #124]	; 0x7c
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_UART_MspInit+0x2f0>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002134:	e0aa      	b.n	800228c <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a5d      	ldr	r2, [pc, #372]	; (80022b0 <HAL_UART_MspInit+0x2f8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	f040 80a5 	bne.w	800228c <HAL_UART_MspInit+0x2d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002142:	f04f 0202 	mov.w	r2, #2
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 800214e:	2304      	movs	r3, #4
 8002150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	4618      	mov	r0, r3
 800215a:	f004 f9c7 	bl	80064ec <HAL_RCCEx_PeriphCLKConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8002164:	f7ff fdf6 	bl	8001d54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 800216a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800216e:	4a4a      	ldr	r2, [pc, #296]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 800217a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800217e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218c:	4a42      	ldr	r2, [pc, #264]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002196:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_UART_MspInit+0x2e0>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021be:	2307      	movs	r3, #7
 80021c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021c8:	4619      	mov	r1, r3
 80021ca:	483a      	ldr	r0, [pc, #232]	; (80022b4 <HAL_UART_MspInit+0x2fc>)
 80021cc:	f002 fcc2 	bl	8004b54 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream5;
 80021d0:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <HAL_UART_MspInit+0x300>)
 80021d2:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <HAL_UART_MspInit+0x304>)
 80021d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_UART_MspInit+0x300>)
 80021d8:	222d      	movs	r2, #45	; 0x2d
 80021da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_UART_MspInit+0x300>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e2:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_UART_MspInit+0x300>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021e8:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <HAL_UART_MspInit+0x300>)
 80021ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021f0:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_UART_MspInit+0x300>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_UART_MspInit+0x300>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_UART_MspInit+0x300>)
 80021fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002202:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_UART_MspInit+0x300>)
 8002206:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800220a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800220c:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_UART_MspInit+0x300>)
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002212:	4829      	ldr	r0, [pc, #164]	; (80022b8 <HAL_UART_MspInit+0x300>)
 8002214:	f000 fbc6 	bl	80029a4 <HAL_DMA_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 800221e:	f7ff fd99 	bl	8001d54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <HAL_UART_MspInit+0x300>)
 8002226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800222a:	4a23      	ldr	r2, [pc, #140]	; (80022b8 <HAL_UART_MspInit+0x300>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002232:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_UART_MspInit+0x30c>)
 8002234:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002238:	222e      	movs	r2, #46	; 0x2e
 800223a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_UART_MspInit+0x308>)
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_UART_MspInit+0x308>)
 800224a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002252:	2200      	movs	r2, #0
 8002254:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_UART_MspInit+0x308>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002264:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002268:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_UART_MspInit+0x308>)
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002270:	4813      	ldr	r0, [pc, #76]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002272:	f000 fb97 	bl	80029a4 <HAL_DMA_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 800227c:	f7ff fd6a 	bl	8001d54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002284:	67da      	str	r2, [r3, #124]	; 0x7c
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_UART_MspInit+0x308>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800228c:	bf00      	nop
 800228e:	37f0      	adds	r7, #240	; 0xf0
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40004400 	.word	0x40004400
 8002298:	58024400 	.word	0x58024400
 800229c:	58020000 	.word	0x58020000
 80022a0:	240004d4 	.word	0x240004d4
 80022a4:	400204a0 	.word	0x400204a0
 80022a8:	2400054c 	.word	0x2400054c
 80022ac:	400204b8 	.word	0x400204b8
 80022b0:	40004800 	.word	0x40004800
 80022b4:	58020c00 	.word	0x58020c00
 80022b8:	240005c4 	.word	0x240005c4
 80022bc:	40020088 	.word	0x40020088
 80022c0:	2400063c 	.word	0x2400063c
 80022c4:	40020070 	.word	0x40020070

080022c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08e      	sub	sp, #56	; 0x38
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d844      	bhi.n	8002360 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80022d6:	2200      	movs	r2, #0
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	2019      	movs	r0, #25
 80022dc:	f000 fac2 	bl	8002864 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022e0:	2019      	movs	r0, #25
 80022e2:	f000 fad9 	bl	8002898 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80022e6:	4a24      	ldr	r2, [pc, #144]	; (8002378 <HAL_InitTick+0xb0>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_InitTick+0xb4>)
 80022ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022f2:	4a22      	ldr	r2, [pc, #136]	; (800237c <HAL_InitTick+0xb4>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_InitTick+0xb4>)
 80022fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f004 f8a7 	bl	8006468 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800231a:	f004 f88f 	bl	800643c <HAL_RCC_GetPCLK2Freq>
 800231e:	4603      	mov	r3, r0
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_InitTick+0xb8>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	3b01      	subs	r3, #1
 8002330:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_InitTick+0xbc>)
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <HAL_InitTick+0xc0>)
 8002336:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_InitTick+0xbc>)
 800233a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800233e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002340:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_InitTick+0xbc>)
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_InitTick+0xbc>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_InitTick+0xbc>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002352:	480c      	ldr	r0, [pc, #48]	; (8002384 <HAL_InitTick+0xbc>)
 8002354:	f006 fdc8 	bl	8008ee8 <HAL_TIM_Base_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d107      	bne.n	800236e <HAL_InitTick+0xa6>
 800235e:	e001      	b.n	8002364 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e005      	b.n	8002370 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002364:	4807      	ldr	r0, [pc, #28]	; (8002384 <HAL_InitTick+0xbc>)
 8002366:	f006 fe21 	bl	8008fac <HAL_TIM_Base_Start_IT>
 800236a:	4603      	mov	r3, r0
 800236c:	e000      	b.n	8002370 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3738      	adds	r7, #56	; 0x38
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	24000018 	.word	0x24000018
 800237c:	58024400 	.word	0x58024400
 8002380:	431bde83 	.word	0x431bde83
 8002384:	24000824 	.word	0x24000824
 8002388:	40010000 	.word	0x40010000

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <DMA1_Stream0_IRQHandler+0x10>)
 80023be:	f001 f8b7 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	240002bc 	.word	0x240002bc

080023cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Stream1_IRQHandler+0x10>)
 80023d2:	f001 f8ad 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	24000334 	.word	0x24000334

080023e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <DMA1_Stream4_IRQHandler+0x10>)
 80023e6:	f001 f8a3 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2400063c 	.word	0x2400063c

080023f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <DMA1_Stream5_IRQHandler+0x10>)
 80023fa:	f001 f899 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	240005c4 	.word	0x240005c4

08002408 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TIM1_UP_IRQHandler+0x10>)
 800240e:	f006 fe45 	bl	800909c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	24000824 	.word	0x24000824

0800241c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <DMA2_Stream6_IRQHandler+0x10>)
 8002422:	f001 f885 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	240004d4 	.word	0x240004d4

08002430 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <DMA2_Stream7_IRQHandler+0x10>)
 8002436:	f001 f87b 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2400054c 	.word	0x2400054c

08002444 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return 1;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_kill>:

int _kill(int pid, int sig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800245e:	f00b fed7 	bl	800e210 <__errno>
 8002462:	4603      	mov	r3, r0
 8002464:	2216      	movs	r2, #22
 8002466:	601a      	str	r2, [r3, #0]
  return -1;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_exit>:

void _exit (int status)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ffe7 	bl	8002454 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002486:	e7fe      	b.n	8002486 <_exit+0x12>

08002488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e00a      	b.n	80024b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800249a:	f3af 8000 	nop.w
 800249e:	4601      	mov	r1, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	b2ca      	uxtb	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbf0      	blt.n	800249a <_read+0x12>
  }

  return len;
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e009      	b.n	80024e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60ba      	str	r2, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf1      	blt.n	80024d4 <_write+0x12>
  }
  return len;
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_close>:

int _close(int file)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002522:	605a      	str	r2, [r3, #4]
  return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_isatty>:

int _isatty(int file)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <_sbrk+0x5c>)
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <_sbrk+0x60>)
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <_sbrk+0x64>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <_sbrk+0x68>)
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d207      	bcs.n	80025a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002594:	f00b fe3c 	bl	800e210 <__errno>
 8002598:	4603      	mov	r3, r0
 800259a:	220c      	movs	r2, #12
 800259c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	e009      	b.n	80025b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <_sbrk+0x64>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <_sbrk+0x64>)
 80025b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	24080000 	.word	0x24080000
 80025c4:	00000400 	.word	0x00000400
 80025c8:	24000870 	.word	0x24000870
 80025cc:	240051d8 	.word	0x240051d8

080025d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002608 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025d4:	f7fe fa52 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d8:	480c      	ldr	r0, [pc, #48]	; (800260c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025da:	490d      	ldr	r1, [pc, #52]	; (8002610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e0:	e002      	b.n	80025e8 <LoopCopyDataInit>

080025e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e6:	3304      	adds	r3, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ec:	d3f9      	bcc.n	80025e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025f0:	4c0a      	ldr	r4, [pc, #40]	; (800261c <LoopFillZerobss+0x22>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f4:	e001      	b.n	80025fa <LoopFillZerobss>

080025f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f8:	3204      	adds	r2, #4

080025fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025fc:	d3fb      	bcc.n	80025f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025fe:	f00b fe0d 	bl	800e21c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002602:	f7fe fc15 	bl	8000e30 <main>
  bx  lr
 8002606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002608:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800260c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002610:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8002614:	08014e30 	.word	0x08014e30
  ldr r2, =_sbss
 8002618:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 800261c:	240051d8 	.word	0x240051d8

08002620 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC3_IRQHandler>
	...

08002624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262a:	2003      	movs	r0, #3
 800262c:	f000 f90f 	bl	800284e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002630:	f003 fd44 	bl	80060bc <HAL_RCC_GetSysClockFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_Init+0x68>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	4913      	ldr	r1, [pc, #76]	; (8002690 <HAL_Init+0x6c>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_Init+0x68>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <HAL_Init+0x6c>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_Init+0x70>)
 8002666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002668:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <HAL_Init+0x74>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266e:	200f      	movs	r0, #15
 8002670:	f7ff fe2a 	bl	80022c8 <HAL_InitTick>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e002      	b.n	8002684 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800267e:	f7ff fb6f 	bl	8001d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58024400 	.word	0x58024400
 8002690:	08014254 	.word	0x08014254
 8002694:	24000004 	.word	0x24000004
 8002698:	24000000 	.word	0x24000000

0800269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_IncTick+0x20>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x24>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_IncTick+0x24>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2400001c 	.word	0x2400001c
 80026c0:	24000874 	.word	0x24000874

080026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_GetTick+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	24000874 	.word	0x24000874

080026dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetREVID+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0c1b      	lsrs	r3, r3, #16
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	5c001000 	.word	0x5c001000

080026f4 <__NVIC_SetPriorityGrouping>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <__NVIC_SetPriorityGrouping+0x40>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	4313      	orrs	r3, r2
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x40>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00
 8002738:	05fa0000 	.word	0x05fa0000

0800273c <__NVIC_GetPriorityGrouping>:
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4907      	ldr	r1, [pc, #28]	; (8002790 <__NVIC_EnableIRQ+0x38>)
 8002772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	; (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	; (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff4c 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002872:	f7ff ff63 	bl	800273c <__NVIC_GetPriorityGrouping>
 8002876:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7ff ffb3 	bl	80027e8 <NVIC_EncodePriority>
 8002882:	4602      	mov	r2, r0
 8002884:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ff82 	bl	8002794 <__NVIC_SetPriority>
}
 8002890:	bf00      	nop
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff56 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028b8:	f3bf 8f5f 	dmb	sy
}
 80028bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_MPU_Disable+0x28>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	4a06      	ldr	r2, [pc, #24]	; (80028dc <HAL_MPU_Disable+0x28>)
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_MPU_Disable+0x2c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00
 80028e0:	e000ed90 	.word	0xe000ed90

080028e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028ec:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HAL_MPU_Enable+0x38>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_MPU_Enable+0x3c>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_MPU_Enable+0x3c>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002902:	f3bf 8f4f 	dsb	sy
}
 8002906:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002908:	f3bf 8f6f 	isb	sy
}
 800290c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed90 	.word	0xe000ed90
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	785a      	ldrb	r2, [r3, #1]
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002932:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7b1b      	ldrb	r3, [r3, #12]
 800294c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7adb      	ldrb	r3, [r3, #11]
 8002952:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002954:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7a9b      	ldrb	r3, [r3, #10]
 800295a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800295c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7b5b      	ldrb	r3, [r3, #13]
 8002962:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002964:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7b9b      	ldrb	r3, [r3, #14]
 800296a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800296c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7bdb      	ldrb	r3, [r3, #15]
 8002972:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002974:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7a5b      	ldrb	r3, [r3, #9]
 800297a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800297c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7a1b      	ldrb	r3, [r3, #8]
 8002982:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002984:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800298e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002990:	6113      	str	r3, [r2, #16]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed90 	.word	0xe000ed90

080029a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff fe8a 	bl	80026c4 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e316      	b.n	8002fea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a66      	ldr	r2, [pc, #408]	; (8002b5c <HAL_DMA_Init+0x1b8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d04a      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a65      	ldr	r2, [pc, #404]	; (8002b60 <HAL_DMA_Init+0x1bc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d045      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <HAL_DMA_Init+0x1c0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d040      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a62      	ldr	r2, [pc, #392]	; (8002b68 <HAL_DMA_Init+0x1c4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d03b      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a60      	ldr	r2, [pc, #384]	; (8002b6c <HAL_DMA_Init+0x1c8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d036      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a5f      	ldr	r2, [pc, #380]	; (8002b70 <HAL_DMA_Init+0x1cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d031      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a5d      	ldr	r2, [pc, #372]	; (8002b74 <HAL_DMA_Init+0x1d0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d02c      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a5c      	ldr	r2, [pc, #368]	; (8002b78 <HAL_DMA_Init+0x1d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d027      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <HAL_DMA_Init+0x1d8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d022      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a59      	ldr	r2, [pc, #356]	; (8002b80 <HAL_DMA_Init+0x1dc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d01d      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a57      	ldr	r2, [pc, #348]	; (8002b84 <HAL_DMA_Init+0x1e0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d018      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a56      	ldr	r2, [pc, #344]	; (8002b88 <HAL_DMA_Init+0x1e4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a54      	ldr	r2, [pc, #336]	; (8002b8c <HAL_DMA_Init+0x1e8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a53      	ldr	r2, [pc, #332]	; (8002b90 <HAL_DMA_Init+0x1ec>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a51      	ldr	r2, [pc, #324]	; (8002b94 <HAL_DMA_Init+0x1f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_Init+0xb8>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a50      	ldr	r2, [pc, #320]	; (8002b98 <HAL_DMA_Init+0x1f4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_DMA_Init+0xbc>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_DMA_Init+0xbe>
 8002a60:	2300      	movs	r3, #0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 813b 	beq.w	8002cde <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a37      	ldr	r2, [pc, #220]	; (8002b5c <HAL_DMA_Init+0x1b8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a36      	ldr	r2, [pc, #216]	; (8002b60 <HAL_DMA_Init+0x1bc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_DMA_Init+0x1c0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a33      	ldr	r2, [pc, #204]	; (8002b68 <HAL_DMA_Init+0x1c4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a31      	ldr	r2, [pc, #196]	; (8002b6c <HAL_DMA_Init+0x1c8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a30      	ldr	r2, [pc, #192]	; (8002b70 <HAL_DMA_Init+0x1cc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <HAL_DMA_Init+0x1d0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2d      	ldr	r2, [pc, #180]	; (8002b78 <HAL_DMA_Init+0x1d4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_DMA_Init+0x1d8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <HAL_DMA_Init+0x1dc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <HAL_DMA_Init+0x1e0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_DMA_Init+0x1e4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a25      	ldr	r2, [pc, #148]	; (8002b8c <HAL_DMA_Init+0x1e8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_DMA_Init+0x1ec>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_DMA_Init+0x1f0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_Init+0x174>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <HAL_DMA_Init+0x1f4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <HAL_DMA_Init+0x186>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <HAL_DMA_Init+0x196>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b3a:	e02f      	b.n	8002b9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b3c:	f7ff fdc2 	bl	80026c4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d928      	bls.n	8002b9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2203      	movs	r2, #3
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e246      	b.n	8002fea <HAL_DMA_Init+0x646>
 8002b5c:	40020010 	.word	0x40020010
 8002b60:	40020028 	.word	0x40020028
 8002b64:	40020040 	.word	0x40020040
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	40020070 	.word	0x40020070
 8002b70:	40020088 	.word	0x40020088
 8002b74:	400200a0 	.word	0x400200a0
 8002b78:	400200b8 	.word	0x400200b8
 8002b7c:	40020410 	.word	0x40020410
 8002b80:	40020428 	.word	0x40020428
 8002b84:	40020440 	.word	0x40020440
 8002b88:	40020458 	.word	0x40020458
 8002b8c:	40020470 	.word	0x40020470
 8002b90:	40020488 	.word	0x40020488
 8002b94:	400204a0 	.word	0x400204a0
 8002b98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1c8      	bne.n	8002b3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4b83      	ldr	r3, [pc, #524]	; (8002dc4 <HAL_DMA_Init+0x420>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002bc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d107      	bne.n	8002c00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c00:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <HAL_DMA_Init+0x424>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b71      	ldr	r3, [pc, #452]	; (8002dcc <HAL_DMA_Init+0x428>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c0c:	d328      	bcc.n	8002c60 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b28      	cmp	r3, #40	; 0x28
 8002c14:	d903      	bls.n	8002c1e <HAL_DMA_Init+0x27a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c1c:	d917      	bls.n	8002c4e <HAL_DMA_Init+0x2aa>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b3e      	cmp	r3, #62	; 0x3e
 8002c24:	d903      	bls.n	8002c2e <HAL_DMA_Init+0x28a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b42      	cmp	r3, #66	; 0x42
 8002c2c:	d90f      	bls.n	8002c4e <HAL_DMA_Init+0x2aa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b46      	cmp	r3, #70	; 0x46
 8002c34:	d903      	bls.n	8002c3e <HAL_DMA_Init+0x29a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b48      	cmp	r3, #72	; 0x48
 8002c3c:	d907      	bls.n	8002c4e <HAL_DMA_Init+0x2aa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b4e      	cmp	r3, #78	; 0x4e
 8002c44:	d905      	bls.n	8002c52 <HAL_DMA_Init+0x2ae>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b52      	cmp	r3, #82	; 0x52
 8002c4c:	d801      	bhi.n	8002c52 <HAL_DMA_Init+0x2ae>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_DMA_Init+0x2b0>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0307 	bic.w	r3, r3, #7
 8002c76:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d117      	bne.n	8002cba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f001 fdcf 	bl	8004840 <DMA_CheckFifoParam>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2240      	movs	r2, #64	; 0x40
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e197      	b.n	8002fea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f001 fd0a 	bl	80046dc <DMA_CalcBaseAndBitshift>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	223f      	movs	r2, #63	; 0x3f
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	e0cd      	b.n	8002e7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_DMA_Init+0x42c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_Init+0x38a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <HAL_DMA_Init+0x430>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_Init+0x38a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <HAL_DMA_Init+0x434>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_DMA_Init+0x38a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a36      	ldr	r2, [pc, #216]	; (8002ddc <HAL_DMA_Init+0x438>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_DMA_Init+0x38a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a35      	ldr	r2, [pc, #212]	; (8002de0 <HAL_DMA_Init+0x43c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_DMA_Init+0x38a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <HAL_DMA_Init+0x440>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_DMA_Init+0x38a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a32      	ldr	r2, [pc, #200]	; (8002de8 <HAL_DMA_Init+0x444>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_DMA_Init+0x38a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a30      	ldr	r2, [pc, #192]	; (8002dec <HAL_DMA_Init+0x448>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_DMA_Init+0x38e>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_DMA_Init+0x390>
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8097 	beq.w	8002e68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <HAL_DMA_Init+0x42c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d021      	beq.n	8002d88 <HAL_DMA_Init+0x3e4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_DMA_Init+0x430>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01c      	beq.n	8002d88 <HAL_DMA_Init+0x3e4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_DMA_Init+0x434>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d017      	beq.n	8002d88 <HAL_DMA_Init+0x3e4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_DMA_Init+0x438>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d012      	beq.n	8002d88 <HAL_DMA_Init+0x3e4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <HAL_DMA_Init+0x43c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00d      	beq.n	8002d88 <HAL_DMA_Init+0x3e4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HAL_DMA_Init+0x440>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d008      	beq.n	8002d88 <HAL_DMA_Init+0x3e4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <HAL_DMA_Init+0x444>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <HAL_DMA_Init+0x3e4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_DMA_Init+0x448>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_DMA_Init+0x44c>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d020      	beq.n	8002df4 <HAL_DMA_Init+0x450>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d102      	bne.n	8002dc0 <HAL_DMA_Init+0x41c>
 8002dba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dbe:	e01a      	b.n	8002df6 <HAL_DMA_Init+0x452>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e018      	b.n	8002df6 <HAL_DMA_Init+0x452>
 8002dc4:	fe10803f 	.word	0xfe10803f
 8002dc8:	5c001000 	.word	0x5c001000
 8002dcc:	ffff0000 	.word	0xffff0000
 8002dd0:	58025408 	.word	0x58025408
 8002dd4:	5802541c 	.word	0x5802541c
 8002dd8:	58025430 	.word	0x58025430
 8002ddc:	58025444 	.word	0x58025444
 8002de0:	58025458 	.word	0x58025458
 8002de4:	5802546c 	.word	0x5802546c
 8002de8:	58025480 	.word	0x58025480
 8002dec:	58025494 	.word	0x58025494
 8002df0:	fffe000f 	.word	0xfffe000f
 8002df4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b6e      	ldr	r3, [pc, #440]	; (8002ff4 <HAL_DMA_Init+0x650>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a6e      	ldr	r2, [pc, #440]	; (8002ff8 <HAL_DMA_Init+0x654>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f001 fc45 	bl	80046dc <DMA_CalcBaseAndBitshift>
 8002e52:	4603      	mov	r3, r0
 8002e54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2201      	movs	r2, #1
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	e008      	b.n	8002e7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0b7      	b.n	8002fea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a5f      	ldr	r2, [pc, #380]	; (8002ffc <HAL_DMA_Init+0x658>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d072      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a5d      	ldr	r2, [pc, #372]	; (8003000 <HAL_DMA_Init+0x65c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d06d      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a5c      	ldr	r2, [pc, #368]	; (8003004 <HAL_DMA_Init+0x660>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d068      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5a      	ldr	r2, [pc, #360]	; (8003008 <HAL_DMA_Init+0x664>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d063      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a59      	ldr	r2, [pc, #356]	; (800300c <HAL_DMA_Init+0x668>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d05e      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a57      	ldr	r2, [pc, #348]	; (8003010 <HAL_DMA_Init+0x66c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d059      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a56      	ldr	r2, [pc, #344]	; (8003014 <HAL_DMA_Init+0x670>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d054      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a54      	ldr	r2, [pc, #336]	; (8003018 <HAL_DMA_Init+0x674>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d04f      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a53      	ldr	r2, [pc, #332]	; (800301c <HAL_DMA_Init+0x678>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d04a      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_DMA_Init+0x67c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d045      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_DMA_Init+0x680>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d040      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <HAL_DMA_Init+0x684>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d03b      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a4d      	ldr	r2, [pc, #308]	; (800302c <HAL_DMA_Init+0x688>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d036      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a4b      	ldr	r2, [pc, #300]	; (8003030 <HAL_DMA_Init+0x68c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d031      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a4a      	ldr	r2, [pc, #296]	; (8003034 <HAL_DMA_Init+0x690>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d02c      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <HAL_DMA_Init+0x694>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d027      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a47      	ldr	r2, [pc, #284]	; (800303c <HAL_DMA_Init+0x698>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a45      	ldr	r2, [pc, #276]	; (8003040 <HAL_DMA_Init+0x69c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01d      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a44      	ldr	r2, [pc, #272]	; (8003044 <HAL_DMA_Init+0x6a0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a42      	ldr	r2, [pc, #264]	; (8003048 <HAL_DMA_Init+0x6a4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a41      	ldr	r2, [pc, #260]	; (800304c <HAL_DMA_Init+0x6a8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3f      	ldr	r2, [pc, #252]	; (8003050 <HAL_DMA_Init+0x6ac>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	; (8003054 <HAL_DMA_Init+0x6b0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_DMA_Init+0x5c6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <HAL_DMA_Init+0x6b4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <HAL_DMA_Init+0x5ca>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_DMA_Init+0x5cc>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d032      	beq.n	8002fda <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f001 fcdf 	bl	8004938 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d102      	bne.n	8002f88 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_DMA_Init+0x624>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d80c      	bhi.n	8002fc8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f001 fd5c 	bl	8004a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	e008      	b.n	8002fda <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	a7fdabf8 	.word	0xa7fdabf8
 8002ff8:	cccccccd 	.word	0xcccccccd
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	58025408 	.word	0x58025408
 8003040:	5802541c 	.word	0x5802541c
 8003044:	58025430 	.word	0x58025430
 8003048:	58025444 	.word	0x58025444
 800304c:	58025458 	.word	0x58025458
 8003050:	5802546c 	.word	0x5802546c
 8003054:	58025480 	.word	0x58025480
 8003058:	58025494 	.word	0x58025494

0800305c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e226      	b.n	80034c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_DMA_Start_IT+0x2a>
 8003082:	2302      	movs	r3, #2
 8003084:	e21f      	b.n	80034c6 <HAL_DMA_Start_IT+0x46a>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 820a 	bne.w	80034b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a68      	ldr	r2, [pc, #416]	; (8003250 <HAL_DMA_Start_IT+0x1f4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d04a      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a66      	ldr	r2, [pc, #408]	; (8003254 <HAL_DMA_Start_IT+0x1f8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d045      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_DMA_Start_IT+0x1fc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d040      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a63      	ldr	r2, [pc, #396]	; (800325c <HAL_DMA_Start_IT+0x200>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d03b      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a62      	ldr	r2, [pc, #392]	; (8003260 <HAL_DMA_Start_IT+0x204>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d036      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a60      	ldr	r2, [pc, #384]	; (8003264 <HAL_DMA_Start_IT+0x208>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5f      	ldr	r2, [pc, #380]	; (8003268 <HAL_DMA_Start_IT+0x20c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d02c      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a5d      	ldr	r2, [pc, #372]	; (800326c <HAL_DMA_Start_IT+0x210>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d027      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a5c      	ldr	r2, [pc, #368]	; (8003270 <HAL_DMA_Start_IT+0x214>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a5a      	ldr	r2, [pc, #360]	; (8003274 <HAL_DMA_Start_IT+0x218>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a59      	ldr	r2, [pc, #356]	; (8003278 <HAL_DMA_Start_IT+0x21c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a57      	ldr	r2, [pc, #348]	; (800327c <HAL_DMA_Start_IT+0x220>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a56      	ldr	r2, [pc, #344]	; (8003280 <HAL_DMA_Start_IT+0x224>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a54      	ldr	r2, [pc, #336]	; (8003284 <HAL_DMA_Start_IT+0x228>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_DMA_Start_IT+0x22c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_DMA_Start_IT+0xee>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a51      	ldr	r2, [pc, #324]	; (800328c <HAL_DMA_Start_IT+0x230>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <HAL_DMA_Start_IT+0x100>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e007      	b.n	800316c <HAL_DMA_Start_IT+0x110>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f001 f906 	bl	8004384 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a34      	ldr	r2, [pc, #208]	; (8003250 <HAL_DMA_Start_IT+0x1f4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d04a      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a33      	ldr	r2, [pc, #204]	; (8003254 <HAL_DMA_Start_IT+0x1f8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d045      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a31      	ldr	r2, [pc, #196]	; (8003258 <HAL_DMA_Start_IT+0x1fc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d040      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a30      	ldr	r2, [pc, #192]	; (800325c <HAL_DMA_Start_IT+0x200>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d03b      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2e      	ldr	r2, [pc, #184]	; (8003260 <HAL_DMA_Start_IT+0x204>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d036      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <HAL_DMA_Start_IT+0x208>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d031      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2b      	ldr	r2, [pc, #172]	; (8003268 <HAL_DMA_Start_IT+0x20c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02c      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2a      	ldr	r2, [pc, #168]	; (800326c <HAL_DMA_Start_IT+0x210>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d027      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a28      	ldr	r2, [pc, #160]	; (8003270 <HAL_DMA_Start_IT+0x214>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d022      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a27      	ldr	r2, [pc, #156]	; (8003274 <HAL_DMA_Start_IT+0x218>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d01d      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a25      	ldr	r2, [pc, #148]	; (8003278 <HAL_DMA_Start_IT+0x21c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d018      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a24      	ldr	r2, [pc, #144]	; (800327c <HAL_DMA_Start_IT+0x220>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a22      	ldr	r2, [pc, #136]	; (8003280 <HAL_DMA_Start_IT+0x224>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00e      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a21      	ldr	r2, [pc, #132]	; (8003284 <HAL_DMA_Start_IT+0x228>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_DMA_Start_IT+0x22c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_DMA_Start_IT+0x1bc>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1e      	ldr	r2, [pc, #120]	; (800328c <HAL_DMA_Start_IT+0x230>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d101      	bne.n	800321c <HAL_DMA_Start_IT+0x1c0>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_DMA_Start_IT+0x1c2>
 800321c:	2300      	movs	r3, #0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d036      	beq.n	8003290 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 021e 	bic.w	r2, r3, #30
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0216 	orr.w	r2, r2, #22
 8003234:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d03e      	beq.n	80032bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0208 	orr.w	r2, r2, #8
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e035      	b.n	80032bc <HAL_DMA_Start_IT+0x260>
 8003250:	40020010 	.word	0x40020010
 8003254:	40020028 	.word	0x40020028
 8003258:	40020040 	.word	0x40020040
 800325c:	40020058 	.word	0x40020058
 8003260:	40020070 	.word	0x40020070
 8003264:	40020088 	.word	0x40020088
 8003268:	400200a0 	.word	0x400200a0
 800326c:	400200b8 	.word	0x400200b8
 8003270:	40020410 	.word	0x40020410
 8003274:	40020428 	.word	0x40020428
 8003278:	40020440 	.word	0x40020440
 800327c:	40020458 	.word	0x40020458
 8003280:	40020470 	.word	0x40020470
 8003284:	40020488 	.word	0x40020488
 8003288:	400204a0 	.word	0x400204a0
 800328c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 020e 	bic.w	r2, r3, #14
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 020a 	orr.w	r2, r2, #10
 80032a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0204 	orr.w	r2, r2, #4
 80032ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a83      	ldr	r2, [pc, #524]	; (80034d0 <HAL_DMA_Start_IT+0x474>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d072      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a82      	ldr	r2, [pc, #520]	; (80034d4 <HAL_DMA_Start_IT+0x478>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d06d      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a80      	ldr	r2, [pc, #512]	; (80034d8 <HAL_DMA_Start_IT+0x47c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d068      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7f      	ldr	r2, [pc, #508]	; (80034dc <HAL_DMA_Start_IT+0x480>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d063      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7d      	ldr	r2, [pc, #500]	; (80034e0 <HAL_DMA_Start_IT+0x484>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d05e      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7c      	ldr	r2, [pc, #496]	; (80034e4 <HAL_DMA_Start_IT+0x488>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d059      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a7a      	ldr	r2, [pc, #488]	; (80034e8 <HAL_DMA_Start_IT+0x48c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d054      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a79      	ldr	r2, [pc, #484]	; (80034ec <HAL_DMA_Start_IT+0x490>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d04f      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a77      	ldr	r2, [pc, #476]	; (80034f0 <HAL_DMA_Start_IT+0x494>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d04a      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a76      	ldr	r2, [pc, #472]	; (80034f4 <HAL_DMA_Start_IT+0x498>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d045      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a74      	ldr	r2, [pc, #464]	; (80034f8 <HAL_DMA_Start_IT+0x49c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d040      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	; (80034fc <HAL_DMA_Start_IT+0x4a0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d03b      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a71      	ldr	r2, [pc, #452]	; (8003500 <HAL_DMA_Start_IT+0x4a4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d036      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a70      	ldr	r2, [pc, #448]	; (8003504 <HAL_DMA_Start_IT+0x4a8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d031      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6e      	ldr	r2, [pc, #440]	; (8003508 <HAL_DMA_Start_IT+0x4ac>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d02c      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a6d      	ldr	r2, [pc, #436]	; (800350c <HAL_DMA_Start_IT+0x4b0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d027      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6b      	ldr	r2, [pc, #428]	; (8003510 <HAL_DMA_Start_IT+0x4b4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6a      	ldr	r2, [pc, #424]	; (8003514 <HAL_DMA_Start_IT+0x4b8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01d      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a68      	ldr	r2, [pc, #416]	; (8003518 <HAL_DMA_Start_IT+0x4bc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a67      	ldr	r2, [pc, #412]	; (800351c <HAL_DMA_Start_IT+0x4c0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a65      	ldr	r2, [pc, #404]	; (8003520 <HAL_DMA_Start_IT+0x4c4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a64      	ldr	r2, [pc, #400]	; (8003524 <HAL_DMA_Start_IT+0x4c8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a62      	ldr	r2, [pc, #392]	; (8003528 <HAL_DMA_Start_IT+0x4cc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_DMA_Start_IT+0x350>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a61      	ldr	r2, [pc, #388]	; (800352c <HAL_DMA_Start_IT+0x4d0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_DMA_Start_IT+0x354>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_DMA_Start_IT+0x356>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01a      	beq.n	80033ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <HAL_DMA_Start_IT+0x474>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d04a      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <HAL_DMA_Start_IT+0x478>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d045      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a34      	ldr	r2, [pc, #208]	; (80034d8 <HAL_DMA_Start_IT+0x47c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d040      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_DMA_Start_IT+0x480>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d03b      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_DMA_Start_IT+0x484>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d036      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <HAL_DMA_Start_IT+0x488>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d031      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2e      	ldr	r2, [pc, #184]	; (80034e8 <HAL_DMA_Start_IT+0x48c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d02c      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <HAL_DMA_Start_IT+0x490>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d027      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_DMA_Start_IT+0x494>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_DMA_Start_IT+0x498>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d01d      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_DMA_Start_IT+0x49c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_DMA_Start_IT+0x4a0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a25      	ldr	r2, [pc, #148]	; (8003500 <HAL_DMA_Start_IT+0x4a4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_DMA_Start_IT+0x4a8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_DMA_Start_IT+0x4ac>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_DMA_Start_IT+0x430>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <HAL_DMA_Start_IT+0x4b0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d108      	bne.n	800349e <HAL_DMA_Start_IT+0x442>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e012      	b.n	80034c4 <HAL_DMA_Start_IT+0x468>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e009      	b.n	80034c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
 8003510:	58025408 	.word	0x58025408
 8003514:	5802541c 	.word	0x5802541c
 8003518:	58025430 	.word	0x58025430
 800351c:	58025444 	.word	0x58025444
 8003520:	58025458 	.word	0x58025458
 8003524:	5802546c 	.word	0x5802546c
 8003528:	58025480 	.word	0x58025480
 800352c:	58025494 	.word	0x58025494

08003530 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800353c:	4b67      	ldr	r3, [pc, #412]	; (80036dc <HAL_DMA_IRQHandler+0x1ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a67      	ldr	r2, [pc, #412]	; (80036e0 <HAL_DMA_IRQHandler+0x1b0>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0a9b      	lsrs	r3, r3, #10
 8003548:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5f      	ldr	r2, [pc, #380]	; (80036e4 <HAL_DMA_IRQHandler+0x1b4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d04a      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5d      	ldr	r2, [pc, #372]	; (80036e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d045      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a5c      	ldr	r2, [pc, #368]	; (80036ec <HAL_DMA_IRQHandler+0x1bc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d040      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5a      	ldr	r2, [pc, #360]	; (80036f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d03b      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a59      	ldr	r2, [pc, #356]	; (80036f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d036      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a57      	ldr	r2, [pc, #348]	; (80036f8 <HAL_DMA_IRQHandler+0x1c8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d031      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a56      	ldr	r2, [pc, #344]	; (80036fc <HAL_DMA_IRQHandler+0x1cc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d02c      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a54      	ldr	r2, [pc, #336]	; (8003700 <HAL_DMA_IRQHandler+0x1d0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d027      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a53      	ldr	r2, [pc, #332]	; (8003704 <HAL_DMA_IRQHandler+0x1d4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d022      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a51      	ldr	r2, [pc, #324]	; (8003708 <HAL_DMA_IRQHandler+0x1d8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01d      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a50      	ldr	r2, [pc, #320]	; (800370c <HAL_DMA_IRQHandler+0x1dc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d018      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a4e      	ldr	r2, [pc, #312]	; (8003710 <HAL_DMA_IRQHandler+0x1e0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <HAL_DMA_IRQHandler+0x1e4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a4b      	ldr	r2, [pc, #300]	; (8003718 <HAL_DMA_IRQHandler+0x1e8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a4a      	ldr	r2, [pc, #296]	; (800371c <HAL_DMA_IRQHandler+0x1ec>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a48      	ldr	r2, [pc, #288]	; (8003720 <HAL_DMA_IRQHandler+0x1f0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_DMA_IRQHandler+0xd6>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_DMA_IRQHandler+0xd8>
 8003606:	2300      	movs	r3, #0
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 842b 	beq.w	8003e64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2208      	movs	r2, #8
 8003618:	409a      	lsls	r2, r3
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80a2 	beq.w	8003768 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <HAL_DMA_IRQHandler+0x1b4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d04a      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d045      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2b      	ldr	r2, [pc, #172]	; (80036ec <HAL_DMA_IRQHandler+0x1bc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d040      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2a      	ldr	r2, [pc, #168]	; (80036f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d03b      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a28      	ldr	r2, [pc, #160]	; (80036f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d036      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a27      	ldr	r2, [pc, #156]	; (80036f8 <HAL_DMA_IRQHandler+0x1c8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d031      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a25      	ldr	r2, [pc, #148]	; (80036fc <HAL_DMA_IRQHandler+0x1cc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d02c      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a24      	ldr	r2, [pc, #144]	; (8003700 <HAL_DMA_IRQHandler+0x1d0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d027      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a22      	ldr	r2, [pc, #136]	; (8003704 <HAL_DMA_IRQHandler+0x1d4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d022      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <HAL_DMA_IRQHandler+0x1d8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d01d      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_DMA_IRQHandler+0x1dc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d018      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <HAL_DMA_IRQHandler+0x1e0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_DMA_IRQHandler+0x1e4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00e      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <HAL_DMA_IRQHandler+0x1e8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_DMA_IRQHandler+0x1ec>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_DMA_IRQHandler+0x1f0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d12f      	bne.n	8003724 <HAL_DMA_IRQHandler+0x1f4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e02e      	b.n	8003738 <HAL_DMA_IRQHandler+0x208>
 80036da:	bf00      	nop
 80036dc:	24000000 	.word	0x24000000
 80036e0:	1b4e81b5 	.word	0x1b4e81b5
 80036e4:	40020010 	.word	0x40020010
 80036e8:	40020028 	.word	0x40020028
 80036ec:	40020040 	.word	0x40020040
 80036f0:	40020058 	.word	0x40020058
 80036f4:	40020070 	.word	0x40020070
 80036f8:	40020088 	.word	0x40020088
 80036fc:	400200a0 	.word	0x400200a0
 8003700:	400200b8 	.word	0x400200b8
 8003704:	40020410 	.word	0x40020410
 8003708:	40020428 	.word	0x40020428
 800370c:	40020440 	.word	0x40020440
 8003710:	40020458 	.word	0x40020458
 8003714:	40020470 	.word	0x40020470
 8003718:	40020488 	.word	0x40020488
 800371c:	400204a0 	.word	0x400204a0
 8003720:	400204b8 	.word	0x400204b8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d015      	beq.n	8003768 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0204 	bic.w	r2, r2, #4
 800374a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2208      	movs	r2, #8
 8003756:	409a      	lsls	r2, r3
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d06e      	beq.n	800385c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <HAL_DMA_IRQHandler+0x3f8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a67      	ldr	r2, [pc, #412]	; (800392c <HAL_DMA_IRQHandler+0x3fc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a66      	ldr	r2, [pc, #408]	; (8003930 <HAL_DMA_IRQHandler+0x400>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a64      	ldr	r2, [pc, #400]	; (8003934 <HAL_DMA_IRQHandler+0x404>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a63      	ldr	r2, [pc, #396]	; (8003938 <HAL_DMA_IRQHandler+0x408>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a61      	ldr	r2, [pc, #388]	; (800393c <HAL_DMA_IRQHandler+0x40c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a60      	ldr	r2, [pc, #384]	; (8003940 <HAL_DMA_IRQHandler+0x410>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5e      	ldr	r2, [pc, #376]	; (8003944 <HAL_DMA_IRQHandler+0x414>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5d      	ldr	r2, [pc, #372]	; (8003948 <HAL_DMA_IRQHandler+0x418>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_DMA_IRQHandler+0x41c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a5a      	ldr	r2, [pc, #360]	; (8003950 <HAL_DMA_IRQHandler+0x420>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a58      	ldr	r2, [pc, #352]	; (8003954 <HAL_DMA_IRQHandler+0x424>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a57      	ldr	r2, [pc, #348]	; (8003958 <HAL_DMA_IRQHandler+0x428>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a55      	ldr	r2, [pc, #340]	; (800395c <HAL_DMA_IRQHandler+0x42c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a54      	ldr	r2, [pc, #336]	; (8003960 <HAL_DMA_IRQHandler+0x430>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_DMA_IRQHandler+0x434>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10a      	bne.n	8003834 <HAL_DMA_IRQHandler+0x304>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e003      	b.n	800383c <HAL_DMA_IRQHandler+0x30c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2201      	movs	r2, #1
 800384a:	409a      	lsls	r2, r3
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f043 0202 	orr.w	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2204      	movs	r2, #4
 8003866:	409a      	lsls	r2, r3
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 808f 	beq.w	8003990 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <HAL_DMA_IRQHandler+0x3f8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d04a      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2a      	ldr	r2, [pc, #168]	; (800392c <HAL_DMA_IRQHandler+0x3fc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d045      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a29      	ldr	r2, [pc, #164]	; (8003930 <HAL_DMA_IRQHandler+0x400>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d040      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <HAL_DMA_IRQHandler+0x404>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d03b      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a26      	ldr	r2, [pc, #152]	; (8003938 <HAL_DMA_IRQHandler+0x408>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d036      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <HAL_DMA_IRQHandler+0x40c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_DMA_IRQHandler+0x410>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d02c      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_DMA_IRQHandler+0x414>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d027      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a20      	ldr	r2, [pc, #128]	; (8003948 <HAL_DMA_IRQHandler+0x418>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_DMA_IRQHandler+0x41c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01d      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <HAL_DMA_IRQHandler+0x420>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d018      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_DMA_IRQHandler+0x424>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_DMA_IRQHandler+0x428>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a18      	ldr	r2, [pc, #96]	; (800395c <HAL_DMA_IRQHandler+0x42c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d009      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a17      	ldr	r2, [pc, #92]	; (8003960 <HAL_DMA_IRQHandler+0x430>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_DMA_IRQHandler+0x434>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d12a      	bne.n	8003968 <HAL_DMA_IRQHandler+0x438>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e023      	b.n	8003970 <HAL_DMA_IRQHandler+0x440>
 8003928:	40020010 	.word	0x40020010
 800392c:	40020028 	.word	0x40020028
 8003930:	40020040 	.word	0x40020040
 8003934:	40020058 	.word	0x40020058
 8003938:	40020070 	.word	0x40020070
 800393c:	40020088 	.word	0x40020088
 8003940:	400200a0 	.word	0x400200a0
 8003944:	400200b8 	.word	0x400200b8
 8003948:	40020410 	.word	0x40020410
 800394c:	40020428 	.word	0x40020428
 8003950:	40020440 	.word	0x40020440
 8003954:	40020458 	.word	0x40020458
 8003958:	40020470 	.word	0x40020470
 800395c:	40020488 	.word	0x40020488
 8003960:	400204a0 	.word	0x400204a0
 8003964:	400204b8 	.word	0x400204b8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2204      	movs	r2, #4
 800397e:	409a      	lsls	r2, r3
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f043 0204 	orr.w	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2210      	movs	r2, #16
 800399a:	409a      	lsls	r2, r3
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a6 	beq.w	8003af2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a85      	ldr	r2, [pc, #532]	; (8003bc0 <HAL_DMA_IRQHandler+0x690>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d04a      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a83      	ldr	r2, [pc, #524]	; (8003bc4 <HAL_DMA_IRQHandler+0x694>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d045      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a82      	ldr	r2, [pc, #520]	; (8003bc8 <HAL_DMA_IRQHandler+0x698>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d040      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_DMA_IRQHandler+0x69c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d03b      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7f      	ldr	r2, [pc, #508]	; (8003bd0 <HAL_DMA_IRQHandler+0x6a0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d036      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7d      	ldr	r2, [pc, #500]	; (8003bd4 <HAL_DMA_IRQHandler+0x6a4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d031      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7c      	ldr	r2, [pc, #496]	; (8003bd8 <HAL_DMA_IRQHandler+0x6a8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d02c      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a7a      	ldr	r2, [pc, #488]	; (8003bdc <HAL_DMA_IRQHandler+0x6ac>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d027      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a79      	ldr	r2, [pc, #484]	; (8003be0 <HAL_DMA_IRQHandler+0x6b0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_DMA_IRQHandler+0x6b4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01d      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a76      	ldr	r2, [pc, #472]	; (8003be8 <HAL_DMA_IRQHandler+0x6b8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a74      	ldr	r2, [pc, #464]	; (8003bec <HAL_DMA_IRQHandler+0x6bc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a73      	ldr	r2, [pc, #460]	; (8003bf0 <HAL_DMA_IRQHandler+0x6c0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a71      	ldr	r2, [pc, #452]	; (8003bf4 <HAL_DMA_IRQHandler+0x6c4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a70      	ldr	r2, [pc, #448]	; (8003bf8 <HAL_DMA_IRQHandler+0x6c8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <HAL_DMA_IRQHandler+0x6cc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10a      	bne.n	8003a5c <HAL_DMA_IRQHandler+0x52c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e009      	b.n	8003a70 <HAL_DMA_IRQHandler+0x540>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d024      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e01f      	b.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01b      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e016      	b.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2220      	movs	r2, #32
 8003afc:	409a      	lsls	r2, r3
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8110 	beq.w	8003d28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2c      	ldr	r2, [pc, #176]	; (8003bc0 <HAL_DMA_IRQHandler+0x690>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d04a      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2b      	ldr	r2, [pc, #172]	; (8003bc4 <HAL_DMA_IRQHandler+0x694>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d045      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_DMA_IRQHandler+0x698>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d040      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <HAL_DMA_IRQHandler+0x69c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d03b      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <HAL_DMA_IRQHandler+0x6a0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d036      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <HAL_DMA_IRQHandler+0x6a4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d031      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <HAL_DMA_IRQHandler+0x6a8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02c      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a22      	ldr	r2, [pc, #136]	; (8003bdc <HAL_DMA_IRQHandler+0x6ac>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d027      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a20      	ldr	r2, [pc, #128]	; (8003be0 <HAL_DMA_IRQHandler+0x6b0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d022      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <HAL_DMA_IRQHandler+0x6b4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <HAL_DMA_IRQHandler+0x6b8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_DMA_IRQHandler+0x6bc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_DMA_IRQHandler+0x6c0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_DMA_IRQHandler+0x6c4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <HAL_DMA_IRQHandler+0x6c8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <HAL_DMA_IRQHandler+0x6cc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d12b      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x6d0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e02a      	b.n	8003c14 <HAL_DMA_IRQHandler+0x6e4>
 8003bbe:	bf00      	nop
 8003bc0:	40020010 	.word	0x40020010
 8003bc4:	40020028 	.word	0x40020028
 8003bc8:	40020040 	.word	0x40020040
 8003bcc:	40020058 	.word	0x40020058
 8003bd0:	40020070 	.word	0x40020070
 8003bd4:	40020088 	.word	0x40020088
 8003bd8:	400200a0 	.word	0x400200a0
 8003bdc:	400200b8 	.word	0x400200b8
 8003be0:	40020410 	.word	0x40020410
 8003be4:	40020428 	.word	0x40020428
 8003be8:	40020440 	.word	0x40020440
 8003bec:	40020458 	.word	0x40020458
 8003bf0:	40020470 	.word	0x40020470
 8003bf4:	40020488 	.word	0x40020488
 8003bf8:	400204a0 	.word	0x400204a0
 8003bfc:	400204b8 	.word	0x400204b8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8087 	beq.w	8003d28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2220      	movs	r2, #32
 8003c24:	409a      	lsls	r2, r3
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d139      	bne.n	8003caa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0216 	bic.w	r2, r2, #22
 8003c44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_DMA_IRQHandler+0x736>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0208 	bic.w	r2, r2, #8
 8003c74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	223f      	movs	r2, #63	; 0x3f
 8003c80:	409a      	lsls	r2, r3
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 834a 	beq.w	8004334 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
          }
          return;
 8003ca8:	e344      	b.n	8004334 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d018      	beq.n	8003cea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d02c      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e027      	b.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d023      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
 8003ce8:	e01e      	b.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0210 	bic.w	r2, r2, #16
 8003d06:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8306 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8088 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2204      	movs	r2, #4
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a7a      	ldr	r2, [pc, #488]	; (8003f38 <HAL_DMA_IRQHandler+0xa08>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d04a      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a79      	ldr	r2, [pc, #484]	; (8003f3c <HAL_DMA_IRQHandler+0xa0c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d045      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a77      	ldr	r2, [pc, #476]	; (8003f40 <HAL_DMA_IRQHandler+0xa10>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d040      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a76      	ldr	r2, [pc, #472]	; (8003f44 <HAL_DMA_IRQHandler+0xa14>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d03b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a74      	ldr	r2, [pc, #464]	; (8003f48 <HAL_DMA_IRQHandler+0xa18>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d036      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a73      	ldr	r2, [pc, #460]	; (8003f4c <HAL_DMA_IRQHandler+0xa1c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d031      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a71      	ldr	r2, [pc, #452]	; (8003f50 <HAL_DMA_IRQHandler+0xa20>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d02c      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a70      	ldr	r2, [pc, #448]	; (8003f54 <HAL_DMA_IRQHandler+0xa24>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d027      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6e      	ldr	r2, [pc, #440]	; (8003f58 <HAL_DMA_IRQHandler+0xa28>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6d      	ldr	r2, [pc, #436]	; (8003f5c <HAL_DMA_IRQHandler+0xa2c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01d      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6b      	ldr	r2, [pc, #428]	; (8003f60 <HAL_DMA_IRQHandler+0xa30>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6a      	ldr	r2, [pc, #424]	; (8003f64 <HAL_DMA_IRQHandler+0xa34>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a68      	ldr	r2, [pc, #416]	; (8003f68 <HAL_DMA_IRQHandler+0xa38>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a67      	ldr	r2, [pc, #412]	; (8003f6c <HAL_DMA_IRQHandler+0xa3c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a65      	ldr	r2, [pc, #404]	; (8003f70 <HAL_DMA_IRQHandler+0xa40>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a64      	ldr	r2, [pc, #400]	; (8003f74 <HAL_DMA_IRQHandler+0xa44>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <HAL_DMA_IRQHandler+0x8ca>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e007      	b.n	8003e0a <HAL_DMA_IRQHandler+0x8da>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d307      	bcc.n	8003e26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1f2      	bne.n	8003e0a <HAL_DMA_IRQHandler+0x8da>
 8003e24:	e000      	b.n	8003e28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e26:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2203      	movs	r2, #3
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003e3e:	e003      	b.n	8003e48 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8272 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	e26c      	b.n	800433e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a43      	ldr	r2, [pc, #268]	; (8003f78 <HAL_DMA_IRQHandler+0xa48>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a42      	ldr	r2, [pc, #264]	; (8003f7c <HAL_DMA_IRQHandler+0xa4c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a40      	ldr	r2, [pc, #256]	; (8003f80 <HAL_DMA_IRQHandler+0xa50>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a3f      	ldr	r2, [pc, #252]	; (8003f84 <HAL_DMA_IRQHandler+0xa54>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <HAL_DMA_IRQHandler+0xa58>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a3c      	ldr	r2, [pc, #240]	; (8003f8c <HAL_DMA_IRQHandler+0xa5c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <HAL_DMA_IRQHandler+0xa60>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a39      	ldr	r2, [pc, #228]	; (8003f94 <HAL_DMA_IRQHandler+0xa64>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DMA_IRQHandler+0x988>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_DMA_IRQHandler+0x98a>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 823f 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80cd 	beq.w	8004078 <HAL_DMA_IRQHandler+0xb48>
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80c7 	beq.w	8004078 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d049      	beq.n	8003f98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8210 	beq.w	8004338 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f20:	e20a      	b.n	8004338 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8206 	beq.w	8004338 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f34:	e200      	b.n	8004338 <HAL_DMA_IRQHandler+0xe08>
 8003f36:	bf00      	nop
 8003f38:	40020010 	.word	0x40020010
 8003f3c:	40020028 	.word	0x40020028
 8003f40:	40020040 	.word	0x40020040
 8003f44:	40020058 	.word	0x40020058
 8003f48:	40020070 	.word	0x40020070
 8003f4c:	40020088 	.word	0x40020088
 8003f50:	400200a0 	.word	0x400200a0
 8003f54:	400200b8 	.word	0x400200b8
 8003f58:	40020410 	.word	0x40020410
 8003f5c:	40020428 	.word	0x40020428
 8003f60:	40020440 	.word	0x40020440
 8003f64:	40020458 	.word	0x40020458
 8003f68:	40020470 	.word	0x40020470
 8003f6c:	40020488 	.word	0x40020488
 8003f70:	400204a0 	.word	0x400204a0
 8003f74:	400204b8 	.word	0x400204b8
 8003f78:	58025408 	.word	0x58025408
 8003f7c:	5802541c 	.word	0x5802541c
 8003f80:	58025430 	.word	0x58025430
 8003f84:	58025444 	.word	0x58025444
 8003f88:	58025458 	.word	0x58025458
 8003f8c:	5802546c 	.word	0x5802546c
 8003f90:	58025480 	.word	0x58025480
 8003f94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d160      	bne.n	8004064 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7f      	ldr	r2, [pc, #508]	; (80041a4 <HAL_DMA_IRQHandler+0xc74>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04a      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a7d      	ldr	r2, [pc, #500]	; (80041a8 <HAL_DMA_IRQHandler+0xc78>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d045      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7c      	ldr	r2, [pc, #496]	; (80041ac <HAL_DMA_IRQHandler+0xc7c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d040      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a7a      	ldr	r2, [pc, #488]	; (80041b0 <HAL_DMA_IRQHandler+0xc80>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d03b      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a79      	ldr	r2, [pc, #484]	; (80041b4 <HAL_DMA_IRQHandler+0xc84>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d036      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a77      	ldr	r2, [pc, #476]	; (80041b8 <HAL_DMA_IRQHandler+0xc88>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a76      	ldr	r2, [pc, #472]	; (80041bc <HAL_DMA_IRQHandler+0xc8c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d02c      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a74      	ldr	r2, [pc, #464]	; (80041c0 <HAL_DMA_IRQHandler+0xc90>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d027      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a73      	ldr	r2, [pc, #460]	; (80041c4 <HAL_DMA_IRQHandler+0xc94>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a71      	ldr	r2, [pc, #452]	; (80041c8 <HAL_DMA_IRQHandler+0xc98>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a70      	ldr	r2, [pc, #448]	; (80041cc <HAL_DMA_IRQHandler+0xc9c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6e      	ldr	r2, [pc, #440]	; (80041d0 <HAL_DMA_IRQHandler+0xca0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a6d      	ldr	r2, [pc, #436]	; (80041d4 <HAL_DMA_IRQHandler+0xca4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6b      	ldr	r2, [pc, #428]	; (80041d8 <HAL_DMA_IRQHandler+0xca8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6a      	ldr	r2, [pc, #424]	; (80041dc <HAL_DMA_IRQHandler+0xcac>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a68      	ldr	r2, [pc, #416]	; (80041e0 <HAL_DMA_IRQHandler+0xcb0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <HAL_DMA_IRQHandler+0xb24>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0208 	bic.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e007      	b.n	8004064 <HAL_DMA_IRQHandler+0xb34>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0204 	bic.w	r2, r2, #4
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8165 	beq.w	8004338 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004076:	e15f      	b.n	8004338 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2202      	movs	r2, #2
 8004082:	409a      	lsls	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80c5 	beq.w	8004218 <HAL_DMA_IRQHandler+0xce8>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80bf 	beq.w	8004218 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2202      	movs	r2, #2
 80040a4:	409a      	lsls	r2, r3
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d018      	beq.n	80040e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 813a 	beq.w	800433c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d0:	e134      	b.n	800433c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8130 	beq.w	800433c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e4:	e12a      	b.n	800433c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 8089 	bne.w	8004204 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2b      	ldr	r2, [pc, #172]	; (80041a4 <HAL_DMA_IRQHandler+0xc74>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d04a      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a29      	ldr	r2, [pc, #164]	; (80041a8 <HAL_DMA_IRQHandler+0xc78>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d045      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a28      	ldr	r2, [pc, #160]	; (80041ac <HAL_DMA_IRQHandler+0xc7c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d040      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <HAL_DMA_IRQHandler+0xc80>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d03b      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <HAL_DMA_IRQHandler+0xc84>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d036      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_DMA_IRQHandler+0xc88>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d031      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a22      	ldr	r2, [pc, #136]	; (80041bc <HAL_DMA_IRQHandler+0xc8c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d02c      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <HAL_DMA_IRQHandler+0xc90>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d027      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <HAL_DMA_IRQHandler+0xc94>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d022      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_DMA_IRQHandler+0xc98>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01d      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <HAL_DMA_IRQHandler+0xc9c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d018      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <HAL_DMA_IRQHandler+0xca0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <HAL_DMA_IRQHandler+0xca4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00e      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <HAL_DMA_IRQHandler+0xca8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d009      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a16      	ldr	r2, [pc, #88]	; (80041dc <HAL_DMA_IRQHandler+0xcac>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d004      	beq.n	8004192 <HAL_DMA_IRQHandler+0xc62>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <HAL_DMA_IRQHandler+0xcb0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d128      	bne.n	80041e4 <HAL_DMA_IRQHandler+0xcb4>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0214 	bic.w	r2, r2, #20
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e027      	b.n	80041f4 <HAL_DMA_IRQHandler+0xcc4>
 80041a4:	40020010 	.word	0x40020010
 80041a8:	40020028 	.word	0x40020028
 80041ac:	40020040 	.word	0x40020040
 80041b0:	40020058 	.word	0x40020058
 80041b4:	40020070 	.word	0x40020070
 80041b8:	40020088 	.word	0x40020088
 80041bc:	400200a0 	.word	0x400200a0
 80041c0:	400200b8 	.word	0x400200b8
 80041c4:	40020410 	.word	0x40020410
 80041c8:	40020428 	.word	0x40020428
 80041cc:	40020440 	.word	0x40020440
 80041d0:	40020458 	.word	0x40020458
 80041d4:	40020470 	.word	0x40020470
 80041d8:	40020488 	.word	0x40020488
 80041dc:	400204a0 	.word	0x400204a0
 80041e0:	400204b8 	.word	0x400204b8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 020a 	bic.w	r2, r2, #10
 80041f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8097 	beq.w	800433c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004216:	e091      	b.n	800433c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2208      	movs	r2, #8
 8004222:	409a      	lsls	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8088 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8082 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a41      	ldr	r2, [pc, #260]	; (8004344 <HAL_DMA_IRQHandler+0xe14>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d04a      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <HAL_DMA_IRQHandler+0xe18>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d045      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a3e      	ldr	r2, [pc, #248]	; (800434c <HAL_DMA_IRQHandler+0xe1c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d040      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3c      	ldr	r2, [pc, #240]	; (8004350 <HAL_DMA_IRQHandler+0xe20>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d03b      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3b      	ldr	r2, [pc, #236]	; (8004354 <HAL_DMA_IRQHandler+0xe24>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d036      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a39      	ldr	r2, [pc, #228]	; (8004358 <HAL_DMA_IRQHandler+0xe28>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d031      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a38      	ldr	r2, [pc, #224]	; (800435c <HAL_DMA_IRQHandler+0xe2c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d02c      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a36      	ldr	r2, [pc, #216]	; (8004360 <HAL_DMA_IRQHandler+0xe30>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d027      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a35      	ldr	r2, [pc, #212]	; (8004364 <HAL_DMA_IRQHandler+0xe34>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d022      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a33      	ldr	r2, [pc, #204]	; (8004368 <HAL_DMA_IRQHandler+0xe38>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01d      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a32      	ldr	r2, [pc, #200]	; (800436c <HAL_DMA_IRQHandler+0xe3c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a30      	ldr	r2, [pc, #192]	; (8004370 <HAL_DMA_IRQHandler+0xe40>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <HAL_DMA_IRQHandler+0xe44>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2d      	ldr	r2, [pc, #180]	; (8004378 <HAL_DMA_IRQHandler+0xe48>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2c      	ldr	r2, [pc, #176]	; (800437c <HAL_DMA_IRQHandler+0xe4c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2a      	ldr	r2, [pc, #168]	; (8004380 <HAL_DMA_IRQHandler+0xe50>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <HAL_DMA_IRQHandler+0xdbc>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 021c 	bic.w	r2, r2, #28
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e007      	b.n	80042fc <HAL_DMA_IRQHandler+0xdcc>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020e 	bic.w	r2, r2, #14
 80042fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
 8004332:	e004      	b.n	800433e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004334:	bf00      	nop
 8004336:	e002      	b.n	800433e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40020010 	.word	0x40020010
 8004348:	40020028 	.word	0x40020028
 800434c:	40020040 	.word	0x40020040
 8004350:	40020058 	.word	0x40020058
 8004354:	40020070 	.word	0x40020070
 8004358:	40020088 	.word	0x40020088
 800435c:	400200a0 	.word	0x400200a0
 8004360:	400200b8 	.word	0x400200b8
 8004364:	40020410 	.word	0x40020410
 8004368:	40020428 	.word	0x40020428
 800436c:	40020440 	.word	0x40020440
 8004370:	40020458 	.word	0x40020458
 8004374:	40020470 	.word	0x40020470
 8004378:	40020488 	.word	0x40020488
 800437c:	400204a0 	.word	0x400204a0
 8004380:	400204b8 	.word	0x400204b8

08004384 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7f      	ldr	r2, [pc, #508]	; (80045a0 <DMA_SetConfig+0x21c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d072      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a7d      	ldr	r2, [pc, #500]	; (80045a4 <DMA_SetConfig+0x220>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d06d      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a7c      	ldr	r2, [pc, #496]	; (80045a8 <DMA_SetConfig+0x224>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d068      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a7a      	ldr	r2, [pc, #488]	; (80045ac <DMA_SetConfig+0x228>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d063      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a79      	ldr	r2, [pc, #484]	; (80045b0 <DMA_SetConfig+0x22c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d05e      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a77      	ldr	r2, [pc, #476]	; (80045b4 <DMA_SetConfig+0x230>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d059      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a76      	ldr	r2, [pc, #472]	; (80045b8 <DMA_SetConfig+0x234>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d054      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a74      	ldr	r2, [pc, #464]	; (80045bc <DMA_SetConfig+0x238>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d04f      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a73      	ldr	r2, [pc, #460]	; (80045c0 <DMA_SetConfig+0x23c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d04a      	beq.n	800448e <DMA_SetConfig+0x10a>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a71      	ldr	r2, [pc, #452]	; (80045c4 <DMA_SetConfig+0x240>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d045      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a70      	ldr	r2, [pc, #448]	; (80045c8 <DMA_SetConfig+0x244>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d040      	beq.n	800448e <DMA_SetConfig+0x10a>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <DMA_SetConfig+0x248>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d03b      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6d      	ldr	r2, [pc, #436]	; (80045d0 <DMA_SetConfig+0x24c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d036      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6b      	ldr	r2, [pc, #428]	; (80045d4 <DMA_SetConfig+0x250>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d031      	beq.n	800448e <DMA_SetConfig+0x10a>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6a      	ldr	r2, [pc, #424]	; (80045d8 <DMA_SetConfig+0x254>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d02c      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a68      	ldr	r2, [pc, #416]	; (80045dc <DMA_SetConfig+0x258>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d027      	beq.n	800448e <DMA_SetConfig+0x10a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a67      	ldr	r2, [pc, #412]	; (80045e0 <DMA_SetConfig+0x25c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <DMA_SetConfig+0x260>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a64      	ldr	r2, [pc, #400]	; (80045e8 <DMA_SetConfig+0x264>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <DMA_SetConfig+0x10a>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a62      	ldr	r2, [pc, #392]	; (80045ec <DMA_SetConfig+0x268>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a61      	ldr	r2, [pc, #388]	; (80045f0 <DMA_SetConfig+0x26c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a5f      	ldr	r2, [pc, #380]	; (80045f4 <DMA_SetConfig+0x270>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <DMA_SetConfig+0x10a>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a5e      	ldr	r2, [pc, #376]	; (80045f8 <DMA_SetConfig+0x274>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <DMA_SetConfig+0x10a>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a5c      	ldr	r2, [pc, #368]	; (80045fc <DMA_SetConfig+0x278>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <DMA_SetConfig+0x10e>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <DMA_SetConfig+0x110>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00d      	beq.n	80044b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a39      	ldr	r2, [pc, #228]	; (80045a0 <DMA_SetConfig+0x21c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d04a      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a38      	ldr	r2, [pc, #224]	; (80045a4 <DMA_SetConfig+0x220>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d045      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a36      	ldr	r2, [pc, #216]	; (80045a8 <DMA_SetConfig+0x224>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d040      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a35      	ldr	r2, [pc, #212]	; (80045ac <DMA_SetConfig+0x228>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d03b      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a33      	ldr	r2, [pc, #204]	; (80045b0 <DMA_SetConfig+0x22c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d036      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a32      	ldr	r2, [pc, #200]	; (80045b4 <DMA_SetConfig+0x230>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d031      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a30      	ldr	r2, [pc, #192]	; (80045b8 <DMA_SetConfig+0x234>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02c      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2f      	ldr	r2, [pc, #188]	; (80045bc <DMA_SetConfig+0x238>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d027      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <DMA_SetConfig+0x23c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d022      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <DMA_SetConfig+0x240>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d01d      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <DMA_SetConfig+0x244>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d018      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a29      	ldr	r2, [pc, #164]	; (80045cc <DMA_SetConfig+0x248>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <DMA_SetConfig+0x24c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00e      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a26      	ldr	r2, [pc, #152]	; (80045d4 <DMA_SetConfig+0x250>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d009      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <DMA_SetConfig+0x254>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <DMA_SetConfig+0x1d0>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a23      	ldr	r2, [pc, #140]	; (80045dc <DMA_SetConfig+0x258>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d101      	bne.n	8004558 <DMA_SetConfig+0x1d4>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <DMA_SetConfig+0x1d6>
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d059      	beq.n	8004612 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	223f      	movs	r2, #63	; 0x3f
 8004568:	409a      	lsls	r2, r3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800457c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d138      	bne.n	8004600 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800459e:	e086      	b.n	80046ae <DMA_SetConfig+0x32a>
 80045a0:	40020010 	.word	0x40020010
 80045a4:	40020028 	.word	0x40020028
 80045a8:	40020040 	.word	0x40020040
 80045ac:	40020058 	.word	0x40020058
 80045b0:	40020070 	.word	0x40020070
 80045b4:	40020088 	.word	0x40020088
 80045b8:	400200a0 	.word	0x400200a0
 80045bc:	400200b8 	.word	0x400200b8
 80045c0:	40020410 	.word	0x40020410
 80045c4:	40020428 	.word	0x40020428
 80045c8:	40020440 	.word	0x40020440
 80045cc:	40020458 	.word	0x40020458
 80045d0:	40020470 	.word	0x40020470
 80045d4:	40020488 	.word	0x40020488
 80045d8:	400204a0 	.word	0x400204a0
 80045dc:	400204b8 	.word	0x400204b8
 80045e0:	58025408 	.word	0x58025408
 80045e4:	5802541c 	.word	0x5802541c
 80045e8:	58025430 	.word	0x58025430
 80045ec:	58025444 	.word	0x58025444
 80045f0:	58025458 	.word	0x58025458
 80045f4:	5802546c 	.word	0x5802546c
 80045f8:	58025480 	.word	0x58025480
 80045fc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
}
 8004610:	e04d      	b.n	80046ae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a29      	ldr	r2, [pc, #164]	; (80046bc <DMA_SetConfig+0x338>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d022      	beq.n	8004662 <DMA_SetConfig+0x2de>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <DMA_SetConfig+0x33c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <DMA_SetConfig+0x2de>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <DMA_SetConfig+0x340>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d018      	beq.n	8004662 <DMA_SetConfig+0x2de>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <DMA_SetConfig+0x344>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <DMA_SetConfig+0x2de>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a23      	ldr	r2, [pc, #140]	; (80046cc <DMA_SetConfig+0x348>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <DMA_SetConfig+0x2de>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a21      	ldr	r2, [pc, #132]	; (80046d0 <DMA_SetConfig+0x34c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d009      	beq.n	8004662 <DMA_SetConfig+0x2de>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <DMA_SetConfig+0x350>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <DMA_SetConfig+0x2de>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <DMA_SetConfig+0x354>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d101      	bne.n	8004666 <DMA_SetConfig+0x2e2>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <DMA_SetConfig+0x2e4>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d020      	beq.n	80046ae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	2201      	movs	r2, #1
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d108      	bne.n	800469e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	60da      	str	r2, [r3, #12]
}
 800469c:	e007      	b.n	80046ae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	60da      	str	r2, [r3, #12]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	58025408 	.word	0x58025408
 80046c0:	5802541c 	.word	0x5802541c
 80046c4:	58025430 	.word	0x58025430
 80046c8:	58025444 	.word	0x58025444
 80046cc:	58025458 	.word	0x58025458
 80046d0:	5802546c 	.word	0x5802546c
 80046d4:	58025480 	.word	0x58025480
 80046d8:	58025494 	.word	0x58025494

080046dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a42      	ldr	r2, [pc, #264]	; (80047f4 <DMA_CalcBaseAndBitshift+0x118>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d04a      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a41      	ldr	r2, [pc, #260]	; (80047f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d045      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a3f      	ldr	r2, [pc, #252]	; (80047fc <DMA_CalcBaseAndBitshift+0x120>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d040      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a3e      	ldr	r2, [pc, #248]	; (8004800 <DMA_CalcBaseAndBitshift+0x124>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d03b      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a3c      	ldr	r2, [pc, #240]	; (8004804 <DMA_CalcBaseAndBitshift+0x128>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d036      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3b      	ldr	r2, [pc, #236]	; (8004808 <DMA_CalcBaseAndBitshift+0x12c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d031      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a39      	ldr	r2, [pc, #228]	; (800480c <DMA_CalcBaseAndBitshift+0x130>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02c      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a38      	ldr	r2, [pc, #224]	; (8004810 <DMA_CalcBaseAndBitshift+0x134>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d027      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a36      	ldr	r2, [pc, #216]	; (8004814 <DMA_CalcBaseAndBitshift+0x138>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d022      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a35      	ldr	r2, [pc, #212]	; (8004818 <DMA_CalcBaseAndBitshift+0x13c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d01d      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a33      	ldr	r2, [pc, #204]	; (800481c <DMA_CalcBaseAndBitshift+0x140>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d018      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a32      	ldr	r2, [pc, #200]	; (8004820 <DMA_CalcBaseAndBitshift+0x144>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a30      	ldr	r2, [pc, #192]	; (8004824 <DMA_CalcBaseAndBitshift+0x148>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00e      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <DMA_CalcBaseAndBitshift+0x14c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d009      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2d      	ldr	r2, [pc, #180]	; (800482c <DMA_CalcBaseAndBitshift+0x150>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <DMA_CalcBaseAndBitshift+0xa8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <DMA_CalcBaseAndBitshift+0x154>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <DMA_CalcBaseAndBitshift+0xac>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <DMA_CalcBaseAndBitshift+0xae>
 8004788:	2300      	movs	r3, #0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d024      	beq.n	80047d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	3b10      	subs	r3, #16
 8004796:	4a27      	ldr	r2, [pc, #156]	; (8004834 <DMA_CalcBaseAndBitshift+0x158>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	4a24      	ldr	r2, [pc, #144]	; (8004838 <DMA_CalcBaseAndBitshift+0x15c>)
 80047a8:	5cd3      	ldrb	r3, [r2, r3]
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d908      	bls.n	80047c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	4b1f      	ldr	r3, [pc, #124]	; (800483c <DMA_CalcBaseAndBitshift+0x160>)
 80047be:	4013      	ands	r3, r2
 80047c0:	1d1a      	adds	r2, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	659a      	str	r2, [r3, #88]	; 0x58
 80047c6:	e00d      	b.n	80047e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <DMA_CalcBaseAndBitshift+0x160>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6593      	str	r3, [r2, #88]	; 0x58
 80047d6:	e005      	b.n	80047e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	40020010 	.word	0x40020010
 80047f8:	40020028 	.word	0x40020028
 80047fc:	40020040 	.word	0x40020040
 8004800:	40020058 	.word	0x40020058
 8004804:	40020070 	.word	0x40020070
 8004808:	40020088 	.word	0x40020088
 800480c:	400200a0 	.word	0x400200a0
 8004810:	400200b8 	.word	0x400200b8
 8004814:	40020410 	.word	0x40020410
 8004818:	40020428 	.word	0x40020428
 800481c:	40020440 	.word	0x40020440
 8004820:	40020458 	.word	0x40020458
 8004824:	40020470 	.word	0x40020470
 8004828:	40020488 	.word	0x40020488
 800482c:	400204a0 	.word	0x400204a0
 8004830:	400204b8 	.word	0x400204b8
 8004834:	aaaaaaab 	.word	0xaaaaaaab
 8004838:	080142f4 	.word	0x080142f4
 800483c:	fffffc00 	.word	0xfffffc00

08004840 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d120      	bne.n	8004896 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	2b03      	cmp	r3, #3
 800485a:	d858      	bhi.n	800490e <DMA_CheckFifoParam+0xce>
 800485c:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <DMA_CheckFifoParam+0x24>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004875 	.word	0x08004875
 8004868:	08004887 	.word	0x08004887
 800486c:	08004875 	.word	0x08004875
 8004870:	0800490f 	.word	0x0800490f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d048      	beq.n	8004912 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004884:	e045      	b.n	8004912 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800488e:	d142      	bne.n	8004916 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004894:	e03f      	b.n	8004916 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489e:	d123      	bne.n	80048e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d838      	bhi.n	800491a <DMA_CheckFifoParam+0xda>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <DMA_CheckFifoParam+0x70>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048c7 	.word	0x080048c7
 80048b8:	080048c1 	.word	0x080048c1
 80048bc:	080048d9 	.word	0x080048d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
        break;
 80048c4:	e030      	b.n	8004928 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d025      	beq.n	800491e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048d6:	e022      	b.n	800491e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048e0:	d11f      	bne.n	8004922 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048e6:	e01c      	b.n	8004922 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d902      	bls.n	80048f6 <DMA_CheckFifoParam+0xb6>
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d003      	beq.n	80048fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80048f4:	e018      	b.n	8004928 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
        break;
 80048fa:	e015      	b.n	8004928 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
    break;
 800490c:	e00b      	b.n	8004926 <DMA_CheckFifoParam+0xe6>
        break;
 800490e:	bf00      	nop
 8004910:	e00a      	b.n	8004928 <DMA_CheckFifoParam+0xe8>
        break;
 8004912:	bf00      	nop
 8004914:	e008      	b.n	8004928 <DMA_CheckFifoParam+0xe8>
        break;
 8004916:	bf00      	nop
 8004918:	e006      	b.n	8004928 <DMA_CheckFifoParam+0xe8>
        break;
 800491a:	bf00      	nop
 800491c:	e004      	b.n	8004928 <DMA_CheckFifoParam+0xe8>
        break;
 800491e:	bf00      	nop
 8004920:	e002      	b.n	8004928 <DMA_CheckFifoParam+0xe8>
        break;
 8004922:	bf00      	nop
 8004924:	e000      	b.n	8004928 <DMA_CheckFifoParam+0xe8>
    break;
 8004926:	bf00      	nop
    }
  }

  return status;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a38      	ldr	r2, [pc, #224]	; (8004a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a36      	ldr	r2, [pc, #216]	; (8004a30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a35      	ldr	r2, [pc, #212]	; (8004a34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a33      	ldr	r2, [pc, #204]	; (8004a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a32      	ldr	r2, [pc, #200]	; (8004a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a30      	ldr	r2, [pc, #192]	; (8004a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a2d      	ldr	r2, [pc, #180]	; (8004a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d101      	bne.n	800499a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01a      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	3b08      	subs	r3, #8
 80049a8:	4a28      	ldr	r2, [pc, #160]	; (8004a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	461a      	mov	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a24      	ldr	r2, [pc, #144]	; (8004a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80049c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	2201      	movs	r2, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80049d4:	e024      	b.n	8004a20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3b10      	subs	r3, #16
 80049de:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4a1c      	ldr	r2, [pc, #112]	; (8004a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d806      	bhi.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d902      	bls.n	80049fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3308      	adds	r3, #8
 80049fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	461a      	mov	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2201      	movs	r2, #1
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	58025408 	.word	0x58025408
 8004a30:	5802541c 	.word	0x5802541c
 8004a34:	58025430 	.word	0x58025430
 8004a38:	58025444 	.word	0x58025444
 8004a3c:	58025458 	.word	0x58025458
 8004a40:	5802546c 	.word	0x5802546c
 8004a44:	58025480 	.word	0x58025480
 8004a48:	58025494 	.word	0x58025494
 8004a4c:	cccccccd 	.word	0xcccccccd
 8004a50:	16009600 	.word	0x16009600
 8004a54:	58025880 	.word	0x58025880
 8004a58:	aaaaaaab 	.word	0xaaaaaaab
 8004a5c:	400204b8 	.word	0x400204b8
 8004a60:	4002040f 	.word	0x4002040f
 8004a64:	10008200 	.word	0x10008200
 8004a68:	40020880 	.word	0x40020880

08004a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04a      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d847      	bhi.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d022      	beq.n	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d01d      	beq.n	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d018      	beq.n	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1f      	ldr	r2, [pc, #124]	; (8004b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00e      	beq.n	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d101      	bne.n	8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	461a      	mov	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004af4:	671a      	str	r2, [r3, #112]	; 0x70
 8004af6:	e009      	b.n	8004b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	461a      	mov	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b0a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	2201      	movs	r2, #1
 8004b12:	409a      	lsls	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	58025408 	.word	0x58025408
 8004b28:	5802541c 	.word	0x5802541c
 8004b2c:	58025430 	.word	0x58025430
 8004b30:	58025444 	.word	0x58025444
 8004b34:	58025458 	.word	0x58025458
 8004b38:	5802546c 	.word	0x5802546c
 8004b3c:	58025480 	.word	0x58025480
 8004b40:	58025494 	.word	0x58025494
 8004b44:	1600963f 	.word	0x1600963f
 8004b48:	58025940 	.word	0x58025940
 8004b4c:	1000823f 	.word	0x1000823f
 8004b50:	40020940 	.word	0x40020940

08004b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	; 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b62:	4b89      	ldr	r3, [pc, #548]	; (8004d88 <HAL_GPIO_Init+0x234>)
 8004b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b66:	e194      	b.n	8004e92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	fa01 f303 	lsl.w	r3, r1, r3
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8186 	beq.w	8004e8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d005      	beq.n	8004b98 <HAL_GPIO_Init+0x44>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d130      	bne.n	8004bfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bce:	2201      	movs	r2, #1
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 0201 	and.w	r2, r3, #1
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d017      	beq.n	8004c36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	2203      	movs	r2, #3
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d123      	bne.n	8004c8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	08da      	lsrs	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3208      	adds	r2, #8
 8004c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	220f      	movs	r2, #15
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	08da      	lsrs	r2, r3, #3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3208      	adds	r2, #8
 8004c84:	69b9      	ldr	r1, [r7, #24]
 8004c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	2203      	movs	r2, #3
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f003 0203 	and.w	r2, r3, #3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80e0 	beq.w	8004e8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ccc:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <HAL_GPIO_Init+0x238>)
 8004cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cd2:	4a2e      	ldr	r2, [pc, #184]	; (8004d8c <HAL_GPIO_Init+0x238>)
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004cdc:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <HAL_GPIO_Init+0x238>)
 8004cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cea:	4a29      	ldr	r2, [pc, #164]	; (8004d90 <HAL_GPIO_Init+0x23c>)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	220f      	movs	r2, #15
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a20      	ldr	r2, [pc, #128]	; (8004d94 <HAL_GPIO_Init+0x240>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d052      	beq.n	8004dbc <HAL_GPIO_Init+0x268>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <HAL_GPIO_Init+0x244>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d031      	beq.n	8004d82 <HAL_GPIO_Init+0x22e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <HAL_GPIO_Init+0x248>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02b      	beq.n	8004d7e <HAL_GPIO_Init+0x22a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1d      	ldr	r2, [pc, #116]	; (8004da0 <HAL_GPIO_Init+0x24c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d025      	beq.n	8004d7a <HAL_GPIO_Init+0x226>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <HAL_GPIO_Init+0x250>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01f      	beq.n	8004d76 <HAL_GPIO_Init+0x222>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_GPIO_Init+0x254>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d019      	beq.n	8004d72 <HAL_GPIO_Init+0x21e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <HAL_GPIO_Init+0x258>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <HAL_GPIO_Init+0x21a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <HAL_GPIO_Init+0x25c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00d      	beq.n	8004d6a <HAL_GPIO_Init+0x216>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a18      	ldr	r2, [pc, #96]	; (8004db4 <HAL_GPIO_Init+0x260>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <HAL_GPIO_Init+0x212>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <HAL_GPIO_Init+0x264>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d101      	bne.n	8004d62 <HAL_GPIO_Init+0x20e>
 8004d5e:	2309      	movs	r3, #9
 8004d60:	e02d      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d62:	230a      	movs	r3, #10
 8004d64:	e02b      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d66:	2308      	movs	r3, #8
 8004d68:	e029      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d6a:	2307      	movs	r3, #7
 8004d6c:	e027      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d6e:	2306      	movs	r3, #6
 8004d70:	e025      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d72:	2305      	movs	r3, #5
 8004d74:	e023      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d76:	2304      	movs	r3, #4
 8004d78:	e021      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e01f      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e01d      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e01b      	b.n	8004dbe <HAL_GPIO_Init+0x26a>
 8004d86:	bf00      	nop
 8004d88:	58000080 	.word	0x58000080
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	58000400 	.word	0x58000400
 8004d94:	58020000 	.word	0x58020000
 8004d98:	58020400 	.word	0x58020400
 8004d9c:	58020800 	.word	0x58020800
 8004da0:	58020c00 	.word	0x58020c00
 8004da4:	58021000 	.word	0x58021000
 8004da8:	58021400 	.word	0x58021400
 8004dac:	58021800 	.word	0x58021800
 8004db0:	58021c00 	.word	0x58021c00
 8004db4:	58022000 	.word	0x58022000
 8004db8:	58022400 	.word	0x58022400
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	f002 0203 	and.w	r2, r2, #3
 8004dc4:	0092      	lsls	r2, r2, #2
 8004dc6:	4093      	lsls	r3, r2
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dce:	4938      	ldr	r1, [pc, #224]	; (8004eb0 <HAL_GPIO_Init+0x35c>)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4013      	ands	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f47f ae63 	bne.w	8004b68 <HAL_GPIO_Init+0x14>
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	3724      	adds	r7, #36	; 0x24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	58000400 	.word	0x58000400

08004eb4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004ebc:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <HAL_HSEM_FastTake+0x2c>)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3320      	adds	r3, #32
 8004ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec6:	4a07      	ldr	r2, [pc, #28]	; (8004ee4 <HAL_HSEM_FastTake+0x30>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	58026400 	.word	0x58026400
 8004ee4:	80000300 	.word	0x80000300

08004ee8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004ef2:	4906      	ldr	r1, [pc, #24]	; (8004f0c <HAL_HSEM_Release+0x24>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	58026400 	.word	0x58026400

08004f10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e10d      	b.n	800513e <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fc ff30 	bl	8001d9c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d107      	bne.n	8004f62 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d008      	beq.n	8004f84 <HAL_I2S_Init+0x74>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d004      	beq.n	8004f84 <HAL_I2S_Init+0x74>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b0a      	cmp	r3, #10
 8004f80:	f040 8087 	bne.w	8005092 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d05a      	beq.n	8005042 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004f94:	2302      	movs	r3, #2
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e001      	b.n	8004f9e <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b30      	cmp	r3, #48	; 0x30
 8004fa4:	d003      	beq.n	8004fae <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004faa:	2bb0      	cmp	r3, #176	; 0xb0
 8004fac:	d102      	bne.n	8004fb4 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e001      	b.n	8004fb8 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8004fb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fbc:	f04f 0100 	mov.w	r1, #0
 8004fc0:	f002 fc9e 	bl	8007900 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fc4:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fce:	d113      	bne.n	8004ff8 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	3305      	adds	r3, #5
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	e014      	b.n	8005022 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	fbb2 f2f3 	udiv	r2, r2, r3
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	461a      	mov	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	3305      	adds	r3, #5
 8005020:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4a48      	ldr	r2, [pc, #288]	; (8005148 <HAL_I2S_Init+0x238>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	08db      	lsrs	r3, r3, #3
 800502c:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e003      	b.n	800504a <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8005042:	2302      	movs	r3, #2
 8005044:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d102      	bne.n	8005056 <HAL_I2S_Init+0x146>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d002      	beq.n	800505c <HAL_I2S_Init+0x14c>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2bff      	cmp	r3, #255	; 0xff
 800505a:	d907      	bls.n	800506c <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005060:	f043 0210 	orr.w	r2, r3, #16
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e068      	b.n	800513e <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8005072:	2301      	movs	r3, #1
 8005074:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507c:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_I2S_Init+0x23c>)
 800507e:	4013      	ands	r3, r2
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	0411      	lsls	r1, r2, #16
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	0612      	lsls	r2, r2, #24
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	430b      	orrs	r3, r1
 8005090:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005098:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <HAL_I2S_Init+0x240>)
 800509a:	4013      	ands	r3, r2
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6851      	ldr	r1, [r2, #4]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	4311      	orrs	r1, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68d2      	ldr	r2, [r2, #12]
 80050aa:	4311      	orrs	r1, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6992      	ldr	r2, [r2, #24]
 80050b0:	4311      	orrs	r1, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6a12      	ldr	r2, [r2, #32]
 80050b6:	4311      	orrs	r1, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050bc:	4311      	orrs	r1, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6912      	ldr	r2, [r2, #16]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f640 72f8 	movw	r2, #4088	; 0xff8
 80050d8:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050e8:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d007      	beq.n	8005118 <HAL_I2S_Init+0x208>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b06      	cmp	r3, #6
 800510e:	d003      	beq.n	8005118 <HAL_I2S_Init+0x208>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b0a      	cmp	r3, #10
 8005116:	d10a      	bne.n	800512e <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	cccccccd 	.word	0xcccccccd
 800514c:	fe00ffff 	.word	0xfe00ffff
 8005150:	fdff9040 	.word	0xfdff9040

08005154 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	75fb      	strb	r3, [r7, #23]


  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 8005172:	887b      	ldrh	r3, [r7, #2]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_I2SEx_TransmitReceive_DMA+0x28>
  {
    return  HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0c0      	b.n	80052fe <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <HAL_I2SEx_TransmitReceive_DMA+0x38>
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
 800518a:	e0b8      	b.n	80052fe <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_I2SEx_TransmitReceive_DMA+0x48>
 8005198:	2302      	movs	r3, #2
 800519a:	e0b0      	b.n	80052fe <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  hi2s->pTxBuffPtr = (const uint16_t *)pTxData;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->pRxBuffPtr = pRxData;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	635a      	str	r2, [r3, #52]	; 0x34

  hi2s->TxXferSize  = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	887a      	ldrh	r2, [r7, #2]
 80051b4:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferSize  = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	887a      	ldrh	r2, [r7, #2]
 80051c6:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State       = HAL_I2S_STATE_BUSY_TX_RX;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2205      	movs	r2, #5
 80051d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80051e4:	609a      	str	r2, [r3, #8]

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_DMATxRxHalfCplt;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ea:	4a47      	ldr	r2, [pc, #284]	; (8005308 <HAL_I2SEx_TransmitReceive_DMA+0x1b4>)
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_DMATxRxCplt;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f2:	4a46      	ldr	r2, [pc, #280]	; (800530c <HAL_I2SEx_TransmitReceive_DMA+0x1b8>)
 80051f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	4a45      	ldr	r2, [pc, #276]	; (8005310 <HAL_I2SEx_TransmitReceive_DMA+0x1bc>)
 80051fc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	4619      	mov	r1, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3320      	adds	r3, #32
 800520e:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005214:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005216:	f7fd ff21 	bl	800305c <HAL_DMA_Start_IT>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d011      	beq.n	8005244 <HAL_I2SEx_TransmitReceive_DMA+0xf0>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005224:	f043 0208 	orr.w	r2, r3, #8
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
 8005242:	e05c      	b.n	80052fe <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d107      	bne.n	8005262 <HAL_I2SEx_TransmitReceive_DMA+0x10e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005260:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3330      	adds	r3, #48	; 0x30
 800526c:	4619      	mov	r1, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005272:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005278:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 800527a:	f7fd feef 	bl	800305c <HAL_DMA_Start_IT>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d011      	beq.n	80052a8 <HAL_I2SEx_TransmitReceive_DMA+0x154>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005288:	f043 0208 	orr.w	r2, r3, #8
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	e02a      	b.n	80052fe <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <HAL_I2SEx_TransmitReceive_DMA+0x172>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c4:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d107      	bne.n	80052e4 <HAL_I2SEx_TransmitReceive_DMA+0x190>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f2:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	08005381 	.word	0x08005381
 800530c:	08005329 	.word	0x08005329
 8005310:	0800539d 	.word	0x0800539d

08005314 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <I2SEx_DMATxRxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxCplt(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d119      	bne.n	8005372 <I2SEx_DMATxRxCplt+0x4a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800534c:	609a      	str	r2, [r3, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005362:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	875a      	strh	r2, [r3, #58]	; 0x3a

    /* Updated HAL State */
    hi2s->State = HAL_I2S_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7fc fb30 	bl	80019d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2SEx_DMATxRxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7fc faf4 	bl	800197c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80053b8:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	f043 0208 	orr.w	r2, r3, #8
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff ff9a 	bl	8005314 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80053f0:	4b29      	ldr	r3, [pc, #164]	; (8005498 <HAL_PWREx_ConfigSupply+0xb0>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d00a      	beq.n	8005412 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053fc:	4b26      	ldr	r3, [pc, #152]	; (8005498 <HAL_PWREx_ConfigSupply+0xb0>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d001      	beq.n	800540e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e040      	b.n	8005490 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	e03e      	b.n	8005490 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005412:	4b21      	ldr	r3, [pc, #132]	; (8005498 <HAL_PWREx_ConfigSupply+0xb0>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800541a:	491f      	ldr	r1, [pc, #124]	; (8005498 <HAL_PWREx_ConfigSupply+0xb0>)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4313      	orrs	r3, r2
 8005420:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005422:	f7fd f94f 	bl	80026c4 <HAL_GetTick>
 8005426:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005428:	e009      	b.n	800543e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800542a:	f7fd f94b 	bl	80026c4 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005438:	d901      	bls.n	800543e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e028      	b.n	8005490 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800543e:	4b16      	ldr	r3, [pc, #88]	; (8005498 <HAL_PWREx_ConfigSupply+0xb0>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544a:	d1ee      	bne.n	800542a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b1e      	cmp	r3, #30
 8005450:	d008      	beq.n	8005464 <HAL_PWREx_ConfigSupply+0x7c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b2e      	cmp	r3, #46	; 0x2e
 8005456:	d005      	beq.n	8005464 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b1d      	cmp	r3, #29
 800545c:	d002      	beq.n	8005464 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b2d      	cmp	r3, #45	; 0x2d
 8005462:	d114      	bne.n	800548e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005464:	f7fd f92e 	bl	80026c4 <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800546a:	e009      	b.n	8005480 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800546c:	f7fd f92a 	bl	80026c4 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800547a:	d901      	bls.n	8005480 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e007      	b.n	8005490 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <HAL_PWREx_ConfigSupply+0xb0>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548c:	d1ee      	bne.n	800546c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024800 	.word	0x58024800

0800549c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d102      	bne.n	80054b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f000 bc48 	b.w	8005d40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8088 	beq.w	80055ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054be:	4b99      	ldr	r3, [pc, #612]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054c8:	4b96      	ldr	r3, [pc, #600]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d007      	beq.n	80054e4 <HAL_RCC_OscConfig+0x48>
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	2b18      	cmp	r3, #24
 80054d8:	d111      	bne.n	80054fe <HAL_RCC_OscConfig+0x62>
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d10c      	bne.n	80054fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e4:	4b8f      	ldr	r3, [pc, #572]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d06d      	beq.n	80055cc <HAL_RCC_OscConfig+0x130>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d169      	bne.n	80055cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f000 bc21 	b.w	8005d40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005506:	d106      	bne.n	8005516 <HAL_RCC_OscConfig+0x7a>
 8005508:	4b86      	ldr	r3, [pc, #536]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a85      	ldr	r2, [pc, #532]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800550e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e02e      	b.n	8005574 <HAL_RCC_OscConfig+0xd8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10c      	bne.n	8005538 <HAL_RCC_OscConfig+0x9c>
 800551e:	4b81      	ldr	r3, [pc, #516]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a80      	ldr	r2, [pc, #512]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4b7e      	ldr	r3, [pc, #504]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a7d      	ldr	r2, [pc, #500]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e01d      	b.n	8005574 <HAL_RCC_OscConfig+0xd8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005540:	d10c      	bne.n	800555c <HAL_RCC_OscConfig+0xc0>
 8005542:	4b78      	ldr	r3, [pc, #480]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a77      	ldr	r2, [pc, #476]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	4b75      	ldr	r3, [pc, #468]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a74      	ldr	r2, [pc, #464]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e00b      	b.n	8005574 <HAL_RCC_OscConfig+0xd8>
 800555c:	4b71      	ldr	r3, [pc, #452]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a70      	ldr	r2, [pc, #448]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b6e      	ldr	r3, [pc, #440]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a6d      	ldr	r2, [pc, #436]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800556e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d013      	beq.n	80055a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fd f8a2 	bl	80026c4 <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005584:	f7fd f89e 	bl	80026c4 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	; 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e3d4      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005596:	4b63      	ldr	r3, [pc, #396]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0xe8>
 80055a2:	e014      	b.n	80055ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fd f88e 	bl	80026c4 <HAL_GetTick>
 80055a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ac:	f7fd f88a 	bl	80026c4 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	; 0x64
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e3c0      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055be:	4b59      	ldr	r3, [pc, #356]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x110>
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80ca 	beq.w	8005770 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055dc:	4b51      	ldr	r3, [pc, #324]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055e6:	4b4f      	ldr	r3, [pc, #316]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_RCC_OscConfig+0x166>
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	2b18      	cmp	r3, #24
 80055f6:	d156      	bne.n	80056a6 <HAL_RCC_OscConfig+0x20a>
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d151      	bne.n	80056a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005602:	4b48      	ldr	r3, [pc, #288]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_RCC_OscConfig+0x17e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e392      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800561a:	4b42      	ldr	r3, [pc, #264]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 0219 	bic.w	r2, r3, #25
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	493f      	ldr	r1, [pc, #252]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fd f84a 	bl	80026c4 <HAL_GetTick>
 8005630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005634:	f7fd f846 	bl	80026c4 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e37c      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005646:	4b37      	ldr	r3, [pc, #220]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005652:	f7fd f843 	bl	80026dc <HAL_GetREVID>
 8005656:	4603      	mov	r3, r0
 8005658:	f241 0203 	movw	r2, #4099	; 0x1003
 800565c:	4293      	cmp	r3, r2
 800565e:	d817      	bhi.n	8005690 <HAL_RCC_OscConfig+0x1f4>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d108      	bne.n	800567a <HAL_RCC_OscConfig+0x1de>
 8005668:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005670:	4a2c      	ldr	r2, [pc, #176]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005676:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005678:	e07a      	b.n	8005770 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	4b2a      	ldr	r3, [pc, #168]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	031b      	lsls	r3, r3, #12
 8005688:	4926      	ldr	r1, [pc, #152]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800568a:	4313      	orrs	r3, r2
 800568c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800568e:	e06f      	b.n	8005770 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005690:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	061b      	lsls	r3, r3, #24
 800569e:	4921      	ldr	r1, [pc, #132]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a4:	e064      	b.n	8005770 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d047      	beq.n	800573e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 0219 	bic.w	r2, r3, #25
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	491a      	ldr	r1, [pc, #104]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fd f800 	bl	80026c4 <HAL_GetTick>
 80056c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c8:	f7fc fffc 	bl	80026c4 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e332      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e6:	f7fc fff9 	bl	80026dc <HAL_GetREVID>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d819      	bhi.n	8005728 <HAL_RCC_OscConfig+0x28c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d108      	bne.n	800570e <HAL_RCC_OscConfig+0x272>
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005704:	4a07      	ldr	r2, [pc, #28]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800570a:	6053      	str	r3, [r2, #4]
 800570c:	e030      	b.n	8005770 <HAL_RCC_OscConfig+0x2d4>
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	031b      	lsls	r3, r3, #12
 800571c:	4901      	ldr	r1, [pc, #4]	; (8005724 <HAL_RCC_OscConfig+0x288>)
 800571e:	4313      	orrs	r3, r2
 8005720:	604b      	str	r3, [r1, #4]
 8005722:	e025      	b.n	8005770 <HAL_RCC_OscConfig+0x2d4>
 8005724:	58024400 	.word	0x58024400
 8005728:	4b9a      	ldr	r3, [pc, #616]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	4997      	ldr	r1, [pc, #604]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	604b      	str	r3, [r1, #4]
 800573c:	e018      	b.n	8005770 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800573e:	4b95      	ldr	r3, [pc, #596]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a94      	ldr	r2, [pc, #592]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574a:	f7fc ffbb 	bl	80026c4 <HAL_GetTick>
 800574e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005752:	f7fc ffb7 	bl	80026c4 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e2ed      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005764:	4b8b      	ldr	r3, [pc, #556]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 80a9 	beq.w	80058d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800577e:	4b85      	ldr	r3, [pc, #532]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005786:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005788:	4b82      	ldr	r3, [pc, #520]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d007      	beq.n	80057a4 <HAL_RCC_OscConfig+0x308>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b18      	cmp	r3, #24
 8005798:	d13a      	bne.n	8005810 <HAL_RCC_OscConfig+0x374>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d135      	bne.n	8005810 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057a4:	4b7b      	ldr	r3, [pc, #492]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_OscConfig+0x320>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	2b80      	cmp	r3, #128	; 0x80
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e2c1      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057bc:	f7fc ff8e 	bl	80026dc <HAL_GetREVID>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d817      	bhi.n	80057fa <HAL_RCC_OscConfig+0x35e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d108      	bne.n	80057e4 <HAL_RCC_OscConfig+0x348>
 80057d2:	4b70      	ldr	r3, [pc, #448]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80057da:	4a6e      	ldr	r2, [pc, #440]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80057dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057e2:	e075      	b.n	80058d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057e4:	4b6b      	ldr	r3, [pc, #428]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	069b      	lsls	r3, r3, #26
 80057f2:	4968      	ldr	r1, [pc, #416]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057f8:	e06a      	b.n	80058d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057fa:	4b66      	ldr	r3, [pc, #408]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	061b      	lsls	r3, r3, #24
 8005808:	4962      	ldr	r1, [pc, #392]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800580a:	4313      	orrs	r3, r2
 800580c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800580e:	e05f      	b.n	80058d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d042      	beq.n	800589e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005818:	4b5e      	ldr	r3, [pc, #376]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800581e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fc ff4e 	bl	80026c4 <HAL_GetTick>
 8005828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800582c:	f7fc ff4a 	bl	80026c4 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e280      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800583e:	4b55      	ldr	r3, [pc, #340]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800584a:	f7fc ff47 	bl	80026dc <HAL_GetREVID>
 800584e:	4603      	mov	r3, r0
 8005850:	f241 0203 	movw	r2, #4099	; 0x1003
 8005854:	4293      	cmp	r3, r2
 8005856:	d817      	bhi.n	8005888 <HAL_RCC_OscConfig+0x3ec>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	2b20      	cmp	r3, #32
 800585e:	d108      	bne.n	8005872 <HAL_RCC_OscConfig+0x3d6>
 8005860:	4b4c      	ldr	r3, [pc, #304]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005868:	4a4a      	ldr	r2, [pc, #296]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800586a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800586e:	6053      	str	r3, [r2, #4]
 8005870:	e02e      	b.n	80058d0 <HAL_RCC_OscConfig+0x434>
 8005872:	4b48      	ldr	r3, [pc, #288]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	069b      	lsls	r3, r3, #26
 8005880:	4944      	ldr	r1, [pc, #272]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005882:	4313      	orrs	r3, r2
 8005884:	604b      	str	r3, [r1, #4]
 8005886:	e023      	b.n	80058d0 <HAL_RCC_OscConfig+0x434>
 8005888:	4b42      	ldr	r3, [pc, #264]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	493f      	ldr	r1, [pc, #252]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005898:	4313      	orrs	r3, r2
 800589a:	60cb      	str	r3, [r1, #12]
 800589c:	e018      	b.n	80058d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800589e:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a3c      	ldr	r2, [pc, #240]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80058a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fc ff0b 	bl	80026c4 <HAL_GetTick>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058b2:	f7fc ff07 	bl	80026c4 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e23d      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058c4:	4b33      	ldr	r3, [pc, #204]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d036      	beq.n	800594a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d019      	beq.n	8005918 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e4:	4b2b      	ldr	r3, [pc, #172]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80058e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e8:	4a2a      	ldr	r2, [pc, #168]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fc fee8 	bl	80026c4 <HAL_GetTick>
 80058f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058f8:	f7fc fee4 	bl	80026c4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e21a      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800590a:	4b22      	ldr	r3, [pc, #136]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800590c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x45c>
 8005916:	e018      	b.n	800594a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800591a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 800591e:	f023 0301 	bic.w	r3, r3, #1
 8005922:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7fc fece 	bl	80026c4 <HAL_GetTick>
 8005928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800592c:	f7fc feca 	bl	80026c4 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e200      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800593e:	4b15      	ldr	r3, [pc, #84]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d039      	beq.n	80059ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01c      	beq.n	8005998 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800595e:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005964:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005968:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800596a:	f7fc feab 	bl	80026c4 <HAL_GetTick>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005972:	f7fc fea7 	bl	80026c4 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e1dd      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005984:	4b03      	ldr	r3, [pc, #12]	; (8005994 <HAL_RCC_OscConfig+0x4f8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x4d6>
 8005990:	e01b      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
 8005992:	bf00      	nop
 8005994:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005998:	4b9b      	ldr	r3, [pc, #620]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a9a      	ldr	r2, [pc, #616]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 800599e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059a4:	f7fc fe8e 	bl	80026c4 <HAL_GetTick>
 80059a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ac:	f7fc fe8a 	bl	80026c4 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e1c0      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059be:	4b92      	ldr	r3, [pc, #584]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8081 	beq.w	8005ada <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059d8:	4b8c      	ldr	r3, [pc, #560]	; (8005c0c <HAL_RCC_OscConfig+0x770>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a8b      	ldr	r2, [pc, #556]	; (8005c0c <HAL_RCC_OscConfig+0x770>)
 80059de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059e4:	f7fc fe6e 	bl	80026c4 <HAL_GetTick>
 80059e8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ec:	f7fc fe6a 	bl	80026c4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e1a0      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059fe:	4b83      	ldr	r3, [pc, #524]	; (8005c0c <HAL_RCC_OscConfig+0x770>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d106      	bne.n	8005a20 <HAL_RCC_OscConfig+0x584>
 8005a12:	4b7d      	ldr	r3, [pc, #500]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	4a7c      	ldr	r2, [pc, #496]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1e:	e02d      	b.n	8005a7c <HAL_RCC_OscConfig+0x5e0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10c      	bne.n	8005a42 <HAL_RCC_OscConfig+0x5a6>
 8005a28:	4b77      	ldr	r3, [pc, #476]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	4a76      	ldr	r2, [pc, #472]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	6713      	str	r3, [r2, #112]	; 0x70
 8005a34:	4b74      	ldr	r3, [pc, #464]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	4a73      	ldr	r2, [pc, #460]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a3a:	f023 0304 	bic.w	r3, r3, #4
 8005a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a40:	e01c      	b.n	8005a7c <HAL_RCC_OscConfig+0x5e0>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b05      	cmp	r3, #5
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x5c8>
 8005a4a:	4b6f      	ldr	r3, [pc, #444]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a6e      	ldr	r2, [pc, #440]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
 8005a56:	4b6c      	ldr	r3, [pc, #432]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	4a6b      	ldr	r2, [pc, #428]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a5c:	f043 0301 	orr.w	r3, r3, #1
 8005a60:	6713      	str	r3, [r2, #112]	; 0x70
 8005a62:	e00b      	b.n	8005a7c <HAL_RCC_OscConfig+0x5e0>
 8005a64:	4b68      	ldr	r3, [pc, #416]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	4a67      	ldr	r2, [pc, #412]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a70:	4b65      	ldr	r3, [pc, #404]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	4a64      	ldr	r2, [pc, #400]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005a76:	f023 0304 	bic.w	r3, r3, #4
 8005a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a84:	f7fc fe1e 	bl	80026c4 <HAL_GetTick>
 8005a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8c:	f7fc fe1a 	bl	80026c4 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e14e      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005aa2:	4b59      	ldr	r3, [pc, #356]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0ee      	beq.n	8005a8c <HAL_RCC_OscConfig+0x5f0>
 8005aae:	e014      	b.n	8005ada <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab0:	f7fc fe08 	bl	80026c4 <HAL_GetTick>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab8:	f7fc fe04 	bl	80026c4 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e138      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ace:	4b4e      	ldr	r3, [pc, #312]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1ee      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 812d 	beq.w	8005d3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ae4:	4b48      	ldr	r3, [pc, #288]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aec:	2b18      	cmp	r3, #24
 8005aee:	f000 80bd 	beq.w	8005c6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	f040 809e 	bne.w	8005c38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005afc:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a41      	ldr	r2, [pc, #260]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fc fddc 	bl	80026c4 <HAL_GetTick>
 8005b0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fc fdd8 	bl	80026c4 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e10e      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b22:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b2e:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b32:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <HAL_RCC_OscConfig+0x774>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b3e:	0112      	lsls	r2, r2, #4
 8005b40:	430a      	orrs	r2, r1
 8005b42:	4931      	ldr	r1, [pc, #196]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	628b      	str	r3, [r1, #40]	; 0x28
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b56:	3b01      	subs	r3, #1
 8005b58:	025b      	lsls	r3, r3, #9
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	3b01      	subs	r3, #1
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b70:	3b01      	subs	r3, #1
 8005b72:	061b      	lsls	r3, r3, #24
 8005b74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b78:	4923      	ldr	r1, [pc, #140]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b7e:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b8e:	4b21      	ldr	r3, [pc, #132]	; (8005c14 <HAL_RCC_OscConfig+0x778>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b96:	00d2      	lsls	r2, r2, #3
 8005b98:	491b      	ldr	r1, [pc, #108]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	f023 020c 	bic.w	r2, r3, #12
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	4917      	ldr	r1, [pc, #92]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bb0:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	f023 0202 	bic.w	r2, r3, #2
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	4912      	ldr	r1, [pc, #72]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	4a10      	ldr	r2, [pc, #64]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	4a0d      	ldr	r2, [pc, #52]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005be4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	4a07      	ldr	r2, [pc, #28]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf2:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <HAL_RCC_OscConfig+0x76c>)
 8005bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfe:	f7fc fd61 	bl	80026c4 <HAL_GetTick>
 8005c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c04:	e011      	b.n	8005c2a <HAL_RCC_OscConfig+0x78e>
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	58024800 	.word	0x58024800
 8005c10:	fffffc0c 	.word	0xfffffc0c
 8005c14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c18:	f7fc fd54 	bl	80026c4 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e08a      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c2a:	4b47      	ldr	r3, [pc, #284]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x77c>
 8005c36:	e082      	b.n	8005d3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c38:	4b43      	ldr	r3, [pc, #268]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a42      	ldr	r2, [pc, #264]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fc fd3e 	bl	80026c4 <HAL_GetTick>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c4c:	f7fc fd3a 	bl	80026c4 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e070      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x7b0>
 8005c6a:	e068      	b.n	8005d3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c6c:	4b36      	ldr	r3, [pc, #216]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c72:	4b35      	ldr	r3, [pc, #212]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d031      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f003 0203 	and.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d12a      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d122      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d11a      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	0a5b      	lsrs	r3, r3, #9
 8005cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d111      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	0c1b      	lsrs	r3, r3, #16
 8005cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d108      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	0e1b      	lsrs	r3, r3, #24
 8005cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e02b      	b.n	8005d40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005ce8:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	08db      	lsrs	r3, r3, #3
 8005cee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cf2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d01f      	beq.n	8005d3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	4a11      	ldr	r2, [pc, #68]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d0a:	f7fc fcdb 	bl	80026c4 <HAL_GetTick>
 8005d0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005d10:	bf00      	nop
 8005d12:	f7fc fcd7 	bl	80026c4 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d0f9      	beq.n	8005d12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d22:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <HAL_RCC_OscConfig+0x8b0>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d2a:	00d2      	lsls	r2, r2, #3
 8005d2c:	4906      	ldr	r1, [pc, #24]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <HAL_RCC_OscConfig+0x8ac>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3730      	adds	r7, #48	; 0x30
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	ffff0007 	.word	0xffff0007

08005d50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e19c      	b.n	800609e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d64:	4b8a      	ldr	r3, [pc, #552]	; (8005f90 <HAL_RCC_ClockConfig+0x240>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d910      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d72:	4b87      	ldr	r3, [pc, #540]	; (8005f90 <HAL_RCC_ClockConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 020f 	bic.w	r2, r3, #15
 8005d7a:	4985      	ldr	r1, [pc, #532]	; (8005f90 <HAL_RCC_ClockConfig+0x240>)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	4b83      	ldr	r3, [pc, #524]	; (8005f90 <HAL_RCC_ClockConfig+0x240>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d001      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e184      	b.n	800609e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d010      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	4b7b      	ldr	r3, [pc, #492]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d908      	bls.n	8005dc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005db0:	4b78      	ldr	r3, [pc, #480]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	4975      	ldr	r1, [pc, #468]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	4b70      	ldr	r3, [pc, #448]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d908      	bls.n	8005df0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dde:	4b6d      	ldr	r3, [pc, #436]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	496a      	ldr	r1, [pc, #424]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	4b64      	ldr	r3, [pc, #400]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d908      	bls.n	8005e1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e0c:	4b61      	ldr	r3, [pc, #388]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	495e      	ldr	r1, [pc, #376]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	4b59      	ldr	r3, [pc, #356]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d908      	bls.n	8005e4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e3a:	4b56      	ldr	r3, [pc, #344]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4953      	ldr	r1, [pc, #332]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	4b4d      	ldr	r3, [pc, #308]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d908      	bls.n	8005e7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e68:	4b4a      	ldr	r3, [pc, #296]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f023 020f 	bic.w	r2, r3, #15
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4947      	ldr	r1, [pc, #284]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d055      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e86:	4b43      	ldr	r3, [pc, #268]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	4940      	ldr	r1, [pc, #256]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ea0:	4b3c      	ldr	r3, [pc, #240]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d121      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0f6      	b.n	800609e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d107      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eb8:	4b36      	ldr	r3, [pc, #216]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d115      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0ea      	b.n	800609e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ed0:	4b30      	ldr	r3, [pc, #192]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0de      	b.n	800609e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee0:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0d6      	b.n	800609e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f023 0207 	bic.w	r2, r3, #7
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4925      	ldr	r1, [pc, #148]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f02:	f7fc fbdf 	bl	80026c4 <HAL_GetTick>
 8005f06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f08:	e00a      	b.n	8005f20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f0a:	f7fc fbdb 	bl	80026c4 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e0be      	b.n	800609e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f20:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d1eb      	bne.n	8005f0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d010      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d208      	bcs.n	8005f60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f023 020f 	bic.w	r2, r3, #15
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	490e      	ldr	r1, [pc, #56]	; (8005f94 <HAL_RCC_ClockConfig+0x244>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCC_ClockConfig+0x240>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d214      	bcs.n	8005f98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6e:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <HAL_RCC_ClockConfig+0x240>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 020f 	bic.w	r2, r3, #15
 8005f76:	4906      	ldr	r1, [pc, #24]	; (8005f90 <HAL_RCC_ClockConfig+0x240>)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7e:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <HAL_RCC_ClockConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d005      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e086      	b.n	800609e <HAL_RCC_ClockConfig+0x34e>
 8005f90:	52002000 	.word	0x52002000
 8005f94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d010      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	4b3f      	ldr	r3, [pc, #252]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d208      	bcs.n	8005fc6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fb4:	4b3c      	ldr	r3, [pc, #240]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	4939      	ldr	r1, [pc, #228]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d010      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	4b34      	ldr	r3, [pc, #208]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d208      	bcs.n	8005ff4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fe2:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	492e      	ldr	r1, [pc, #184]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d010      	beq.n	8006022 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	4b28      	ldr	r3, [pc, #160]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800600c:	429a      	cmp	r2, r3
 800600e:	d208      	bcs.n	8006022 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006010:	4b25      	ldr	r3, [pc, #148]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	4922      	ldr	r1, [pc, #136]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 800601e:	4313      	orrs	r3, r2
 8006020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d010      	beq.n	8006050 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69da      	ldr	r2, [r3, #28]
 8006032:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800603a:	429a      	cmp	r2, r3
 800603c:	d208      	bcs.n	8006050 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800603e:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	4917      	ldr	r1, [pc, #92]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 800604c:	4313      	orrs	r3, r2
 800604e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006050:	f000 f834 	bl	80060bc <HAL_RCC_GetSysClockFreq>
 8006054:	4602      	mov	r2, r0
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	4912      	ldr	r1, [pc, #72]	; (80060ac <HAL_RCC_ClockConfig+0x35c>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
 800606c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <HAL_RCC_ClockConfig+0x358>)
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <HAL_RCC_ClockConfig+0x35c>)
 8006078:	5cd3      	ldrb	r3, [r2, r3]
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
 8006084:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <HAL_RCC_ClockConfig+0x360>)
 8006086:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006088:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <HAL_RCC_ClockConfig+0x364>)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800608e:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <HAL_RCC_ClockConfig+0x368>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7fc f918 	bl	80022c8 <HAL_InitTick>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	58024400 	.word	0x58024400
 80060ac:	08014254 	.word	0x08014254
 80060b0:	24000004 	.word	0x24000004
 80060b4:	24000000 	.word	0x24000000
 80060b8:	24000018 	.word	0x24000018

080060bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	b089      	sub	sp, #36	; 0x24
 80060c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060c2:	4bb3      	ldr	r3, [pc, #716]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ca:	2b18      	cmp	r3, #24
 80060cc:	f200 8155 	bhi.w	800637a <HAL_RCC_GetSysClockFreq+0x2be>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	0800613d 	.word	0x0800613d
 80060dc:	0800637b 	.word	0x0800637b
 80060e0:	0800637b 	.word	0x0800637b
 80060e4:	0800637b 	.word	0x0800637b
 80060e8:	0800637b 	.word	0x0800637b
 80060ec:	0800637b 	.word	0x0800637b
 80060f0:	0800637b 	.word	0x0800637b
 80060f4:	0800637b 	.word	0x0800637b
 80060f8:	08006163 	.word	0x08006163
 80060fc:	0800637b 	.word	0x0800637b
 8006100:	0800637b 	.word	0x0800637b
 8006104:	0800637b 	.word	0x0800637b
 8006108:	0800637b 	.word	0x0800637b
 800610c:	0800637b 	.word	0x0800637b
 8006110:	0800637b 	.word	0x0800637b
 8006114:	0800637b 	.word	0x0800637b
 8006118:	08006169 	.word	0x08006169
 800611c:	0800637b 	.word	0x0800637b
 8006120:	0800637b 	.word	0x0800637b
 8006124:	0800637b 	.word	0x0800637b
 8006128:	0800637b 	.word	0x0800637b
 800612c:	0800637b 	.word	0x0800637b
 8006130:	0800637b 	.word	0x0800637b
 8006134:	0800637b 	.word	0x0800637b
 8006138:	0800616f 	.word	0x0800616f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800613c:	4b94      	ldr	r3, [pc, #592]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006148:	4b91      	ldr	r3, [pc, #580]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	08db      	lsrs	r3, r3, #3
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	4a90      	ldr	r2, [pc, #576]	; (8006394 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006154:	fa22 f303 	lsr.w	r3, r2, r3
 8006158:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800615a:	e111      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800615c:	4b8d      	ldr	r3, [pc, #564]	; (8006394 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800615e:	61bb      	str	r3, [r7, #24]
      break;
 8006160:	e10e      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006162:	4b8d      	ldr	r3, [pc, #564]	; (8006398 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006164:	61bb      	str	r3, [r7, #24]
      break;
 8006166:	e10b      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006168:	4b8c      	ldr	r3, [pc, #560]	; (800639c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800616a:	61bb      	str	r3, [r7, #24]
      break;
 800616c:	e108      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800616e:	4b88      	ldr	r3, [pc, #544]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006178:	4b85      	ldr	r3, [pc, #532]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	091b      	lsrs	r3, r3, #4
 800617e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006182:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006184:	4b82      	ldr	r3, [pc, #520]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800618e:	4b80      	ldr	r3, [pc, #512]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	08db      	lsrs	r3, r3, #3
 8006194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80e1 	beq.w	8006374 <HAL_RCC_GetSysClockFreq+0x2b8>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	f000 8083 	beq.w	80062c0 <HAL_RCC_GetSysClockFreq+0x204>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	f200 80a1 	bhi.w	8006304 <HAL_RCC_GetSysClockFreq+0x248>
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_RCC_GetSysClockFreq+0x114>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d056      	beq.n	800627c <HAL_RCC_GetSysClockFreq+0x1c0>
 80061ce:	e099      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061d0:	4b6f      	ldr	r3, [pc, #444]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d02d      	beq.n	8006238 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061dc:	4b6c      	ldr	r3, [pc, #432]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	08db      	lsrs	r3, r3, #3
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	4a6b      	ldr	r2, [pc, #428]	; (8006394 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	ee07 3a90 	vmov	s15, r3
 80061f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006206:	4b62      	ldr	r3, [pc, #392]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006216:	ed97 6a02 	vldr	s12, [r7, #8]
 800621a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80063a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800621e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006236:	e087      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	eddf 6a58 	vldr	s13, [pc, #352]	; 80063a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624a:	4b51      	ldr	r3, [pc, #324]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	ed97 6a02 	vldr	s12, [r7, #8]
 800625e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80063a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800627a:	e065      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006286:	eddf 6a48 	vldr	s13, [pc, #288]	; 80063a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800628a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628e:	4b40      	ldr	r3, [pc, #256]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629e:	ed97 6a02 	vldr	s12, [r7, #8]
 80062a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80063a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062be:	e043      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80063ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80062ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d2:	4b2f      	ldr	r3, [pc, #188]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80063a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006302:	e021      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80063a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006316:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006326:	ed97 6a02 	vldr	s12, [r7, #8]
 800632a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80063a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800632e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006342:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006346:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006348:	4b11      	ldr	r3, [pc, #68]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	0a5b      	lsrs	r3, r3, #9
 800634e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006352:	3301      	adds	r3, #1
 8006354:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006360:	edd7 6a07 	vldr	s13, [r7, #28]
 8006364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800636c:	ee17 3a90 	vmov	r3, s15
 8006370:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006372:	e005      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	61bb      	str	r3, [r7, #24]
      break;
 8006378:	e002      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800637c:	61bb      	str	r3, [r7, #24]
      break;
 800637e:	bf00      	nop
  }

  return sysclockfreq;
 8006380:	69bb      	ldr	r3, [r7, #24]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3724      	adds	r7, #36	; 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	58024400 	.word	0x58024400
 8006394:	03d09000 	.word	0x03d09000
 8006398:	003d0900 	.word	0x003d0900
 800639c:	01770000 	.word	0x01770000
 80063a0:	46000000 	.word	0x46000000
 80063a4:	4c742400 	.word	0x4c742400
 80063a8:	4a742400 	.word	0x4a742400
 80063ac:	4bbb8000 	.word	0x4bbb8000

080063b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80063b6:	f7ff fe81 	bl	80060bc <HAL_RCC_GetSysClockFreq>
 80063ba:	4602      	mov	r2, r0
 80063bc:	4b10      	ldr	r3, [pc, #64]	; (8006400 <HAL_RCC_GetHCLKFreq+0x50>)
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	490f      	ldr	r1, [pc, #60]	; (8006404 <HAL_RCC_GetHCLKFreq+0x54>)
 80063c8:	5ccb      	ldrb	r3, [r1, r3]
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063d4:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <HAL_RCC_GetHCLKFreq+0x50>)
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	4a09      	ldr	r2, [pc, #36]	; (8006404 <HAL_RCC_GetHCLKFreq+0x54>)
 80063de:	5cd3      	ldrb	r3, [r2, r3]
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ea:	4a07      	ldr	r2, [pc, #28]	; (8006408 <HAL_RCC_GetHCLKFreq+0x58>)
 80063ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063ee:	4a07      	ldr	r2, [pc, #28]	; (800640c <HAL_RCC_GetHCLKFreq+0x5c>)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80063f4:	4b04      	ldr	r3, [pc, #16]	; (8006408 <HAL_RCC_GetHCLKFreq+0x58>)
 80063f6:	681b      	ldr	r3, [r3, #0]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	58024400 	.word	0x58024400
 8006404:	08014254 	.word	0x08014254
 8006408:	24000004 	.word	0x24000004
 800640c:	24000000 	.word	0x24000000

08006410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006414:	f7ff ffcc 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 8006418:	4602      	mov	r2, r0
 800641a:	4b06      	ldr	r3, [pc, #24]	; (8006434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	091b      	lsrs	r3, r3, #4
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	4904      	ldr	r1, [pc, #16]	; (8006438 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006426:	5ccb      	ldrb	r3, [r1, r3]
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006430:	4618      	mov	r0, r3
 8006432:	bd80      	pop	{r7, pc}
 8006434:	58024400 	.word	0x58024400
 8006438:	08014254 	.word	0x08014254

0800643c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006440:	f7ff ffb6 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 8006444:	4602      	mov	r2, r0
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	4904      	ldr	r1, [pc, #16]	; (8006464 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006452:	5ccb      	ldrb	r3, [r1, r3]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}
 8006460:	58024400 	.word	0x58024400
 8006464:	08014254 	.word	0x08014254

08006468 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	223f      	movs	r2, #63	; 0x3f
 8006476:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006478:	4b1a      	ldr	r3, [pc, #104]	; (80064e4 <HAL_RCC_GetClockConfig+0x7c>)
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0207 	and.w	r2, r3, #7
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006484:	4b17      	ldr	r3, [pc, #92]	; (80064e4 <HAL_RCC_GetClockConfig+0x7c>)
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006490:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <HAL_RCC_GetClockConfig+0x7c>)
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800649c:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <HAL_RCC_GetClockConfig+0x7c>)
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80064a8:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <HAL_RCC_GetClockConfig+0x7c>)
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <HAL_RCC_GetClockConfig+0x7c>)
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80064c0:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <HAL_RCC_GetClockConfig+0x7c>)
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <HAL_RCC_GetClockConfig+0x80>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 020f 	and.w	r2, r3, #15
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	601a      	str	r2, [r3, #0]
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	58024400 	.word	0x58024400
 80064e8:	52002000 	.word	0x52002000

080064ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b0ca      	sub	sp, #296	; 0x128
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006510:	2500      	movs	r5, #0
 8006512:	ea54 0305 	orrs.w	r3, r4, r5
 8006516:	d049      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800651e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006522:	d02f      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006524:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006528:	d828      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800652a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800652e:	d01a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006534:	d822      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800653a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800653e:	d007      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006540:	e01c      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006542:	4bb8      	ldr	r3, [pc, #736]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	4ab7      	ldr	r2, [pc, #732]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800654c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800654e:	e01a      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006554:	3308      	adds	r3, #8
 8006556:	2102      	movs	r1, #2
 8006558:	4618      	mov	r0, r3
 800655a:	f002 fb61 	bl	8008c20 <RCCEx_PLL2_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006564:	e00f      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656a:	3328      	adds	r3, #40	; 0x28
 800656c:	2102      	movs	r1, #2
 800656e:	4618      	mov	r0, r3
 8006570:	f002 fc08 	bl	8008d84 <RCCEx_PLL3_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800657a:	e004      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800658e:	4ba5      	ldr	r3, [pc, #660]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006592:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659c:	4aa1      	ldr	r2, [pc, #644]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800659e:	430b      	orrs	r3, r1
 80065a0:	6513      	str	r3, [r2, #80]	; 0x50
 80065a2:	e003      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80065b8:	f04f 0900 	mov.w	r9, #0
 80065bc:	ea58 0309 	orrs.w	r3, r8, r9
 80065c0:	d047      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d82a      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065e9 	.word	0x080065e9
 80065d8:	080065f7 	.word	0x080065f7
 80065dc:	0800660d 	.word	0x0800660d
 80065e0:	0800662b 	.word	0x0800662b
 80065e4:	0800662b 	.word	0x0800662b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e8:	4b8e      	ldr	r3, [pc, #568]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4a8d      	ldr	r2, [pc, #564]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065f4:	e01a      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	3308      	adds	r3, #8
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f002 fb0e 	bl	8008c20 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800660a:	e00f      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006610:	3328      	adds	r3, #40	; 0x28
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f002 fbb5 	bl	8008d84 <RCCEx_PLL3_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006620:	e004      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006628:	e000      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800662a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006634:	4b7b      	ldr	r3, [pc, #492]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	f023 0107 	bic.w	r1, r3, #7
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	4a78      	ldr	r2, [pc, #480]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006644:	430b      	orrs	r3, r1
 8006646:	6513      	str	r3, [r2, #80]	; 0x50
 8006648:	e003      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800664e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800665e:	f04f 0b00 	mov.w	fp, #0
 8006662:	ea5a 030b 	orrs.w	r3, sl, fp
 8006666:	d04c      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006672:	d030      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006678:	d829      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800667a:	2bc0      	cmp	r3, #192	; 0xc0
 800667c:	d02d      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800667e:	2bc0      	cmp	r3, #192	; 0xc0
 8006680:	d825      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006682:	2b80      	cmp	r3, #128	; 0x80
 8006684:	d018      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006686:	2b80      	cmp	r3, #128	; 0x80
 8006688:	d821      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d007      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006692:	e01c      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006694:	4b63      	ldr	r3, [pc, #396]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	4a62      	ldr	r2, [pc, #392]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800669a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066a0:	e01c      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a6:	3308      	adds	r3, #8
 80066a8:	2100      	movs	r1, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f002 fab8 	bl	8008c20 <RCCEx_PLL2_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066b6:	e011      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066bc:	3328      	adds	r3, #40	; 0x28
 80066be:	2100      	movs	r1, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f002 fb5f 	bl	8008d84 <RCCEx_PLL3_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066cc:	e006      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066d4:	e002      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80066d6:	bf00      	nop
 80066d8:	e000      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80066da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80066e4:	4b4f      	ldr	r3, [pc, #316]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	4a4c      	ldr	r2, [pc, #304]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6513      	str	r3, [r2, #80]	; 0x50
 80066f8:	e003      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800670e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006712:	2300      	movs	r3, #0
 8006714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006718:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800671c:	460b      	mov	r3, r1
 800671e:	4313      	orrs	r3, r2
 8006720:	d053      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800672a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800672e:	d035      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006734:	d82e      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006736:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800673a:	d031      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800673c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006740:	d828      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006746:	d01a      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800674c:	d822      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006756:	d007      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006758:	e01c      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675a:	4b32      	ldr	r3, [pc, #200]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	4a31      	ldr	r2, [pc, #196]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006764:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006766:	e01c      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676c:	3308      	adds	r3, #8
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f002 fa55 	bl	8008c20 <RCCEx_PLL2_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800677c:	e011      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006782:	3328      	adds	r3, #40	; 0x28
 8006784:	2100      	movs	r1, #0
 8006786:	4618      	mov	r0, r3
 8006788:	f002 fafc 	bl	8008d84 <RCCEx_PLL3_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006792:	e006      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800679a:	e002      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800679c:	bf00      	nop
 800679e:	e000      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10b      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067aa:	4b1e      	ldr	r3, [pc, #120]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067ba:	4a1a      	ldr	r2, [pc, #104]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067bc:	430b      	orrs	r3, r1
 80067be:	6593      	str	r3, [r2, #88]	; 0x58
 80067c0:	e003      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80067d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067da:	2300      	movs	r3, #0
 80067dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d056      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067f6:	d038      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80067f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067fc:	d831      	bhi.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80067fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006802:	d034      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006808:	d82b      	bhi.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800680a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800680e:	d01d      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006814:	d825      	bhi.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d006      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800681a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006820:	e01f      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006822:	bf00      	nop
 8006824:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006828:	4ba2      	ldr	r3, [pc, #648]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4aa1      	ldr	r2, [pc, #644]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800682e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006834:	e01c      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800683a:	3308      	adds	r3, #8
 800683c:	2100      	movs	r1, #0
 800683e:	4618      	mov	r0, r3
 8006840:	f002 f9ee 	bl	8008c20 <RCCEx_PLL2_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800684a:	e011      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006850:	3328      	adds	r3, #40	; 0x28
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f002 fa95 	bl	8008d84 <RCCEx_PLL3_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006860:	e006      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006868:	e002      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800686a:	bf00      	nop
 800686c:	e000      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800686e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006878:	4b8e      	ldr	r3, [pc, #568]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800687a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006888:	4a8a      	ldr	r2, [pc, #552]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800688a:	430b      	orrs	r3, r1
 800688c:	6593      	str	r3, [r2, #88]	; 0x58
 800688e:	e003      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006890:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006894:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80068a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d03a      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068be:	2b30      	cmp	r3, #48	; 0x30
 80068c0:	d01f      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80068c2:	2b30      	cmp	r3, #48	; 0x30
 80068c4:	d819      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d00c      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d815      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d019      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80068d2:	2b10      	cmp	r3, #16
 80068d4:	d111      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d6:	4b77      	ldr	r3, [pc, #476]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	4a76      	ldr	r2, [pc, #472]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80068e2:	e011      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e8:	3308      	adds	r3, #8
 80068ea:	2102      	movs	r1, #2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f002 f997 	bl	8008c20 <RCCEx_PLL2_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80068f8:	e006      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006900:	e002      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006910:	4b68      	ldr	r3, [pc, #416]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	4a65      	ldr	r2, [pc, #404]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006920:	430b      	orrs	r3, r1
 8006922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006924:	e003      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800692a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800693a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800693e:	2300      	movs	r3, #0
 8006940:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006944:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006948:	460b      	mov	r3, r1
 800694a:	4313      	orrs	r3, r2
 800694c:	d051      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006958:	d035      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800695a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800695e:	d82e      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006964:	d031      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006966:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800696a:	d828      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006970:	d01a      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006976:	d822      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d007      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006982:	e01c      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006984:	4b4b      	ldr	r3, [pc, #300]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	4a4a      	ldr	r2, [pc, #296]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800698a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800698e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006990:	e01c      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006996:	3308      	adds	r3, #8
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f002 f940 	bl	8008c20 <RCCEx_PLL2_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069a6:	e011      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ac:	3328      	adds	r3, #40	; 0x28
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f002 f9e7 	bl	8008d84 <RCCEx_PLL3_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069c4:	e002      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80069ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069d4:	4b37      	ldr	r3, [pc, #220]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e2:	4a34      	ldr	r2, [pc, #208]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6513      	str	r3, [r2, #80]	; 0x50
 80069e8:	e003      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80069fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a02:	2300      	movs	r3, #0
 8006a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	d056      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a1c:	d033      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a22:	d82c      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a28:	d02f      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006a2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a2e:	d826      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a34:	d02b      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006a36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a3a:	d820      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a40:	d012      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a46:	d81a      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d022      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a50:	d115      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a56:	3308      	adds	r3, #8
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f002 f8e0 	bl	8008c20 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a66:	e015      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a6c:	3328      	adds	r3, #40	; 0x28
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4618      	mov	r0, r3
 8006a72:	f002 f987 	bl	8008d84 <RCCEx_PLL3_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a7c:	e00a      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a84:	e006      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a86:	bf00      	nop
 8006a88:	e004      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a8a:	bf00      	nop
 8006a8c:	e002      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a8e:	bf00      	nop
 8006a90:	e000      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10d      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aaa:	4a02      	ldr	r2, [pc, #8]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6513      	str	r3, [r2, #80]	; 0x50
 8006ab0:	e006      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ab2:	bf00      	nop
 8006ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006abc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ad6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4313      	orrs	r3, r2
 8006ade:	d055      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aec:	d033      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006af2:	d82c      	bhi.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af8:	d02f      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afe:	d826      	bhi.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b04:	d02b      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b0a:	d820      	bhi.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b10:	d012      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b16:	d81a      	bhi.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d022      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b20:	d115      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	3308      	adds	r3, #8
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f002 f878 	bl	8008c20 <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b36:	e015      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3c:	3328      	adds	r3, #40	; 0x28
 8006b3e:	2101      	movs	r1, #1
 8006b40:	4618      	mov	r0, r3
 8006b42:	f002 f91f 	bl	8008d84 <RCCEx_PLL3_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b4c:	e00a      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b54:	e006      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b56:	bf00      	nop
 8006b58:	e004      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b6c:	4ba3      	ldr	r3, [pc, #652]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b70:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b7c:	4a9f      	ldr	r2, [pc, #636]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	6593      	str	r3, [r2, #88]	; 0x58
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	d037      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb6:	d00e      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbc:	d816      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d018      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bc6:	d111      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc8:	4b8c      	ldr	r3, [pc, #560]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	4a8b      	ldr	r2, [pc, #556]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006bd4:	e00f      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bda:	3308      	adds	r3, #8
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4618      	mov	r0, r3
 8006be0:	f002 f81e 	bl	8008c20 <RCCEx_PLL2_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006bea:	e004      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bfe:	4b7f      	ldr	r3, [pc, #508]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0c:	4a7b      	ldr	r2, [pc, #492]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6513      	str	r3, [r2, #80]	; 0x50
 8006c12:	e003      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	d039      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d81c      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006c46:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c89 	.word	0x08006c89
 8006c50:	08006c5d 	.word	0x08006c5d
 8006c54:	08006c6b 	.word	0x08006c6b
 8006c58:	08006c89 	.word	0x08006c89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c5c:	4b67      	ldr	r3, [pc, #412]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	4a66      	ldr	r2, [pc, #408]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c68:	e00f      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6e:	3308      	adds	r3, #8
 8006c70:	2102      	movs	r1, #2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 ffd4 	bl	8008c20 <RCCEx_PLL2_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c86:	e000      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c92:	4b5a      	ldr	r3, [pc, #360]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	f023 0103 	bic.w	r1, r3, #3
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca0:	4a56      	ldr	r2, [pc, #344]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ca6:	e003      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f000 809f 	beq.w	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd2:	4b4b      	ldr	r3, [pc, #300]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cde:	f7fb fcf1 	bl	80026c4 <HAL_GetTick>
 8006ce2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ce6:	e00b      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce8:	f7fb fcec 	bl	80026c4 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b64      	cmp	r3, #100	; 0x64
 8006cf6:	d903      	bls.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cfe:	e005      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d00:	4b3f      	ldr	r3, [pc, #252]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0ed      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d179      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d14:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d20:	4053      	eors	r3, r2
 8006d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d015      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d2a:	4b34      	ldr	r3, [pc, #208]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d36:	4b31      	ldr	r3, [pc, #196]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	4a30      	ldr	r2, [pc, #192]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d42:	4b2e      	ldr	r3, [pc, #184]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	4a2d      	ldr	r2, [pc, #180]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d4e:	4a2b      	ldr	r2, [pc, #172]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d62:	d118      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d64:	f7fb fcae 	bl	80026c4 <HAL_GetTick>
 8006d68:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d6c:	e00d      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d6e:	f7fb fca9 	bl	80026c4 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d78:	1ad2      	subs	r2, r2, r3
 8006d7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d903      	bls.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006d88:	e005      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d8a:	4b1c      	ldr	r3, [pc, #112]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0eb      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d129      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dae:	d10e      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006db0:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006dc0:	091a      	lsrs	r2, r3, #4
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	6113      	str	r3, [r2, #16]
 8006dcc:	e005      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006dd8:	6113      	str	r3, [r2, #16]
 8006dda:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ddc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dea:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6713      	str	r3, [r2, #112]	; 0x70
 8006df0:	e00e      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006dfa:	e009      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	58024800 	.word	0x58024800
 8006e04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f002 0301 	and.w	r3, r2, #1
 8006e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e20:	2300      	movs	r3, #0
 8006e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f000 8089 	beq.w	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e38:	2b28      	cmp	r3, #40	; 0x28
 8006e3a:	d86b      	bhi.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006f1d 	.word	0x08006f1d
 8006e48:	08006f15 	.word	0x08006f15
 8006e4c:	08006f15 	.word	0x08006f15
 8006e50:	08006f15 	.word	0x08006f15
 8006e54:	08006f15 	.word	0x08006f15
 8006e58:	08006f15 	.word	0x08006f15
 8006e5c:	08006f15 	.word	0x08006f15
 8006e60:	08006f15 	.word	0x08006f15
 8006e64:	08006ee9 	.word	0x08006ee9
 8006e68:	08006f15 	.word	0x08006f15
 8006e6c:	08006f15 	.word	0x08006f15
 8006e70:	08006f15 	.word	0x08006f15
 8006e74:	08006f15 	.word	0x08006f15
 8006e78:	08006f15 	.word	0x08006f15
 8006e7c:	08006f15 	.word	0x08006f15
 8006e80:	08006f15 	.word	0x08006f15
 8006e84:	08006eff 	.word	0x08006eff
 8006e88:	08006f15 	.word	0x08006f15
 8006e8c:	08006f15 	.word	0x08006f15
 8006e90:	08006f15 	.word	0x08006f15
 8006e94:	08006f15 	.word	0x08006f15
 8006e98:	08006f15 	.word	0x08006f15
 8006e9c:	08006f15 	.word	0x08006f15
 8006ea0:	08006f15 	.word	0x08006f15
 8006ea4:	08006f1d 	.word	0x08006f1d
 8006ea8:	08006f15 	.word	0x08006f15
 8006eac:	08006f15 	.word	0x08006f15
 8006eb0:	08006f15 	.word	0x08006f15
 8006eb4:	08006f15 	.word	0x08006f15
 8006eb8:	08006f15 	.word	0x08006f15
 8006ebc:	08006f15 	.word	0x08006f15
 8006ec0:	08006f15 	.word	0x08006f15
 8006ec4:	08006f1d 	.word	0x08006f1d
 8006ec8:	08006f15 	.word	0x08006f15
 8006ecc:	08006f15 	.word	0x08006f15
 8006ed0:	08006f15 	.word	0x08006f15
 8006ed4:	08006f15 	.word	0x08006f15
 8006ed8:	08006f15 	.word	0x08006f15
 8006edc:	08006f15 	.word	0x08006f15
 8006ee0:	08006f15 	.word	0x08006f15
 8006ee4:	08006f1d 	.word	0x08006f1d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eec:	3308      	adds	r3, #8
 8006eee:	2101      	movs	r1, #1
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 fe95 	bl	8008c20 <RCCEx_PLL2_Config>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006efc:	e00f      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f02:	3328      	adds	r3, #40	; 0x28
 8006f04:	2101      	movs	r1, #1
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 ff3c 	bl	8008d84 <RCCEx_PLL3_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f12:	e004      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f26:	4bbf      	ldr	r3, [pc, #764]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f34:	4abb      	ldr	r2, [pc, #748]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f36:	430b      	orrs	r3, r1
 8006f38:	6553      	str	r3, [r2, #84]	; 0x54
 8006f3a:	e003      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f002 0302 	and.w	r3, r2, #2
 8006f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f54:	2300      	movs	r3, #0
 8006f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f5a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4313      	orrs	r3, r2
 8006f62:	d041      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f6a:	2b05      	cmp	r3, #5
 8006f6c:	d824      	bhi.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006fc1 	.word	0x08006fc1
 8006f78:	08006f8d 	.word	0x08006f8d
 8006f7c:	08006fa3 	.word	0x08006fa3
 8006f80:	08006fc1 	.word	0x08006fc1
 8006f84:	08006fc1 	.word	0x08006fc1
 8006f88:	08006fc1 	.word	0x08006fc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f90:	3308      	adds	r3, #8
 8006f92:	2101      	movs	r1, #1
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 fe43 	bl	8008c20 <RCCEx_PLL2_Config>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fa0:	e00f      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa6:	3328      	adds	r3, #40	; 0x28
 8006fa8:	2101      	movs	r1, #1
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 feea 	bl	8008d84 <RCCEx_PLL3_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fb6:	e004      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fbe:	e000      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006fca:	4b96      	ldr	r3, [pc, #600]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	f023 0107 	bic.w	r1, r3, #7
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fd8:	4a92      	ldr	r2, [pc, #584]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	6553      	str	r3, [r2, #84]	; 0x54
 8006fde:	e003      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f002 0304 	and.w	r3, r2, #4
 8006ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ffe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007002:	460b      	mov	r3, r1
 8007004:	4313      	orrs	r3, r2
 8007006:	d044      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007010:	2b05      	cmp	r3, #5
 8007012:	d825      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007014:	a201      	add	r2, pc, #4	; (adr r2, 800701c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701a:	bf00      	nop
 800701c:	08007069 	.word	0x08007069
 8007020:	08007035 	.word	0x08007035
 8007024:	0800704b 	.word	0x0800704b
 8007028:	08007069 	.word	0x08007069
 800702c:	08007069 	.word	0x08007069
 8007030:	08007069 	.word	0x08007069
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007038:	3308      	adds	r3, #8
 800703a:	2101      	movs	r1, #1
 800703c:	4618      	mov	r0, r3
 800703e:	f001 fdef 	bl	8008c20 <RCCEx_PLL2_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007048:	e00f      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704e:	3328      	adds	r3, #40	; 0x28
 8007050:	2101      	movs	r1, #1
 8007052:	4618      	mov	r0, r3
 8007054:	f001 fe96 	bl	8008d84 <RCCEx_PLL3_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800705e:	e004      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007066:	e000      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007072:	4b6c      	ldr	r3, [pc, #432]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007076:	f023 0107 	bic.w	r1, r3, #7
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007082:	4a68      	ldr	r2, [pc, #416]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007084:	430b      	orrs	r3, r1
 8007086:	6593      	str	r3, [r2, #88]	; 0x58
 8007088:	e003      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800708e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f002 0320 	and.w	r3, r2, #32
 800709e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070a2:	2300      	movs	r3, #0
 80070a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070ac:	460b      	mov	r3, r1
 80070ae:	4313      	orrs	r3, r2
 80070b0:	d055      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070be:	d033      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80070c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070c4:	d82c      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80070c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ca:	d02f      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80070cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d0:	d826      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80070d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070d6:	d02b      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80070d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070dc:	d820      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80070de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e2:	d012      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80070e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e8:	d81a      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d022      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80070ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070f2:	d115      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f8:	3308      	adds	r3, #8
 80070fa:	2100      	movs	r1, #0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 fd8f 	bl	8008c20 <RCCEx_PLL2_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007108:	e015      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800710a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800710e:	3328      	adds	r3, #40	; 0x28
 8007110:	2102      	movs	r1, #2
 8007112:	4618      	mov	r0, r3
 8007114:	f001 fe36 	bl	8008d84 <RCCEx_PLL3_Config>
 8007118:	4603      	mov	r3, r0
 800711a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800711e:	e00a      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007126:	e006      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007128:	bf00      	nop
 800712a:	e004      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800712c:	bf00      	nop
 800712e:	e002      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007130:	bf00      	nop
 8007132:	e000      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10b      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800713e:	4b39      	ldr	r3, [pc, #228]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714e:	4a35      	ldr	r2, [pc, #212]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007150:	430b      	orrs	r3, r1
 8007152:	6553      	str	r3, [r2, #84]	; 0x54
 8007154:	e003      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800715a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800715e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800716a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800716e:	2300      	movs	r3, #0
 8007170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007174:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007178:	460b      	mov	r3, r1
 800717a:	4313      	orrs	r3, r2
 800717c:	d058      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007186:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800718a:	d033      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800718c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007190:	d82c      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007196:	d02f      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719c:	d826      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800719e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a2:	d02b      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80071a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a8:	d820      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ae:	d012      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80071b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b4:	d81a      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d022      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80071ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071be:	d115      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c4:	3308      	adds	r3, #8
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 fd29 	bl	8008c20 <RCCEx_PLL2_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80071d4:	e015      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071da:	3328      	adds	r3, #40	; 0x28
 80071dc:	2102      	movs	r1, #2
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 fdd0 	bl	8008d84 <RCCEx_PLL3_Config>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80071ea:	e00a      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071f2:	e006      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80071f4:	bf00      	nop
 80071f6:	e004      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80071f8:	bf00      	nop
 80071fa:	e002      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80071fc:	bf00      	nop
 80071fe:	e000      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10e      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800720c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800721a:	4a02      	ldr	r2, [pc, #8]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800721c:	430b      	orrs	r3, r1
 800721e:	6593      	str	r3, [r2, #88]	; 0x58
 8007220:	e006      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007222:	bf00      	nop
 8007224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800723c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007240:	2300      	movs	r3, #0
 8007242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007246:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800724a:	460b      	mov	r3, r1
 800724c:	4313      	orrs	r3, r2
 800724e:	d055      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007258:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800725c:	d033      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800725e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007262:	d82c      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007268:	d02f      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800726a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800726e:	d826      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007270:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007274:	d02b      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007276:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800727a:	d820      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800727c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007280:	d012      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007286:	d81a      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007288:	2b00      	cmp	r3, #0
 800728a:	d022      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800728c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007290:	d115      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007296:	3308      	adds	r3, #8
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fcc0 	bl	8008c20 <RCCEx_PLL2_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072a6:	e015      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ac:	3328      	adds	r3, #40	; 0x28
 80072ae:	2102      	movs	r1, #2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 fd67 	bl	8008d84 <RCCEx_PLL3_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072bc:	e00a      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072c4:	e006      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072c6:	bf00      	nop
 80072c8:	e004      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072ca:	bf00      	nop
 80072cc:	e002      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072ce:	bf00      	nop
 80072d0:	e000      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10b      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80072dc:	4ba1      	ldr	r3, [pc, #644]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80072e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072ec:	4a9d      	ldr	r2, [pc, #628]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ee:	430b      	orrs	r3, r1
 80072f0:	6593      	str	r3, [r2, #88]	; 0x58
 80072f2:	e003      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f002 0308 	and.w	r3, r2, #8
 8007308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800730c:	2300      	movs	r3, #0
 800730e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007312:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007316:	460b      	mov	r3, r1
 8007318:	4313      	orrs	r3, r2
 800731a:	d01e      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007328:	d10c      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732e:	3328      	adds	r3, #40	; 0x28
 8007330:	2102      	movs	r1, #2
 8007332:	4618      	mov	r0, r3
 8007334:	f001 fd26 	bl	8008d84 <RCCEx_PLL3_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007344:	4b87      	ldr	r3, [pc, #540]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007348:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007354:	4a83      	ldr	r2, [pc, #524]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007356:	430b      	orrs	r3, r1
 8007358:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800735a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f002 0310 	and.w	r3, r2, #16
 8007366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800736a:	2300      	movs	r3, #0
 800736c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007370:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007374:	460b      	mov	r3, r1
 8007376:	4313      	orrs	r3, r2
 8007378:	d01e      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007386:	d10c      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738c:	3328      	adds	r3, #40	; 0x28
 800738e:	2102      	movs	r1, #2
 8007390:	4618      	mov	r0, r3
 8007392:	f001 fcf7 	bl	8008d84 <RCCEx_PLL3_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073a2:	4b70      	ldr	r3, [pc, #448]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073b2:	4a6c      	ldr	r2, [pc, #432]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073b4:	430b      	orrs	r3, r1
 80073b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80073c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073c8:	2300      	movs	r3, #0
 80073ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80073d2:	460b      	mov	r3, r1
 80073d4:	4313      	orrs	r3, r2
 80073d6:	d03e      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e4:	d022      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80073e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ea:	d81b      	bhi.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f4:	d00b      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80073f6:	e015      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fc:	3308      	adds	r3, #8
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fc0d 	bl	8008c20 <RCCEx_PLL2_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800740c:	e00f      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800740e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007412:	3328      	adds	r3, #40	; 0x28
 8007414:	2102      	movs	r1, #2
 8007416:	4618      	mov	r0, r3
 8007418:	f001 fcb4 	bl	8008d84 <RCCEx_PLL3_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007422:	e004      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800742a:	e000      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800742c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800742e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10b      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007436:	4b4b      	ldr	r3, [pc, #300]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007446:	4a47      	ldr	r2, [pc, #284]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007448:	430b      	orrs	r3, r1
 800744a:	6593      	str	r3, [r2, #88]	; 0x58
 800744c:	e003      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007462:	67bb      	str	r3, [r7, #120]	; 0x78
 8007464:	2300      	movs	r3, #0
 8007466:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007468:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800746c:	460b      	mov	r3, r1
 800746e:	4313      	orrs	r3, r2
 8007470:	d03b      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800747e:	d01f      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007484:	d818      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800748a:	d003      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800748c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007490:	d007      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007492:	e011      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007494:	4b33      	ldr	r3, [pc, #204]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4a32      	ldr	r2, [pc, #200]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800749a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80074a0:	e00f      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a6:	3328      	adds	r3, #40	; 0x28
 80074a8:	2101      	movs	r1, #1
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 fc6a 	bl	8008d84 <RCCEx_PLL3_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80074b6:	e004      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074be:	e000      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80074c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074ca:	4b26      	ldr	r3, [pc, #152]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074da:	4a22      	ldr	r2, [pc, #136]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074dc:	430b      	orrs	r3, r1
 80074de:	6553      	str	r3, [r2, #84]	; 0x54
 80074e0:	e003      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80074f6:	673b      	str	r3, [r7, #112]	; 0x70
 80074f8:	2300      	movs	r3, #0
 80074fa:	677b      	str	r3, [r7, #116]	; 0x74
 80074fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007500:	460b      	mov	r3, r1
 8007502:	4313      	orrs	r3, r2
 8007504:	d034      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007514:	d007      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007516:	e011      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007518:	4b12      	ldr	r3, [pc, #72]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	4a11      	ldr	r2, [pc, #68]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800751e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007524:	e00e      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752a:	3308      	adds	r3, #8
 800752c:	2102      	movs	r1, #2
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fb76 	bl	8008c20 <RCCEx_PLL2_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800753a:	e003      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10d      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755a:	4a02      	ldr	r2, [pc, #8]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800755c:	430b      	orrs	r3, r1
 800755e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007560:	e006      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007562:	bf00      	nop
 8007564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800756c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800757c:	66bb      	str	r3, [r7, #104]	; 0x68
 800757e:	2300      	movs	r3, #0
 8007580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007582:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007586:	460b      	mov	r3, r1
 8007588:	4313      	orrs	r3, r2
 800758a:	d00c      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800758c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007590:	3328      	adds	r3, #40	; 0x28
 8007592:	2102      	movs	r1, #2
 8007594:	4618      	mov	r0, r3
 8007596:	f001 fbf5 	bl	8008d84 <RCCEx_PLL3_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80075b2:	663b      	str	r3, [r7, #96]	; 0x60
 80075b4:	2300      	movs	r3, #0
 80075b6:	667b      	str	r3, [r7, #100]	; 0x64
 80075b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80075bc:	460b      	mov	r3, r1
 80075be:	4313      	orrs	r3, r2
 80075c0:	d038      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ce:	d018      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80075d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075d4:	d811      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80075d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075da:	d014      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80075dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e0:	d80b      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d011      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80075e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ea:	d106      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ec:	4bc3      	ldr	r3, [pc, #780]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	4ac2      	ldr	r2, [pc, #776]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80075f8:	e008      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007600:	e004      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007602:	bf00      	nop
 8007604:	e002      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800760a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10b      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007614:	4bb9      	ldr	r3, [pc, #740]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007618:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007624:	4ab5      	ldr	r2, [pc, #724]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007626:	430b      	orrs	r3, r1
 8007628:	6553      	str	r3, [r2, #84]	; 0x54
 800762a:	e003      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007640:	65bb      	str	r3, [r7, #88]	; 0x58
 8007642:	2300      	movs	r3, #0
 8007644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007646:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800764a:	460b      	mov	r3, r1
 800764c:	4313      	orrs	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007650:	4baa      	ldr	r3, [pc, #680]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007654:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800765c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800765e:	4aa7      	ldr	r2, [pc, #668]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007660:	430b      	orrs	r3, r1
 8007662:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007670:	653b      	str	r3, [r7, #80]	; 0x50
 8007672:	2300      	movs	r3, #0
 8007674:	657b      	str	r3, [r7, #84]	; 0x54
 8007676:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800767a:	460b      	mov	r3, r1
 800767c:	4313      	orrs	r3, r2
 800767e:	d00a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007680:	4b9e      	ldr	r3, [pc, #632]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007690:	4a9a      	ldr	r2, [pc, #616]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007692:	430b      	orrs	r3, r1
 8007694:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80076a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a4:	2300      	movs	r3, #0
 80076a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80076ac:	460b      	mov	r3, r1
 80076ae:	4313      	orrs	r3, r2
 80076b0:	d009      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076b2:	4b92      	ldr	r3, [pc, #584]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80076ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c0:	4a8e      	ldr	r2, [pc, #568]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076c2:	430b      	orrs	r3, r1
 80076c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80076d2:	643b      	str	r3, [r7, #64]	; 0x40
 80076d4:	2300      	movs	r3, #0
 80076d6:	647b      	str	r3, [r7, #68]	; 0x44
 80076d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80076dc:	460b      	mov	r3, r1
 80076de:	4313      	orrs	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076e2:	4b86      	ldr	r3, [pc, #536]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	4a85      	ldr	r2, [pc, #532]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076ec:	6113      	str	r3, [r2, #16]
 80076ee:	4b83      	ldr	r3, [pc, #524]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076f0:	6919      	ldr	r1, [r3, #16]
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80076fa:	4a80      	ldr	r2, [pc, #512]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076fc:	430b      	orrs	r3, r1
 80076fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800770c:	63bb      	str	r3, [r7, #56]	; 0x38
 800770e:	2300      	movs	r3, #0
 8007710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007712:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	d009      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800771c:	4b77      	ldr	r3, [pc, #476]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800771e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007720:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772a:	4a74      	ldr	r2, [pc, #464]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800772c:	430b      	orrs	r3, r1
 800772e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800773c:	633b      	str	r3, [r7, #48]	; 0x30
 800773e:	2300      	movs	r3, #0
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
 8007742:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007746:	460b      	mov	r3, r1
 8007748:	4313      	orrs	r3, r2
 800774a:	d00a      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800774c:	4b6b      	ldr	r3, [pc, #428]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800774e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007750:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800775c:	4a67      	ldr	r2, [pc, #412]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800775e:	430b      	orrs	r3, r1
 8007760:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	2100      	movs	r1, #0
 800776c:	62b9      	str	r1, [r7, #40]	; 0x28
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007774:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007778:	460b      	mov	r3, r1
 800777a:	4313      	orrs	r3, r2
 800777c:	d011      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800777e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007782:	3308      	adds	r3, #8
 8007784:	2100      	movs	r1, #0
 8007786:	4618      	mov	r0, r3
 8007788:	f001 fa4a 	bl	8008c20 <RCCEx_PLL2_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800779e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	2100      	movs	r1, #0
 80077ac:	6239      	str	r1, [r7, #32]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
 80077b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80077b8:	460b      	mov	r3, r1
 80077ba:	4313      	orrs	r3, r2
 80077bc:	d011      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c2:	3308      	adds	r3, #8
 80077c4:	2101      	movs	r1, #1
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 fa2a 	bl	8008c20 <RCCEx_PLL2_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80077d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	2100      	movs	r1, #0
 80077ec:	61b9      	str	r1, [r7, #24]
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80077f8:	460b      	mov	r3, r1
 80077fa:	4313      	orrs	r3, r2
 80077fc:	d011      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007802:	3308      	adds	r3, #8
 8007804:	2102      	movs	r1, #2
 8007806:	4618      	mov	r0, r3
 8007808:	f001 fa0a 	bl	8008c20 <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800781e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	2100      	movs	r1, #0
 800782c:	6139      	str	r1, [r7, #16]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007838:	460b      	mov	r3, r1
 800783a:	4313      	orrs	r3, r2
 800783c:	d011      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007842:	3328      	adds	r3, #40	; 0x28
 8007844:	2100      	movs	r1, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f001 fa9c 	bl	8008d84 <RCCEx_PLL3_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800785e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	2100      	movs	r1, #0
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	f003 0310 	and.w	r3, r3, #16
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007878:	460b      	mov	r3, r1
 800787a:	4313      	orrs	r3, r2
 800787c:	d011      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007882:	3328      	adds	r3, #40	; 0x28
 8007884:	2101      	movs	r1, #1
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fa7c 	bl	8008d84 <RCCEx_PLL3_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800789e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	2100      	movs	r1, #0
 80078ac:	6039      	str	r1, [r7, #0]
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	607b      	str	r3, [r7, #4]
 80078b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078b8:	460b      	mov	r3, r1
 80078ba:	4313      	orrs	r3, r2
 80078bc:	d011      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c2:	3328      	adds	r3, #40	; 0x28
 80078c4:	2102      	movs	r1, #2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 fa5c 	bl	8008d84 <RCCEx_PLL3_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80078d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80078e2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e000      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80078f6:	46bd      	mov	sp, r7
 80078f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078fc:	58024400 	.word	0x58024400

08007900 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b090      	sub	sp, #64	; 0x40
 8007904:	af00      	add	r7, sp, #0
 8007906:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800790a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007912:	430b      	orrs	r3, r1
 8007914:	f040 8094 	bne.w	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007918:	4b9e      	ldr	r3, [pc, #632]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800791a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	2b04      	cmp	r3, #4
 8007926:	f200 8087 	bhi.w	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007945 	.word	0x08007945
 8007934:	0800796d 	.word	0x0800796d
 8007938:	08007995 	.word	0x08007995
 800793c:	08007a31 	.word	0x08007a31
 8007940:	080079bd 	.word	0x080079bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007944:	4b93      	ldr	r3, [pc, #588]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007950:	d108      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007956:	4618      	mov	r0, r3
 8007958:	f001 f810 	bl	800897c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007960:	f000 bd45 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007968:	f000 bd41 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800796c:	4b89      	ldr	r3, [pc, #548]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007978:	d108      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800797a:	f107 0318 	add.w	r3, r7, #24
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fd54 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007988:	f000 bd31 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007990:	f000 bd2d 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007994:	4b7f      	ldr	r3, [pc, #508]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800799c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a0:	d108      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fe94 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079b0:	f000 bd1d 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079b8:	f000 bd19 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079bc:	4b75      	ldr	r3, [pc, #468]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079c6:	4b73      	ldr	r3, [pc, #460]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d10c      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d109      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079d8:	4b6e      	ldr	r3, [pc, #440]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	08db      	lsrs	r3, r3, #3
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	4a6d      	ldr	r2, [pc, #436]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ea:	e01f      	b.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079ec:	4b69      	ldr	r3, [pc, #420]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f8:	d106      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80079fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a00:	d102      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a02:	4b66      	ldr	r3, [pc, #408]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a06:	e011      	b.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a08:	4b62      	ldr	r3, [pc, #392]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a14:	d106      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a1c:	d102      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a1e:	4b60      	ldr	r3, [pc, #384]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a22:	e003      	b.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a28:	f000 bce1 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a2c:	f000 bcdf 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a30:	4b5c      	ldr	r3, [pc, #368]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a34:	f000 bcdb 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a3c:	f000 bcd7 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a44:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	f040 80ad 	bne.w	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007a4e:	4b51      	ldr	r3, [pc, #324]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a52:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007a56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a5e:	d056      	beq.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a66:	f200 8090 	bhi.w	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8007a6e:	f000 8088 	beq.w	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	2bc0      	cmp	r3, #192	; 0xc0
 8007a76:	f200 8088 	bhi.w	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	2b80      	cmp	r3, #128	; 0x80
 8007a7e:	d032      	beq.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	2b80      	cmp	r3, #128	; 0x80
 8007a84:	f200 8081 	bhi.w	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d014      	beq.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007a94:	e079      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a96:	4b3f      	ldr	r3, [pc, #252]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aa2:	d108      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 ff67 	bl	800897c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab2:	f000 bc9c 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aba:	f000 bc98 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007abe:	4b35      	ldr	r3, [pc, #212]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aca:	d108      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007acc:	f107 0318 	add.w	r3, r7, #24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fcab 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ada:	f000 bc88 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae2:	f000 bc84 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ae6:	4b2b      	ldr	r3, [pc, #172]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af2:	d108      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af4:	f107 030c 	add.w	r3, r7, #12
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fdeb 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b02:	f000 bc74 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b0a:	f000 bc70 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b0e:	4b21      	ldr	r3, [pc, #132]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b18:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d10c      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b2a:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	08db      	lsrs	r3, r3, #3
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b36:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b3c:	e01f      	b.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b3e:	4b15      	ldr	r3, [pc, #84]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4a:	d106      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b52:	d102      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b54:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b58:	e011      	b.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b5a:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b66:	d106      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b6e:	d102      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b70:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b74:	e003      	b.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b7a:	f000 bc38 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b7e:	f000 bc36 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b82:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b86:	f000 bc32 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b8e:	f000 bc2e 	b.w	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b92:	bf00      	nop
 8007b94:	58024400 	.word	0x58024400
 8007b98:	03d09000 	.word	0x03d09000
 8007b9c:	003d0900 	.word	0x003d0900
 8007ba0:	01770000 	.word	0x01770000
 8007ba4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	f040 809c 	bne.w	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007bb6:	4b9e      	ldr	r3, [pc, #632]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007bbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bc6:	d054      	beq.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bce:	f200 808b 	bhi.w	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bd8:	f000 8083 	beq.w	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007be2:	f200 8081 	bhi.w	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bec:	d02f      	beq.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bf4:	d878      	bhi.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c02:	d012      	beq.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007c04:	e070      	b.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c06:	4b8a      	ldr	r3, [pc, #552]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c12:	d107      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 feaf 	bl	800897c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c22:	e3e4      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c28:	e3e1      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c2a:	4b81      	ldr	r3, [pc, #516]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c36:	d107      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c38:	f107 0318 	add.w	r3, r7, #24
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fbf5 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c46:	e3d2      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4c:	e3cf      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c4e:	4b78      	ldr	r3, [pc, #480]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5a:	d107      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c5c:	f107 030c 	add.w	r3, r7, #12
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fd37 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c6a:	e3c0      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c70:	e3bd      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c72:	4b6f      	ldr	r3, [pc, #444]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c7c:	4b6c      	ldr	r3, [pc, #432]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d10c      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c8e:	4b68      	ldr	r3, [pc, #416]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	08db      	lsrs	r3, r3, #3
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	4a66      	ldr	r2, [pc, #408]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca0:	e01e      	b.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ca2:	4b63      	ldr	r3, [pc, #396]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cae:	d106      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb6:	d102      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cb8:	4b5f      	ldr	r3, [pc, #380]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cbc:	e010      	b.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cbe:	4b5c      	ldr	r3, [pc, #368]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cca:	d106      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd2:	d102      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cd4:	4b59      	ldr	r3, [pc, #356]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd8:	e002      	b.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007cde:	e386      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ce0:	e385      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ce2:	4b57      	ldr	r3, [pc, #348]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce6:	e382      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cec:	e37f      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	f040 80a7 	bne.w	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007cfc:	4b4c      	ldr	r3, [pc, #304]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d00:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007d04:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d0c:	d055      	beq.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d14:	f200 8096 	bhi.w	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d1e:	f000 8084 	beq.w	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d28:	f200 808c 	bhi.w	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d32:	d030      	beq.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d3a:	f200 8083 	bhi.w	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d4a:	d012      	beq.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007d4c:	e07a      	b.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d4e:	4b38      	ldr	r3, [pc, #224]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fe0b 	bl	800897c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d6a:	e340      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d70:	e33d      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d72:	4b2f      	ldr	r3, [pc, #188]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d7e:	d107      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d80:	f107 0318 	add.w	r3, r7, #24
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fb51 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d8e:	e32e      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d94:	e32b      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d96:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da2:	d107      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da4:	f107 030c 	add.w	r3, r7, #12
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fc93 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db2:	e31c      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007db8:	e319      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dba:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dc4:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d10c      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d109      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dd6:	4b16      	ldr	r3, [pc, #88]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	08db      	lsrs	r3, r3, #3
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	4a14      	ldr	r2, [pc, #80]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007de2:	fa22 f303 	lsr.w	r3, r2, r3
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de8:	e01e      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dea:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df6:	d106      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dfe:	d102      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e00:	4b0d      	ldr	r3, [pc, #52]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e04:	e010      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e06:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e12:	d106      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e1a:	d102      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e20:	e002      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007e26:	e2e2      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e28:	e2e1      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e2a:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e2e:	e2de      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e30:	58024400 	.word	0x58024400
 8007e34:	03d09000 	.word	0x03d09000
 8007e38:	003d0900 	.word	0x003d0900
 8007e3c:	01770000 	.word	0x01770000
 8007e40:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e48:	e2d1      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007e52:	430b      	orrs	r3, r1
 8007e54:	f040 809c 	bne.w	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007e58:	4b93      	ldr	r3, [pc, #588]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007e60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e68:	d054      	beq.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e70:	f200 808b 	bhi.w	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e7a:	f000 8083 	beq.w	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e84:	f200 8081 	bhi.w	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8e:	d02f      	beq.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e96:	d878      	bhi.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea4:	d012      	beq.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007ea6:	e070      	b.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ea8:	4b7f      	ldr	r3, [pc, #508]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eb4:	d107      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fd5e 	bl	800897c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec4:	e293      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eca:	e290      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ecc:	4b76      	ldr	r3, [pc, #472]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ed8:	d107      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eda:	f107 0318 	add.w	r3, r7, #24
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 faa4 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ee8:	e281      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eee:	e27e      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ef0:	4b6d      	ldr	r3, [pc, #436]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007efc:	d107      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007efe:	f107 030c 	add.w	r3, r7, #12
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fbe6 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f0c:	e26f      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f12:	e26c      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f14:	4b64      	ldr	r3, [pc, #400]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f1e:	4b62      	ldr	r3, [pc, #392]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d10c      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d109      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f30:	4b5d      	ldr	r3, [pc, #372]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	08db      	lsrs	r3, r3, #3
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	4a5c      	ldr	r2, [pc, #368]	; (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f42:	e01e      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f44:	4b58      	ldr	r3, [pc, #352]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f50:	d106      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f58:	d102      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f5a:	4b55      	ldr	r3, [pc, #340]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5e:	e010      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f60:	4b51      	ldr	r3, [pc, #324]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f6c:	d106      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f74:	d102      	bne.n	8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f76:	4b4f      	ldr	r3, [pc, #316]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f7a:	e002      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f80:	e235      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f82:	e234      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f84:	4b4c      	ldr	r3, [pc, #304]	; (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f88:	e231      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f8e:	e22e      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f94:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	f040 808f 	bne.w	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007f9e:	4b42      	ldr	r3, [pc, #264]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007fa6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fae:	d06b      	beq.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fb6:	d874      	bhi.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fbe:	d056      	beq.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fc6:	d86c      	bhi.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fce:	d03b      	beq.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fd6:	d864      	bhi.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fde:	d021      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fe6:	d85c      	bhi.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff4:	d004      	beq.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007ff6:	e054      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ff8:	f7fe fa0a 	bl	8006410 <HAL_RCC_GetPCLK1Freq>
 8007ffc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ffe:	e1f6      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008000:	4b29      	ldr	r3, [pc, #164]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800800c:	d107      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800e:	f107 0318 	add.w	r3, r7, #24
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fa0a 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800801c:	e1e7      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008022:	e1e4      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008024:	4b20      	ldr	r3, [pc, #128]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800802c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008030:	d107      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008032:	f107 030c 	add.w	r3, r7, #12
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fb4c 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008040:	e1d5      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008046:	e1d2      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008048:	4b17      	ldr	r3, [pc, #92]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b04      	cmp	r3, #4
 8008052:	d109      	bne.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008054:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	08db      	lsrs	r3, r3, #3
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	4a13      	ldr	r2, [pc, #76]	; (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008060:	fa22 f303 	lsr.w	r3, r2, r3
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008066:	e1c2      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800806c:	e1bf      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800806e:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807a:	d102      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800807c:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008080:	e1b5      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008086:	e1b2      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008088:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008094:	d102      	bne.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800809a:	e1a8      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a0:	e1a5      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a6:	e1a2      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080a8:	58024400 	.word	0x58024400
 80080ac:	03d09000 	.word	0x03d09000
 80080b0:	003d0900 	.word	0x003d0900
 80080b4:	01770000 	.word	0x01770000
 80080b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80080bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80080c4:	430b      	orrs	r3, r1
 80080c6:	d173      	bne.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80080c8:	4b9c      	ldr	r3, [pc, #624]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080d8:	d02f      	beq.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080e0:	d863      	bhi.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ee:	d012      	beq.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80080f0:	e05b      	b.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080f2:	4b92      	ldr	r3, [pc, #584]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080fe:	d107      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008100:	f107 0318 	add.w	r3, r7, #24
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f991 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800810e:	e16e      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008114:	e16b      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008116:	4b89      	ldr	r3, [pc, #548]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800811e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008122:	d107      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008124:	f107 030c 	add.w	r3, r7, #12
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fad3 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008132:	e15c      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008138:	e159      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800813a:	4b80      	ldr	r3, [pc, #512]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800813c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008142:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008144:	4b7d      	ldr	r3, [pc, #500]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b04      	cmp	r3, #4
 800814e:	d10c      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008156:	4b79      	ldr	r3, [pc, #484]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	08db      	lsrs	r3, r3, #3
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	4a77      	ldr	r2, [pc, #476]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008168:	e01e      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800816a:	4b74      	ldr	r3, [pc, #464]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008176:	d106      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800817e:	d102      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008180:	4b70      	ldr	r3, [pc, #448]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008184:	e010      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008186:	4b6d      	ldr	r3, [pc, #436]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008192:	d106      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800819a:	d102      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800819c:	4b6a      	ldr	r3, [pc, #424]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a0:	e002      	b.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081a6:	e122      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081a8:	e121      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ae:	e11e      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80081b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081b4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80081b8:	430b      	orrs	r3, r1
 80081ba:	d133      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80081bc:	4b5f      	ldr	r3, [pc, #380]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d2:	d012      	beq.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80081d4:	e023      	b.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081d6:	4b59      	ldr	r3, [pc, #356]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e2:	d107      	bne.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fbc7 	bl	800897c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081f2:	e0fc      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f8:	e0f9      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081fa:	4b50      	ldr	r3, [pc, #320]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008206:	d107      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008208:	f107 0318 	add.w	r3, r7, #24
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f90d 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008216:	e0ea      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800821c:	e0e7      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008222:	e0e4      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008228:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800822c:	430b      	orrs	r3, r1
 800822e:	f040 808d 	bne.w	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008232:	4b42      	ldr	r3, [pc, #264]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008236:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800823a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008242:	d06b      	beq.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800824a:	d874      	bhi.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008252:	d056      	beq.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825a:	d86c      	bhi.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008262:	d03b      	beq.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800826a:	d864      	bhi.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008272:	d021      	beq.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800827a:	d85c      	bhi.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	2b00      	cmp	r3, #0
 8008280:	d004      	beq.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008288:	d004      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800828a:	e054      	b.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800828c:	f000 f8b8 	bl	8008400 <HAL_RCCEx_GetD3PCLK1Freq>
 8008290:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008292:	e0ac      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008294:	4b29      	ldr	r3, [pc, #164]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800829c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082a0:	d107      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a2:	f107 0318 	add.w	r3, r7, #24
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f8c0 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b0:	e09d      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082b6:	e09a      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082b8:	4b20      	ldr	r3, [pc, #128]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c4:	d107      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c6:	f107 030c 	add.w	r3, r7, #12
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fa02 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d4:	e08b      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082da:	e088      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082dc:	4b17      	ldr	r3, [pc, #92]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d109      	bne.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082e8:	4b14      	ldr	r3, [pc, #80]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	08db      	lsrs	r3, r3, #3
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	4a13      	ldr	r2, [pc, #76]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80082f4:	fa22 f303 	lsr.w	r3, r2, r3
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082fa:	e078      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008300:	e075      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008302:	4b0e      	ldr	r3, [pc, #56]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830e:	d102      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008310:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008314:	e06b      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800831a:	e068      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008328:	d102      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800832a:	4b07      	ldr	r3, [pc, #28]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800832e:	e05e      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008334:	e05b      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800833a:	e058      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800833c:	58024400 	.word	0x58024400
 8008340:	03d09000 	.word	0x03d09000
 8008344:	003d0900 	.word	0x003d0900
 8008348:	01770000 	.word	0x01770000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800834c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008350:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008354:	430b      	orrs	r3, r1
 8008356:	d148      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008358:	4b27      	ldr	r3, [pc, #156]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800835a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008360:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008368:	d02a      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800836a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008370:	d838      	bhi.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800837e:	d00d      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008380:	e030      	b.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008382:	4b1d      	ldr	r3, [pc, #116]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800838a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800838e:	d102      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008390:	4b1a      	ldr	r3, [pc, #104]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008394:	e02b      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800839a:	e028      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800839c:	4b16      	ldr	r3, [pc, #88]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083a8:	d107      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fae4 	bl	800897c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b8:	e019      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083be:	e016      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c0:	4b0d      	ldr	r3, [pc, #52]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083cc:	d107      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ce:	f107 0318 	add.w	r3, r7, #24
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f82a 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083dc:	e007      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e2:	e004      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e8:	e001      	b.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80083ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3740      	adds	r7, #64	; 0x40
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	58024400 	.word	0x58024400
 80083fc:	01770000 	.word	0x01770000

08008400 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008404:	f7fd ffd4 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 8008408:	4602      	mov	r2, r0
 800840a:	4b06      	ldr	r3, [pc, #24]	; (8008424 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	091b      	lsrs	r3, r3, #4
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	4904      	ldr	r1, [pc, #16]	; (8008428 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008416:	5ccb      	ldrb	r3, [r1, r3]
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008420:	4618      	mov	r0, r3
 8008422:	bd80      	pop	{r7, pc}
 8008424:	58024400 	.word	0x58024400
 8008428:	08014254 	.word	0x08014254

0800842c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800842c:	b480      	push	{r7}
 800842e:	b089      	sub	sp, #36	; 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008434:	4ba1      	ldr	r3, [pc, #644]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	f003 0303 	and.w	r3, r3, #3
 800843c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800843e:	4b9f      	ldr	r3, [pc, #636]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	0b1b      	lsrs	r3, r3, #12
 8008444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008448:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800844a:	4b9c      	ldr	r3, [pc, #624]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	091b      	lsrs	r3, r3, #4
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008456:	4b99      	ldr	r3, [pc, #612]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845a:	08db      	lsrs	r3, r3, #3
 800845c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8111 	beq.w	800869c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b02      	cmp	r3, #2
 800847e:	f000 8083 	beq.w	8008588 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b02      	cmp	r3, #2
 8008486:	f200 80a1 	bhi.w	80085cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d056      	beq.n	8008544 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008496:	e099      	b.n	80085cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008498:	4b88      	ldr	r3, [pc, #544]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d02d      	beq.n	8008500 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084a4:	4b85      	ldr	r3, [pc, #532]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	08db      	lsrs	r3, r3, #3
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	4a84      	ldr	r2, [pc, #528]	; (80086c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ce:	4b7b      	ldr	r3, [pc, #492]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084de:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084fe:	e087      	b.n	8008610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800850e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008512:	4b6a      	ldr	r3, [pc, #424]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008522:	ed97 6a03 	vldr	s12, [r7, #12]
 8008526:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800852a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008542:	e065      	b.n	8008610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008556:	4b59      	ldr	r3, [pc, #356]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008566:	ed97 6a03 	vldr	s12, [r7, #12]
 800856a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008586:	e043      	b.n	8008610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859a:	4b48      	ldr	r3, [pc, #288]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ca:	e021      	b.n	8008610 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80085da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085de:	4b37      	ldr	r3, [pc, #220]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800860e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008610:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	0a5b      	lsrs	r3, r3, #9
 8008616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800862a:	edd7 6a07 	vldr	s13, [r7, #28]
 800862e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008636:	ee17 2a90 	vmov	r2, s15
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800863e:	4b1f      	ldr	r3, [pc, #124]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	0c1b      	lsrs	r3, r3, #16
 8008644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008658:	edd7 6a07 	vldr	s13, [r7, #28]
 800865c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008664:	ee17 2a90 	vmov	r2, s15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	0e1b      	lsrs	r3, r3, #24
 8008672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008686:	edd7 6a07 	vldr	s13, [r7, #28]
 800868a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008692:	ee17 2a90 	vmov	r2, s15
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800869a:	e008      	b.n	80086ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	609a      	str	r2, [r3, #8]
}
 80086ae:	bf00      	nop
 80086b0:	3724      	adds	r7, #36	; 0x24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	58024400 	.word	0x58024400
 80086c0:	03d09000 	.word	0x03d09000
 80086c4:	46000000 	.word	0x46000000
 80086c8:	4c742400 	.word	0x4c742400
 80086cc:	4a742400 	.word	0x4a742400
 80086d0:	4bbb8000 	.word	0x4bbb8000

080086d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b089      	sub	sp, #36	; 0x24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086dc:	4ba1      	ldr	r3, [pc, #644]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80086e6:	4b9f      	ldr	r3, [pc, #636]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	0d1b      	lsrs	r3, r3, #20
 80086ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80086f2:	4b9c      	ldr	r3, [pc, #624]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80086fe:	4b99      	ldr	r3, [pc, #612]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	08db      	lsrs	r3, r3, #3
 8008704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	fb02 f303 	mul.w	r3, r2, r3
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 8111 	beq.w	8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	2b02      	cmp	r3, #2
 8008726:	f000 8083 	beq.w	8008830 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	2b02      	cmp	r3, #2
 800872e:	f200 80a1 	bhi.w	8008874 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d056      	beq.n	80087ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800873e:	e099      	b.n	8008874 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008740:	4b88      	ldr	r3, [pc, #544]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d02d      	beq.n	80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800874c:	4b85      	ldr	r3, [pc, #532]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	4a84      	ldr	r2, [pc, #528]	; (8008968 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
 800875c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	ee07 3a90 	vmov	s15, r3
 8008764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008776:	4b7b      	ldr	r3, [pc, #492]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008786:	ed97 6a03 	vldr	s12, [r7, #12]
 800878a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800896c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800878e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800879a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087a6:	e087      	b.n	80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008970 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80087b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ba:	4b6a      	ldr	r3, [pc, #424]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800896c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ea:	e065      	b.n	80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fe:	4b59      	ldr	r3, [pc, #356]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008812:	eddf 5a56 	vldr	s11, [pc, #344]	; 800896c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800881a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800882e:	e043      	b.n	80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800883e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008842:	4b48      	ldr	r3, [pc, #288]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008852:	ed97 6a03 	vldr	s12, [r7, #12]
 8008856:	eddf 5a45 	vldr	s11, [pc, #276]	; 800896c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800885a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800886a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008872:	e021      	b.n	80088b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008886:	4b37      	ldr	r3, [pc, #220]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008896:	ed97 6a03 	vldr	s12, [r7, #12]
 800889a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800896c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800889e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80088b8:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088bc:	0a5b      	lsrs	r3, r3, #9
 80088be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088de:	ee17 2a90 	vmov	r2, s15
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80088e6:	4b1f      	ldr	r3, [pc, #124]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	0c1b      	lsrs	r3, r3, #16
 80088ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f0:	ee07 3a90 	vmov	s15, r3
 80088f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008900:	edd7 6a07 	vldr	s13, [r7, #28]
 8008904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800890c:	ee17 2a90 	vmov	r2, s15
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008914:	4b13      	ldr	r3, [pc, #76]	; (8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008918:	0e1b      	lsrs	r3, r3, #24
 800891a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008926:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800892a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800892e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800893a:	ee17 2a90 	vmov	r2, s15
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008942:	e008      	b.n	8008956 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	609a      	str	r2, [r3, #8]
}
 8008956:	bf00      	nop
 8008958:	3724      	adds	r7, #36	; 0x24
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	58024400 	.word	0x58024400
 8008968:	03d09000 	.word	0x03d09000
 800896c:	46000000 	.word	0x46000000
 8008970:	4c742400 	.word	0x4c742400
 8008974:	4a742400 	.word	0x4a742400
 8008978:	4bbb8000 	.word	0x4bbb8000

0800897c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800897c:	b480      	push	{r7}
 800897e:	b089      	sub	sp, #36	; 0x24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008984:	4ba0      	ldr	r3, [pc, #640]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008988:	f003 0303 	and.w	r3, r3, #3
 800898c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800898e:	4b9e      	ldr	r3, [pc, #632]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008992:	091b      	lsrs	r3, r3, #4
 8008994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008998:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800899a:	4b9b      	ldr	r3, [pc, #620]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089a4:	4b98      	ldr	r3, [pc, #608]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	08db      	lsrs	r3, r3, #3
 80089aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	fb02 f303 	mul.w	r3, r2, r3
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 8111 	beq.w	8008bea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	f000 8083 	beq.w	8008ad6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	f200 80a1 	bhi.w	8008b1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d056      	beq.n	8008a92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80089e4:	e099      	b.n	8008b1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089e6:	4b88      	ldr	r3, [pc, #544]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d02d      	beq.n	8008a4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089f2:	4b85      	ldr	r3, [pc, #532]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	08db      	lsrs	r3, r3, #3
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	4a83      	ldr	r2, [pc, #524]	; (8008c0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	ee07 3a90 	vmov	s15, r3
 8008a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1c:	4b7a      	ldr	r3, [pc, #488]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a24:	ee07 3a90 	vmov	s15, r3
 8008a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a30:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a48:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a4c:	e087      	b.n	8008b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	ee07 3a90 	vmov	s15, r3
 8008a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a60:	4b69      	ldr	r3, [pc, #420]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a68:	ee07 3a90 	vmov	s15, r3
 8008a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a74:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a90:	e065      	b.n	8008b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	ee07 3a90 	vmov	s15, r3
 8008a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008c18 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa4:	4b58      	ldr	r3, [pc, #352]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aac:	ee07 3a90 	vmov	s15, r3
 8008ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad4:	e043      	b.n	8008b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	ee07 3a90 	vmov	s15, r3
 8008adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008c1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae8:	4b47      	ldr	r3, [pc, #284]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af0:	ee07 3a90 	vmov	s15, r3
 8008af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008afc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b18:	e021      	b.n	8008b5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	ee07 3a90 	vmov	s15, r3
 8008b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b24:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008c14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2c:	4b36      	ldr	r3, [pc, #216]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b34:	ee07 3a90 	vmov	s15, r3
 8008b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b40:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008c10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008b5e:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	0a5b      	lsrs	r3, r3, #9
 8008b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b68:	ee07 3a90 	vmov	s15, r3
 8008b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b84:	ee17 2a90 	vmov	r2, s15
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008b8c:	4b1e      	ldr	r3, [pc, #120]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	0c1b      	lsrs	r3, r3, #16
 8008b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb2:	ee17 2a90 	vmov	r2, s15
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008bba:	4b13      	ldr	r3, [pc, #76]	; (8008c08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbe:	0e1b      	lsrs	r3, r3, #24
 8008bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc4:	ee07 3a90 	vmov	s15, r3
 8008bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008be0:	ee17 2a90 	vmov	r2, s15
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008be8:	e008      	b.n	8008bfc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	609a      	str	r2, [r3, #8]
}
 8008bfc:	bf00      	nop
 8008bfe:	3724      	adds	r7, #36	; 0x24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	58024400 	.word	0x58024400
 8008c0c:	03d09000 	.word	0x03d09000
 8008c10:	46000000 	.word	0x46000000
 8008c14:	4c742400 	.word	0x4c742400
 8008c18:	4a742400 	.word	0x4a742400
 8008c1c:	4bbb8000 	.word	0x4bbb8000

08008c20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c2e:	4b53      	ldr	r3, [pc, #332]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d101      	bne.n	8008c3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e099      	b.n	8008d72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c3e:	4b4f      	ldr	r3, [pc, #316]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a4e      	ldr	r2, [pc, #312]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c4a:	f7f9 fd3b 	bl	80026c4 <HAL_GetTick>
 8008c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c50:	e008      	b.n	8008c64 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c52:	f7f9 fd37 	bl	80026c4 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d901      	bls.n	8008c64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e086      	b.n	8008d72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c64:	4b45      	ldr	r3, [pc, #276]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1f0      	bne.n	8008c52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c70:	4b42      	ldr	r3, [pc, #264]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	031b      	lsls	r3, r3, #12
 8008c7e:	493f      	ldr	r1, [pc, #252]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	628b      	str	r3, [r1, #40]	; 0x28
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	025b      	lsls	r3, r3, #9
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	041b      	lsls	r3, r3, #16
 8008ca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	061b      	lsls	r3, r3, #24
 8008cb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cb4:	4931      	ldr	r1, [pc, #196]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cba:	4b30      	ldr	r3, [pc, #192]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	492d      	ldr	r1, [pc, #180]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd0:	f023 0220 	bic.w	r2, r3, #32
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	4928      	ldr	r1, [pc, #160]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cde:	4b27      	ldr	r3, [pc, #156]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	4a26      	ldr	r2, [pc, #152]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	f023 0310 	bic.w	r3, r3, #16
 8008ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cea:	4b24      	ldr	r3, [pc, #144]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cee:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <RCCEx_PLL2_Config+0x160>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	69d2      	ldr	r2, [r2, #28]
 8008cf6:	00d2      	lsls	r2, r2, #3
 8008cf8:	4920      	ldr	r1, [pc, #128]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008cfe:	4b1f      	ldr	r3, [pc, #124]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	4a1e      	ldr	r2, [pc, #120]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d04:	f043 0310 	orr.w	r3, r3, #16
 8008d08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d106      	bne.n	8008d1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d10:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	4a19      	ldr	r2, [pc, #100]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d1c:	e00f      	b.n	8008d3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d106      	bne.n	8008d32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d24:	4b15      	ldr	r3, [pc, #84]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d30:	e005      	b.n	8008d3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d32:	4b12      	ldr	r3, [pc, #72]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	4a11      	ldr	r2, [pc, #68]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a0e      	ldr	r2, [pc, #56]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d4a:	f7f9 fcbb 	bl	80026c4 <HAL_GetTick>
 8008d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d50:	e008      	b.n	8008d64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d52:	f7f9 fcb7 	bl	80026c4 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d901      	bls.n	8008d64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e006      	b.n	8008d72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <RCCEx_PLL2_Config+0x15c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0f0      	beq.n	8008d52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	ffff0007 	.word	0xffff0007

08008d84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d92:	4b53      	ldr	r3, [pc, #332]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d101      	bne.n	8008da2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e099      	b.n	8008ed6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008da2:	4b4f      	ldr	r3, [pc, #316]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a4e      	ldr	r2, [pc, #312]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dae:	f7f9 fc89 	bl	80026c4 <HAL_GetTick>
 8008db2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008db4:	e008      	b.n	8008dc8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008db6:	f7f9 fc85 	bl	80026c4 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d901      	bls.n	8008dc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e086      	b.n	8008ed6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dc8:	4b45      	ldr	r3, [pc, #276]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f0      	bne.n	8008db6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008dd4:	4b42      	ldr	r3, [pc, #264]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	051b      	lsls	r3, r3, #20
 8008de2:	493f      	ldr	r1, [pc, #252]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	628b      	str	r3, [r1, #40]	; 0x28
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	025b      	lsls	r3, r3, #9
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	061b      	lsls	r3, r3, #24
 8008e14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e18:	4931      	ldr	r1, [pc, #196]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e1e:	4b30      	ldr	r3, [pc, #192]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	492d      	ldr	r1, [pc, #180]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e30:	4b2b      	ldr	r3, [pc, #172]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	4928      	ldr	r1, [pc, #160]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e42:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e4e:	4b24      	ldr	r3, [pc, #144]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e52:	4b24      	ldr	r3, [pc, #144]	; (8008ee4 <RCCEx_PLL3_Config+0x160>)
 8008e54:	4013      	ands	r3, r2
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	69d2      	ldr	r2, [r2, #28]
 8008e5a:	00d2      	lsls	r2, r2, #3
 8008e5c:	4920      	ldr	r1, [pc, #128]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e62:	4b1f      	ldr	r3, [pc, #124]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e74:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	4a19      	ldr	r2, [pc, #100]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e80:	e00f      	b.n	8008ea2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d106      	bne.n	8008e96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e88:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	4a14      	ldr	r2, [pc, #80]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e94:	e005      	b.n	8008ea2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e96:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008e9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ea2:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a0e      	ldr	r2, [pc, #56]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eae:	f7f9 fc09 	bl	80026c4 <HAL_GetTick>
 8008eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008eb4:	e008      	b.n	8008ec8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008eb6:	f7f9 fc05 	bl	80026c4 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d901      	bls.n	8008ec8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e006      	b.n	8008ed6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ec8:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <RCCEx_PLL3_Config+0x15c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0f0      	beq.n	8008eb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	58024400 	.word	0x58024400
 8008ee4:	ffff0007 	.word	0xffff0007

08008ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e049      	b.n	8008f8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f841 	bl	8008f96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f000 f9e8 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d001      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e054      	b.n	800906e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a26      	ldr	r2, [pc, #152]	; (800907c <HAL_TIM_Base_Start_IT+0xd0>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d022      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fee:	d01d      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a22      	ldr	r2, [pc, #136]	; (8009080 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d018      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a21      	ldr	r2, [pc, #132]	; (8009084 <HAL_TIM_Base_Start_IT+0xd8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d013      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1f      	ldr	r2, [pc, #124]	; (8009088 <HAL_TIM_Base_Start_IT+0xdc>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d00e      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a1e      	ldr	r2, [pc, #120]	; (800908c <HAL_TIM_Base_Start_IT+0xe0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d009      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a1c      	ldr	r2, [pc, #112]	; (8009090 <HAL_TIM_Base_Start_IT+0xe4>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d004      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1b      	ldr	r2, [pc, #108]	; (8009094 <HAL_TIM_Base_Start_IT+0xe8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d115      	bne.n	8009058 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	4b19      	ldr	r3, [pc, #100]	; (8009098 <HAL_TIM_Base_Start_IT+0xec>)
 8009034:	4013      	ands	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b06      	cmp	r3, #6
 800903c:	d015      	beq.n	800906a <HAL_TIM_Base_Start_IT+0xbe>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009044:	d011      	beq.n	800906a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0201 	orr.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009056:	e008      	b.n	800906a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e000      	b.n	800906c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	40010000 	.word	0x40010000
 8009080:	40000400 	.word	0x40000400
 8009084:	40000800 	.word	0x40000800
 8009088:	40000c00 	.word	0x40000c00
 800908c:	40010400 	.word	0x40010400
 8009090:	40001800 	.word	0x40001800
 8009094:	40014000 	.word	0x40014000
 8009098:	00010007 	.word	0x00010007

0800909c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d020      	beq.n	8009100 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01b      	beq.n	8009100 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f06f 0202 	mvn.w	r2, #2
 80090d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f8e9 	bl	80092be <HAL_TIM_IC_CaptureCallback>
 80090ec:	e005      	b.n	80090fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f8db 	bl	80092aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f8ec 	bl	80092d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f003 0304 	and.w	r3, r3, #4
 8009106:	2b00      	cmp	r3, #0
 8009108:	d020      	beq.n	800914c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01b      	beq.n	800914c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f06f 0204 	mvn.w	r2, #4
 800911c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2202      	movs	r2, #2
 8009122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f8c3 	bl	80092be <HAL_TIM_IC_CaptureCallback>
 8009138:	e005      	b.n	8009146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8b5 	bl	80092aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f8c6 	bl	80092d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f003 0308 	and.w	r3, r3, #8
 8009152:	2b00      	cmp	r3, #0
 8009154:	d020      	beq.n	8009198 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01b      	beq.n	8009198 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f06f 0208 	mvn.w	r2, #8
 8009168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2204      	movs	r2, #4
 800916e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f89d 	bl	80092be <HAL_TIM_IC_CaptureCallback>
 8009184:	e005      	b.n	8009192 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f88f 	bl	80092aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f8a0 	bl	80092d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d020      	beq.n	80091e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01b      	beq.n	80091e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f06f 0210 	mvn.w	r2, #16
 80091b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2208      	movs	r2, #8
 80091ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f877 	bl	80092be <HAL_TIM_IC_CaptureCallback>
 80091d0:	e005      	b.n	80091de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f869 	bl	80092aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f87a 	bl	80092d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00c      	beq.n	8009208 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d007      	beq.n	8009208 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f06f 0201 	mvn.w	r2, #1
 8009200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7f8 fd94 	bl	8001d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800922e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f913 	bl	800945c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00c      	beq.n	800925a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009246:	2b00      	cmp	r3, #0
 8009248:	d007      	beq.n	800925a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f90b 	bl	8009470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00c      	beq.n	800927e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926a:	2b00      	cmp	r3, #0
 800926c:	d007      	beq.n	800927e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f834 	bl	80092e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	f003 0320 	and.w	r3, r3, #32
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00c      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d007      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f06f 0220 	mvn.w	r2, #32
 800929a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f8d3 	bl	8009448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092a2:	bf00      	nop
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092ee:	bf00      	nop
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a46      	ldr	r2, [pc, #280]	; (8009428 <TIM_Base_SetConfig+0x12c>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d013      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931a:	d00f      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a43      	ldr	r2, [pc, #268]	; (800942c <TIM_Base_SetConfig+0x130>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00b      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a42      	ldr	r2, [pc, #264]	; (8009430 <TIM_Base_SetConfig+0x134>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d007      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a41      	ldr	r2, [pc, #260]	; (8009434 <TIM_Base_SetConfig+0x138>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d003      	beq.n	800933c <TIM_Base_SetConfig+0x40>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a40      	ldr	r2, [pc, #256]	; (8009438 <TIM_Base_SetConfig+0x13c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d108      	bne.n	800934e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a35      	ldr	r2, [pc, #212]	; (8009428 <TIM_Base_SetConfig+0x12c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d01f      	beq.n	8009396 <TIM_Base_SetConfig+0x9a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935c:	d01b      	beq.n	8009396 <TIM_Base_SetConfig+0x9a>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a32      	ldr	r2, [pc, #200]	; (800942c <TIM_Base_SetConfig+0x130>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d017      	beq.n	8009396 <TIM_Base_SetConfig+0x9a>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a31      	ldr	r2, [pc, #196]	; (8009430 <TIM_Base_SetConfig+0x134>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d013      	beq.n	8009396 <TIM_Base_SetConfig+0x9a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a30      	ldr	r2, [pc, #192]	; (8009434 <TIM_Base_SetConfig+0x138>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d00f      	beq.n	8009396 <TIM_Base_SetConfig+0x9a>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a2f      	ldr	r2, [pc, #188]	; (8009438 <TIM_Base_SetConfig+0x13c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d00b      	beq.n	8009396 <TIM_Base_SetConfig+0x9a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a2e      	ldr	r2, [pc, #184]	; (800943c <TIM_Base_SetConfig+0x140>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d007      	beq.n	8009396 <TIM_Base_SetConfig+0x9a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a2d      	ldr	r2, [pc, #180]	; (8009440 <TIM_Base_SetConfig+0x144>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d003      	beq.n	8009396 <TIM_Base_SetConfig+0x9a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a2c      	ldr	r2, [pc, #176]	; (8009444 <TIM_Base_SetConfig+0x148>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d108      	bne.n	80093a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800939c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a16      	ldr	r2, [pc, #88]	; (8009428 <TIM_Base_SetConfig+0x12c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d00f      	beq.n	80093f4 <TIM_Base_SetConfig+0xf8>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a18      	ldr	r2, [pc, #96]	; (8009438 <TIM_Base_SetConfig+0x13c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d00b      	beq.n	80093f4 <TIM_Base_SetConfig+0xf8>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a17      	ldr	r2, [pc, #92]	; (800943c <TIM_Base_SetConfig+0x140>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d007      	beq.n	80093f4 <TIM_Base_SetConfig+0xf8>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a16      	ldr	r2, [pc, #88]	; (8009440 <TIM_Base_SetConfig+0x144>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d003      	beq.n	80093f4 <TIM_Base_SetConfig+0xf8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a15      	ldr	r2, [pc, #84]	; (8009444 <TIM_Base_SetConfig+0x148>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d103      	bne.n	80093fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b01      	cmp	r3, #1
 800940c:	d105      	bne.n	800941a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f023 0201 	bic.w	r2, r3, #1
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	611a      	str	r2, [r3, #16]
  }
}
 800941a:	bf00      	nop
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	40010000 	.word	0x40010000
 800942c:	40000400 	.word	0x40000400
 8009430:	40000800 	.word	0x40000800
 8009434:	40000c00 	.word	0x40000c00
 8009438:	40010400 	.word	0x40010400
 800943c:	40014000 	.word	0x40014000
 8009440:	40014400 	.word	0x40014400
 8009444:	40014800 	.word	0x40014800

08009448 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e042      	b.n	800951c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949c:	2b00      	cmp	r3, #0
 800949e:	d106      	bne.n	80094ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7f8 fd85 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2224      	movs	r2, #36	; 0x24
 80094b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0201 	bic.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fe8a 	bl	800a1e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f91f 	bl	8009718 <UART_SetConfig>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d101      	bne.n	80094e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e01b      	b.n	800951c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689a      	ldr	r2, [r3, #8]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0201 	orr.w	r2, r2, #1
 8009512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 ff09 	bl	800a32c <UART_CheckIdleState>
 800951a:	4603      	mov	r3, r0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08a      	sub	sp, #40	; 0x28
 8009528:	af02      	add	r7, sp, #8
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	4613      	mov	r3, r2
 8009532:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953a:	2b20      	cmp	r3, #32
 800953c:	d17b      	bne.n	8009636 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <HAL_UART_Transmit+0x26>
 8009544:	88fb      	ldrh	r3, [r7, #6]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e074      	b.n	8009638 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2221      	movs	r2, #33	; 0x21
 800955a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800955e:	f7f9 f8b1 	bl	80026c4 <HAL_GetTick>
 8009562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957c:	d108      	bne.n	8009590 <HAL_UART_Transmit+0x6c>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d104      	bne.n	8009590 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	e003      	b.n	8009598 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009594:	2300      	movs	r3, #0
 8009596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009598:	e030      	b.n	80095fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2200      	movs	r2, #0
 80095a2:	2180      	movs	r1, #128	; 0x80
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 ff6b 	bl	800a480 <UART_WaitOnFlagUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e03d      	b.n	8009638 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10b      	bne.n	80095da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	3302      	adds	r3, #2
 80095d6:	61bb      	str	r3, [r7, #24]
 80095d8:	e007      	b.n	80095ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	3301      	adds	r3, #1
 80095e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1c8      	bne.n	800959a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2200      	movs	r2, #0
 8009610:	2140      	movs	r1, #64	; 0x40
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 ff34 	bl	800a480 <UART_WaitOnFlagUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d005      	beq.n	800962a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e006      	b.n	8009638 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2220      	movs	r2, #32
 800962e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	e000      	b.n	8009638 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009636:	2302      	movs	r3, #2
  }
}
 8009638:	4618      	mov	r0, r3
 800963a:	3720      	adds	r7, #32
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08a      	sub	sp, #40	; 0x28
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4613      	mov	r3, r2
 800964c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009654:	2b20      	cmp	r3, #32
 8009656:	d137      	bne.n	80096c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <HAL_UART_Receive_DMA+0x24>
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e030      	b.n	80096ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a18      	ldr	r2, [pc, #96]	; (80096d4 <HAL_UART_Receive_DMA+0x94>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d01f      	beq.n	80096b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d018      	beq.n	80096b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	613b      	str	r3, [r7, #16]
   return(result);
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	623b      	str	r3, [r7, #32]
 80096a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	69f9      	ldr	r1, [r7, #28]
 80096aa:	6a3a      	ldr	r2, [r7, #32]
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e6      	bne.n	8009686 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80096b8:	88fb      	ldrh	r3, [r7, #6]
 80096ba:	461a      	mov	r2, r3
 80096bc:	68b9      	ldr	r1, [r7, #8]
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 ff4c 	bl	800a55c <UART_Start_Receive_DMA>
 80096c4:	4603      	mov	r3, r0
 80096c6:	e000      	b.n	80096ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096c8:	2302      	movs	r3, #2
  }
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3728      	adds	r7, #40	; 0x28
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	58000c00 	.word	0x58000c00

080096d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800971c:	b092      	sub	sp, #72	; 0x48
 800971e:	af00      	add	r7, sp, #0
 8009720:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	431a      	orrs	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	431a      	orrs	r2, r3
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	4313      	orrs	r3, r2
 800973e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	4bbe      	ldr	r3, [pc, #760]	; (8009a40 <UART_SetConfig+0x328>)
 8009748:	4013      	ands	r3, r2
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009750:	430b      	orrs	r3, r1
 8009752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4ab3      	ldr	r2, [pc, #716]	; (8009a44 <UART_SetConfig+0x32c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d004      	beq.n	8009784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009780:	4313      	orrs	r3, r2
 8009782:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689a      	ldr	r2, [r3, #8]
 800978a:	4baf      	ldr	r3, [pc, #700]	; (8009a48 <UART_SetConfig+0x330>)
 800978c:	4013      	ands	r3, r2
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009794:	430b      	orrs	r3, r1
 8009796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	f023 010f 	bic.w	r1, r3, #15
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4aa6      	ldr	r2, [pc, #664]	; (8009a4c <UART_SetConfig+0x334>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d177      	bne.n	80098a8 <UART_SetConfig+0x190>
 80097b8:	4ba5      	ldr	r3, [pc, #660]	; (8009a50 <UART_SetConfig+0x338>)
 80097ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097c0:	2b28      	cmp	r3, #40	; 0x28
 80097c2:	d86d      	bhi.n	80098a0 <UART_SetConfig+0x188>
 80097c4:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <UART_SetConfig+0xb4>)
 80097c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ca:	bf00      	nop
 80097cc:	08009871 	.word	0x08009871
 80097d0:	080098a1 	.word	0x080098a1
 80097d4:	080098a1 	.word	0x080098a1
 80097d8:	080098a1 	.word	0x080098a1
 80097dc:	080098a1 	.word	0x080098a1
 80097e0:	080098a1 	.word	0x080098a1
 80097e4:	080098a1 	.word	0x080098a1
 80097e8:	080098a1 	.word	0x080098a1
 80097ec:	08009879 	.word	0x08009879
 80097f0:	080098a1 	.word	0x080098a1
 80097f4:	080098a1 	.word	0x080098a1
 80097f8:	080098a1 	.word	0x080098a1
 80097fc:	080098a1 	.word	0x080098a1
 8009800:	080098a1 	.word	0x080098a1
 8009804:	080098a1 	.word	0x080098a1
 8009808:	080098a1 	.word	0x080098a1
 800980c:	08009881 	.word	0x08009881
 8009810:	080098a1 	.word	0x080098a1
 8009814:	080098a1 	.word	0x080098a1
 8009818:	080098a1 	.word	0x080098a1
 800981c:	080098a1 	.word	0x080098a1
 8009820:	080098a1 	.word	0x080098a1
 8009824:	080098a1 	.word	0x080098a1
 8009828:	080098a1 	.word	0x080098a1
 800982c:	08009889 	.word	0x08009889
 8009830:	080098a1 	.word	0x080098a1
 8009834:	080098a1 	.word	0x080098a1
 8009838:	080098a1 	.word	0x080098a1
 800983c:	080098a1 	.word	0x080098a1
 8009840:	080098a1 	.word	0x080098a1
 8009844:	080098a1 	.word	0x080098a1
 8009848:	080098a1 	.word	0x080098a1
 800984c:	08009891 	.word	0x08009891
 8009850:	080098a1 	.word	0x080098a1
 8009854:	080098a1 	.word	0x080098a1
 8009858:	080098a1 	.word	0x080098a1
 800985c:	080098a1 	.word	0x080098a1
 8009860:	080098a1 	.word	0x080098a1
 8009864:	080098a1 	.word	0x080098a1
 8009868:	080098a1 	.word	0x080098a1
 800986c:	08009899 	.word	0x08009899
 8009870:	2301      	movs	r3, #1
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009876:	e222      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987e:	e21e      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009886:	e21a      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988e:	e216      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009890:	2320      	movs	r3, #32
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009896:	e212      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e20e      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80098a0:	2380      	movs	r3, #128	; 0x80
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e20a      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a69      	ldr	r2, [pc, #420]	; (8009a54 <UART_SetConfig+0x33c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d130      	bne.n	8009914 <UART_SetConfig+0x1fc>
 80098b2:	4b67      	ldr	r3, [pc, #412]	; (8009a50 <UART_SetConfig+0x338>)
 80098b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	d826      	bhi.n	800990c <UART_SetConfig+0x1f4>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0x1ac>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098dd 	.word	0x080098dd
 80098c8:	080098e5 	.word	0x080098e5
 80098cc:	080098ed 	.word	0x080098ed
 80098d0:	080098f5 	.word	0x080098f5
 80098d4:	080098fd 	.word	0x080098fd
 80098d8:	08009905 	.word	0x08009905
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098e2:	e1ec      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80098e4:	2304      	movs	r3, #4
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ea:	e1e8      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80098ec:	2308      	movs	r3, #8
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098f2:	e1e4      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80098f4:	2310      	movs	r3, #16
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098fa:	e1e0      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80098fc:	2320      	movs	r3, #32
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009902:	e1dc      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990a:	e1d8      	b.n	8009cbe <UART_SetConfig+0x5a6>
 800990c:	2380      	movs	r3, #128	; 0x80
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009912:	e1d4      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a4f      	ldr	r2, [pc, #316]	; (8009a58 <UART_SetConfig+0x340>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d130      	bne.n	8009980 <UART_SetConfig+0x268>
 800991e:	4b4c      	ldr	r3, [pc, #304]	; (8009a50 <UART_SetConfig+0x338>)
 8009920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	2b05      	cmp	r3, #5
 8009928:	d826      	bhi.n	8009978 <UART_SetConfig+0x260>
 800992a:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <UART_SetConfig+0x218>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009949 	.word	0x08009949
 8009934:	08009951 	.word	0x08009951
 8009938:	08009959 	.word	0x08009959
 800993c:	08009961 	.word	0x08009961
 8009940:	08009969 	.word	0x08009969
 8009944:	08009971 	.word	0x08009971
 8009948:	2300      	movs	r3, #0
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994e:	e1b6      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009950:	2304      	movs	r3, #4
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009956:	e1b2      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009958:	2308      	movs	r3, #8
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995e:	e1ae      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009960:	2310      	movs	r3, #16
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009966:	e1aa      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009968:	2320      	movs	r3, #32
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996e:	e1a6      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009970:	2340      	movs	r3, #64	; 0x40
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009976:	e1a2      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009978:	2380      	movs	r3, #128	; 0x80
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e19e      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a35      	ldr	r2, [pc, #212]	; (8009a5c <UART_SetConfig+0x344>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d130      	bne.n	80099ec <UART_SetConfig+0x2d4>
 800998a:	4b31      	ldr	r3, [pc, #196]	; (8009a50 <UART_SetConfig+0x338>)
 800998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	2b05      	cmp	r3, #5
 8009994:	d826      	bhi.n	80099e4 <UART_SetConfig+0x2cc>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <UART_SetConfig+0x284>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099b5 	.word	0x080099b5
 80099a0:	080099bd 	.word	0x080099bd
 80099a4:	080099c5 	.word	0x080099c5
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099d5 	.word	0x080099d5
 80099b0:	080099dd 	.word	0x080099dd
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ba:	e180      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80099bc:	2304      	movs	r3, #4
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c2:	e17c      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80099c4:	2308      	movs	r3, #8
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ca:	e178      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80099cc:	2310      	movs	r3, #16
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d2:	e174      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80099d4:	2320      	movs	r3, #32
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099da:	e170      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80099dc:	2340      	movs	r3, #64	; 0x40
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e2:	e16c      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80099e4:	2380      	movs	r3, #128	; 0x80
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ea:	e168      	b.n	8009cbe <UART_SetConfig+0x5a6>
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <UART_SetConfig+0x348>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d142      	bne.n	8009a7c <UART_SetConfig+0x364>
 80099f6:	4b16      	ldr	r3, [pc, #88]	; (8009a50 <UART_SetConfig+0x338>)
 80099f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	2b05      	cmp	r3, #5
 8009a00:	d838      	bhi.n	8009a74 <UART_SetConfig+0x35c>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <UART_SetConfig+0x2f0>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a21 	.word	0x08009a21
 8009a0c:	08009a29 	.word	0x08009a29
 8009a10:	08009a31 	.word	0x08009a31
 8009a14:	08009a39 	.word	0x08009a39
 8009a18:	08009a65 	.word	0x08009a65
 8009a1c:	08009a6d 	.word	0x08009a6d
 8009a20:	2300      	movs	r3, #0
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a26:	e14a      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2e:	e146      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009a30:	2308      	movs	r3, #8
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a36:	e142      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3e:	e13e      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009a40:	cfff69f3 	.word	0xcfff69f3
 8009a44:	58000c00 	.word	0x58000c00
 8009a48:	11fff4ff 	.word	0x11fff4ff
 8009a4c:	40011000 	.word	0x40011000
 8009a50:	58024400 	.word	0x58024400
 8009a54:	40004400 	.word	0x40004400
 8009a58:	40004800 	.word	0x40004800
 8009a5c:	40004c00 	.word	0x40004c00
 8009a60:	40005000 	.word	0x40005000
 8009a64:	2320      	movs	r3, #32
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6a:	e128      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009a6c:	2340      	movs	r3, #64	; 0x40
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a72:	e124      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009a74:	2380      	movs	r3, #128	; 0x80
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7a:	e120      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4acb      	ldr	r2, [pc, #812]	; (8009db0 <UART_SetConfig+0x698>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d176      	bne.n	8009b74 <UART_SetConfig+0x45c>
 8009a86:	4bcb      	ldr	r3, [pc, #812]	; (8009db4 <UART_SetConfig+0x69c>)
 8009a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a8e:	2b28      	cmp	r3, #40	; 0x28
 8009a90:	d86c      	bhi.n	8009b6c <UART_SetConfig+0x454>
 8009a92:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <UART_SetConfig+0x380>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009b3d 	.word	0x08009b3d
 8009a9c:	08009b6d 	.word	0x08009b6d
 8009aa0:	08009b6d 	.word	0x08009b6d
 8009aa4:	08009b6d 	.word	0x08009b6d
 8009aa8:	08009b6d 	.word	0x08009b6d
 8009aac:	08009b6d 	.word	0x08009b6d
 8009ab0:	08009b6d 	.word	0x08009b6d
 8009ab4:	08009b6d 	.word	0x08009b6d
 8009ab8:	08009b45 	.word	0x08009b45
 8009abc:	08009b6d 	.word	0x08009b6d
 8009ac0:	08009b6d 	.word	0x08009b6d
 8009ac4:	08009b6d 	.word	0x08009b6d
 8009ac8:	08009b6d 	.word	0x08009b6d
 8009acc:	08009b6d 	.word	0x08009b6d
 8009ad0:	08009b6d 	.word	0x08009b6d
 8009ad4:	08009b6d 	.word	0x08009b6d
 8009ad8:	08009b4d 	.word	0x08009b4d
 8009adc:	08009b6d 	.word	0x08009b6d
 8009ae0:	08009b6d 	.word	0x08009b6d
 8009ae4:	08009b6d 	.word	0x08009b6d
 8009ae8:	08009b6d 	.word	0x08009b6d
 8009aec:	08009b6d 	.word	0x08009b6d
 8009af0:	08009b6d 	.word	0x08009b6d
 8009af4:	08009b6d 	.word	0x08009b6d
 8009af8:	08009b55 	.word	0x08009b55
 8009afc:	08009b6d 	.word	0x08009b6d
 8009b00:	08009b6d 	.word	0x08009b6d
 8009b04:	08009b6d 	.word	0x08009b6d
 8009b08:	08009b6d 	.word	0x08009b6d
 8009b0c:	08009b6d 	.word	0x08009b6d
 8009b10:	08009b6d 	.word	0x08009b6d
 8009b14:	08009b6d 	.word	0x08009b6d
 8009b18:	08009b5d 	.word	0x08009b5d
 8009b1c:	08009b6d 	.word	0x08009b6d
 8009b20:	08009b6d 	.word	0x08009b6d
 8009b24:	08009b6d 	.word	0x08009b6d
 8009b28:	08009b6d 	.word	0x08009b6d
 8009b2c:	08009b6d 	.word	0x08009b6d
 8009b30:	08009b6d 	.word	0x08009b6d
 8009b34:	08009b6d 	.word	0x08009b6d
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b42:	e0bc      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009b44:	2304      	movs	r3, #4
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4a:	e0b8      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b52:	e0b4      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009b54:	2310      	movs	r3, #16
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5a:	e0b0      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009b5c:	2320      	movs	r3, #32
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b62:	e0ac      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e0a8      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009b6c:	2380      	movs	r3, #128	; 0x80
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b72:	e0a4      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a8f      	ldr	r2, [pc, #572]	; (8009db8 <UART_SetConfig+0x6a0>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d130      	bne.n	8009be0 <UART_SetConfig+0x4c8>
 8009b7e:	4b8d      	ldr	r3, [pc, #564]	; (8009db4 <UART_SetConfig+0x69c>)
 8009b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b05      	cmp	r3, #5
 8009b88:	d826      	bhi.n	8009bd8 <UART_SetConfig+0x4c0>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <UART_SetConfig+0x478>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009ba9 	.word	0x08009ba9
 8009b94:	08009bb1 	.word	0x08009bb1
 8009b98:	08009bb9 	.word	0x08009bb9
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bc9 	.word	0x08009bc9
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bae:	e086      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb6:	e082      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009bb8:	2308      	movs	r3, #8
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bbe:	e07e      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc6:	e07a      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009bc8:	2320      	movs	r3, #32
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bce:	e076      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd6:	e072      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009bd8:	2380      	movs	r3, #128	; 0x80
 8009bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bde:	e06e      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a75      	ldr	r2, [pc, #468]	; (8009dbc <UART_SetConfig+0x6a4>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d130      	bne.n	8009c4c <UART_SetConfig+0x534>
 8009bea:	4b72      	ldr	r3, [pc, #456]	; (8009db4 <UART_SetConfig+0x69c>)
 8009bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b05      	cmp	r3, #5
 8009bf4:	d826      	bhi.n	8009c44 <UART_SetConfig+0x52c>
 8009bf6:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <UART_SetConfig+0x4e4>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c15 	.word	0x08009c15
 8009c00:	08009c1d 	.word	0x08009c1d
 8009c04:	08009c25 	.word	0x08009c25
 8009c08:	08009c2d 	.word	0x08009c2d
 8009c0c:	08009c35 	.word	0x08009c35
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	2300      	movs	r3, #0
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1a:	e050      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c22:	e04c      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c24:	2308      	movs	r3, #8
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2a:	e048      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c2c:	2310      	movs	r3, #16
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c32:	e044      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c34:	2320      	movs	r3, #32
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3a:	e040      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c3c:	2340      	movs	r3, #64	; 0x40
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c42:	e03c      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c44:	2380      	movs	r3, #128	; 0x80
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4a:	e038      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a5b      	ldr	r2, [pc, #364]	; (8009dc0 <UART_SetConfig+0x6a8>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d130      	bne.n	8009cb8 <UART_SetConfig+0x5a0>
 8009c56:	4b57      	ldr	r3, [pc, #348]	; (8009db4 <UART_SetConfig+0x69c>)
 8009c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	2b05      	cmp	r3, #5
 8009c60:	d826      	bhi.n	8009cb0 <UART_SetConfig+0x598>
 8009c62:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <UART_SetConfig+0x550>)
 8009c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c68:	08009c81 	.word	0x08009c81
 8009c6c:	08009c89 	.word	0x08009c89
 8009c70:	08009c91 	.word	0x08009c91
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009ca9 	.word	0x08009ca9
 8009c80:	2302      	movs	r3, #2
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c86:	e01a      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c88:	2304      	movs	r3, #4
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8e:	e016      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c90:	2308      	movs	r3, #8
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c96:	e012      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009c98:	2310      	movs	r3, #16
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9e:	e00e      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009ca0:	2320      	movs	r3, #32
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca6:	e00a      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009ca8:	2340      	movs	r3, #64	; 0x40
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cae:	e006      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009cb0:	2380      	movs	r3, #128	; 0x80
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb6:	e002      	b.n	8009cbe <UART_SetConfig+0x5a6>
 8009cb8:	2380      	movs	r3, #128	; 0x80
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a3f      	ldr	r2, [pc, #252]	; (8009dc0 <UART_SetConfig+0x6a8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	f040 80f8 	bne.w	8009eba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cce:	2b20      	cmp	r3, #32
 8009cd0:	dc46      	bgt.n	8009d60 <UART_SetConfig+0x648>
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	f2c0 8082 	blt.w	8009ddc <UART_SetConfig+0x6c4>
 8009cd8:	3b02      	subs	r3, #2
 8009cda:	2b1e      	cmp	r3, #30
 8009cdc:	d87e      	bhi.n	8009ddc <UART_SetConfig+0x6c4>
 8009cde:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <UART_SetConfig+0x5cc>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d67 	.word	0x08009d67
 8009ce8:	08009ddd 	.word	0x08009ddd
 8009cec:	08009d6f 	.word	0x08009d6f
 8009cf0:	08009ddd 	.word	0x08009ddd
 8009cf4:	08009ddd 	.word	0x08009ddd
 8009cf8:	08009ddd 	.word	0x08009ddd
 8009cfc:	08009d7f 	.word	0x08009d7f
 8009d00:	08009ddd 	.word	0x08009ddd
 8009d04:	08009ddd 	.word	0x08009ddd
 8009d08:	08009ddd 	.word	0x08009ddd
 8009d0c:	08009ddd 	.word	0x08009ddd
 8009d10:	08009ddd 	.word	0x08009ddd
 8009d14:	08009ddd 	.word	0x08009ddd
 8009d18:	08009ddd 	.word	0x08009ddd
 8009d1c:	08009d8f 	.word	0x08009d8f
 8009d20:	08009ddd 	.word	0x08009ddd
 8009d24:	08009ddd 	.word	0x08009ddd
 8009d28:	08009ddd 	.word	0x08009ddd
 8009d2c:	08009ddd 	.word	0x08009ddd
 8009d30:	08009ddd 	.word	0x08009ddd
 8009d34:	08009ddd 	.word	0x08009ddd
 8009d38:	08009ddd 	.word	0x08009ddd
 8009d3c:	08009ddd 	.word	0x08009ddd
 8009d40:	08009ddd 	.word	0x08009ddd
 8009d44:	08009ddd 	.word	0x08009ddd
 8009d48:	08009ddd 	.word	0x08009ddd
 8009d4c:	08009ddd 	.word	0x08009ddd
 8009d50:	08009ddd 	.word	0x08009ddd
 8009d54:	08009ddd 	.word	0x08009ddd
 8009d58:	08009ddd 	.word	0x08009ddd
 8009d5c:	08009dcf 	.word	0x08009dcf
 8009d60:	2b40      	cmp	r3, #64	; 0x40
 8009d62:	d037      	beq.n	8009dd4 <UART_SetConfig+0x6bc>
 8009d64:	e03a      	b.n	8009ddc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d66:	f7fe fb4b 	bl	8008400 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d6c:	e03c      	b.n	8009de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fb5a 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d7c:	e034      	b.n	8009de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d7e:	f107 0318 	add.w	r3, r7, #24
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fca6 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d8c:	e02c      	b.n	8009de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d8e:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <UART_SetConfig+0x69c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d016      	beq.n	8009dc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d9a:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <UART_SetConfig+0x69c>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	08db      	lsrs	r3, r3, #3
 8009da0:	f003 0303 	and.w	r3, r3, #3
 8009da4:	4a07      	ldr	r2, [pc, #28]	; (8009dc4 <UART_SetConfig+0x6ac>)
 8009da6:	fa22 f303 	lsr.w	r3, r2, r3
 8009daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dac:	e01c      	b.n	8009de8 <UART_SetConfig+0x6d0>
 8009dae:	bf00      	nop
 8009db0:	40011400 	.word	0x40011400
 8009db4:	58024400 	.word	0x58024400
 8009db8:	40007800 	.word	0x40007800
 8009dbc:	40007c00 	.word	0x40007c00
 8009dc0:	58000c00 	.word	0x58000c00
 8009dc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009dc8:	4b9d      	ldr	r3, [pc, #628]	; (800a040 <UART_SetConfig+0x928>)
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dcc:	e00c      	b.n	8009de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dce:	4b9d      	ldr	r3, [pc, #628]	; (800a044 <UART_SetConfig+0x92c>)
 8009dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd2:	e009      	b.n	8009de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dda:	e005      	b.n	8009de8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009de6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 81de 	beq.w	800a1ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	4a94      	ldr	r2, [pc, #592]	; (800a048 <UART_SetConfig+0x930>)
 8009df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e02:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	4413      	add	r3, r2
 8009e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d305      	bcc.n	8009e20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d903      	bls.n	8009e28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e26:	e1c1      	b.n	800a1ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	60bb      	str	r3, [r7, #8]
 8009e2e:	60fa      	str	r2, [r7, #12]
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e34:	4a84      	ldr	r2, [pc, #528]	; (800a048 <UART_SetConfig+0x930>)
 8009e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	607a      	str	r2, [r7, #4]
 8009e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e4a:	f7f6 fc5d 	bl	8000708 <__aeabi_uldivmod>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4610      	mov	r0, r2
 8009e54:	4619      	mov	r1, r3
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	f04f 0300 	mov.w	r3, #0
 8009e5e:	020b      	lsls	r3, r1, #8
 8009e60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e64:	0202      	lsls	r2, r0, #8
 8009e66:	6979      	ldr	r1, [r7, #20]
 8009e68:	6849      	ldr	r1, [r1, #4]
 8009e6a:	0849      	lsrs	r1, r1, #1
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	4605      	mov	r5, r0
 8009e72:	eb12 0804 	adds.w	r8, r2, r4
 8009e76:	eb43 0905 	adc.w	r9, r3, r5
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	469a      	mov	sl, r3
 8009e82:	4693      	mov	fp, r2
 8009e84:	4652      	mov	r2, sl
 8009e86:	465b      	mov	r3, fp
 8009e88:	4640      	mov	r0, r8
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	f7f6 fc3c 	bl	8000708 <__aeabi_uldivmod>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4613      	mov	r3, r2
 8009e96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e9e:	d308      	bcc.n	8009eb2 <UART_SetConfig+0x79a>
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ea6:	d204      	bcs.n	8009eb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eae:	60da      	str	r2, [r3, #12]
 8009eb0:	e17c      	b.n	800a1ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009eb8:	e178      	b.n	800a1ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ec2:	f040 80c5 	bne.w	800a050 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009ec6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	dc48      	bgt.n	8009f60 <UART_SetConfig+0x848>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	db7b      	blt.n	8009fca <UART_SetConfig+0x8b2>
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	d879      	bhi.n	8009fca <UART_SetConfig+0x8b2>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <UART_SetConfig+0x7c4>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009f67 	.word	0x08009f67
 8009ee0:	08009f6f 	.word	0x08009f6f
 8009ee4:	08009fcb 	.word	0x08009fcb
 8009ee8:	08009fcb 	.word	0x08009fcb
 8009eec:	08009f77 	.word	0x08009f77
 8009ef0:	08009fcb 	.word	0x08009fcb
 8009ef4:	08009fcb 	.word	0x08009fcb
 8009ef8:	08009fcb 	.word	0x08009fcb
 8009efc:	08009f87 	.word	0x08009f87
 8009f00:	08009fcb 	.word	0x08009fcb
 8009f04:	08009fcb 	.word	0x08009fcb
 8009f08:	08009fcb 	.word	0x08009fcb
 8009f0c:	08009fcb 	.word	0x08009fcb
 8009f10:	08009fcb 	.word	0x08009fcb
 8009f14:	08009fcb 	.word	0x08009fcb
 8009f18:	08009fcb 	.word	0x08009fcb
 8009f1c:	08009f97 	.word	0x08009f97
 8009f20:	08009fcb 	.word	0x08009fcb
 8009f24:	08009fcb 	.word	0x08009fcb
 8009f28:	08009fcb 	.word	0x08009fcb
 8009f2c:	08009fcb 	.word	0x08009fcb
 8009f30:	08009fcb 	.word	0x08009fcb
 8009f34:	08009fcb 	.word	0x08009fcb
 8009f38:	08009fcb 	.word	0x08009fcb
 8009f3c:	08009fcb 	.word	0x08009fcb
 8009f40:	08009fcb 	.word	0x08009fcb
 8009f44:	08009fcb 	.word	0x08009fcb
 8009f48:	08009fcb 	.word	0x08009fcb
 8009f4c:	08009fcb 	.word	0x08009fcb
 8009f50:	08009fcb 	.word	0x08009fcb
 8009f54:	08009fcb 	.word	0x08009fcb
 8009f58:	08009fcb 	.word	0x08009fcb
 8009f5c:	08009fbd 	.word	0x08009fbd
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d02e      	beq.n	8009fc2 <UART_SetConfig+0x8aa>
 8009f64:	e031      	b.n	8009fca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f66:	f7fc fa53 	bl	8006410 <HAL_RCC_GetPCLK1Freq>
 8009f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f6c:	e033      	b.n	8009fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f6e:	f7fc fa65 	bl	800643c <HAL_RCC_GetPCLK2Freq>
 8009f72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f74:	e02f      	b.n	8009fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fa56 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f84:	e027      	b.n	8009fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f86:	f107 0318 	add.w	r3, r7, #24
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fba2 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f94:	e01f      	b.n	8009fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f96:	4b2d      	ldr	r3, [pc, #180]	; (800a04c <UART_SetConfig+0x934>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d009      	beq.n	8009fb6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fa2:	4b2a      	ldr	r3, [pc, #168]	; (800a04c <UART_SetConfig+0x934>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	08db      	lsrs	r3, r3, #3
 8009fa8:	f003 0303 	and.w	r3, r3, #3
 8009fac:	4a24      	ldr	r2, [pc, #144]	; (800a040 <UART_SetConfig+0x928>)
 8009fae:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fb4:	e00f      	b.n	8009fd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009fb6:	4b22      	ldr	r3, [pc, #136]	; (800a040 <UART_SetConfig+0x928>)
 8009fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fba:	e00c      	b.n	8009fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fbc:	4b21      	ldr	r3, [pc, #132]	; (800a044 <UART_SetConfig+0x92c>)
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc0:	e009      	b.n	8009fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc8:	e005      	b.n	8009fd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009fd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80e7 	beq.w	800a1ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	4a19      	ldr	r2, [pc, #100]	; (800a048 <UART_SetConfig+0x930>)
 8009fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ff0:	005a      	lsls	r2, r3, #1
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	085b      	lsrs	r3, r3, #1
 8009ff8:	441a      	add	r2, r3
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a002:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	2b0f      	cmp	r3, #15
 800a008:	d916      	bls.n	800a038 <UART_SetConfig+0x920>
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a010:	d212      	bcs.n	800a038 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	b29b      	uxth	r3, r3
 800a016:	f023 030f 	bic.w	r3, r3, #15
 800a01a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	085b      	lsrs	r3, r3, #1
 800a020:	b29b      	uxth	r3, r3
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	b29a      	uxth	r2, r3
 800a028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a02a:	4313      	orrs	r3, r2
 800a02c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a034:	60da      	str	r2, [r3, #12]
 800a036:	e0b9      	b.n	800a1ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a03e:	e0b5      	b.n	800a1ac <UART_SetConfig+0xa94>
 800a040:	03d09000 	.word	0x03d09000
 800a044:	003d0900 	.word	0x003d0900
 800a048:	080142fc 	.word	0x080142fc
 800a04c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a050:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a054:	2b20      	cmp	r3, #32
 800a056:	dc49      	bgt.n	800a0ec <UART_SetConfig+0x9d4>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	db7c      	blt.n	800a156 <UART_SetConfig+0xa3e>
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	d87a      	bhi.n	800a156 <UART_SetConfig+0xa3e>
 800a060:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <UART_SetConfig+0x950>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800a0f3 	.word	0x0800a0f3
 800a06c:	0800a0fb 	.word	0x0800a0fb
 800a070:	0800a157 	.word	0x0800a157
 800a074:	0800a157 	.word	0x0800a157
 800a078:	0800a103 	.word	0x0800a103
 800a07c:	0800a157 	.word	0x0800a157
 800a080:	0800a157 	.word	0x0800a157
 800a084:	0800a157 	.word	0x0800a157
 800a088:	0800a113 	.word	0x0800a113
 800a08c:	0800a157 	.word	0x0800a157
 800a090:	0800a157 	.word	0x0800a157
 800a094:	0800a157 	.word	0x0800a157
 800a098:	0800a157 	.word	0x0800a157
 800a09c:	0800a157 	.word	0x0800a157
 800a0a0:	0800a157 	.word	0x0800a157
 800a0a4:	0800a157 	.word	0x0800a157
 800a0a8:	0800a123 	.word	0x0800a123
 800a0ac:	0800a157 	.word	0x0800a157
 800a0b0:	0800a157 	.word	0x0800a157
 800a0b4:	0800a157 	.word	0x0800a157
 800a0b8:	0800a157 	.word	0x0800a157
 800a0bc:	0800a157 	.word	0x0800a157
 800a0c0:	0800a157 	.word	0x0800a157
 800a0c4:	0800a157 	.word	0x0800a157
 800a0c8:	0800a157 	.word	0x0800a157
 800a0cc:	0800a157 	.word	0x0800a157
 800a0d0:	0800a157 	.word	0x0800a157
 800a0d4:	0800a157 	.word	0x0800a157
 800a0d8:	0800a157 	.word	0x0800a157
 800a0dc:	0800a157 	.word	0x0800a157
 800a0e0:	0800a157 	.word	0x0800a157
 800a0e4:	0800a157 	.word	0x0800a157
 800a0e8:	0800a149 	.word	0x0800a149
 800a0ec:	2b40      	cmp	r3, #64	; 0x40
 800a0ee:	d02e      	beq.n	800a14e <UART_SetConfig+0xa36>
 800a0f0:	e031      	b.n	800a156 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0f2:	f7fc f98d 	bl	8006410 <HAL_RCC_GetPCLK1Freq>
 800a0f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0f8:	e033      	b.n	800a162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0fa:	f7fc f99f 	bl	800643c <HAL_RCC_GetPCLK2Freq>
 800a0fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a100:	e02f      	b.n	800a162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe f990 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a110:	e027      	b.n	800a162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a112:	f107 0318 	add.w	r3, r7, #24
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fadc 	bl	80086d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a120:	e01f      	b.n	800a162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a122:	4b2d      	ldr	r3, [pc, #180]	; (800a1d8 <UART_SetConfig+0xac0>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0320 	and.w	r3, r3, #32
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d009      	beq.n	800a142 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a12e:	4b2a      	ldr	r3, [pc, #168]	; (800a1d8 <UART_SetConfig+0xac0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	08db      	lsrs	r3, r3, #3
 800a134:	f003 0303 	and.w	r3, r3, #3
 800a138:	4a28      	ldr	r2, [pc, #160]	; (800a1dc <UART_SetConfig+0xac4>)
 800a13a:	fa22 f303 	lsr.w	r3, r2, r3
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a140:	e00f      	b.n	800a162 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a142:	4b26      	ldr	r3, [pc, #152]	; (800a1dc <UART_SetConfig+0xac4>)
 800a144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a146:	e00c      	b.n	800a162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a148:	4b25      	ldr	r3, [pc, #148]	; (800a1e0 <UART_SetConfig+0xac8>)
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a14c:	e009      	b.n	800a162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a14e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a154:	e005      	b.n	800a162 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a160:	bf00      	nop
    }

    if (pclk != 0U)
 800a162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d021      	beq.n	800a1ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	4a1d      	ldr	r2, [pc, #116]	; (800a1e4 <UART_SetConfig+0xacc>)
 800a16e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a172:	461a      	mov	r2, r3
 800a174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a176:	fbb3 f2f2 	udiv	r2, r3, r2
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	085b      	lsrs	r3, r3, #1
 800a180:	441a      	add	r2, r3
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	fbb2 f3f3 	udiv	r3, r2, r3
 800a18a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	2b0f      	cmp	r3, #15
 800a190:	d909      	bls.n	800a1a6 <UART_SetConfig+0xa8e>
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a198:	d205      	bcs.n	800a1a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	60da      	str	r2, [r3, #12]
 800a1a4:	e002      	b.n	800a1ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a1c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3748      	adds	r7, #72	; 0x48
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1d6:	bf00      	nop
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	03d09000 	.word	0x03d09000
 800a1e0:	003d0900 	.word	0x003d0900
 800a1e4:	080142fc 	.word	0x080142fc

0800a1e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00a      	beq.n	800a234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	430a      	orrs	r2, r1
 800a232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25a:	f003 0304 	and.w	r3, r3, #4
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	430a      	orrs	r2, r1
 800a276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27c:	f003 0310 	and.w	r3, r3, #16
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00a      	beq.n	800a29a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00a      	beq.n	800a2bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d01a      	beq.n	800a2fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2e6:	d10a      	bne.n	800a2fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	430a      	orrs	r2, r1
 800a2fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00a      	beq.n	800a320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	430a      	orrs	r2, r1
 800a31e:	605a      	str	r2, [r3, #4]
  }
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b098      	sub	sp, #96	; 0x60
 800a330:	af02      	add	r7, sp, #8
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a33c:	f7f8 f9c2 	bl	80026c4 <HAL_GetTick>
 800a340:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d12f      	bne.n	800a3b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a358:	2200      	movs	r2, #0
 800a35a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f88e 	bl	800a480 <UART_WaitOnFlagUntilTimeout>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d022      	beq.n	800a3b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	e853 3f00 	ldrex	r3, [r3]
 800a376:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a37e:	653b      	str	r3, [r7, #80]	; 0x50
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	461a      	mov	r2, r3
 800a386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a388:	647b      	str	r3, [r7, #68]	; 0x44
 800a38a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a38e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a390:	e841 2300 	strex	r3, r2, [r1]
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e6      	bne.n	800a36a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2220      	movs	r2, #32
 800a3a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e063      	b.n	800a478 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0304 	and.w	r3, r3, #4
 800a3ba:	2b04      	cmp	r3, #4
 800a3bc:	d149      	bne.n	800a452 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f857 	bl	800a480 <UART_WaitOnFlagUntilTimeout>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d03c      	beq.n	800a452 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f6:	633b      	str	r3, [r7, #48]	; 0x30
 800a3f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e6      	bne.n	800a3d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3308      	adds	r3, #8
 800a410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	60fb      	str	r3, [r7, #12]
   return(result);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f023 0301 	bic.w	r3, r3, #1
 800a420:	64bb      	str	r3, [r7, #72]	; 0x48
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	3308      	adds	r3, #8
 800a428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a42a:	61fa      	str	r2, [r7, #28]
 800a42c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	69b9      	ldr	r1, [r7, #24]
 800a430:	69fa      	ldr	r2, [r7, #28]
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	617b      	str	r3, [r7, #20]
   return(result);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e5      	bne.n	800a40a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2220      	movs	r2, #32
 800a442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e012      	b.n	800a478 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2220      	movs	r2, #32
 800a456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2220      	movs	r2, #32
 800a45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3758      	adds	r7, #88	; 0x58
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	4613      	mov	r3, r2
 800a48e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a490:	e04f      	b.n	800a532 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a498:	d04b      	beq.n	800a532 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a49a:	f7f8 f913 	bl	80026c4 <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d302      	bcc.n	800a4b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e04e      	b.n	800a552 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 0304 	and.w	r3, r3, #4
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d037      	beq.n	800a532 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b80      	cmp	r3, #128	; 0x80
 800a4c6:	d034      	beq.n	800a532 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b40      	cmp	r3, #64	; 0x40
 800a4cc:	d031      	beq.n	800a532 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	69db      	ldr	r3, [r3, #28]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b08      	cmp	r3, #8
 800a4da:	d110      	bne.n	800a4fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2208      	movs	r2, #8
 800a4e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f921 	bl	800a72c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2208      	movs	r2, #8
 800a4ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e029      	b.n	800a552 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	69db      	ldr	r3, [r3, #28]
 800a504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a50c:	d111      	bne.n	800a532 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 f907 	bl	800a72c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2220      	movs	r2, #32
 800a522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e00f      	b.n	800a552 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69da      	ldr	r2, [r3, #28]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	4013      	ands	r3, r2
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	429a      	cmp	r2, r3
 800a540:	bf0c      	ite	eq
 800a542:	2301      	moveq	r3, #1
 800a544:	2300      	movne	r3, #0
 800a546:	b2db      	uxtb	r3, r3
 800a548:	461a      	mov	r2, r3
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d0a0      	beq.n	800a492 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b096      	sub	sp, #88	; 0x58
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	4613      	mov	r3, r2
 800a568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	88fa      	ldrh	r2, [r7, #6]
 800a574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2222      	movs	r2, #34	; 0x22
 800a584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d02d      	beq.n	800a5ee <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a598:	4a40      	ldr	r2, [pc, #256]	; (800a69c <UART_Start_Receive_DMA+0x140>)
 800a59a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5a2:	4a3f      	ldr	r2, [pc, #252]	; (800a6a0 <UART_Start_Receive_DMA+0x144>)
 800a5a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ac:	4a3d      	ldr	r2, [pc, #244]	; (800a6a4 <UART_Start_Receive_DMA+0x148>)
 800a5ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3324      	adds	r3, #36	; 0x24
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	88fb      	ldrh	r3, [r7, #6]
 800a5d0:	f7f8 fd44 	bl	800305c <HAL_DMA_Start_IT>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d009      	beq.n	800a5ee <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2210      	movs	r2, #16
 800a5de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e051      	b.n	800a692 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d018      	beq.n	800a628 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5fe:	e853 3f00 	ldrex	r3, [r3]
 800a602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a60a:	657b      	str	r3, [r7, #84]	; 0x54
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	461a      	mov	r2, r3
 800a612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a614:	64bb      	str	r3, [r7, #72]	; 0x48
 800a616:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a618:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a61a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a61c:	e841 2300 	strex	r3, r2, [r1]
 800a620:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e6      	bne.n	800a5f6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3308      	adds	r3, #8
 800a62e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	e853 3f00 	ldrex	r3, [r3]
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	f043 0301 	orr.w	r3, r3, #1
 800a63e:	653b      	str	r3, [r7, #80]	; 0x50
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3308      	adds	r3, #8
 800a646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a648:	637a      	str	r2, [r7, #52]	; 0x34
 800a64a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a64e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a650:	e841 2300 	strex	r3, r2, [r1]
 800a654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e5      	bne.n	800a628 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3308      	adds	r3, #8
 800a662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	e853 3f00 	ldrex	r3, [r3]
 800a66a:	613b      	str	r3, [r7, #16]
   return(result);
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a672:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3308      	adds	r3, #8
 800a67a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a67c:	623a      	str	r2, [r7, #32]
 800a67e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a680:	69f9      	ldr	r1, [r7, #28]
 800a682:	6a3a      	ldr	r2, [r7, #32]
 800a684:	e841 2300 	strex	r3, r2, [r1]
 800a688:	61bb      	str	r3, [r7, #24]
   return(result);
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1e5      	bne.n	800a65c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3758      	adds	r7, #88	; 0x58
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	0800a7f9 	.word	0x0800a7f9
 800a6a0:	0800a921 	.word	0x0800a921
 800a6a4:	0800a95f 	.word	0x0800a95f

0800a6a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b08f      	sub	sp, #60	; 0x3c
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a6c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e6      	bne.n	800a6b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3308      	adds	r3, #8
 800a6e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	e853 3f00 	ldrex	r3, [r3]
 800a6f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a6f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3308      	adds	r3, #8
 800a700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a702:	61ba      	str	r2, [r7, #24]
 800a704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	6979      	ldr	r1, [r7, #20]
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	613b      	str	r3, [r7, #16]
   return(result);
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e5      	bne.n	800a6e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2220      	movs	r2, #32
 800a71a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a71e:	bf00      	nop
 800a720:	373c      	adds	r7, #60	; 0x3c
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
	...

0800a72c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b095      	sub	sp, #84	; 0x54
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a752:	643b      	str	r3, [r7, #64]	; 0x40
 800a754:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a75a:	e841 2300 	strex	r3, r2, [r1]
 800a75e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1e6      	bne.n	800a734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3308      	adds	r3, #8
 800a76c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	e853 3f00 	ldrex	r3, [r3]
 800a774:	61fb      	str	r3, [r7, #28]
   return(result);
 800a776:	69fa      	ldr	r2, [r7, #28]
 800a778:	4b1e      	ldr	r3, [pc, #120]	; (800a7f4 <UART_EndRxTransfer+0xc8>)
 800a77a:	4013      	ands	r3, r2
 800a77c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3308      	adds	r3, #8
 800a784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a786:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a78c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e5      	bne.n	800a766 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d118      	bne.n	800a7d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	e853 3f00 	ldrex	r3, [r3]
 800a7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f023 0310 	bic.w	r3, r3, #16
 800a7b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c0:	61bb      	str	r3, [r7, #24]
 800a7c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c4:	6979      	ldr	r1, [r7, #20]
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	e841 2300 	strex	r3, r2, [r1]
 800a7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e6      	bne.n	800a7a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a7e8:	bf00      	nop
 800a7ea:	3754      	adds	r7, #84	; 0x54
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	effffffe 	.word	0xeffffffe

0800a7f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b09c      	sub	sp, #112	; 0x70
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80e:	d071      	beq.n	800a8f4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a812:	2200      	movs	r2, #0
 800a814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a820:	e853 3f00 	ldrex	r3, [r3]
 800a824:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a82c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a836:	65bb      	str	r3, [r7, #88]	; 0x58
 800a838:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a83c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a83e:	e841 2300 	strex	r3, r2, [r1]
 800a842:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1e6      	bne.n	800a818 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85c:	f023 0301 	bic.w	r3, r3, #1
 800a860:	667b      	str	r3, [r7, #100]	; 0x64
 800a862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3308      	adds	r3, #8
 800a868:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a86a:	647a      	str	r2, [r7, #68]	; 0x44
 800a86c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1e5      	bne.n	800a84a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a87e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3308      	adds	r3, #8
 800a884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	e853 3f00 	ldrex	r3, [r3]
 800a88c:	623b      	str	r3, [r7, #32]
   return(result);
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a894:	663b      	str	r3, [r7, #96]	; 0x60
 800a896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3308      	adds	r3, #8
 800a89c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a89e:	633a      	str	r2, [r7, #48]	; 0x30
 800a8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e5      	bne.n	800a87e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8b4:	2220      	movs	r2, #32
 800a8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d118      	bne.n	800a8f4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	e853 3f00 	ldrex	r3, [r3]
 800a8ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f023 0310 	bic.w	r3, r3, #16
 800a8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8e0:	61fb      	str	r3, [r7, #28]
 800a8e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e4:	69b9      	ldr	r1, [r7, #24]
 800a8e6:	69fa      	ldr	r2, [r7, #28]
 800a8e8:	e841 2300 	strex	r3, r2, [r1]
 800a8ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1e6      	bne.n	800a8c2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d107      	bne.n	800a912 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a908:	4619      	mov	r1, r3
 800a90a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a90c:	f7fe fef8 	bl	8009700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a910:	e002      	b.n	800a918 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a912:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a914:	f7f6 fe8e 	bl	8001634 <HAL_UART_RxCpltCallback>
}
 800a918:	bf00      	nop
 800a91a:	3770      	adds	r7, #112	; 0x70
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d109      	bne.n	800a950 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a942:	085b      	lsrs	r3, r3, #1
 800a944:	b29b      	uxth	r3, r3
 800a946:	4619      	mov	r1, r3
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f7fe fed9 	bl	8009700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a94e:	e002      	b.n	800a956 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7fe fec1 	bl	80096d8 <HAL_UART_RxHalfCpltCallback>
}
 800a956:	bf00      	nop
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b086      	sub	sp, #24
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a972:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a986:	2b80      	cmp	r3, #128	; 0x80
 800a988:	d109      	bne.n	800a99e <UART_DMAError+0x40>
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	2b21      	cmp	r3, #33	; 0x21
 800a98e:	d106      	bne.n	800a99e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2200      	movs	r2, #0
 800a994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a998:	6978      	ldr	r0, [r7, #20]
 800a99a:	f7ff fe85 	bl	800a6a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a8:	2b40      	cmp	r3, #64	; 0x40
 800a9aa:	d109      	bne.n	800a9c0 <UART_DMAError+0x62>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b22      	cmp	r3, #34	; 0x22
 800a9b0:	d106      	bne.n	800a9c0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a9ba:	6978      	ldr	r0, [r7, #20]
 800a9bc:	f7ff feb6 	bl	800a72c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c6:	f043 0210 	orr.w	r2, r3, #16
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9d0:	6978      	ldr	r0, [r7, #20]
 800a9d2:	f7fe fe8b 	bl	80096ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9d6:	bf00      	nop
 800a9d8:	3718      	adds	r7, #24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d101      	bne.n	800a9f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	e027      	b.n	800aa44 <HAL_UARTEx_DisableFifoMode+0x66>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2224      	movs	r2, #36	; 0x24
 800aa00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0201 	bic.w	r2, r2, #1
 800aa1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d101      	bne.n	800aa68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa64:	2302      	movs	r3, #2
 800aa66:	e02d      	b.n	800aac4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2224      	movs	r2, #36	; 0x24
 800aa74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f022 0201 	bic.w	r2, r2, #1
 800aa8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f84f 	bl	800ab48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2220      	movs	r2, #32
 800aab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d101      	bne.n	800aae4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aae0:	2302      	movs	r3, #2
 800aae2:	e02d      	b.n	800ab40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2224      	movs	r2, #36	; 0x24
 800aaf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f022 0201 	bic.w	r2, r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f811 	bl	800ab48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2220      	movs	r2, #32
 800ab32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d108      	bne.n	800ab6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab68:	e031      	b.n	800abce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab6a:	2310      	movs	r3, #16
 800ab6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab6e:	2310      	movs	r3, #16
 800ab70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	0e5b      	lsrs	r3, r3, #25
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	f003 0307 	and.w	r3, r3, #7
 800ab80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	0f5b      	lsrs	r3, r3, #29
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	f003 0307 	and.w	r3, r3, #7
 800ab90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	7b3a      	ldrb	r2, [r7, #12]
 800ab96:	4911      	ldr	r1, [pc, #68]	; (800abdc <UARTEx_SetNbDataToProcess+0x94>)
 800ab98:	5c8a      	ldrb	r2, [r1, r2]
 800ab9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab9e:	7b3a      	ldrb	r2, [r7, #12]
 800aba0:	490f      	ldr	r1, [pc, #60]	; (800abe0 <UARTEx_SetNbDataToProcess+0x98>)
 800aba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aba4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	7b7a      	ldrb	r2, [r7, #13]
 800abb4:	4909      	ldr	r1, [pc, #36]	; (800abdc <UARTEx_SetNbDataToProcess+0x94>)
 800abb6:	5c8a      	ldrb	r2, [r1, r2]
 800abb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800abbc:	7b7a      	ldrb	r2, [r7, #13]
 800abbe:	4908      	ldr	r1, [pc, #32]	; (800abe0 <UARTEx_SetNbDataToProcess+0x98>)
 800abc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800abce:	bf00      	nop
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	08014314 	.word	0x08014314
 800abe0:	0801431c 	.word	0x0801431c

0800abe4 <__NVIC_SetPriority>:
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	4603      	mov	r3, r0
 800abec:	6039      	str	r1, [r7, #0]
 800abee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800abf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	db0a      	blt.n	800ac0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	490c      	ldr	r1, [pc, #48]	; (800ac30 <__NVIC_SetPriority+0x4c>)
 800abfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac02:	0112      	lsls	r2, r2, #4
 800ac04:	b2d2      	uxtb	r2, r2
 800ac06:	440b      	add	r3, r1
 800ac08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac0c:	e00a      	b.n	800ac24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	4908      	ldr	r1, [pc, #32]	; (800ac34 <__NVIC_SetPriority+0x50>)
 800ac14:	88fb      	ldrh	r3, [r7, #6]
 800ac16:	f003 030f 	and.w	r3, r3, #15
 800ac1a:	3b04      	subs	r3, #4
 800ac1c:	0112      	lsls	r2, r2, #4
 800ac1e:	b2d2      	uxtb	r2, r2
 800ac20:	440b      	add	r3, r1
 800ac22:	761a      	strb	r2, [r3, #24]
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	e000e100 	.word	0xe000e100
 800ac34:	e000ed00 	.word	0xe000ed00

0800ac38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac3c:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <SysTick_Handler+0x1c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac40:	f002 fdba 	bl	800d7b8 <xTaskGetSchedulerState>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d001      	beq.n	800ac4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac4a:	f000 ff2d 	bl	800baa8 <xPortSysTickHandler>
  }
}
 800ac4e:	bf00      	nop
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	e000e010 	.word	0xe000e010

0800ac58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	f06f 0004 	mvn.w	r0, #4
 800ac62:	f7ff ffbf 	bl	800abe4 <__NVIC_SetPriority>
#endif
}
 800ac66:	bf00      	nop
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac72:	f3ef 8305 	mrs	r3, IPSR
 800ac76:	603b      	str	r3, [r7, #0]
  return(result);
 800ac78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d003      	beq.n	800ac86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ac7e:	f06f 0305 	mvn.w	r3, #5
 800ac82:	607b      	str	r3, [r7, #4]
 800ac84:	e00c      	b.n	800aca0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac86:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <osKernelInitialize+0x44>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d105      	bne.n	800ac9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac8e:	4b08      	ldr	r3, [pc, #32]	; (800acb0 <osKernelInitialize+0x44>)
 800ac90:	2201      	movs	r2, #1
 800ac92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	607b      	str	r3, [r7, #4]
 800ac98:	e002      	b.n	800aca0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ac9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aca0:	687b      	ldr	r3, [r7, #4]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	24000878 	.word	0x24000878

0800acb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acba:	f3ef 8305 	mrs	r3, IPSR
 800acbe:	603b      	str	r3, [r7, #0]
  return(result);
 800acc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <osKernelStart+0x1a>
    stat = osErrorISR;
 800acc6:	f06f 0305 	mvn.w	r3, #5
 800acca:	607b      	str	r3, [r7, #4]
 800accc:	e010      	b.n	800acf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800acce:	4b0b      	ldr	r3, [pc, #44]	; (800acfc <osKernelStart+0x48>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d109      	bne.n	800acea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800acd6:	f7ff ffbf 	bl	800ac58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800acda:	4b08      	ldr	r3, [pc, #32]	; (800acfc <osKernelStart+0x48>)
 800acdc:	2202      	movs	r2, #2
 800acde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ace0:	f002 f922 	bl	800cf28 <vTaskStartScheduler>
      stat = osOK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	607b      	str	r3, [r7, #4]
 800ace8:	e002      	b.n	800acf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800acea:	f04f 33ff 	mov.w	r3, #4294967295
 800acee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800acf0:	687b      	ldr	r3, [r7, #4]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	24000878 	.word	0x24000878

0800ad00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08e      	sub	sp, #56	; 0x38
 800ad04:	af04      	add	r7, sp, #16
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad10:	f3ef 8305 	mrs	r3, IPSR
 800ad14:	617b      	str	r3, [r7, #20]
  return(result);
 800ad16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d17e      	bne.n	800ae1a <osThreadNew+0x11a>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d07b      	beq.n	800ae1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad22:	2380      	movs	r3, #128	; 0x80
 800ad24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad26:	2318      	movs	r3, #24
 800ad28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d045      	beq.n	800adc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d002      	beq.n	800ad48 <osThreadNew+0x48>
        name = attr->name;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d002      	beq.n	800ad56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d008      	beq.n	800ad6e <osThreadNew+0x6e>
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	2b38      	cmp	r3, #56	; 0x38
 800ad60:	d805      	bhi.n	800ad6e <osThreadNew+0x6e>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <osThreadNew+0x72>
        return (NULL);
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e054      	b.n	800ae1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	089b      	lsrs	r3, r3, #2
 800ad80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00e      	beq.n	800ada8 <osThreadNew+0xa8>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	2b5b      	cmp	r3, #91	; 0x5b
 800ad90:	d90a      	bls.n	800ada8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d006      	beq.n	800ada8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <osThreadNew+0xa8>
        mem = 1;
 800ada2:	2301      	movs	r3, #1
 800ada4:	61bb      	str	r3, [r7, #24]
 800ada6:	e010      	b.n	800adca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10c      	bne.n	800adca <osThreadNew+0xca>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d108      	bne.n	800adca <osThreadNew+0xca>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d104      	bne.n	800adca <osThreadNew+0xca>
          mem = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	61bb      	str	r3, [r7, #24]
 800adc4:	e001      	b.n	800adca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d110      	bne.n	800adf2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800add8:	9202      	str	r2, [sp, #8]
 800adda:	9301      	str	r3, [sp, #4]
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	6a3a      	ldr	r2, [r7, #32]
 800ade4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f001 fefc 	bl	800cbe4 <xTaskCreateStatic>
 800adec:	4603      	mov	r3, r0
 800adee:	613b      	str	r3, [r7, #16]
 800adf0:	e013      	b.n	800ae1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d110      	bne.n	800ae1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	f107 0310 	add.w	r3, r7, #16
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f001 ff47 	bl	800cc9e <xTaskCreate>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d001      	beq.n	800ae1a <osThreadNew+0x11a>
            hTask = NULL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae1a:	693b      	ldr	r3, [r7, #16]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3728      	adds	r7, #40	; 0x28
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae2a:	f3ef 8305 	mrs	r3, IPSR
 800ae2e:	603b      	str	r3, [r7, #0]
  return(result);
 800ae30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <osThreadYield+0x1a>
    stat = osErrorISR;
 800ae36:	f06f 0305 	mvn.w	r3, #5
 800ae3a:	607b      	str	r3, [r7, #4]
 800ae3c:	e009      	b.n	800ae52 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800ae42:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <osThreadYield+0x3c>)
 800ae44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800ae52:	687b      	ldr	r3, [r7, #4]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	e000ed04 	.word	0xe000ed04

0800ae64 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08a      	sub	sp, #40	; 0x28
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ae70:	2300      	movs	r3, #0
 800ae72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae74:	f3ef 8305 	mrs	r3, IPSR
 800ae78:	613b      	str	r3, [r7, #16]
  return(result);
 800ae7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d175      	bne.n	800af6c <osSemaphoreNew+0x108>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d072      	beq.n	800af6c <osSemaphoreNew+0x108>
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d86e      	bhi.n	800af6c <osSemaphoreNew+0x108>
    mem = -1;
 800ae8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d015      	beq.n	800aec6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d006      	beq.n	800aeb0 <osSemaphoreNew+0x4c>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	2b4f      	cmp	r3, #79	; 0x4f
 800aea8:	d902      	bls.n	800aeb0 <osSemaphoreNew+0x4c>
        mem = 1;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	61bb      	str	r3, [r7, #24]
 800aeae:	e00c      	b.n	800aeca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d108      	bne.n	800aeca <osSemaphoreNew+0x66>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d104      	bne.n	800aeca <osSemaphoreNew+0x66>
          mem = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	61bb      	str	r3, [r7, #24]
 800aec4:	e001      	b.n	800aeca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed0:	d04c      	beq.n	800af6c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d128      	bne.n	800af2a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d10a      	bne.n	800aef4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	2203      	movs	r2, #3
 800aee4:	9200      	str	r2, [sp, #0]
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	2001      	movs	r0, #1
 800aeec:	f000 fed4 	bl	800bc98 <xQueueGenericCreateStatic>
 800aef0:	61f8      	str	r0, [r7, #28]
 800aef2:	e005      	b.n	800af00 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800aef4:	2203      	movs	r2, #3
 800aef6:	2100      	movs	r1, #0
 800aef8:	2001      	movs	r0, #1
 800aefa:	f000 ff45 	bl	800bd88 <xQueueGenericCreate>
 800aefe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d022      	beq.n	800af4c <osSemaphoreNew+0xe8>
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01f      	beq.n	800af4c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af0c:	2300      	movs	r3, #0
 800af0e:	2200      	movs	r2, #0
 800af10:	2100      	movs	r1, #0
 800af12:	69f8      	ldr	r0, [r7, #28]
 800af14:	f001 f800 	bl	800bf18 <xQueueGenericSend>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d016      	beq.n	800af4c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800af1e:	69f8      	ldr	r0, [r7, #28]
 800af20:	f001 fc8c 	bl	800c83c <vQueueDelete>
            hSemaphore = NULL;
 800af24:	2300      	movs	r3, #0
 800af26:	61fb      	str	r3, [r7, #28]
 800af28:	e010      	b.n	800af4c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d108      	bne.n	800af42 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	461a      	mov	r2, r3
 800af36:	68b9      	ldr	r1, [r7, #8]
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f000 ff82 	bl	800be42 <xQueueCreateCountingSemaphoreStatic>
 800af3e:	61f8      	str	r0, [r7, #28]
 800af40:	e004      	b.n	800af4c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 ffb3 	bl	800beb0 <xQueueCreateCountingSemaphore>
 800af4a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00c      	beq.n	800af6c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <osSemaphoreNew+0xfc>
          name = attr->name;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	e001      	b.n	800af64 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800af60:	2300      	movs	r3, #0
 800af62:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800af64:	6979      	ldr	r1, [r7, #20]
 800af66:	69f8      	ldr	r0, [r7, #28]
 800af68:	f001 fdb4 	bl	800cad4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800af6c:	69fb      	ldr	r3, [r7, #28]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800af90:	f06f 0303 	mvn.w	r3, #3
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	e039      	b.n	800b00c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af98:	f3ef 8305 	mrs	r3, IPSR
 800af9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800af9e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d022      	beq.n	800afea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800afaa:	f06f 0303 	mvn.w	r3, #3
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	e02c      	b.n	800b00c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800afb2:	2300      	movs	r3, #0
 800afb4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800afb6:	f107 0308 	add.w	r3, r7, #8
 800afba:	461a      	mov	r2, r3
 800afbc:	2100      	movs	r1, #0
 800afbe:	6938      	ldr	r0, [r7, #16]
 800afc0:	f001 fbbc 	bl	800c73c <xQueueReceiveFromISR>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d003      	beq.n	800afd2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800afca:	f06f 0302 	mvn.w	r3, #2
 800afce:	617b      	str	r3, [r7, #20]
 800afd0:	e01c      	b.n	800b00c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d019      	beq.n	800b00c <osSemaphoreAcquire+0x94>
 800afd8:	4b0f      	ldr	r3, [pc, #60]	; (800b018 <osSemaphoreAcquire+0xa0>)
 800afda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	e010      	b.n	800b00c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6938      	ldr	r0, [r7, #16]
 800afee:	f001 fa99 	bl	800c524 <xQueueSemaphoreTake>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d009      	beq.n	800b00c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800affe:	f06f 0301 	mvn.w	r3, #1
 800b002:	617b      	str	r3, [r7, #20]
 800b004:	e002      	b.n	800b00c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b006:	f06f 0302 	mvn.w	r3, #2
 800b00a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b00c:	697b      	ldr	r3, [r7, #20]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	e000ed04 	.word	0xe000ed04

0800b01c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b028:	2300      	movs	r3, #0
 800b02a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d103      	bne.n	800b03a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b032:	f06f 0303 	mvn.w	r3, #3
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	e02c      	b.n	800b094 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b03a:	f3ef 8305 	mrs	r3, IPSR
 800b03e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b040:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b042:	2b00      	cmp	r3, #0
 800b044:	d01a      	beq.n	800b07c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b046:	2300      	movs	r3, #0
 800b048:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b04a:	f107 0308 	add.w	r3, r7, #8
 800b04e:	4619      	mov	r1, r3
 800b050:	6938      	ldr	r0, [r7, #16]
 800b052:	f001 f8fa 	bl	800c24a <xQueueGiveFromISR>
 800b056:	4603      	mov	r3, r0
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d003      	beq.n	800b064 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b05c:	f06f 0302 	mvn.w	r3, #2
 800b060:	617b      	str	r3, [r7, #20]
 800b062:	e017      	b.n	800b094 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d014      	beq.n	800b094 <osSemaphoreRelease+0x78>
 800b06a:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <osSemaphoreRelease+0x84>)
 800b06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	e00b      	b.n	800b094 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b07c:	2300      	movs	r3, #0
 800b07e:	2200      	movs	r2, #0
 800b080:	2100      	movs	r1, #0
 800b082:	6938      	ldr	r0, [r7, #16]
 800b084:	f000 ff48 	bl	800bf18 <xQueueGenericSend>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d002      	beq.n	800b094 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b08e:	f06f 0302 	mvn.w	r3, #2
 800b092:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b094:	697b      	ldr	r3, [r7, #20]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3718      	adds	r7, #24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08a      	sub	sp, #40	; 0x28
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0b4:	f3ef 8305 	mrs	r3, IPSR
 800b0b8:	613b      	str	r3, [r7, #16]
  return(result);
 800b0ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d15f      	bne.n	800b180 <osMessageQueueNew+0xdc>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d05c      	beq.n	800b180 <osMessageQueueNew+0xdc>
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d059      	beq.n	800b180 <osMessageQueueNew+0xdc>
    mem = -1;
 800b0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d029      	beq.n	800b12c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d012      	beq.n	800b106 <osMessageQueueNew+0x62>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	2b4f      	cmp	r3, #79	; 0x4f
 800b0e6:	d90e      	bls.n	800b106 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	695a      	ldr	r2, [r3, #20]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	fb01 f303 	mul.w	r3, r1, r3
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d302      	bcc.n	800b106 <osMessageQueueNew+0x62>
        mem = 1;
 800b100:	2301      	movs	r3, #1
 800b102:	61bb      	str	r3, [r7, #24]
 800b104:	e014      	b.n	800b130 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d110      	bne.n	800b130 <osMessageQueueNew+0x8c>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10c      	bne.n	800b130 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d108      	bne.n	800b130 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d104      	bne.n	800b130 <osMessageQueueNew+0x8c>
          mem = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	e001      	b.n	800b130 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d10b      	bne.n	800b14e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	691a      	ldr	r2, [r3, #16]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	2100      	movs	r1, #0
 800b140:	9100      	str	r1, [sp, #0]
 800b142:	68b9      	ldr	r1, [r7, #8]
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 fda7 	bl	800bc98 <xQueueGenericCreateStatic>
 800b14a:	61f8      	str	r0, [r7, #28]
 800b14c:	e008      	b.n	800b160 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d105      	bne.n	800b160 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b154:	2200      	movs	r2, #0
 800b156:	68b9      	ldr	r1, [r7, #8]
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f000 fe15 	bl	800bd88 <xQueueGenericCreate>
 800b15e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00c      	beq.n	800b180 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	e001      	b.n	800b178 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b174:	2300      	movs	r3, #0
 800b176:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b178:	6979      	ldr	r1, [r7, #20]
 800b17a:	69f8      	ldr	r0, [r7, #28]
 800b17c:	f001 fcaa 	bl	800cad4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b180:	69fb      	ldr	r3, [r7, #28]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3720      	adds	r7, #32
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	4a07      	ldr	r2, [pc, #28]	; (800b1b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b19c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	4a06      	ldr	r2, [pc, #24]	; (800b1bc <vApplicationGetIdleTaskMemory+0x30>)
 800b1a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2280      	movs	r2, #128	; 0x80
 800b1a8:	601a      	str	r2, [r3, #0]
}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	2400087c 	.word	0x2400087c
 800b1bc:	240008d8 	.word	0x240008d8

0800b1c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	4a07      	ldr	r2, [pc, #28]	; (800b1ec <vApplicationGetTimerTaskMemory+0x2c>)
 800b1d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	4a06      	ldr	r2, [pc, #24]	; (800b1f0 <vApplicationGetTimerTaskMemory+0x30>)
 800b1d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1de:	601a      	str	r2, [r3, #0]
}
 800b1e0:	bf00      	nop
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	24000ad8 	.word	0x24000ad8
 800b1f0:	24000b34 	.word	0x24000b34

0800b1f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08a      	sub	sp, #40	; 0x28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b200:	f001 fef8 	bl	800cff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b204:	4b5b      	ldr	r3, [pc, #364]	; (800b374 <pvPortMalloc+0x180>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b20c:	f000 f920 	bl	800b450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b210:	4b59      	ldr	r3, [pc, #356]	; (800b378 <pvPortMalloc+0x184>)
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4013      	ands	r3, r2
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f040 8093 	bne.w	800b344 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01d      	beq.n	800b260 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b224:	2208      	movs	r2, #8
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4413      	add	r3, r2
 800b22a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	2b00      	cmp	r3, #0
 800b234:	d014      	beq.n	800b260 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f023 0307 	bic.w	r3, r3, #7
 800b23c:	3308      	adds	r3, #8
 800b23e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f003 0307 	and.w	r3, r3, #7
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d06e      	beq.n	800b344 <pvPortMalloc+0x150>
 800b266:	4b45      	ldr	r3, [pc, #276]	; (800b37c <pvPortMalloc+0x188>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d869      	bhi.n	800b344 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b270:	4b43      	ldr	r3, [pc, #268]	; (800b380 <pvPortMalloc+0x18c>)
 800b272:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b274:	4b42      	ldr	r3, [pc, #264]	; (800b380 <pvPortMalloc+0x18c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b27a:	e004      	b.n	800b286 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d903      	bls.n	800b298 <pvPortMalloc+0xa4>
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1f1      	bne.n	800b27c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b298:	4b36      	ldr	r3, [pc, #216]	; (800b374 <pvPortMalloc+0x180>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d050      	beq.n	800b344 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2208      	movs	r2, #8
 800b2a8:	4413      	add	r3, r2
 800b2aa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	685a      	ldr	r2, [r3, #4]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	1ad2      	subs	r2, r2, r3
 800b2bc:	2308      	movs	r3, #8
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d91f      	bls.n	800b304 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <pvPortMalloc+0xf8>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	613b      	str	r3, [r7, #16]
}
 800b2e8:	bf00      	nop
 800b2ea:	e7fe      	b.n	800b2ea <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	685a      	ldr	r2, [r3, #4]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	1ad2      	subs	r2, r2, r3
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2fe:	69b8      	ldr	r0, [r7, #24]
 800b300:	f000 f908 	bl	800b514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b304:	4b1d      	ldr	r3, [pc, #116]	; (800b37c <pvPortMalloc+0x188>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	4a1b      	ldr	r2, [pc, #108]	; (800b37c <pvPortMalloc+0x188>)
 800b310:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b312:	4b1a      	ldr	r3, [pc, #104]	; (800b37c <pvPortMalloc+0x188>)
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	4b1b      	ldr	r3, [pc, #108]	; (800b384 <pvPortMalloc+0x190>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d203      	bcs.n	800b326 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b31e:	4b17      	ldr	r3, [pc, #92]	; (800b37c <pvPortMalloc+0x188>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a18      	ldr	r2, [pc, #96]	; (800b384 <pvPortMalloc+0x190>)
 800b324:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	4b13      	ldr	r3, [pc, #76]	; (800b378 <pvPortMalloc+0x184>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	431a      	orrs	r2, r3
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	2200      	movs	r2, #0
 800b338:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b33a:	4b13      	ldr	r3, [pc, #76]	; (800b388 <pvPortMalloc+0x194>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3301      	adds	r3, #1
 800b340:	4a11      	ldr	r2, [pc, #68]	; (800b388 <pvPortMalloc+0x194>)
 800b342:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b344:	f001 fe64 	bl	800d010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	f003 0307 	and.w	r3, r3, #7
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <pvPortMalloc+0x174>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	60fb      	str	r3, [r7, #12]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <pvPortMalloc+0x172>
	return pvReturn;
 800b368:	69fb      	ldr	r3, [r7, #28]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3728      	adds	r7, #40	; 0x28
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	24004b3c 	.word	0x24004b3c
 800b378:	24004b50 	.word	0x24004b50
 800b37c:	24004b40 	.word	0x24004b40
 800b380:	24004b34 	.word	0x24004b34
 800b384:	24004b44 	.word	0x24004b44
 800b388:	24004b48 	.word	0x24004b48

0800b38c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d04d      	beq.n	800b43a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b39e:	2308      	movs	r3, #8
 800b3a0:	425b      	negs	r3, r3
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	4b24      	ldr	r3, [pc, #144]	; (800b444 <vPortFree+0xb8>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10a      	bne.n	800b3d0 <vPortFree+0x44>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	60fb      	str	r3, [r7, #12]
}
 800b3cc:	bf00      	nop
 800b3ce:	e7fe      	b.n	800b3ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00a      	beq.n	800b3ee <vPortFree+0x62>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	60bb      	str	r3, [r7, #8]
}
 800b3ea:	bf00      	nop
 800b3ec:	e7fe      	b.n	800b3ec <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	4b14      	ldr	r3, [pc, #80]	; (800b444 <vPortFree+0xb8>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d01e      	beq.n	800b43a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d11a      	bne.n	800b43a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	4b0e      	ldr	r3, [pc, #56]	; (800b444 <vPortFree+0xb8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	43db      	mvns	r3, r3
 800b40e:	401a      	ands	r2, r3
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b414:	f001 fdee 	bl	800cff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	4b0a      	ldr	r3, [pc, #40]	; (800b448 <vPortFree+0xbc>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4413      	add	r3, r2
 800b422:	4a09      	ldr	r2, [pc, #36]	; (800b448 <vPortFree+0xbc>)
 800b424:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b426:	6938      	ldr	r0, [r7, #16]
 800b428:	f000 f874 	bl	800b514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <vPortFree+0xc0>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	4a06      	ldr	r2, [pc, #24]	; (800b44c <vPortFree+0xc0>)
 800b434:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b436:	f001 fdeb 	bl	800d010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b43a:	bf00      	nop
 800b43c:	3718      	adds	r7, #24
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	24004b50 	.word	0x24004b50
 800b448:	24004b40 	.word	0x24004b40
 800b44c:	24004b4c 	.word	0x24004b4c

0800b450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b456:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b45a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b45c:	4b27      	ldr	r3, [pc, #156]	; (800b4fc <prvHeapInit+0xac>)
 800b45e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f003 0307 	and.w	r3, r3, #7
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00c      	beq.n	800b484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3307      	adds	r3, #7
 800b46e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0307 	bic.w	r3, r3, #7
 800b476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	4a1f      	ldr	r2, [pc, #124]	; (800b4fc <prvHeapInit+0xac>)
 800b480:	4413      	add	r3, r2
 800b482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b488:	4a1d      	ldr	r2, [pc, #116]	; (800b500 <prvHeapInit+0xb0>)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b48e:	4b1c      	ldr	r3, [pc, #112]	; (800b500 <prvHeapInit+0xb0>)
 800b490:	2200      	movs	r2, #0
 800b492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	4413      	add	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b49c:	2208      	movs	r2, #8
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	1a9b      	subs	r3, r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f023 0307 	bic.w	r3, r3, #7
 800b4aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4a15      	ldr	r2, [pc, #84]	; (800b504 <prvHeapInit+0xb4>)
 800b4b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b4b2:	4b14      	ldr	r3, [pc, #80]	; (800b504 <prvHeapInit+0xb4>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b4ba:	4b12      	ldr	r3, [pc, #72]	; (800b504 <prvHeapInit+0xb4>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	1ad2      	subs	r2, r2, r3
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4d0:	4b0c      	ldr	r3, [pc, #48]	; (800b504 <prvHeapInit+0xb4>)
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	4a0a      	ldr	r2, [pc, #40]	; (800b508 <prvHeapInit+0xb8>)
 800b4de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	4a09      	ldr	r2, [pc, #36]	; (800b50c <prvHeapInit+0xbc>)
 800b4e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4e8:	4b09      	ldr	r3, [pc, #36]	; (800b510 <prvHeapInit+0xc0>)
 800b4ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4ee:	601a      	str	r2, [r3, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	24000f34 	.word	0x24000f34
 800b500:	24004b34 	.word	0x24004b34
 800b504:	24004b3c 	.word	0x24004b3c
 800b508:	24004b44 	.word	0x24004b44
 800b50c:	24004b40 	.word	0x24004b40
 800b510:	24004b50 	.word	0x24004b50

0800b514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b51c:	4b28      	ldr	r3, [pc, #160]	; (800b5c0 <prvInsertBlockIntoFreeList+0xac>)
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	e002      	b.n	800b528 <prvInsertBlockIntoFreeList+0x14>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d8f7      	bhi.n	800b522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	4413      	add	r3, r2
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	429a      	cmp	r2, r3
 800b542:	d108      	bne.n	800b556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	685a      	ldr	r2, [r3, #4]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	441a      	add	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	441a      	add	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	429a      	cmp	r2, r3
 800b568:	d118      	bne.n	800b59c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	4b15      	ldr	r3, [pc, #84]	; (800b5c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	429a      	cmp	r2, r3
 800b574:	d00d      	beq.n	800b592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	441a      	add	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	e008      	b.n	800b5a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b592:	4b0c      	ldr	r3, [pc, #48]	; (800b5c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	e003      	b.n	800b5a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d002      	beq.n	800b5b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5b2:	bf00      	nop
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	24004b34 	.word	0x24004b34
 800b5c4:	24004b3c 	.word	0x24004b3c

0800b5c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f103 0208 	add.w	r2, r3, #8
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f103 0208 	add.w	r2, r3, #8
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f103 0208 	add.w	r2, r3, #8
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b622:	b480      	push	{r7}
 800b624:	b085      	sub	sp, #20
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	689a      	ldr	r2, [r3, #8]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	1c5a      	adds	r2, r3, #1
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	601a      	str	r2, [r3, #0]
}
 800b65e:	bf00      	nop
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b66a:	b480      	push	{r7}
 800b66c:	b085      	sub	sp, #20
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b680:	d103      	bne.n	800b68a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	e00c      	b.n	800b6a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3308      	adds	r3, #8
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	e002      	b.n	800b698 <vListInsert+0x2e>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d2f6      	bcs.n	800b692 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	601a      	str	r2, [r3, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	6892      	ldr	r2, [r2, #8]
 800b6f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	6852      	ldr	r2, [r2, #4]
 800b6fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	429a      	cmp	r2, r3
 800b706:	d103      	bne.n	800b710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689a      	ldr	r2, [r3, #8]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	1e5a      	subs	r2, r3, #1
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	3b04      	subs	r3, #4
 800b740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3b04      	subs	r3, #4
 800b74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	f023 0201 	bic.w	r2, r3, #1
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3b04      	subs	r3, #4
 800b75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b760:	4a0c      	ldr	r2, [pc, #48]	; (800b794 <pxPortInitialiseStack+0x64>)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3b14      	subs	r3, #20
 800b76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3b04      	subs	r3, #4
 800b776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f06f 0202 	mvn.w	r2, #2
 800b77e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3b20      	subs	r3, #32
 800b784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b786:	68fb      	ldr	r3, [r7, #12]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	0800b799 	.word	0x0800b799

0800b798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7a2:	4b12      	ldr	r3, [pc, #72]	; (800b7ec <prvTaskExitError+0x54>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7aa:	d00a      	beq.n	800b7c2 <prvTaskExitError+0x2a>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	60fb      	str	r3, [r7, #12]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <prvTaskExitError+0x28>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	60bb      	str	r3, [r7, #8]
}
 800b7d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b7d6:	bf00      	nop
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d0fc      	beq.n	800b7d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b7de:	bf00      	nop
 800b7e0:	bf00      	nop
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	24000020 	.word	0x24000020

0800b7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b7f0:	4b07      	ldr	r3, [pc, #28]	; (800b810 <pxCurrentTCBConst2>)
 800b7f2:	6819      	ldr	r1, [r3, #0]
 800b7f4:	6808      	ldr	r0, [r1, #0]
 800b7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fa:	f380 8809 	msr	PSP, r0
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f04f 0000 	mov.w	r0, #0
 800b806:	f380 8811 	msr	BASEPRI, r0
 800b80a:	4770      	bx	lr
 800b80c:	f3af 8000 	nop.w

0800b810 <pxCurrentTCBConst2>:
 800b810:	24004b9c 	.word	0x24004b9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop

0800b818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b818:	4808      	ldr	r0, [pc, #32]	; (800b83c <prvPortStartFirstTask+0x24>)
 800b81a:	6800      	ldr	r0, [r0, #0]
 800b81c:	6800      	ldr	r0, [r0, #0]
 800b81e:	f380 8808 	msr	MSP, r0
 800b822:	f04f 0000 	mov.w	r0, #0
 800b826:	f380 8814 	msr	CONTROL, r0
 800b82a:	b662      	cpsie	i
 800b82c:	b661      	cpsie	f
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	df00      	svc	0
 800b838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b83a:	bf00      	nop
 800b83c:	e000ed08 	.word	0xe000ed08

0800b840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b846:	4b46      	ldr	r3, [pc, #280]	; (800b960 <xPortStartScheduler+0x120>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a46      	ldr	r2, [pc, #280]	; (800b964 <xPortStartScheduler+0x124>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d10a      	bne.n	800b866 <xPortStartScheduler+0x26>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	613b      	str	r3, [r7, #16]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b866:	4b3e      	ldr	r3, [pc, #248]	; (800b960 <xPortStartScheduler+0x120>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a3f      	ldr	r2, [pc, #252]	; (800b968 <xPortStartScheduler+0x128>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d10a      	bne.n	800b886 <xPortStartScheduler+0x46>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	60fb      	str	r3, [r7, #12]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b886:	4b39      	ldr	r3, [pc, #228]	; (800b96c <xPortStartScheduler+0x12c>)
 800b888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	22ff      	movs	r2, #255	; 0xff
 800b896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8a0:	78fb      	ldrb	r3, [r7, #3]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b31      	ldr	r3, [pc, #196]	; (800b970 <xPortStartScheduler+0x130>)
 800b8ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8ae:	4b31      	ldr	r3, [pc, #196]	; (800b974 <xPortStartScheduler+0x134>)
 800b8b0:	2207      	movs	r2, #7
 800b8b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8b4:	e009      	b.n	800b8ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b8b6:	4b2f      	ldr	r3, [pc, #188]	; (800b974 <xPortStartScheduler+0x134>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	4a2d      	ldr	r2, [pc, #180]	; (800b974 <xPortStartScheduler+0x134>)
 800b8be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d2:	2b80      	cmp	r3, #128	; 0x80
 800b8d4:	d0ef      	beq.n	800b8b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8d6:	4b27      	ldr	r3, [pc, #156]	; (800b974 <xPortStartScheduler+0x134>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f1c3 0307 	rsb	r3, r3, #7
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d00a      	beq.n	800b8f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	60bb      	str	r3, [r7, #8]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b8f8:	4b1e      	ldr	r3, [pc, #120]	; (800b974 <xPortStartScheduler+0x134>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	4a1d      	ldr	r2, [pc, #116]	; (800b974 <xPortStartScheduler+0x134>)
 800b900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b902:	4b1c      	ldr	r3, [pc, #112]	; (800b974 <xPortStartScheduler+0x134>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b90a:	4a1a      	ldr	r2, [pc, #104]	; (800b974 <xPortStartScheduler+0x134>)
 800b90c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	b2da      	uxtb	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b916:	4b18      	ldr	r3, [pc, #96]	; (800b978 <xPortStartScheduler+0x138>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <xPortStartScheduler+0x138>)
 800b91c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b922:	4b15      	ldr	r3, [pc, #84]	; (800b978 <xPortStartScheduler+0x138>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a14      	ldr	r2, [pc, #80]	; (800b978 <xPortStartScheduler+0x138>)
 800b928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b92c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b92e:	f000 f8dd 	bl	800baec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b932:	4b12      	ldr	r3, [pc, #72]	; (800b97c <xPortStartScheduler+0x13c>)
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b938:	f000 f8fc 	bl	800bb34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b93c:	4b10      	ldr	r3, [pc, #64]	; (800b980 <xPortStartScheduler+0x140>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a0f      	ldr	r2, [pc, #60]	; (800b980 <xPortStartScheduler+0x140>)
 800b942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b948:	f7ff ff66 	bl	800b818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b94c:	f001 fcc8 	bl	800d2e0 <vTaskSwitchContext>
	prvTaskExitError();
 800b950:	f7ff ff22 	bl	800b798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	e000ed00 	.word	0xe000ed00
 800b964:	410fc271 	.word	0x410fc271
 800b968:	410fc270 	.word	0x410fc270
 800b96c:	e000e400 	.word	0xe000e400
 800b970:	24004b54 	.word	0x24004b54
 800b974:	24004b58 	.word	0x24004b58
 800b978:	e000ed20 	.word	0xe000ed20
 800b97c:	24000020 	.word	0x24000020
 800b980:	e000ef34 	.word	0xe000ef34

0800b984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	607b      	str	r3, [r7, #4]
}
 800b99c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b99e:	4b0f      	ldr	r3, [pc, #60]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	4a0d      	ldr	r2, [pc, #52]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9a8:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <vPortEnterCritical+0x58>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d10f      	bne.n	800b9d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9b0:	4b0b      	ldr	r3, [pc, #44]	; (800b9e0 <vPortEnterCritical+0x5c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00a      	beq.n	800b9d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	603b      	str	r3, [r7, #0]
}
 800b9cc:	bf00      	nop
 800b9ce:	e7fe      	b.n	800b9ce <vPortEnterCritical+0x4a>
	}
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	24000020 	.word	0x24000020
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9ea:	4b12      	ldr	r3, [pc, #72]	; (800ba34 <vPortExitCritical+0x50>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <vPortExitCritical+0x24>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	607b      	str	r3, [r7, #4]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba08:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <vPortExitCritical+0x50>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	4a09      	ldr	r2, [pc, #36]	; (800ba34 <vPortExitCritical+0x50>)
 800ba10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba12:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <vPortExitCritical+0x50>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d105      	bne.n	800ba26 <vPortExitCritical+0x42>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	24000020 	.word	0x24000020
	...

0800ba40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba40:	f3ef 8009 	mrs	r0, PSP
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <pxCurrentTCBConst>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	f01e 0f10 	tst.w	lr, #16
 800ba50:	bf08      	it	eq
 800ba52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5a:	6010      	str	r0, [r2, #0]
 800ba5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba64:	f380 8811 	msr	BASEPRI, r0
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f001 fc36 	bl	800d2e0 <vTaskSwitchContext>
 800ba74:	f04f 0000 	mov.w	r0, #0
 800ba78:	f380 8811 	msr	BASEPRI, r0
 800ba7c:	bc09      	pop	{r0, r3}
 800ba7e:	6819      	ldr	r1, [r3, #0]
 800ba80:	6808      	ldr	r0, [r1, #0]
 800ba82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba86:	f01e 0f10 	tst.w	lr, #16
 800ba8a:	bf08      	it	eq
 800ba8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba90:	f380 8809 	msr	PSP, r0
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	f3af 8000 	nop.w

0800baa0 <pxCurrentTCBConst>:
 800baa0:	24004b9c 	.word	0x24004b9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop

0800baa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	607b      	str	r3, [r7, #4]
}
 800bac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bac2:	f001 fb53 	bl	800d16c <xTaskIncrementTick>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bacc:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <xPortSysTickHandler+0x40>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	f383 8811 	msr	BASEPRI, r3
}
 800bade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	e000ed04 	.word	0xe000ed04

0800baec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800baf0:	4b0b      	ldr	r3, [pc, #44]	; (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800baf6:	4b0b      	ldr	r3, [pc, #44]	; (800bb24 <vPortSetupTimerInterrupt+0x38>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bafc:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <vPortSetupTimerInterrupt+0x3c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a0a      	ldr	r2, [pc, #40]	; (800bb2c <vPortSetupTimerInterrupt+0x40>)
 800bb02:	fba2 2303 	umull	r2, r3, r2, r3
 800bb06:	099b      	lsrs	r3, r3, #6
 800bb08:	4a09      	ldr	r2, [pc, #36]	; (800bb30 <vPortSetupTimerInterrupt+0x44>)
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb0e:	4b04      	ldr	r3, [pc, #16]	; (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	601a      	str	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	e000e010 	.word	0xe000e010
 800bb24:	e000e018 	.word	0xe000e018
 800bb28:	24000000 	.word	0x24000000
 800bb2c:	10624dd3 	.word	0x10624dd3
 800bb30:	e000e014 	.word	0xe000e014

0800bb34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bb44 <vPortEnableVFP+0x10>
 800bb38:	6801      	ldr	r1, [r0, #0]
 800bb3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb3e:	6001      	str	r1, [r0, #0]
 800bb40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb42:	bf00      	nop
 800bb44:	e000ed88 	.word	0xe000ed88

0800bb48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb4e:	f3ef 8305 	mrs	r3, IPSR
 800bb52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b0f      	cmp	r3, #15
 800bb58:	d914      	bls.n	800bb84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb5a:	4a17      	ldr	r2, [pc, #92]	; (800bbb8 <vPortValidateInterruptPriority+0x70>)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb64:	4b15      	ldr	r3, [pc, #84]	; (800bbbc <vPortValidateInterruptPriority+0x74>)
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	7afa      	ldrb	r2, [r7, #11]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d20a      	bcs.n	800bb84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	607b      	str	r3, [r7, #4]
}
 800bb80:	bf00      	nop
 800bb82:	e7fe      	b.n	800bb82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb84:	4b0e      	ldr	r3, [pc, #56]	; (800bbc0 <vPortValidateInterruptPriority+0x78>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <vPortValidateInterruptPriority+0x7c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d90a      	bls.n	800bbaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	603b      	str	r3, [r7, #0]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <vPortValidateInterruptPriority+0x60>
	}
 800bbaa:	bf00      	nop
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	e000e3f0 	.word	0xe000e3f0
 800bbbc:	24004b54 	.word	0x24004b54
 800bbc0:	e000ed0c 	.word	0xe000ed0c
 800bbc4:	24004b58 	.word	0x24004b58

0800bbc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10a      	bne.n	800bbf2 <xQueueGenericReset+0x2a>
	__asm volatile
 800bbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	60bb      	str	r3, [r7, #8]
}
 800bbee:	bf00      	nop
 800bbf0:	e7fe      	b.n	800bbf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bbf2:	f7ff fec7 	bl	800b984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfe:	68f9      	ldr	r1, [r7, #12]
 800bc00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc02:	fb01 f303 	mul.w	r3, r1, r3
 800bc06:	441a      	add	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc22:	3b01      	subs	r3, #1
 800bc24:	68f9      	ldr	r1, [r7, #12]
 800bc26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc28:	fb01 f303 	mul.w	r3, r1, r3
 800bc2c:	441a      	add	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	22ff      	movs	r2, #255	; 0xff
 800bc36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	22ff      	movs	r2, #255	; 0xff
 800bc3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d114      	bne.n	800bc72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d01a      	beq.n	800bc86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	3310      	adds	r3, #16
 800bc54:	4618      	mov	r0, r3
 800bc56:	f001 fbf1 	bl	800d43c <xTaskRemoveFromEventList>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d012      	beq.n	800bc86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc60:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <xQueueGenericReset+0xcc>)
 800bc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc66:	601a      	str	r2, [r3, #0]
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	e009      	b.n	800bc86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3310      	adds	r3, #16
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff fca6 	bl	800b5c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	3324      	adds	r3, #36	; 0x24
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff fca1 	bl	800b5c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc86:	f7ff fead 	bl	800b9e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc8a:	2301      	movs	r3, #1
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	e000ed04 	.word	0xe000ed04

0800bc98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b08e      	sub	sp, #56	; 0x38
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10a      	bne.n	800bcc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcda:	bf00      	nop
 800bcdc:	e7fe      	b.n	800bcdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <xQueueGenericCreateStatic+0x52>
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <xQueueGenericCreateStatic+0x56>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e000      	b.n	800bcf0 <xQueueGenericCreateStatic+0x58>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10a      	bne.n	800bd0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	623b      	str	r3, [r7, #32]
}
 800bd06:	bf00      	nop
 800bd08:	e7fe      	b.n	800bd08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d102      	bne.n	800bd16 <xQueueGenericCreateStatic+0x7e>
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <xQueueGenericCreateStatic+0x82>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e000      	b.n	800bd1c <xQueueGenericCreateStatic+0x84>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10a      	bne.n	800bd36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	61fb      	str	r3, [r7, #28]
}
 800bd32:	bf00      	nop
 800bd34:	e7fe      	b.n	800bd34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd36:	2350      	movs	r3, #80	; 0x50
 800bd38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2b50      	cmp	r3, #80	; 0x50
 800bd3e:	d00a      	beq.n	800bd56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd44:	f383 8811 	msr	BASEPRI, r3
 800bd48:	f3bf 8f6f 	isb	sy
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	61bb      	str	r3, [r7, #24]
}
 800bd52:	bf00      	nop
 800bd54:	e7fe      	b.n	800bd54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00d      	beq.n	800bd7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	4613      	mov	r3, r2
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 f83f 	bl	800bdfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3730      	adds	r7, #48	; 0x30
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08a      	sub	sp, #40	; 0x28
 800bd8c:	af02      	add	r7, sp, #8
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	4613      	mov	r3, r2
 800bd94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10a      	bne.n	800bdb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	613b      	str	r3, [r7, #16]
}
 800bdae:	bf00      	nop
 800bdb0:	e7fe      	b.n	800bdb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	fb02 f303 	mul.w	r3, r2, r3
 800bdba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	3350      	adds	r3, #80	; 0x50
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fa17 	bl	800b1f4 <pvPortMalloc>
 800bdc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d011      	beq.n	800bdf2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	3350      	adds	r3, #80	; 0x50
 800bdd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bde0:	79fa      	ldrb	r2, [r7, #7]
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	9300      	str	r3, [sp, #0]
 800bde6:	4613      	mov	r3, r2
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	68b9      	ldr	r1, [r7, #8]
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f000 f805 	bl	800bdfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdf2:	69bb      	ldr	r3, [r7, #24]
	}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3720      	adds	r7, #32
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
 800be08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d103      	bne.n	800be18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	e002      	b.n	800be1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be2a:	2101      	movs	r1, #1
 800be2c:	69b8      	ldr	r0, [r7, #24]
 800be2e:	f7ff fecb 	bl	800bbc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	78fa      	ldrb	r2, [r7, #3]
 800be36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be3a:	bf00      	nop
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800be42:	b580      	push	{r7, lr}
 800be44:	b08a      	sub	sp, #40	; 0x28
 800be46:	af02      	add	r7, sp, #8
 800be48:	60f8      	str	r0, [r7, #12]
 800be4a:	60b9      	str	r1, [r7, #8]
 800be4c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10a      	bne.n	800be6a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800be54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	61bb      	str	r3, [r7, #24]
}
 800be66:	bf00      	nop
 800be68:	e7fe      	b.n	800be68 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d90a      	bls.n	800be88 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	617b      	str	r3, [r7, #20]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be88:	2302      	movs	r3, #2
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	2100      	movs	r1, #0
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7ff ff00 	bl	800bc98 <xQueueGenericCreateStatic>
 800be98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bea6:	69fb      	ldr	r3, [r7, #28]
	}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3720      	adds	r7, #32
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10a      	bne.n	800bed6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	613b      	str	r3, [r7, #16]
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d90a      	bls.n	800bef4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	60fb      	str	r3, [r7, #12]
}
 800bef0:	bf00      	nop
 800bef2:	e7fe      	b.n	800bef2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bef4:	2202      	movs	r2, #2
 800bef6:	2100      	movs	r1, #0
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7ff ff45 	bl	800bd88 <xQueueGenericCreate>
 800befe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf0c:	697b      	ldr	r3, [r7, #20]
	}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3718      	adds	r7, #24
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b08e      	sub	sp, #56	; 0x38
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf26:	2300      	movs	r3, #0
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10a      	bne.n	800bf4a <xQueueGenericSend+0x32>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d103      	bne.n	800bf58 <xQueueGenericSend+0x40>
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <xQueueGenericSend+0x44>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <xQueueGenericSend+0x46>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10a      	bne.n	800bf78 <xQueueGenericSend+0x60>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf74:	bf00      	nop
 800bf76:	e7fe      	b.n	800bf76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d103      	bne.n	800bf86 <xQueueGenericSend+0x6e>
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d101      	bne.n	800bf8a <xQueueGenericSend+0x72>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e000      	b.n	800bf8c <xQueueGenericSend+0x74>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	623b      	str	r3, [r7, #32]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfa6:	f001 fc07 	bl	800d7b8 <xTaskGetSchedulerState>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <xQueueGenericSend+0x9e>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d101      	bne.n	800bfba <xQueueGenericSend+0xa2>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e000      	b.n	800bfbc <xQueueGenericSend+0xa4>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10a      	bne.n	800bfd6 <xQueueGenericSend+0xbe>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	61fb      	str	r3, [r7, #28]
}
 800bfd2:	bf00      	nop
 800bfd4:	e7fe      	b.n	800bfd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfd6:	f7ff fcd5 	bl	800b984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d302      	bcc.n	800bfec <xQueueGenericSend+0xd4>
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d129      	bne.n	800c040 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	68b9      	ldr	r1, [r7, #8]
 800bff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff2:	f000 fc5e 	bl	800c8b2 <prvCopyDataToQueue>
 800bff6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d010      	beq.n	800c022 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	3324      	adds	r3, #36	; 0x24
 800c004:	4618      	mov	r0, r3
 800c006:	f001 fa19 	bl	800d43c <xTaskRemoveFromEventList>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d013      	beq.n	800c038 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c010:	4b3f      	ldr	r3, [pc, #252]	; (800c110 <xQueueGenericSend+0x1f8>)
 800c012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	e00a      	b.n	800c038 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	2b00      	cmp	r3, #0
 800c026:	d007      	beq.n	800c038 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c028:	4b39      	ldr	r3, [pc, #228]	; (800c110 <xQueueGenericSend+0x1f8>)
 800c02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c038:	f7ff fcd4 	bl	800b9e4 <vPortExitCritical>
				return pdPASS;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e063      	b.n	800c108 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d103      	bne.n	800c04e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c046:	f7ff fccd 	bl	800b9e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	e05c      	b.n	800c108 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c050:	2b00      	cmp	r3, #0
 800c052:	d106      	bne.n	800c062 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c054:	f107 0314 	add.w	r3, r7, #20
 800c058:	4618      	mov	r0, r3
 800c05a:	f001 fa53 	bl	800d504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c05e:	2301      	movs	r3, #1
 800c060:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c062:	f7ff fcbf 	bl	800b9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c066:	f000 ffc5 	bl	800cff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c06a:	f7ff fc8b 	bl	800b984 <vPortEnterCritical>
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c074:	b25b      	sxtb	r3, r3
 800c076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07a:	d103      	bne.n	800c084 <xQueueGenericSend+0x16c>
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	2200      	movs	r2, #0
 800c080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c08a:	b25b      	sxtb	r3, r3
 800c08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c090:	d103      	bne.n	800c09a <xQueueGenericSend+0x182>
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	2200      	movs	r2, #0
 800c096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c09a:	f7ff fca3 	bl	800b9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c09e:	1d3a      	adds	r2, r7, #4
 800c0a0:	f107 0314 	add.w	r3, r7, #20
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f001 fa42 	bl	800d530 <xTaskCheckForTimeOut>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d124      	bne.n	800c0fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0b4:	f000 fcf5 	bl	800caa2 <prvIsQueueFull>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d018      	beq.n	800c0f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	3310      	adds	r3, #16
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f001 f968 	bl	800d39c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0ce:	f000 fc80 	bl	800c9d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0d2:	f000 ff9d 	bl	800d010 <xTaskResumeAll>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f47f af7c 	bne.w	800bfd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c0de:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <xQueueGenericSend+0x1f8>)
 800c0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	e772      	b.n	800bfd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0f2:	f000 fc6e 	bl	800c9d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0f6:	f000 ff8b 	bl	800d010 <xTaskResumeAll>
 800c0fa:	e76c      	b.n	800bfd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0fe:	f000 fc68 	bl	800c9d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c102:	f000 ff85 	bl	800d010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3738      	adds	r7, #56	; 0x38
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	e000ed04 	.word	0xe000ed04

0800c114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b090      	sub	sp, #64	; 0x40
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10a      	bne.n	800c142 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d103      	bne.n	800c150 <xQueueGenericSendFromISR+0x3c>
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d101      	bne.n	800c154 <xQueueGenericSendFromISR+0x40>
 800c150:	2301      	movs	r3, #1
 800c152:	e000      	b.n	800c156 <xQueueGenericSendFromISR+0x42>
 800c154:	2300      	movs	r3, #0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c16c:	bf00      	nop
 800c16e:	e7fe      	b.n	800c16e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	2b02      	cmp	r3, #2
 800c174:	d103      	bne.n	800c17e <xQueueGenericSendFromISR+0x6a>
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d101      	bne.n	800c182 <xQueueGenericSendFromISR+0x6e>
 800c17e:	2301      	movs	r3, #1
 800c180:	e000      	b.n	800c184 <xQueueGenericSendFromISR+0x70>
 800c182:	2300      	movs	r3, #0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	623b      	str	r3, [r7, #32]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c19e:	f7ff fcd3 	bl	800bb48 <vPortValidateInterruptPriority>
	__asm volatile
 800c1a2:	f3ef 8211 	mrs	r2, BASEPRI
 800c1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	61fa      	str	r2, [r7, #28]
 800c1b8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c1ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d302      	bcc.n	800c1d0 <xQueueGenericSendFromISR+0xbc>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d12f      	bne.n	800c230 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1e0:	683a      	ldr	r2, [r7, #0]
 800c1e2:	68b9      	ldr	r1, [r7, #8]
 800c1e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1e6:	f000 fb64 	bl	800c8b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f2:	d112      	bne.n	800c21a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d016      	beq.n	800c22a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	3324      	adds	r3, #36	; 0x24
 800c200:	4618      	mov	r0, r3
 800c202:	f001 f91b 	bl	800d43c <xTaskRemoveFromEventList>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00e      	beq.n	800c22a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00b      	beq.n	800c22a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2201      	movs	r2, #1
 800c216:	601a      	str	r2, [r3, #0]
 800c218:	e007      	b.n	800c22a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c21a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c21e:	3301      	adds	r3, #1
 800c220:	b2db      	uxtb	r3, r3
 800c222:	b25a      	sxtb	r2, r3
 800c224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c22a:	2301      	movs	r3, #1
 800c22c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c22e:	e001      	b.n	800c234 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c230:	2300      	movs	r3, #0
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c236:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	f383 8811 	msr	BASEPRI, r3
}
 800c23e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c242:	4618      	mov	r0, r3
 800c244:	3740      	adds	r7, #64	; 0x40
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b08e      	sub	sp, #56	; 0x38
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10a      	bne.n	800c274 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	623b      	str	r3, [r7, #32]
}
 800c270:	bf00      	nop
 800c272:	e7fe      	b.n	800c272 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d00a      	beq.n	800c292 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	61fb      	str	r3, [r7, #28]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d103      	bne.n	800c2a2 <xQueueGiveFromISR+0x58>
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <xQueueGiveFromISR+0x5c>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e000      	b.n	800c2a8 <xQueueGiveFromISR+0x5e>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	61bb      	str	r3, [r7, #24]
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2c2:	f7ff fc41 	bl	800bb48 <vPortValidateInterruptPriority>
	__asm volatile
 800c2c6:	f3ef 8211 	mrs	r2, BASEPRI
 800c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	617a      	str	r2, [r7, #20]
 800c2dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d22b      	bcs.n	800c34a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	1c5a      	adds	r2, r3, #1
 800c300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c302:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30c:	d112      	bne.n	800c334 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c312:	2b00      	cmp	r3, #0
 800c314:	d016      	beq.n	800c344 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	3324      	adds	r3, #36	; 0x24
 800c31a:	4618      	mov	r0, r3
 800c31c:	f001 f88e 	bl	800d43c <xTaskRemoveFromEventList>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00e      	beq.n	800c344 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2201      	movs	r2, #1
 800c330:	601a      	str	r2, [r3, #0]
 800c332:	e007      	b.n	800c344 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c338:	3301      	adds	r3, #1
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	b25a      	sxtb	r2, r3
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c344:	2301      	movs	r3, #1
 800c346:	637b      	str	r3, [r7, #52]	; 0x34
 800c348:	e001      	b.n	800c34e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c34a:	2300      	movs	r3, #0
 800c34c:	637b      	str	r3, [r7, #52]	; 0x34
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f383 8811 	msr	BASEPRI, r3
}
 800c358:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3738      	adds	r7, #56	; 0x38
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08c      	sub	sp, #48	; 0x30
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c370:	2300      	movs	r3, #0
 800c372:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <xQueueReceive+0x30>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	623b      	str	r3, [r7, #32]
}
 800c390:	bf00      	nop
 800c392:	e7fe      	b.n	800c392 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d103      	bne.n	800c3a2 <xQueueReceive+0x3e>
 800c39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <xQueueReceive+0x42>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e000      	b.n	800c3a8 <xQueueReceive+0x44>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <xQueueReceive+0x5e>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	61fb      	str	r3, [r7, #28]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3c2:	f001 f9f9 	bl	800d7b8 <xTaskGetSchedulerState>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d102      	bne.n	800c3d2 <xQueueReceive+0x6e>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <xQueueReceive+0x72>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <xQueueReceive+0x74>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <xQueueReceive+0x8e>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	61bb      	str	r3, [r7, #24]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3f2:	f7ff fac7 	bl	800b984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01f      	beq.n	800c442 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c402:	68b9      	ldr	r1, [r7, #8]
 800c404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c406:	f000 fabe 	bl	800c986 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	1e5a      	subs	r2, r3, #1
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00f      	beq.n	800c43a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	3310      	adds	r3, #16
 800c41e:	4618      	mov	r0, r3
 800c420:	f001 f80c 	bl	800d43c <xTaskRemoveFromEventList>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d007      	beq.n	800c43a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c42a:	4b3d      	ldr	r3, [pc, #244]	; (800c520 <xQueueReceive+0x1bc>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c43a:	f7ff fad3 	bl	800b9e4 <vPortExitCritical>
				return pdPASS;
 800c43e:	2301      	movs	r3, #1
 800c440:	e069      	b.n	800c516 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c448:	f7ff facc 	bl	800b9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c44c:	2300      	movs	r3, #0
 800c44e:	e062      	b.n	800c516 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	2b00      	cmp	r3, #0
 800c454:	d106      	bne.n	800c464 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c456:	f107 0310 	add.w	r3, r7, #16
 800c45a:	4618      	mov	r0, r3
 800c45c:	f001 f852 	bl	800d504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c460:	2301      	movs	r3, #1
 800c462:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c464:	f7ff fabe 	bl	800b9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c468:	f000 fdc4 	bl	800cff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c46c:	f7ff fa8a 	bl	800b984 <vPortEnterCritical>
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c476:	b25b      	sxtb	r3, r3
 800c478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47c:	d103      	bne.n	800c486 <xQueueReceive+0x122>
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	2200      	movs	r2, #0
 800c482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c48c:	b25b      	sxtb	r3, r3
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c492:	d103      	bne.n	800c49c <xQueueReceive+0x138>
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c49c:	f7ff faa2 	bl	800b9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4a0:	1d3a      	adds	r2, r7, #4
 800c4a2:	f107 0310 	add.w	r3, r7, #16
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f001 f841 	bl	800d530 <xTaskCheckForTimeOut>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d123      	bne.n	800c4fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b6:	f000 fade 	bl	800ca76 <prvIsQueueEmpty>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d017      	beq.n	800c4f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	3324      	adds	r3, #36	; 0x24
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 ff67 	bl	800d39c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4d0:	f000 fa7f 	bl	800c9d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4d4:	f000 fd9c 	bl	800d010 <xTaskResumeAll>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d189      	bne.n	800c3f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4de:	4b10      	ldr	r3, [pc, #64]	; (800c520 <xQueueReceive+0x1bc>)
 800c4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e4:	601a      	str	r2, [r3, #0]
 800c4e6:	f3bf 8f4f 	dsb	sy
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	e780      	b.n	800c3f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4f2:	f000 fa6e 	bl	800c9d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4f6:	f000 fd8b 	bl	800d010 <xTaskResumeAll>
 800c4fa:	e77a      	b.n	800c3f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4fe:	f000 fa68 	bl	800c9d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c502:	f000 fd85 	bl	800d010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c508:	f000 fab5 	bl	800ca76 <prvIsQueueEmpty>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f43f af6f 	beq.w	800c3f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c516:	4618      	mov	r0, r3
 800c518:	3730      	adds	r7, #48	; 0x30
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	e000ed04 	.word	0xe000ed04

0800c524 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b08e      	sub	sp, #56	; 0x38
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c52e:	2300      	movs	r3, #0
 800c530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c536:	2300      	movs	r3, #0
 800c538:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10a      	bne.n	800c556 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	623b      	str	r3, [r7, #32]
}
 800c552:	bf00      	nop
 800c554:	e7fe      	b.n	800c554 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00a      	beq.n	800c574 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	61fb      	str	r3, [r7, #28]
}
 800c570:	bf00      	nop
 800c572:	e7fe      	b.n	800c572 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c574:	f001 f920 	bl	800d7b8 <xTaskGetSchedulerState>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d102      	bne.n	800c584 <xQueueSemaphoreTake+0x60>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <xQueueSemaphoreTake+0x64>
 800c584:	2301      	movs	r3, #1
 800c586:	e000      	b.n	800c58a <xQueueSemaphoreTake+0x66>
 800c588:	2300      	movs	r3, #0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10a      	bne.n	800c5a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	61bb      	str	r3, [r7, #24]
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5a4:	f7ff f9ee 	bl	800b984 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d024      	beq.n	800c5fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	1e5a      	subs	r2, r3, #1
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c5c4:	f001 fa6e 	bl	800daa4 <pvTaskIncrementMutexHeldCount>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00f      	beq.n	800c5f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d8:	3310      	adds	r3, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 ff2e 	bl	800d43c <xTaskRemoveFromEventList>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5e6:	4b54      	ldr	r3, [pc, #336]	; (800c738 <xQueueSemaphoreTake+0x214>)
 800c5e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5f6:	f7ff f9f5 	bl	800b9e4 <vPortExitCritical>
				return pdPASS;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e097      	b.n	800c72e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d111      	bne.n	800c628 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	617b      	str	r3, [r7, #20]
}
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c620:	f7ff f9e0 	bl	800b9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c624:	2300      	movs	r3, #0
 800c626:	e082      	b.n	800c72e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c62e:	f107 030c 	add.w	r3, r7, #12
 800c632:	4618      	mov	r0, r3
 800c634:	f000 ff66 	bl	800d504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c638:	2301      	movs	r3, #1
 800c63a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c63c:	f7ff f9d2 	bl	800b9e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c640:	f000 fcd8 	bl	800cff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c644:	f7ff f99e 	bl	800b984 <vPortEnterCritical>
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c64e:	b25b      	sxtb	r3, r3
 800c650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c654:	d103      	bne.n	800c65e <xQueueSemaphoreTake+0x13a>
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	2200      	movs	r2, #0
 800c65a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c664:	b25b      	sxtb	r3, r3
 800c666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66a:	d103      	bne.n	800c674 <xQueueSemaphoreTake+0x150>
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	2200      	movs	r2, #0
 800c670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c674:	f7ff f9b6 	bl	800b9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c678:	463a      	mov	r2, r7
 800c67a:	f107 030c 	add.w	r3, r7, #12
 800c67e:	4611      	mov	r1, r2
 800c680:	4618      	mov	r0, r3
 800c682:	f000 ff55 	bl	800d530 <xTaskCheckForTimeOut>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d132      	bne.n	800c6f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c68c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c68e:	f000 f9f2 	bl	800ca76 <prvIsQueueEmpty>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d026      	beq.n	800c6e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d109      	bne.n	800c6b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c6a0:	f7ff f970 	bl	800b984 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 f8a3 	bl	800d7f4 <xTaskPriorityInherit>
 800c6ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c6b0:	f7ff f998 	bl	800b9e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b6:	3324      	adds	r3, #36	; 0x24
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f000 fe6d 	bl	800d39c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6c4:	f000 f985 	bl	800c9d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6c8:	f000 fca2 	bl	800d010 <xTaskResumeAll>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f47f af68 	bne.w	800c5a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c6d4:	4b18      	ldr	r3, [pc, #96]	; (800c738 <xQueueSemaphoreTake+0x214>)
 800c6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	e75e      	b.n	800c5a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6e8:	f000 f973 	bl	800c9d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6ec:	f000 fc90 	bl	800d010 <xTaskResumeAll>
 800c6f0:	e758      	b.n	800c5a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6f4:	f000 f96d 	bl	800c9d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6f8:	f000 fc8a 	bl	800d010 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6fe:	f000 f9ba 	bl	800ca76 <prvIsQueueEmpty>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	f43f af4d 	beq.w	800c5a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00d      	beq.n	800c72c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c710:	f7ff f938 	bl	800b984 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c716:	f000 f8b4 	bl	800c882 <prvGetDisinheritPriorityAfterTimeout>
 800c71a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c722:	4618      	mov	r0, r3
 800c724:	f001 f93c 	bl	800d9a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c728:	f7ff f95c 	bl	800b9e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c72c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3738      	adds	r7, #56	; 0x38
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	e000ed04 	.word	0xe000ed04

0800c73c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b08e      	sub	sp, #56	; 0x38
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10a      	bne.n	800c768 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	623b      	str	r3, [r7, #32]
}
 800c764:	bf00      	nop
 800c766:	e7fe      	b.n	800c766 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d103      	bne.n	800c776 <xQueueReceiveFromISR+0x3a>
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <xQueueReceiveFromISR+0x3e>
 800c776:	2301      	movs	r3, #1
 800c778:	e000      	b.n	800c77c <xQueueReceiveFromISR+0x40>
 800c77a:	2300      	movs	r3, #0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d10a      	bne.n	800c796 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	61fb      	str	r3, [r7, #28]
}
 800c792:	bf00      	nop
 800c794:	e7fe      	b.n	800c794 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c796:	f7ff f9d7 	bl	800bb48 <vPortValidateInterruptPriority>
	__asm volatile
 800c79a:	f3ef 8211 	mrs	r2, BASEPRI
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	61ba      	str	r2, [r7, #24]
 800c7b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c7b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d02f      	beq.n	800c822 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7cc:	68b9      	ldr	r1, [r7, #8]
 800c7ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7d0:	f000 f8d9 	bl	800c986 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	1e5a      	subs	r2, r3, #1
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e4:	d112      	bne.n	800c80c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d016      	beq.n	800c81c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	3310      	adds	r3, #16
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 fe22 	bl	800d43c <xTaskRemoveFromEventList>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00e      	beq.n	800c81c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	601a      	str	r2, [r3, #0]
 800c80a:	e007      	b.n	800c81c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c810:	3301      	adds	r3, #1
 800c812:	b2db      	uxtb	r3, r3
 800c814:	b25a      	sxtb	r2, r3
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c81c:	2301      	movs	r3, #1
 800c81e:	637b      	str	r3, [r7, #52]	; 0x34
 800c820:	e001      	b.n	800c826 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c822:	2300      	movs	r3, #0
 800c824:	637b      	str	r3, [r7, #52]	; 0x34
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	f383 8811 	msr	BASEPRI, r3
}
 800c830:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c834:	4618      	mov	r0, r3
 800c836:	3738      	adds	r7, #56	; 0x38
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10a      	bne.n	800c864 <vQueueDelete+0x28>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	60bb      	str	r3, [r7, #8]
}
 800c860:	bf00      	nop
 800c862:	e7fe      	b.n	800c862 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f000 f95f 	bl	800cb28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c870:	2b00      	cmp	r3, #0
 800c872:	d102      	bne.n	800c87a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7fe fd89 	bl	800b38c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c87a:	bf00      	nop
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c882:	b480      	push	{r7}
 800c884:	b085      	sub	sp, #20
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d006      	beq.n	800c8a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	e001      	b.n	800c8a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
	}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b086      	sub	sp, #24
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	60f8      	str	r0, [r7, #12]
 800c8ba:	60b9      	str	r1, [r7, #8]
 800c8bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10d      	bne.n	800c8ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d14d      	bne.n	800c974 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 fff1 	bl	800d8c4 <xTaskPriorityDisinherit>
 800c8e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	609a      	str	r2, [r3, #8]
 800c8ea:	e043      	b.n	800c974 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d119      	bne.n	800c926 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6858      	ldr	r0, [r3, #4]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	f001 fcb1 	bl	800e264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	685a      	ldr	r2, [r3, #4]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90a:	441a      	add	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d32b      	bcc.n	800c974 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	605a      	str	r2, [r3, #4]
 800c924:	e026      	b.n	800c974 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	68d8      	ldr	r0, [r3, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	461a      	mov	r2, r3
 800c930:	68b9      	ldr	r1, [r7, #8]
 800c932:	f001 fc97 	bl	800e264 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	68da      	ldr	r2, [r3, #12]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	425b      	negs	r3, r3
 800c940:	441a      	add	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	68da      	ldr	r2, [r3, #12]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d207      	bcs.n	800c962 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	689a      	ldr	r2, [r3, #8]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95a:	425b      	negs	r3, r3
 800c95c:	441a      	add	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b02      	cmp	r3, #2
 800c966:	d105      	bne.n	800c974 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	3b01      	subs	r3, #1
 800c972:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c97c:	697b      	ldr	r3, [r7, #20]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c994:	2b00      	cmp	r3, #0
 800c996:	d018      	beq.n	800c9ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68da      	ldr	r2, [r3, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a0:	441a      	add	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68da      	ldr	r2, [r3, #12]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d303      	bcc.n	800c9ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68d9      	ldr	r1, [r3, #12]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	6838      	ldr	r0, [r7, #0]
 800c9c6:	f001 fc4d 	bl	800e264 <memcpy>
	}
}
 800c9ca:	bf00      	nop
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9da:	f7fe ffd3 	bl	800b984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9e6:	e011      	b.n	800ca0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d012      	beq.n	800ca16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	3324      	adds	r3, #36	; 0x24
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fd21 	bl	800d43c <xTaskRemoveFromEventList>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca00:	f000 fdf8 	bl	800d5f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	dce9      	bgt.n	800c9e8 <prvUnlockQueue+0x16>
 800ca14:	e000      	b.n	800ca18 <prvUnlockQueue+0x46>
					break;
 800ca16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	22ff      	movs	r2, #255	; 0xff
 800ca1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca20:	f7fe ffe0 	bl	800b9e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca24:	f7fe ffae 	bl	800b984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca30:	e011      	b.n	800ca56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d012      	beq.n	800ca60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3310      	adds	r3, #16
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 fcfc 	bl	800d43c <xTaskRemoveFromEventList>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca4a:	f000 fdd3 	bl	800d5f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca4e:	7bbb      	ldrb	r3, [r7, #14]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	dce9      	bgt.n	800ca32 <prvUnlockQueue+0x60>
 800ca5e:	e000      	b.n	800ca62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	22ff      	movs	r2, #255	; 0xff
 800ca66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca6a:	f7fe ffbb 	bl	800b9e4 <vPortExitCritical>
}
 800ca6e:	bf00      	nop
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca7e:	f7fe ff81 	bl	800b984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d102      	bne.n	800ca90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	e001      	b.n	800ca94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca94:	f7fe ffa6 	bl	800b9e4 <vPortExitCritical>

	return xReturn;
 800ca98:	68fb      	ldr	r3, [r7, #12]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800caaa:	f7fe ff6b 	bl	800b984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d102      	bne.n	800cac0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800caba:	2301      	movs	r3, #1
 800cabc:	60fb      	str	r3, [r7, #12]
 800cabe:	e001      	b.n	800cac4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cac0:	2300      	movs	r3, #0
 800cac2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cac4:	f7fe ff8e 	bl	800b9e4 <vPortExitCritical>

	return xReturn;
 800cac8:	68fb      	ldr	r3, [r7, #12]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
	...

0800cad4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cade:	2300      	movs	r3, #0
 800cae0:	60fb      	str	r3, [r7, #12]
 800cae2:	e014      	b.n	800cb0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cae4:	4a0f      	ldr	r2, [pc, #60]	; (800cb24 <vQueueAddToRegistry+0x50>)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d10b      	bne.n	800cb08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800caf0:	490c      	ldr	r1, [pc, #48]	; (800cb24 <vQueueAddToRegistry+0x50>)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cafa:	4a0a      	ldr	r2, [pc, #40]	; (800cb24 <vQueueAddToRegistry+0x50>)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	4413      	add	r3, r2
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb06:	e006      	b.n	800cb16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2b07      	cmp	r3, #7
 800cb12:	d9e7      	bls.n	800cae4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	24004b5c 	.word	0x24004b5c

0800cb28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	e016      	b.n	800cb64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb36:	4a10      	ldr	r2, [pc, #64]	; (800cb78 <vQueueUnregisterQueue+0x50>)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	4413      	add	r3, r2
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d10b      	bne.n	800cb5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb46:	4a0c      	ldr	r2, [pc, #48]	; (800cb78 <vQueueUnregisterQueue+0x50>)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb50:	4a09      	ldr	r2, [pc, #36]	; (800cb78 <vQueueUnregisterQueue+0x50>)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	4413      	add	r3, r2
 800cb58:	2200      	movs	r2, #0
 800cb5a:	605a      	str	r2, [r3, #4]
				break;
 800cb5c:	e006      	b.n	800cb6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3301      	adds	r3, #1
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b07      	cmp	r3, #7
 800cb68:	d9e5      	bls.n	800cb36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb6a:	bf00      	nop
 800cb6c:	bf00      	nop
 800cb6e:	3714      	adds	r7, #20
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr
 800cb78:	24004b5c 	.word	0x24004b5c

0800cb7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b086      	sub	sp, #24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb8c:	f7fe fefa 	bl	800b984 <vPortEnterCritical>
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb96:	b25b      	sxtb	r3, r3
 800cb98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9c:	d103      	bne.n	800cba6 <vQueueWaitForMessageRestricted+0x2a>
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbac:	b25b      	sxtb	r3, r3
 800cbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb2:	d103      	bne.n	800cbbc <vQueueWaitForMessageRestricted+0x40>
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbbc:	f7fe ff12 	bl	800b9e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d106      	bne.n	800cbd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	3324      	adds	r3, #36	; 0x24
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fc07 	bl	800d3e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbd6:	6978      	ldr	r0, [r7, #20]
 800cbd8:	f7ff fefb 	bl	800c9d2 <prvUnlockQueue>
	}
 800cbdc:	bf00      	nop
 800cbde:	3718      	adds	r7, #24
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08e      	sub	sp, #56	; 0x38
 800cbe8:	af04      	add	r7, sp, #16
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <xTaskCreateStatic+0x2a>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	623b      	str	r3, [r7, #32]
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10a      	bne.n	800cc2a <xTaskCreateStatic+0x46>
	__asm volatile
 800cc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc18:	f383 8811 	msr	BASEPRI, r3
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	61fb      	str	r3, [r7, #28]
}
 800cc26:	bf00      	nop
 800cc28:	e7fe      	b.n	800cc28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc2a:	235c      	movs	r3, #92	; 0x5c
 800cc2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2b5c      	cmp	r3, #92	; 0x5c
 800cc32:	d00a      	beq.n	800cc4a <xTaskCreateStatic+0x66>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	61bb      	str	r3, [r7, #24]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d01e      	beq.n	800cc90 <xTaskCreateStatic+0xac>
 800cc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01b      	beq.n	800cc90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc64:	2202      	movs	r2, #2
 800cc66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	9303      	str	r3, [sp, #12]
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc70:	9302      	str	r3, [sp, #8]
 800cc72:	f107 0314 	add.w	r3, r7, #20
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	68b9      	ldr	r1, [r7, #8]
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f000 f850 	bl	800cd28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc8a:	f000 f8dd 	bl	800ce48 <prvAddNewTaskToReadyList>
 800cc8e:	e001      	b.n	800cc94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc90:	2300      	movs	r3, #0
 800cc92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc94:	697b      	ldr	r3, [r7, #20]
	}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3728      	adds	r7, #40	; 0x28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b08c      	sub	sp, #48	; 0x30
 800cca2:	af04      	add	r7, sp, #16
 800cca4:	60f8      	str	r0, [r7, #12]
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	603b      	str	r3, [r7, #0]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccae:	88fb      	ldrh	r3, [r7, #6]
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe fa9e 	bl	800b1f4 <pvPortMalloc>
 800ccb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00e      	beq.n	800ccde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ccc0:	205c      	movs	r0, #92	; 0x5c
 800ccc2:	f7fe fa97 	bl	800b1f4 <pvPortMalloc>
 800ccc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	631a      	str	r2, [r3, #48]	; 0x30
 800ccd4:	e005      	b.n	800cce2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ccd6:	6978      	ldr	r0, [r7, #20]
 800ccd8:	f7fe fb58 	bl	800b38c <vPortFree>
 800ccdc:	e001      	b.n	800cce2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccde:	2300      	movs	r3, #0
 800cce0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d017      	beq.n	800cd18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccf0:	88fa      	ldrh	r2, [r7, #6]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	9303      	str	r3, [sp, #12]
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	9302      	str	r3, [sp, #8]
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	68b9      	ldr	r1, [r7, #8]
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f000 f80e 	bl	800cd28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd0c:	69f8      	ldr	r0, [r7, #28]
 800cd0e:	f000 f89b 	bl	800ce48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd12:	2301      	movs	r3, #1
 800cd14:	61bb      	str	r3, [r7, #24]
 800cd16:	e002      	b.n	800cd1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd1e:	69bb      	ldr	r3, [r7, #24]
	}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3720      	adds	r7, #32
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
 800cd34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	461a      	mov	r2, r3
 800cd40:	21a5      	movs	r1, #165	; 0xa5
 800cd42:	f001 fa9d 	bl	800e280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd4a:	6879      	ldr	r1, [r7, #4]
 800cd4c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cd50:	440b      	add	r3, r1
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	f023 0307 	bic.w	r3, r3, #7
 800cd5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	f003 0307 	and.w	r3, r3, #7
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00a      	beq.n	800cd80 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	617b      	str	r3, [r7, #20]
}
 800cd7c:	bf00      	nop
 800cd7e:	e7fe      	b.n	800cd7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d01f      	beq.n	800cdc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd86:	2300      	movs	r3, #0
 800cd88:	61fb      	str	r3, [r7, #28]
 800cd8a:	e012      	b.n	800cdb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	4413      	add	r3, r2
 800cd92:	7819      	ldrb	r1, [r3, #0]
 800cd94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	4413      	add	r3, r2
 800cd9a:	3334      	adds	r3, #52	; 0x34
 800cd9c:	460a      	mov	r2, r1
 800cd9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	4413      	add	r3, r2
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d006      	beq.n	800cdba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	61fb      	str	r3, [r7, #28]
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	2b0f      	cmp	r3, #15
 800cdb6:	d9e9      	bls.n	800cd8c <prvInitialiseNewTask+0x64>
 800cdb8:	e000      	b.n	800cdbc <prvInitialiseNewTask+0x94>
			{
				break;
 800cdba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cdc4:	e003      	b.n	800cdce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd0:	2b37      	cmp	r3, #55	; 0x37
 800cdd2:	d901      	bls.n	800cdd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cdd4:	2337      	movs	r3, #55	; 0x37
 800cdd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cddc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cde2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde6:	2200      	movs	r2, #0
 800cde8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	3304      	adds	r3, #4
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fe fc0a 	bl	800b608 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	3318      	adds	r3, #24
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fe fc05 	bl	800b608 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce16:	2200      	movs	r2, #0
 800ce18:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce22:	683a      	ldr	r2, [r7, #0]
 800ce24:	68f9      	ldr	r1, [r7, #12]
 800ce26:	69b8      	ldr	r0, [r7, #24]
 800ce28:	f7fe fc82 	bl	800b730 <pxPortInitialiseStack>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce3e:	bf00      	nop
 800ce40:	3720      	adds	r7, #32
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce50:	f7fe fd98 	bl	800b984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce54:	4b2d      	ldr	r3, [pc, #180]	; (800cf0c <prvAddNewTaskToReadyList+0xc4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	4a2c      	ldr	r2, [pc, #176]	; (800cf0c <prvAddNewTaskToReadyList+0xc4>)
 800ce5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce5e:	4b2c      	ldr	r3, [pc, #176]	; (800cf10 <prvAddNewTaskToReadyList+0xc8>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d109      	bne.n	800ce7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce66:	4a2a      	ldr	r2, [pc, #168]	; (800cf10 <prvAddNewTaskToReadyList+0xc8>)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce6c:	4b27      	ldr	r3, [pc, #156]	; (800cf0c <prvAddNewTaskToReadyList+0xc4>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d110      	bne.n	800ce96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce74:	f000 fbe2 	bl	800d63c <prvInitialiseTaskLists>
 800ce78:	e00d      	b.n	800ce96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce7a:	4b26      	ldr	r3, [pc, #152]	; (800cf14 <prvAddNewTaskToReadyList+0xcc>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d109      	bne.n	800ce96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce82:	4b23      	ldr	r3, [pc, #140]	; (800cf10 <prvAddNewTaskToReadyList+0xc8>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d802      	bhi.n	800ce96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce90:	4a1f      	ldr	r2, [pc, #124]	; (800cf10 <prvAddNewTaskToReadyList+0xc8>)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce96:	4b20      	ldr	r3, [pc, #128]	; (800cf18 <prvAddNewTaskToReadyList+0xd0>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	4a1e      	ldr	r2, [pc, #120]	; (800cf18 <prvAddNewTaskToReadyList+0xd0>)
 800ce9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cea0:	4b1d      	ldr	r3, [pc, #116]	; (800cf18 <prvAddNewTaskToReadyList+0xd0>)
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceac:	4b1b      	ldr	r3, [pc, #108]	; (800cf1c <prvAddNewTaskToReadyList+0xd4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d903      	bls.n	800cebc <prvAddNewTaskToReadyList+0x74>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb8:	4a18      	ldr	r2, [pc, #96]	; (800cf1c <prvAddNewTaskToReadyList+0xd4>)
 800ceba:	6013      	str	r3, [r2, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec0:	4613      	mov	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4a15      	ldr	r2, [pc, #84]	; (800cf20 <prvAddNewTaskToReadyList+0xd8>)
 800ceca:	441a      	add	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	3304      	adds	r3, #4
 800ced0:	4619      	mov	r1, r3
 800ced2:	4610      	mov	r0, r2
 800ced4:	f7fe fba5 	bl	800b622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ced8:	f7fe fd84 	bl	800b9e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cedc:	4b0d      	ldr	r3, [pc, #52]	; (800cf14 <prvAddNewTaskToReadyList+0xcc>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00e      	beq.n	800cf02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cee4:	4b0a      	ldr	r3, [pc, #40]	; (800cf10 <prvAddNewTaskToReadyList+0xc8>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d207      	bcs.n	800cf02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cef2:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <prvAddNewTaskToReadyList+0xdc>)
 800cef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf02:	bf00      	nop
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	24005070 	.word	0x24005070
 800cf10:	24004b9c 	.word	0x24004b9c
 800cf14:	2400507c 	.word	0x2400507c
 800cf18:	2400508c 	.word	0x2400508c
 800cf1c:	24005078 	.word	0x24005078
 800cf20:	24004ba0 	.word	0x24004ba0
 800cf24:	e000ed04 	.word	0xe000ed04

0800cf28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b08a      	sub	sp, #40	; 0x28
 800cf2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf36:	463a      	mov	r2, r7
 800cf38:	1d39      	adds	r1, r7, #4
 800cf3a:	f107 0308 	add.w	r3, r7, #8
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fe f924 	bl	800b18c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	9202      	str	r2, [sp, #8]
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	2300      	movs	r3, #0
 800cf54:	460a      	mov	r2, r1
 800cf56:	4921      	ldr	r1, [pc, #132]	; (800cfdc <vTaskStartScheduler+0xb4>)
 800cf58:	4821      	ldr	r0, [pc, #132]	; (800cfe0 <vTaskStartScheduler+0xb8>)
 800cf5a:	f7ff fe43 	bl	800cbe4 <xTaskCreateStatic>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	4a20      	ldr	r2, [pc, #128]	; (800cfe4 <vTaskStartScheduler+0xbc>)
 800cf62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf64:	4b1f      	ldr	r3, [pc, #124]	; (800cfe4 <vTaskStartScheduler+0xbc>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	e001      	b.n	800cf76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d102      	bne.n	800cf82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf7c:	f000 fdfa 	bl	800db74 <xTimerCreateTimerTask>
 800cf80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d116      	bne.n	800cfb6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	613b      	str	r3, [r7, #16]
}
 800cf9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf9c:	4b12      	ldr	r3, [pc, #72]	; (800cfe8 <vTaskStartScheduler+0xc0>)
 800cf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cfa4:	4b11      	ldr	r3, [pc, #68]	; (800cfec <vTaskStartScheduler+0xc4>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cfaa:	4b11      	ldr	r3, [pc, #68]	; (800cff0 <vTaskStartScheduler+0xc8>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cfb0:	f7fe fc46 	bl	800b840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cfb4:	e00e      	b.n	800cfd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfbc:	d10a      	bne.n	800cfd4 <vTaskStartScheduler+0xac>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	60fb      	str	r3, [r7, #12]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <vTaskStartScheduler+0xaa>
}
 800cfd4:	bf00      	nop
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	08014230 	.word	0x08014230
 800cfe0:	0800d60d 	.word	0x0800d60d
 800cfe4:	24005094 	.word	0x24005094
 800cfe8:	24005090 	.word	0x24005090
 800cfec:	2400507c 	.word	0x2400507c
 800cff0:	24005074 	.word	0x24005074

0800cff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cff8:	4b04      	ldr	r3, [pc, #16]	; (800d00c <vTaskSuspendAll+0x18>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3301      	adds	r3, #1
 800cffe:	4a03      	ldr	r2, [pc, #12]	; (800d00c <vTaskSuspendAll+0x18>)
 800d000:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d002:	bf00      	nop
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	24005098 	.word	0x24005098

0800d010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d016:	2300      	movs	r3, #0
 800d018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d01a:	2300      	movs	r3, #0
 800d01c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d01e:	4b42      	ldr	r3, [pc, #264]	; (800d128 <xTaskResumeAll+0x118>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10a      	bne.n	800d03c <xTaskResumeAll+0x2c>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	603b      	str	r3, [r7, #0]
}
 800d038:	bf00      	nop
 800d03a:	e7fe      	b.n	800d03a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d03c:	f7fe fca2 	bl	800b984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d040:	4b39      	ldr	r3, [pc, #228]	; (800d128 <xTaskResumeAll+0x118>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	3b01      	subs	r3, #1
 800d046:	4a38      	ldr	r2, [pc, #224]	; (800d128 <xTaskResumeAll+0x118>)
 800d048:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d04a:	4b37      	ldr	r3, [pc, #220]	; (800d128 <xTaskResumeAll+0x118>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d162      	bne.n	800d118 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d052:	4b36      	ldr	r3, [pc, #216]	; (800d12c <xTaskResumeAll+0x11c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d05e      	beq.n	800d118 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d05a:	e02f      	b.n	800d0bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d05c:	4b34      	ldr	r3, [pc, #208]	; (800d130 <xTaskResumeAll+0x120>)
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	3318      	adds	r3, #24
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe fb37 	bl	800b6dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3304      	adds	r3, #4
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe fb32 	bl	800b6dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d07c:	4b2d      	ldr	r3, [pc, #180]	; (800d134 <xTaskResumeAll+0x124>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	429a      	cmp	r2, r3
 800d082:	d903      	bls.n	800d08c <xTaskResumeAll+0x7c>
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d088:	4a2a      	ldr	r2, [pc, #168]	; (800d134 <xTaskResumeAll+0x124>)
 800d08a:	6013      	str	r3, [r2, #0]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d090:	4613      	mov	r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	4413      	add	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	4a27      	ldr	r2, [pc, #156]	; (800d138 <xTaskResumeAll+0x128>)
 800d09a:	441a      	add	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	3304      	adds	r3, #4
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	f7fe fabd 	bl	800b622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ac:	4b23      	ldr	r3, [pc, #140]	; (800d13c <xTaskResumeAll+0x12c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d302      	bcc.n	800d0bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d0b6:	4b22      	ldr	r3, [pc, #136]	; (800d140 <xTaskResumeAll+0x130>)
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0bc:	4b1c      	ldr	r3, [pc, #112]	; (800d130 <xTaskResumeAll+0x120>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1cb      	bne.n	800d05c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0ca:	f000 fb55 	bl	800d778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d0ce:	4b1d      	ldr	r3, [pc, #116]	; (800d144 <xTaskResumeAll+0x134>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d010      	beq.n	800d0fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0da:	f000 f847 	bl	800d16c <xTaskIncrementTick>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d0e4:	4b16      	ldr	r3, [pc, #88]	; (800d140 <xTaskResumeAll+0x130>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1f1      	bne.n	800d0da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d0f6:	4b13      	ldr	r3, [pc, #76]	; (800d144 <xTaskResumeAll+0x134>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0fc:	4b10      	ldr	r3, [pc, #64]	; (800d140 <xTaskResumeAll+0x130>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d009      	beq.n	800d118 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d104:	2301      	movs	r3, #1
 800d106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d108:	4b0f      	ldr	r3, [pc, #60]	; (800d148 <xTaskResumeAll+0x138>)
 800d10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d118:	f7fe fc64 	bl	800b9e4 <vPortExitCritical>

	return xAlreadyYielded;
 800d11c:	68bb      	ldr	r3, [r7, #8]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	24005098 	.word	0x24005098
 800d12c:	24005070 	.word	0x24005070
 800d130:	24005030 	.word	0x24005030
 800d134:	24005078 	.word	0x24005078
 800d138:	24004ba0 	.word	0x24004ba0
 800d13c:	24004b9c 	.word	0x24004b9c
 800d140:	24005084 	.word	0x24005084
 800d144:	24005080 	.word	0x24005080
 800d148:	e000ed04 	.word	0xe000ed04

0800d14c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d152:	4b05      	ldr	r3, [pc, #20]	; (800d168 <xTaskGetTickCount+0x1c>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d158:	687b      	ldr	r3, [r7, #4]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
 800d166:	bf00      	nop
 800d168:	24005074 	.word	0x24005074

0800d16c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d172:	2300      	movs	r3, #0
 800d174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d176:	4b4f      	ldr	r3, [pc, #316]	; (800d2b4 <xTaskIncrementTick+0x148>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f040 808f 	bne.w	800d29e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d180:	4b4d      	ldr	r3, [pc, #308]	; (800d2b8 <xTaskIncrementTick+0x14c>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	3301      	adds	r3, #1
 800d186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d188:	4a4b      	ldr	r2, [pc, #300]	; (800d2b8 <xTaskIncrementTick+0x14c>)
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d120      	bne.n	800d1d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d194:	4b49      	ldr	r3, [pc, #292]	; (800d2bc <xTaskIncrementTick+0x150>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00a      	beq.n	800d1b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	603b      	str	r3, [r7, #0]
}
 800d1b0:	bf00      	nop
 800d1b2:	e7fe      	b.n	800d1b2 <xTaskIncrementTick+0x46>
 800d1b4:	4b41      	ldr	r3, [pc, #260]	; (800d2bc <xTaskIncrementTick+0x150>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	60fb      	str	r3, [r7, #12]
 800d1ba:	4b41      	ldr	r3, [pc, #260]	; (800d2c0 <xTaskIncrementTick+0x154>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a3f      	ldr	r2, [pc, #252]	; (800d2bc <xTaskIncrementTick+0x150>)
 800d1c0:	6013      	str	r3, [r2, #0]
 800d1c2:	4a3f      	ldr	r2, [pc, #252]	; (800d2c0 <xTaskIncrementTick+0x154>)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6013      	str	r3, [r2, #0]
 800d1c8:	4b3e      	ldr	r3, [pc, #248]	; (800d2c4 <xTaskIncrementTick+0x158>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	4a3d      	ldr	r2, [pc, #244]	; (800d2c4 <xTaskIncrementTick+0x158>)
 800d1d0:	6013      	str	r3, [r2, #0]
 800d1d2:	f000 fad1 	bl	800d778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1d6:	4b3c      	ldr	r3, [pc, #240]	; (800d2c8 <xTaskIncrementTick+0x15c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d349      	bcc.n	800d274 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1e0:	4b36      	ldr	r3, [pc, #216]	; (800d2bc <xTaskIncrementTick+0x150>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d104      	bne.n	800d1f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1ea:	4b37      	ldr	r3, [pc, #220]	; (800d2c8 <xTaskIncrementTick+0x15c>)
 800d1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f0:	601a      	str	r2, [r3, #0]
					break;
 800d1f2:	e03f      	b.n	800d274 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f4:	4b31      	ldr	r3, [pc, #196]	; (800d2bc <xTaskIncrementTick+0x150>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d204:	693a      	ldr	r2, [r7, #16]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d203      	bcs.n	800d214 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d20c:	4a2e      	ldr	r2, [pc, #184]	; (800d2c8 <xTaskIncrementTick+0x15c>)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d212:	e02f      	b.n	800d274 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	3304      	adds	r3, #4
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fe fa5f 	bl	800b6dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d222:	2b00      	cmp	r3, #0
 800d224:	d004      	beq.n	800d230 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	3318      	adds	r3, #24
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe fa56 	bl	800b6dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d234:	4b25      	ldr	r3, [pc, #148]	; (800d2cc <xTaskIncrementTick+0x160>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d903      	bls.n	800d244 <xTaskIncrementTick+0xd8>
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d240:	4a22      	ldr	r2, [pc, #136]	; (800d2cc <xTaskIncrementTick+0x160>)
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d248:	4613      	mov	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4413      	add	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4a1f      	ldr	r2, [pc, #124]	; (800d2d0 <xTaskIncrementTick+0x164>)
 800d252:	441a      	add	r2, r3
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	3304      	adds	r3, #4
 800d258:	4619      	mov	r1, r3
 800d25a:	4610      	mov	r0, r2
 800d25c:	f7fe f9e1 	bl	800b622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d264:	4b1b      	ldr	r3, [pc, #108]	; (800d2d4 <xTaskIncrementTick+0x168>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d3b8      	bcc.n	800d1e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d26e:	2301      	movs	r3, #1
 800d270:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d272:	e7b5      	b.n	800d1e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d274:	4b17      	ldr	r3, [pc, #92]	; (800d2d4 <xTaskIncrementTick+0x168>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27a:	4915      	ldr	r1, [pc, #84]	; (800d2d0 <xTaskIncrementTick+0x164>)
 800d27c:	4613      	mov	r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	4413      	add	r3, r2
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	440b      	add	r3, r1
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d901      	bls.n	800d290 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d28c:	2301      	movs	r3, #1
 800d28e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d290:	4b11      	ldr	r3, [pc, #68]	; (800d2d8 <xTaskIncrementTick+0x16c>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d007      	beq.n	800d2a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d298:	2301      	movs	r3, #1
 800d29a:	617b      	str	r3, [r7, #20]
 800d29c:	e004      	b.n	800d2a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d29e:	4b0f      	ldr	r3, [pc, #60]	; (800d2dc <xTaskIncrementTick+0x170>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	4a0d      	ldr	r2, [pc, #52]	; (800d2dc <xTaskIncrementTick+0x170>)
 800d2a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d2a8:	697b      	ldr	r3, [r7, #20]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	24005098 	.word	0x24005098
 800d2b8:	24005074 	.word	0x24005074
 800d2bc:	24005028 	.word	0x24005028
 800d2c0:	2400502c 	.word	0x2400502c
 800d2c4:	24005088 	.word	0x24005088
 800d2c8:	24005090 	.word	0x24005090
 800d2cc:	24005078 	.word	0x24005078
 800d2d0:	24004ba0 	.word	0x24004ba0
 800d2d4:	24004b9c 	.word	0x24004b9c
 800d2d8:	24005084 	.word	0x24005084
 800d2dc:	24005080 	.word	0x24005080

0800d2e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2e6:	4b28      	ldr	r3, [pc, #160]	; (800d388 <vTaskSwitchContext+0xa8>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d003      	beq.n	800d2f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2ee:	4b27      	ldr	r3, [pc, #156]	; (800d38c <vTaskSwitchContext+0xac>)
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2f4:	e041      	b.n	800d37a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d2f6:	4b25      	ldr	r3, [pc, #148]	; (800d38c <vTaskSwitchContext+0xac>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2fc:	4b24      	ldr	r3, [pc, #144]	; (800d390 <vTaskSwitchContext+0xb0>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	60fb      	str	r3, [r7, #12]
 800d302:	e010      	b.n	800d326 <vTaskSwitchContext+0x46>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10a      	bne.n	800d320 <vTaskSwitchContext+0x40>
	__asm volatile
 800d30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	607b      	str	r3, [r7, #4]
}
 800d31c:	bf00      	nop
 800d31e:	e7fe      	b.n	800d31e <vTaskSwitchContext+0x3e>
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	3b01      	subs	r3, #1
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	491b      	ldr	r1, [pc, #108]	; (800d394 <vTaskSwitchContext+0xb4>)
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	4613      	mov	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	440b      	add	r3, r1
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d0e4      	beq.n	800d304 <vTaskSwitchContext+0x24>
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	4613      	mov	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4a13      	ldr	r2, [pc, #76]	; (800d394 <vTaskSwitchContext+0xb4>)
 800d346:	4413      	add	r3, r2
 800d348:	60bb      	str	r3, [r7, #8]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	605a      	str	r2, [r3, #4]
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	685a      	ldr	r2, [r3, #4]
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	3308      	adds	r3, #8
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d104      	bne.n	800d36a <vTaskSwitchContext+0x8a>
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	685a      	ldr	r2, [r3, #4]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	605a      	str	r2, [r3, #4]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	4a09      	ldr	r2, [pc, #36]	; (800d398 <vTaskSwitchContext+0xb8>)
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	4a06      	ldr	r2, [pc, #24]	; (800d390 <vTaskSwitchContext+0xb0>)
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6013      	str	r3, [r2, #0]
}
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	24005098 	.word	0x24005098
 800d38c:	24005084 	.word	0x24005084
 800d390:	24005078 	.word	0x24005078
 800d394:	24004ba0 	.word	0x24004ba0
 800d398:	24004b9c 	.word	0x24004b9c

0800d39c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10a      	bne.n	800d3c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	60fb      	str	r3, [r7, #12]
}
 800d3be:	bf00      	nop
 800d3c0:	e7fe      	b.n	800d3c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3c2:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <vTaskPlaceOnEventList+0x44>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3318      	adds	r3, #24
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7fe f94d 	bl	800b66a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	6838      	ldr	r0, [r7, #0]
 800d3d4:	f000 fb7a 	bl	800dacc <prvAddCurrentTaskToDelayedList>
}
 800d3d8:	bf00      	nop
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	24004b9c 	.word	0x24004b9c

0800d3e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10a      	bne.n	800d40c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fa:	f383 8811 	msr	BASEPRI, r3
 800d3fe:	f3bf 8f6f 	isb	sy
 800d402:	f3bf 8f4f 	dsb	sy
 800d406:	617b      	str	r3, [r7, #20]
}
 800d408:	bf00      	nop
 800d40a:	e7fe      	b.n	800d40a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d40c:	4b0a      	ldr	r3, [pc, #40]	; (800d438 <vTaskPlaceOnEventListRestricted+0x54>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3318      	adds	r3, #24
 800d412:	4619      	mov	r1, r3
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7fe f904 	bl	800b622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d002      	beq.n	800d426 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d420:	f04f 33ff 	mov.w	r3, #4294967295
 800d424:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d426:	6879      	ldr	r1, [r7, #4]
 800d428:	68b8      	ldr	r0, [r7, #8]
 800d42a:	f000 fb4f 	bl	800dacc <prvAddCurrentTaskToDelayedList>
	}
 800d42e:	bf00      	nop
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	24004b9c 	.word	0x24004b9c

0800d43c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10a      	bne.n	800d468 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	60fb      	str	r3, [r7, #12]
}
 800d464:	bf00      	nop
 800d466:	e7fe      	b.n	800d466 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	3318      	adds	r3, #24
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fe f935 	bl	800b6dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d472:	4b1e      	ldr	r3, [pc, #120]	; (800d4ec <xTaskRemoveFromEventList+0xb0>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d11d      	bne.n	800d4b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	3304      	adds	r3, #4
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe f92c 	bl	800b6dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d488:	4b19      	ldr	r3, [pc, #100]	; (800d4f0 <xTaskRemoveFromEventList+0xb4>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d903      	bls.n	800d498 <xTaskRemoveFromEventList+0x5c>
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d494:	4a16      	ldr	r2, [pc, #88]	; (800d4f0 <xTaskRemoveFromEventList+0xb4>)
 800d496:	6013      	str	r3, [r2, #0]
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49c:	4613      	mov	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4413      	add	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	4a13      	ldr	r2, [pc, #76]	; (800d4f4 <xTaskRemoveFromEventList+0xb8>)
 800d4a6:	441a      	add	r2, r3
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	f7fe f8b7 	bl	800b622 <vListInsertEnd>
 800d4b4:	e005      	b.n	800d4c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	3318      	adds	r3, #24
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	480e      	ldr	r0, [pc, #56]	; (800d4f8 <xTaskRemoveFromEventList+0xbc>)
 800d4be:	f7fe f8b0 	bl	800b622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c6:	4b0d      	ldr	r3, [pc, #52]	; (800d4fc <xTaskRemoveFromEventList+0xc0>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d905      	bls.n	800d4dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4d4:	4b0a      	ldr	r3, [pc, #40]	; (800d500 <xTaskRemoveFromEventList+0xc4>)
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	e001      	b.n	800d4e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4e0:	697b      	ldr	r3, [r7, #20]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	24005098 	.word	0x24005098
 800d4f0:	24005078 	.word	0x24005078
 800d4f4:	24004ba0 	.word	0x24004ba0
 800d4f8:	24005030 	.word	0x24005030
 800d4fc:	24004b9c 	.word	0x24004b9c
 800d500:	24005084 	.word	0x24005084

0800d504 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d50c:	4b06      	ldr	r3, [pc, #24]	; (800d528 <vTaskInternalSetTimeOutState+0x24>)
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d514:	4b05      	ldr	r3, [pc, #20]	; (800d52c <vTaskInternalSetTimeOutState+0x28>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	605a      	str	r2, [r3, #4]
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr
 800d528:	24005088 	.word	0x24005088
 800d52c:	24005074 	.word	0x24005074

0800d530 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b088      	sub	sp, #32
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d10a      	bne.n	800d556 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d544:	f383 8811 	msr	BASEPRI, r3
 800d548:	f3bf 8f6f 	isb	sy
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	613b      	str	r3, [r7, #16]
}
 800d552:	bf00      	nop
 800d554:	e7fe      	b.n	800d554 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10a      	bne.n	800d572 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	60fb      	str	r3, [r7, #12]
}
 800d56e:	bf00      	nop
 800d570:	e7fe      	b.n	800d570 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d572:	f7fe fa07 	bl	800b984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d576:	4b1d      	ldr	r3, [pc, #116]	; (800d5ec <xTaskCheckForTimeOut+0xbc>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	69ba      	ldr	r2, [r7, #24]
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58e:	d102      	bne.n	800d596 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d590:	2300      	movs	r3, #0
 800d592:	61fb      	str	r3, [r7, #28]
 800d594:	e023      	b.n	800d5de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <xTaskCheckForTimeOut+0xc0>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d007      	beq.n	800d5b2 <xTaskCheckForTimeOut+0x82>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d302      	bcc.n	800d5b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	61fb      	str	r3, [r7, #28]
 800d5b0:	e015      	b.n	800d5de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d20b      	bcs.n	800d5d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	1ad2      	subs	r2, r2, r3
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff ff9b 	bl	800d504 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	61fb      	str	r3, [r7, #28]
 800d5d2:	e004      	b.n	800d5de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5de:	f7fe fa01 	bl	800b9e4 <vPortExitCritical>

	return xReturn;
 800d5e2:	69fb      	ldr	r3, [r7, #28]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3720      	adds	r7, #32
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	24005074 	.word	0x24005074
 800d5f0:	24005088 	.word	0x24005088

0800d5f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5f8:	4b03      	ldr	r3, [pc, #12]	; (800d608 <vTaskMissedYield+0x14>)
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	601a      	str	r2, [r3, #0]
}
 800d5fe:	bf00      	nop
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	24005084 	.word	0x24005084

0800d60c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d614:	f000 f852 	bl	800d6bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d618:	4b06      	ldr	r3, [pc, #24]	; (800d634 <prvIdleTask+0x28>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d9f9      	bls.n	800d614 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <prvIdleTask+0x2c>)
 800d622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d626:	601a      	str	r2, [r3, #0]
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d630:	e7f0      	b.n	800d614 <prvIdleTask+0x8>
 800d632:	bf00      	nop
 800d634:	24004ba0 	.word	0x24004ba0
 800d638:	e000ed04 	.word	0xe000ed04

0800d63c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d642:	2300      	movs	r3, #0
 800d644:	607b      	str	r3, [r7, #4]
 800d646:	e00c      	b.n	800d662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4a12      	ldr	r2, [pc, #72]	; (800d69c <prvInitialiseTaskLists+0x60>)
 800d654:	4413      	add	r3, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f7fd ffb6 	bl	800b5c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	3301      	adds	r3, #1
 800d660:	607b      	str	r3, [r7, #4]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b37      	cmp	r3, #55	; 0x37
 800d666:	d9ef      	bls.n	800d648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d668:	480d      	ldr	r0, [pc, #52]	; (800d6a0 <prvInitialiseTaskLists+0x64>)
 800d66a:	f7fd ffad 	bl	800b5c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d66e:	480d      	ldr	r0, [pc, #52]	; (800d6a4 <prvInitialiseTaskLists+0x68>)
 800d670:	f7fd ffaa 	bl	800b5c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d674:	480c      	ldr	r0, [pc, #48]	; (800d6a8 <prvInitialiseTaskLists+0x6c>)
 800d676:	f7fd ffa7 	bl	800b5c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d67a:	480c      	ldr	r0, [pc, #48]	; (800d6ac <prvInitialiseTaskLists+0x70>)
 800d67c:	f7fd ffa4 	bl	800b5c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d680:	480b      	ldr	r0, [pc, #44]	; (800d6b0 <prvInitialiseTaskLists+0x74>)
 800d682:	f7fd ffa1 	bl	800b5c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d686:	4b0b      	ldr	r3, [pc, #44]	; (800d6b4 <prvInitialiseTaskLists+0x78>)
 800d688:	4a05      	ldr	r2, [pc, #20]	; (800d6a0 <prvInitialiseTaskLists+0x64>)
 800d68a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d68c:	4b0a      	ldr	r3, [pc, #40]	; (800d6b8 <prvInitialiseTaskLists+0x7c>)
 800d68e:	4a05      	ldr	r2, [pc, #20]	; (800d6a4 <prvInitialiseTaskLists+0x68>)
 800d690:	601a      	str	r2, [r3, #0]
}
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	24004ba0 	.word	0x24004ba0
 800d6a0:	24005000 	.word	0x24005000
 800d6a4:	24005014 	.word	0x24005014
 800d6a8:	24005030 	.word	0x24005030
 800d6ac:	24005044 	.word	0x24005044
 800d6b0:	2400505c 	.word	0x2400505c
 800d6b4:	24005028 	.word	0x24005028
 800d6b8:	2400502c 	.word	0x2400502c

0800d6bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6c2:	e019      	b.n	800d6f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6c4:	f7fe f95e 	bl	800b984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6c8:	4b10      	ldr	r3, [pc, #64]	; (800d70c <prvCheckTasksWaitingTermination+0x50>)
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe f801 	bl	800b6dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6da:	4b0d      	ldr	r3, [pc, #52]	; (800d710 <prvCheckTasksWaitingTermination+0x54>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	4a0b      	ldr	r2, [pc, #44]	; (800d710 <prvCheckTasksWaitingTermination+0x54>)
 800d6e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6e4:	4b0b      	ldr	r3, [pc, #44]	; (800d714 <prvCheckTasksWaitingTermination+0x58>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	4a0a      	ldr	r2, [pc, #40]	; (800d714 <prvCheckTasksWaitingTermination+0x58>)
 800d6ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6ee:	f7fe f979 	bl	800b9e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f810 	bl	800d718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6f8:	4b06      	ldr	r3, [pc, #24]	; (800d714 <prvCheckTasksWaitingTermination+0x58>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e1      	bne.n	800d6c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d700:	bf00      	nop
 800d702:	bf00      	nop
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	24005044 	.word	0x24005044
 800d710:	24005070 	.word	0x24005070
 800d714:	24005058 	.word	0x24005058

0800d718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d726:	2b00      	cmp	r3, #0
 800d728:	d108      	bne.n	800d73c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fd fe2c 	bl	800b38c <vPortFree>
				vPortFree( pxTCB );
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7fd fe29 	bl	800b38c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d73a:	e018      	b.n	800d76e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d742:	2b01      	cmp	r3, #1
 800d744:	d103      	bne.n	800d74e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fd fe20 	bl	800b38c <vPortFree>
	}
 800d74c:	e00f      	b.n	800d76e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d754:	2b02      	cmp	r3, #2
 800d756:	d00a      	beq.n	800d76e <prvDeleteTCB+0x56>
	__asm volatile
 800d758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75c:	f383 8811 	msr	BASEPRI, r3
 800d760:	f3bf 8f6f 	isb	sy
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	60fb      	str	r3, [r7, #12]
}
 800d76a:	bf00      	nop
 800d76c:	e7fe      	b.n	800d76c <prvDeleteTCB+0x54>
	}
 800d76e:	bf00      	nop
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d77e:	4b0c      	ldr	r3, [pc, #48]	; (800d7b0 <prvResetNextTaskUnblockTime+0x38>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d104      	bne.n	800d792 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d788:	4b0a      	ldr	r3, [pc, #40]	; (800d7b4 <prvResetNextTaskUnblockTime+0x3c>)
 800d78a:	f04f 32ff 	mov.w	r2, #4294967295
 800d78e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d790:	e008      	b.n	800d7a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d792:	4b07      	ldr	r3, [pc, #28]	; (800d7b0 <prvResetNextTaskUnblockTime+0x38>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	4a04      	ldr	r2, [pc, #16]	; (800d7b4 <prvResetNextTaskUnblockTime+0x3c>)
 800d7a2:	6013      	str	r3, [r2, #0]
}
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr
 800d7b0:	24005028 	.word	0x24005028
 800d7b4:	24005090 	.word	0x24005090

0800d7b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7be:	4b0b      	ldr	r3, [pc, #44]	; (800d7ec <xTaskGetSchedulerState+0x34>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d102      	bne.n	800d7cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	607b      	str	r3, [r7, #4]
 800d7ca:	e008      	b.n	800d7de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7cc:	4b08      	ldr	r3, [pc, #32]	; (800d7f0 <xTaskGetSchedulerState+0x38>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d102      	bne.n	800d7da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	607b      	str	r3, [r7, #4]
 800d7d8:	e001      	b.n	800d7de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7de:	687b      	ldr	r3, [r7, #4]
	}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	2400507c 	.word	0x2400507c
 800d7f0:	24005098 	.word	0x24005098

0800d7f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d800:	2300      	movs	r3, #0
 800d802:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d051      	beq.n	800d8ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d80e:	4b2a      	ldr	r3, [pc, #168]	; (800d8b8 <xTaskPriorityInherit+0xc4>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d814:	429a      	cmp	r2, r3
 800d816:	d241      	bcs.n	800d89c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	699b      	ldr	r3, [r3, #24]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	db06      	blt.n	800d82e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d820:	4b25      	ldr	r3, [pc, #148]	; (800d8b8 <xTaskPriorityInherit+0xc4>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d826:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	6959      	ldr	r1, [r3, #20]
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d836:	4613      	mov	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4413      	add	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4a1f      	ldr	r2, [pc, #124]	; (800d8bc <xTaskPriorityInherit+0xc8>)
 800d840:	4413      	add	r3, r2
 800d842:	4299      	cmp	r1, r3
 800d844:	d122      	bne.n	800d88c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	3304      	adds	r3, #4
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fd ff46 	bl	800b6dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d850:	4b19      	ldr	r3, [pc, #100]	; (800d8b8 <xTaskPriorityInherit+0xc4>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85e:	4b18      	ldr	r3, [pc, #96]	; (800d8c0 <xTaskPriorityInherit+0xcc>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	429a      	cmp	r2, r3
 800d864:	d903      	bls.n	800d86e <xTaskPriorityInherit+0x7a>
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	4a15      	ldr	r2, [pc, #84]	; (800d8c0 <xTaskPriorityInherit+0xcc>)
 800d86c:	6013      	str	r3, [r2, #0]
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d872:	4613      	mov	r3, r2
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	4413      	add	r3, r2
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	4a10      	ldr	r2, [pc, #64]	; (800d8bc <xTaskPriorityInherit+0xc8>)
 800d87c:	441a      	add	r2, r3
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	3304      	adds	r3, #4
 800d882:	4619      	mov	r1, r3
 800d884:	4610      	mov	r0, r2
 800d886:	f7fd fecc 	bl	800b622 <vListInsertEnd>
 800d88a:	e004      	b.n	800d896 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d88c:	4b0a      	ldr	r3, [pc, #40]	; (800d8b8 <xTaskPriorityInherit+0xc4>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d896:	2301      	movs	r3, #1
 800d898:	60fb      	str	r3, [r7, #12]
 800d89a:	e008      	b.n	800d8ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8a0:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <xTaskPriorityInherit+0xc4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d201      	bcs.n	800d8ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
	}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	24004b9c 	.word	0x24004b9c
 800d8bc:	24004ba0 	.word	0x24004ba0
 800d8c0:	24005078 	.word	0x24005078

0800d8c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d056      	beq.n	800d988 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8da:	4b2e      	ldr	r3, [pc, #184]	; (800d994 <xTaskPriorityDisinherit+0xd0>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	693a      	ldr	r2, [r7, #16]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d00a      	beq.n	800d8fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	60fb      	str	r3, [r7, #12]
}
 800d8f6:	bf00      	nop
 800d8f8:	e7fe      	b.n	800d8f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10a      	bne.n	800d918 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	60bb      	str	r3, [r7, #8]
}
 800d914:	bf00      	nop
 800d916:	e7fe      	b.n	800d916 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d91c:	1e5a      	subs	r2, r3, #1
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d02c      	beq.n	800d988 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d932:	2b00      	cmp	r3, #0
 800d934:	d128      	bne.n	800d988 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	3304      	adds	r3, #4
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fd fece 	bl	800b6dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d958:	4b0f      	ldr	r3, [pc, #60]	; (800d998 <xTaskPriorityDisinherit+0xd4>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d903      	bls.n	800d968 <xTaskPriorityDisinherit+0xa4>
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d964:	4a0c      	ldr	r2, [pc, #48]	; (800d998 <xTaskPriorityDisinherit+0xd4>)
 800d966:	6013      	str	r3, [r2, #0]
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d96c:	4613      	mov	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	4413      	add	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4a09      	ldr	r2, [pc, #36]	; (800d99c <xTaskPriorityDisinherit+0xd8>)
 800d976:	441a      	add	r2, r3
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	3304      	adds	r3, #4
 800d97c:	4619      	mov	r1, r3
 800d97e:	4610      	mov	r0, r2
 800d980:	f7fd fe4f 	bl	800b622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d984:	2301      	movs	r3, #1
 800d986:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d988:	697b      	ldr	r3, [r7, #20]
	}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3718      	adds	r7, #24
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	24004b9c 	.word	0x24004b9c
 800d998:	24005078 	.word	0x24005078
 800d99c:	24004ba0 	.word	0x24004ba0

0800d9a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b088      	sub	sp, #32
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d06a      	beq.n	800da8e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10a      	bne.n	800d9d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	60fb      	str	r3, [r7, #12]
}
 800d9d2:	bf00      	nop
 800d9d4:	e7fe      	b.n	800d9d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9da:	683a      	ldr	r2, [r7, #0]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d902      	bls.n	800d9e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	61fb      	str	r3, [r7, #28]
 800d9e4:	e002      	b.n	800d9ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f0:	69fa      	ldr	r2, [r7, #28]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d04b      	beq.n	800da8e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9fa:	697a      	ldr	r2, [r7, #20]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d146      	bne.n	800da8e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da00:	4b25      	ldr	r3, [pc, #148]	; (800da98 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	69ba      	ldr	r2, [r7, #24]
 800da06:	429a      	cmp	r2, r3
 800da08:	d10a      	bne.n	800da20 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	60bb      	str	r3, [r7, #8]
}
 800da1c:	bf00      	nop
 800da1e:	e7fe      	b.n	800da1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	69fa      	ldr	r2, [r7, #28]
 800da2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	2b00      	cmp	r3, #0
 800da32:	db04      	blt.n	800da3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	6959      	ldr	r1, [r3, #20]
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	4613      	mov	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4413      	add	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4a13      	ldr	r2, [pc, #76]	; (800da9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800da4e:	4413      	add	r3, r2
 800da50:	4299      	cmp	r1, r3
 800da52:	d11c      	bne.n	800da8e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	3304      	adds	r3, #4
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fd fe3f 	bl	800b6dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da5e:	69bb      	ldr	r3, [r7, #24]
 800da60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da62:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	429a      	cmp	r2, r3
 800da68:	d903      	bls.n	800da72 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6e:	4a0c      	ldr	r2, [pc, #48]	; (800daa0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da76:	4613      	mov	r3, r2
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	4413      	add	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4a07      	ldr	r2, [pc, #28]	; (800da9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800da80:	441a      	add	r2, r3
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	3304      	adds	r3, #4
 800da86:	4619      	mov	r1, r3
 800da88:	4610      	mov	r0, r2
 800da8a:	f7fd fdca 	bl	800b622 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da8e:	bf00      	nop
 800da90:	3720      	adds	r7, #32
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	24004b9c 	.word	0x24004b9c
 800da9c:	24004ba0 	.word	0x24004ba0
 800daa0:	24005078 	.word	0x24005078

0800daa4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800daa4:	b480      	push	{r7}
 800daa6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800daa8:	4b07      	ldr	r3, [pc, #28]	; (800dac8 <pvTaskIncrementMutexHeldCount+0x24>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d004      	beq.n	800daba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dab0:	4b05      	ldr	r3, [pc, #20]	; (800dac8 <pvTaskIncrementMutexHeldCount+0x24>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dab6:	3201      	adds	r2, #1
 800dab8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800daba:	4b03      	ldr	r3, [pc, #12]	; (800dac8 <pvTaskIncrementMutexHeldCount+0x24>)
 800dabc:	681b      	ldr	r3, [r3, #0]
	}
 800dabe:	4618      	mov	r0, r3
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr
 800dac8:	24004b9c 	.word	0x24004b9c

0800dacc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dad6:	4b21      	ldr	r3, [pc, #132]	; (800db5c <prvAddCurrentTaskToDelayedList+0x90>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dadc:	4b20      	ldr	r3, [pc, #128]	; (800db60 <prvAddCurrentTaskToDelayedList+0x94>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	3304      	adds	r3, #4
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fd fdfa 	bl	800b6dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daee:	d10a      	bne.n	800db06 <prvAddCurrentTaskToDelayedList+0x3a>
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d007      	beq.n	800db06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daf6:	4b1a      	ldr	r3, [pc, #104]	; (800db60 <prvAddCurrentTaskToDelayedList+0x94>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	3304      	adds	r3, #4
 800dafc:	4619      	mov	r1, r3
 800dafe:	4819      	ldr	r0, [pc, #100]	; (800db64 <prvAddCurrentTaskToDelayedList+0x98>)
 800db00:	f7fd fd8f 	bl	800b622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db04:	e026      	b.n	800db54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4413      	add	r3, r2
 800db0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db0e:	4b14      	ldr	r3, [pc, #80]	; (800db60 <prvAddCurrentTaskToDelayedList+0x94>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d209      	bcs.n	800db32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db1e:	4b12      	ldr	r3, [pc, #72]	; (800db68 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	4b0f      	ldr	r3, [pc, #60]	; (800db60 <prvAddCurrentTaskToDelayedList+0x94>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	3304      	adds	r3, #4
 800db28:	4619      	mov	r1, r3
 800db2a:	4610      	mov	r0, r2
 800db2c:	f7fd fd9d 	bl	800b66a <vListInsert>
}
 800db30:	e010      	b.n	800db54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db32:	4b0e      	ldr	r3, [pc, #56]	; (800db6c <prvAddCurrentTaskToDelayedList+0xa0>)
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <prvAddCurrentTaskToDelayedList+0x94>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	3304      	adds	r3, #4
 800db3c:	4619      	mov	r1, r3
 800db3e:	4610      	mov	r0, r2
 800db40:	f7fd fd93 	bl	800b66a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db44:	4b0a      	ldr	r3, [pc, #40]	; (800db70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d202      	bcs.n	800db54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db4e:	4a08      	ldr	r2, [pc, #32]	; (800db70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	6013      	str	r3, [r2, #0]
}
 800db54:	bf00      	nop
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	24005074 	.word	0x24005074
 800db60:	24004b9c 	.word	0x24004b9c
 800db64:	2400505c 	.word	0x2400505c
 800db68:	2400502c 	.word	0x2400502c
 800db6c:	24005028 	.word	0x24005028
 800db70:	24005090 	.word	0x24005090

0800db74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b08a      	sub	sp, #40	; 0x28
 800db78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db7e:	f000 fb07 	bl	800e190 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db82:	4b1c      	ldr	r3, [pc, #112]	; (800dbf4 <xTimerCreateTimerTask+0x80>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d021      	beq.n	800dbce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db92:	1d3a      	adds	r2, r7, #4
 800db94:	f107 0108 	add.w	r1, r7, #8
 800db98:	f107 030c 	add.w	r3, r7, #12
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fd fb0f 	bl	800b1c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dba2:	6879      	ldr	r1, [r7, #4]
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	9202      	str	r2, [sp, #8]
 800dbaa:	9301      	str	r3, [sp, #4]
 800dbac:	2302      	movs	r3, #2
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	460a      	mov	r2, r1
 800dbb4:	4910      	ldr	r1, [pc, #64]	; (800dbf8 <xTimerCreateTimerTask+0x84>)
 800dbb6:	4811      	ldr	r0, [pc, #68]	; (800dbfc <xTimerCreateTimerTask+0x88>)
 800dbb8:	f7ff f814 	bl	800cbe4 <xTaskCreateStatic>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	4a10      	ldr	r2, [pc, #64]	; (800dc00 <xTimerCreateTimerTask+0x8c>)
 800dbc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbc2:	4b0f      	ldr	r3, [pc, #60]	; (800dc00 <xTimerCreateTimerTask+0x8c>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10a      	bne.n	800dbea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	613b      	str	r3, [r7, #16]
}
 800dbe6:	bf00      	nop
 800dbe8:	e7fe      	b.n	800dbe8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbea:	697b      	ldr	r3, [r7, #20]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	240050cc 	.word	0x240050cc
 800dbf8:	08014238 	.word	0x08014238
 800dbfc:	0800dd39 	.word	0x0800dd39
 800dc00:	240050d0 	.word	0x240050d0

0800dc04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08a      	sub	sp, #40	; 0x28
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc12:	2300      	movs	r3, #0
 800dc14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10a      	bne.n	800dc32 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc20:	f383 8811 	msr	BASEPRI, r3
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	f3bf 8f4f 	dsb	sy
 800dc2c:	623b      	str	r3, [r7, #32]
}
 800dc2e:	bf00      	nop
 800dc30:	e7fe      	b.n	800dc30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc32:	4b1a      	ldr	r3, [pc, #104]	; (800dc9c <xTimerGenericCommand+0x98>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d02a      	beq.n	800dc90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	2b05      	cmp	r3, #5
 800dc4a:	dc18      	bgt.n	800dc7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc4c:	f7ff fdb4 	bl	800d7b8 <xTaskGetSchedulerState>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d109      	bne.n	800dc6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc56:	4b11      	ldr	r3, [pc, #68]	; (800dc9c <xTimerGenericCommand+0x98>)
 800dc58:	6818      	ldr	r0, [r3, #0]
 800dc5a:	f107 0110 	add.w	r1, r7, #16
 800dc5e:	2300      	movs	r3, #0
 800dc60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc62:	f7fe f959 	bl	800bf18 <xQueueGenericSend>
 800dc66:	6278      	str	r0, [r7, #36]	; 0x24
 800dc68:	e012      	b.n	800dc90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc6a:	4b0c      	ldr	r3, [pc, #48]	; (800dc9c <xTimerGenericCommand+0x98>)
 800dc6c:	6818      	ldr	r0, [r3, #0]
 800dc6e:	f107 0110 	add.w	r1, r7, #16
 800dc72:	2300      	movs	r3, #0
 800dc74:	2200      	movs	r2, #0
 800dc76:	f7fe f94f 	bl	800bf18 <xQueueGenericSend>
 800dc7a:	6278      	str	r0, [r7, #36]	; 0x24
 800dc7c:	e008      	b.n	800dc90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc7e:	4b07      	ldr	r3, [pc, #28]	; (800dc9c <xTimerGenericCommand+0x98>)
 800dc80:	6818      	ldr	r0, [r3, #0]
 800dc82:	f107 0110 	add.w	r1, r7, #16
 800dc86:	2300      	movs	r3, #0
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	f7fe fa43 	bl	800c114 <xQueueGenericSendFromISR>
 800dc8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3728      	adds	r7, #40	; 0x28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	240050cc 	.word	0x240050cc

0800dca0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b088      	sub	sp, #32
 800dca4:	af02      	add	r7, sp, #8
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcaa:	4b22      	ldr	r3, [pc, #136]	; (800dd34 <prvProcessExpiredTimer+0x94>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fd fd0f 	bl	800b6dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcc4:	f003 0304 	and.w	r3, r3, #4
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d022      	beq.n	800dd12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	699a      	ldr	r2, [r3, #24]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	18d1      	adds	r1, r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	683a      	ldr	r2, [r7, #0]
 800dcd8:	6978      	ldr	r0, [r7, #20]
 800dcda:	f000 f8d1 	bl	800de80 <prvInsertTimerInActiveList>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d01f      	beq.n	800dd24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dce4:	2300      	movs	r3, #0
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	2300      	movs	r3, #0
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	2100      	movs	r1, #0
 800dcee:	6978      	ldr	r0, [r7, #20]
 800dcf0:	f7ff ff88 	bl	800dc04 <xTimerGenericCommand>
 800dcf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d113      	bne.n	800dd24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	60fb      	str	r3, [r7, #12]
}
 800dd0e:	bf00      	nop
 800dd10:	e7fe      	b.n	800dd10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd18:	f023 0301 	bic.w	r3, r3, #1
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	6a1b      	ldr	r3, [r3, #32]
 800dd28:	6978      	ldr	r0, [r7, #20]
 800dd2a:	4798      	blx	r3
}
 800dd2c:	bf00      	nop
 800dd2e:	3718      	adds	r7, #24
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	240050c4 	.word	0x240050c4

0800dd38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd40:	f107 0308 	add.w	r3, r7, #8
 800dd44:	4618      	mov	r0, r3
 800dd46:	f000 f857 	bl	800ddf8 <prvGetNextExpireTime>
 800dd4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f000 f803 	bl	800dd5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd56:	f000 f8d5 	bl	800df04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd5a:	e7f1      	b.n	800dd40 <prvTimerTask+0x8>

0800dd5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd66:	f7ff f945 	bl	800cff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd6a:	f107 0308 	add.w	r3, r7, #8
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f000 f866 	bl	800de40 <prvSampleTimeNow>
 800dd74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d130      	bne.n	800ddde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10a      	bne.n	800dd98 <prvProcessTimerOrBlockTask+0x3c>
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d806      	bhi.n	800dd98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd8a:	f7ff f941 	bl	800d010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd8e:	68f9      	ldr	r1, [r7, #12]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff ff85 	bl	800dca0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd96:	e024      	b.n	800dde2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d008      	beq.n	800ddb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd9e:	4b13      	ldr	r3, [pc, #76]	; (800ddec <prvProcessTimerOrBlockTask+0x90>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <prvProcessTimerOrBlockTask+0x50>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e000      	b.n	800ddae <prvProcessTimerOrBlockTask+0x52>
 800ddac:	2300      	movs	r3, #0
 800ddae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ddb0:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <prvProcessTimerOrBlockTask+0x94>)
 800ddb2:	6818      	ldr	r0, [r3, #0]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	f7fe fedd 	bl	800cb7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddc2:	f7ff f925 	bl	800d010 <xTaskResumeAll>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10a      	bne.n	800dde2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ddcc:	4b09      	ldr	r3, [pc, #36]	; (800ddf4 <prvProcessTimerOrBlockTask+0x98>)
 800ddce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	f3bf 8f4f 	dsb	sy
 800ddd8:	f3bf 8f6f 	isb	sy
}
 800dddc:	e001      	b.n	800dde2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddde:	f7ff f917 	bl	800d010 <xTaskResumeAll>
}
 800dde2:	bf00      	nop
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	240050c8 	.word	0x240050c8
 800ddf0:	240050cc 	.word	0x240050cc
 800ddf4:	e000ed04 	.word	0xe000ed04

0800ddf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de00:	4b0e      	ldr	r3, [pc, #56]	; (800de3c <prvGetNextExpireTime+0x44>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d101      	bne.n	800de0e <prvGetNextExpireTime+0x16>
 800de0a:	2201      	movs	r2, #1
 800de0c:	e000      	b.n	800de10 <prvGetNextExpireTime+0x18>
 800de0e:	2200      	movs	r2, #0
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d105      	bne.n	800de28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de1c:	4b07      	ldr	r3, [pc, #28]	; (800de3c <prvGetNextExpireTime+0x44>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	60fb      	str	r3, [r7, #12]
 800de26:	e001      	b.n	800de2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de2c:	68fb      	ldr	r3, [r7, #12]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	240050c4 	.word	0x240050c4

0800de40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de48:	f7ff f980 	bl	800d14c <xTaskGetTickCount>
 800de4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de4e:	4b0b      	ldr	r3, [pc, #44]	; (800de7c <prvSampleTimeNow+0x3c>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	429a      	cmp	r2, r3
 800de56:	d205      	bcs.n	800de64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de58:	f000 f936 	bl	800e0c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	e002      	b.n	800de6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de6a:	4a04      	ldr	r2, [pc, #16]	; (800de7c <prvSampleTimeNow+0x3c>)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de70:	68fb      	ldr	r3, [r7, #12]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	240050d4 	.word	0x240050d4

0800de80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de8e:	2300      	movs	r3, #0
 800de90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d812      	bhi.n	800decc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	1ad2      	subs	r2, r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d302      	bcc.n	800deba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800deb4:	2301      	movs	r3, #1
 800deb6:	617b      	str	r3, [r7, #20]
 800deb8:	e01b      	b.n	800def2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800deba:	4b10      	ldr	r3, [pc, #64]	; (800defc <prvInsertTimerInActiveList+0x7c>)
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	3304      	adds	r3, #4
 800dec2:	4619      	mov	r1, r3
 800dec4:	4610      	mov	r0, r2
 800dec6:	f7fd fbd0 	bl	800b66a <vListInsert>
 800deca:	e012      	b.n	800def2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d206      	bcs.n	800dee2 <prvInsertTimerInActiveList+0x62>
 800ded4:	68ba      	ldr	r2, [r7, #8]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d302      	bcc.n	800dee2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dedc:	2301      	movs	r3, #1
 800dede:	617b      	str	r3, [r7, #20]
 800dee0:	e007      	b.n	800def2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dee2:	4b07      	ldr	r3, [pc, #28]	; (800df00 <prvInsertTimerInActiveList+0x80>)
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	3304      	adds	r3, #4
 800deea:	4619      	mov	r1, r3
 800deec:	4610      	mov	r0, r2
 800deee:	f7fd fbbc 	bl	800b66a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800def2:	697b      	ldr	r3, [r7, #20]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3718      	adds	r7, #24
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	240050c8 	.word	0x240050c8
 800df00:	240050c4 	.word	0x240050c4

0800df04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08e      	sub	sp, #56	; 0x38
 800df08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df0a:	e0ca      	b.n	800e0a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	da18      	bge.n	800df44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df12:	1d3b      	adds	r3, r7, #4
 800df14:	3304      	adds	r3, #4
 800df16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10a      	bne.n	800df34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	61fb      	str	r3, [r7, #28]
}
 800df30:	bf00      	nop
 800df32:	e7fe      	b.n	800df32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df3a:	6850      	ldr	r0, [r2, #4]
 800df3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df3e:	6892      	ldr	r2, [r2, #8]
 800df40:	4611      	mov	r1, r2
 800df42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	f2c0 80aa 	blt.w	800e0a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	695b      	ldr	r3, [r3, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d004      	beq.n	800df62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	3304      	adds	r3, #4
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7fd fbbd 	bl	800b6dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df62:	463b      	mov	r3, r7
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff ff6b 	bl	800de40 <prvSampleTimeNow>
 800df6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2b09      	cmp	r3, #9
 800df70:	f200 8097 	bhi.w	800e0a2 <prvProcessReceivedCommands+0x19e>
 800df74:	a201      	add	r2, pc, #4	; (adr r2, 800df7c <prvProcessReceivedCommands+0x78>)
 800df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7a:	bf00      	nop
 800df7c:	0800dfa5 	.word	0x0800dfa5
 800df80:	0800dfa5 	.word	0x0800dfa5
 800df84:	0800dfa5 	.word	0x0800dfa5
 800df88:	0800e019 	.word	0x0800e019
 800df8c:	0800e02d 	.word	0x0800e02d
 800df90:	0800e077 	.word	0x0800e077
 800df94:	0800dfa5 	.word	0x0800dfa5
 800df98:	0800dfa5 	.word	0x0800dfa5
 800df9c:	0800e019 	.word	0x0800e019
 800dfa0:	0800e02d 	.word	0x0800e02d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfaa:	f043 0301 	orr.w	r3, r3, #1
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	18d1      	adds	r1, r2, r3
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfc4:	f7ff ff5c 	bl	800de80 <prvInsertTimerInActiveList>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d069      	beq.n	800e0a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfdc:	f003 0304 	and.w	r3, r3, #4
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d05e      	beq.n	800e0a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe8:	699b      	ldr	r3, [r3, #24]
 800dfea:	441a      	add	r2, r3
 800dfec:	2300      	movs	r3, #0
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	2300      	movs	r3, #0
 800dff2:	2100      	movs	r1, #0
 800dff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dff6:	f7ff fe05 	bl	800dc04 <xTimerGenericCommand>
 800dffa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dffc:	6a3b      	ldr	r3, [r7, #32]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d14f      	bne.n	800e0a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	61bb      	str	r3, [r7, #24]
}
 800e014:	bf00      	nop
 800e016:	e7fe      	b.n	800e016 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e01e:	f023 0301 	bic.w	r3, r3, #1
 800e022:	b2da      	uxtb	r2, r3
 800e024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e02a:	e03a      	b.n	800e0a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e032:	f043 0301 	orr.w	r3, r3, #1
 800e036:	b2da      	uxtb	r2, r3
 800e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d10a      	bne.n	800e062 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	617b      	str	r3, [r7, #20]
}
 800e05e:	bf00      	nop
 800e060:	e7fe      	b.n	800e060 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e064:	699a      	ldr	r2, [r3, #24]
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e068:	18d1      	adds	r1, r2, r3
 800e06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e06e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e070:	f7ff ff06 	bl	800de80 <prvInsertTimerInActiveList>
					break;
 800e074:	e015      	b.n	800e0a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e07c:	f003 0302 	and.w	r3, r3, #2
 800e080:	2b00      	cmp	r3, #0
 800e082:	d103      	bne.n	800e08c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e086:	f7fd f981 	bl	800b38c <vPortFree>
 800e08a:	e00a      	b.n	800e0a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e092:	f023 0301 	bic.w	r3, r3, #1
 800e096:	b2da      	uxtb	r2, r3
 800e098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e09e:	e000      	b.n	800e0a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e0a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0a2:	4b08      	ldr	r3, [pc, #32]	; (800e0c4 <prvProcessReceivedCommands+0x1c0>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	1d39      	adds	r1, r7, #4
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7fe f95a 	bl	800c364 <xQueueReceive>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f47f af2a 	bne.w	800df0c <prvProcessReceivedCommands+0x8>
	}
}
 800e0b8:	bf00      	nop
 800e0ba:	bf00      	nop
 800e0bc:	3730      	adds	r7, #48	; 0x30
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	240050cc 	.word	0x240050cc

0800e0c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0ce:	e048      	b.n	800e162 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0d0:	4b2d      	ldr	r3, [pc, #180]	; (800e188 <prvSwitchTimerLists+0xc0>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0da:	4b2b      	ldr	r3, [pc, #172]	; (800e188 <prvSwitchTimerLists+0xc0>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fd faf7 	bl	800b6dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6a1b      	ldr	r3, [r3, #32]
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0fc:	f003 0304 	and.w	r3, r3, #4
 800e100:	2b00      	cmp	r3, #0
 800e102:	d02e      	beq.n	800e162 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	4413      	add	r3, r2
 800e10c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e10e:	68ba      	ldr	r2, [r7, #8]
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	429a      	cmp	r2, r3
 800e114:	d90e      	bls.n	800e134 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e122:	4b19      	ldr	r3, [pc, #100]	; (800e188 <prvSwitchTimerLists+0xc0>)
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3304      	adds	r3, #4
 800e12a:	4619      	mov	r1, r3
 800e12c:	4610      	mov	r0, r2
 800e12e:	f7fd fa9c 	bl	800b66a <vListInsert>
 800e132:	e016      	b.n	800e162 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e134:	2300      	movs	r3, #0
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	2300      	movs	r3, #0
 800e13a:	693a      	ldr	r2, [r7, #16]
 800e13c:	2100      	movs	r1, #0
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f7ff fd60 	bl	800dc04 <xTimerGenericCommand>
 800e144:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10a      	bne.n	800e162 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	603b      	str	r3, [r7, #0]
}
 800e15e:	bf00      	nop
 800e160:	e7fe      	b.n	800e160 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e162:	4b09      	ldr	r3, [pc, #36]	; (800e188 <prvSwitchTimerLists+0xc0>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d1b1      	bne.n	800e0d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e16c:	4b06      	ldr	r3, [pc, #24]	; (800e188 <prvSwitchTimerLists+0xc0>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e172:	4b06      	ldr	r3, [pc, #24]	; (800e18c <prvSwitchTimerLists+0xc4>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a04      	ldr	r2, [pc, #16]	; (800e188 <prvSwitchTimerLists+0xc0>)
 800e178:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e17a:	4a04      	ldr	r2, [pc, #16]	; (800e18c <prvSwitchTimerLists+0xc4>)
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	6013      	str	r3, [r2, #0]
}
 800e180:	bf00      	nop
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	240050c4 	.word	0x240050c4
 800e18c:	240050c8 	.word	0x240050c8

0800e190 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e196:	f7fd fbf5 	bl	800b984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e19a:	4b15      	ldr	r3, [pc, #84]	; (800e1f0 <prvCheckForValidListAndQueue+0x60>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d120      	bne.n	800e1e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e1a2:	4814      	ldr	r0, [pc, #80]	; (800e1f4 <prvCheckForValidListAndQueue+0x64>)
 800e1a4:	f7fd fa10 	bl	800b5c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e1a8:	4813      	ldr	r0, [pc, #76]	; (800e1f8 <prvCheckForValidListAndQueue+0x68>)
 800e1aa:	f7fd fa0d 	bl	800b5c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1ae:	4b13      	ldr	r3, [pc, #76]	; (800e1fc <prvCheckForValidListAndQueue+0x6c>)
 800e1b0:	4a10      	ldr	r2, [pc, #64]	; (800e1f4 <prvCheckForValidListAndQueue+0x64>)
 800e1b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1b4:	4b12      	ldr	r3, [pc, #72]	; (800e200 <prvCheckForValidListAndQueue+0x70>)
 800e1b6:	4a10      	ldr	r2, [pc, #64]	; (800e1f8 <prvCheckForValidListAndQueue+0x68>)
 800e1b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	4b11      	ldr	r3, [pc, #68]	; (800e204 <prvCheckForValidListAndQueue+0x74>)
 800e1c0:	4a11      	ldr	r2, [pc, #68]	; (800e208 <prvCheckForValidListAndQueue+0x78>)
 800e1c2:	2110      	movs	r1, #16
 800e1c4:	200a      	movs	r0, #10
 800e1c6:	f7fd fd67 	bl	800bc98 <xQueueGenericCreateStatic>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	4a08      	ldr	r2, [pc, #32]	; (800e1f0 <prvCheckForValidListAndQueue+0x60>)
 800e1ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1d0:	4b07      	ldr	r3, [pc, #28]	; (800e1f0 <prvCheckForValidListAndQueue+0x60>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d005      	beq.n	800e1e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1d8:	4b05      	ldr	r3, [pc, #20]	; (800e1f0 <prvCheckForValidListAndQueue+0x60>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	490b      	ldr	r1, [pc, #44]	; (800e20c <prvCheckForValidListAndQueue+0x7c>)
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fc78 	bl	800cad4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1e4:	f7fd fbfe 	bl	800b9e4 <vPortExitCritical>
}
 800e1e8:	bf00      	nop
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	240050cc 	.word	0x240050cc
 800e1f4:	2400509c 	.word	0x2400509c
 800e1f8:	240050b0 	.word	0x240050b0
 800e1fc:	240050c4 	.word	0x240050c4
 800e200:	240050c8 	.word	0x240050c8
 800e204:	24005178 	.word	0x24005178
 800e208:	240050d8 	.word	0x240050d8
 800e20c:	08014240 	.word	0x08014240

0800e210 <__errno>:
 800e210:	4b01      	ldr	r3, [pc, #4]	; (800e218 <__errno+0x8>)
 800e212:	6818      	ldr	r0, [r3, #0]
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	24000024 	.word	0x24000024

0800e21c <__libc_init_array>:
 800e21c:	b570      	push	{r4, r5, r6, lr}
 800e21e:	4d0d      	ldr	r5, [pc, #52]	; (800e254 <__libc_init_array+0x38>)
 800e220:	4c0d      	ldr	r4, [pc, #52]	; (800e258 <__libc_init_array+0x3c>)
 800e222:	1b64      	subs	r4, r4, r5
 800e224:	10a4      	asrs	r4, r4, #2
 800e226:	2600      	movs	r6, #0
 800e228:	42a6      	cmp	r6, r4
 800e22a:	d109      	bne.n	800e240 <__libc_init_array+0x24>
 800e22c:	4d0b      	ldr	r5, [pc, #44]	; (800e25c <__libc_init_array+0x40>)
 800e22e:	4c0c      	ldr	r4, [pc, #48]	; (800e260 <__libc_init_array+0x44>)
 800e230:	f005 ff64 	bl	80140fc <_init>
 800e234:	1b64      	subs	r4, r4, r5
 800e236:	10a4      	asrs	r4, r4, #2
 800e238:	2600      	movs	r6, #0
 800e23a:	42a6      	cmp	r6, r4
 800e23c:	d105      	bne.n	800e24a <__libc_init_array+0x2e>
 800e23e:	bd70      	pop	{r4, r5, r6, pc}
 800e240:	f855 3b04 	ldr.w	r3, [r5], #4
 800e244:	4798      	blx	r3
 800e246:	3601      	adds	r6, #1
 800e248:	e7ee      	b.n	800e228 <__libc_init_array+0xc>
 800e24a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e24e:	4798      	blx	r3
 800e250:	3601      	adds	r6, #1
 800e252:	e7f2      	b.n	800e23a <__libc_init_array+0x1e>
 800e254:	08014e28 	.word	0x08014e28
 800e258:	08014e28 	.word	0x08014e28
 800e25c:	08014e28 	.word	0x08014e28
 800e260:	08014e2c 	.word	0x08014e2c

0800e264 <memcpy>:
 800e264:	440a      	add	r2, r1
 800e266:	4291      	cmp	r1, r2
 800e268:	f100 33ff 	add.w	r3, r0, #4294967295
 800e26c:	d100      	bne.n	800e270 <memcpy+0xc>
 800e26e:	4770      	bx	lr
 800e270:	b510      	push	{r4, lr}
 800e272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e27a:	4291      	cmp	r1, r2
 800e27c:	d1f9      	bne.n	800e272 <memcpy+0xe>
 800e27e:	bd10      	pop	{r4, pc}

0800e280 <memset>:
 800e280:	4402      	add	r2, r0
 800e282:	4603      	mov	r3, r0
 800e284:	4293      	cmp	r3, r2
 800e286:	d100      	bne.n	800e28a <memset+0xa>
 800e288:	4770      	bx	lr
 800e28a:	f803 1b01 	strb.w	r1, [r3], #1
 800e28e:	e7f9      	b.n	800e284 <memset+0x4>

0800e290 <__cvt>:
 800e290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e292:	ed2d 8b02 	vpush	{d8}
 800e296:	eeb0 8b40 	vmov.f64	d8, d0
 800e29a:	b085      	sub	sp, #20
 800e29c:	4617      	mov	r7, r2
 800e29e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e2a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e2a2:	ee18 2a90 	vmov	r2, s17
 800e2a6:	f025 0520 	bic.w	r5, r5, #32
 800e2aa:	2a00      	cmp	r2, #0
 800e2ac:	bfb6      	itet	lt
 800e2ae:	222d      	movlt	r2, #45	; 0x2d
 800e2b0:	2200      	movge	r2, #0
 800e2b2:	eeb1 8b40 	vneglt.f64	d8, d0
 800e2b6:	2d46      	cmp	r5, #70	; 0x46
 800e2b8:	460c      	mov	r4, r1
 800e2ba:	701a      	strb	r2, [r3, #0]
 800e2bc:	d004      	beq.n	800e2c8 <__cvt+0x38>
 800e2be:	2d45      	cmp	r5, #69	; 0x45
 800e2c0:	d100      	bne.n	800e2c4 <__cvt+0x34>
 800e2c2:	3401      	adds	r4, #1
 800e2c4:	2102      	movs	r1, #2
 800e2c6:	e000      	b.n	800e2ca <__cvt+0x3a>
 800e2c8:	2103      	movs	r1, #3
 800e2ca:	ab03      	add	r3, sp, #12
 800e2cc:	9301      	str	r3, [sp, #4]
 800e2ce:	ab02      	add	r3, sp, #8
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	4633      	mov	r3, r6
 800e2d6:	eeb0 0b48 	vmov.f64	d0, d8
 800e2da:	f001 fe31 	bl	800ff40 <_dtoa_r>
 800e2de:	2d47      	cmp	r5, #71	; 0x47
 800e2e0:	d101      	bne.n	800e2e6 <__cvt+0x56>
 800e2e2:	07fb      	lsls	r3, r7, #31
 800e2e4:	d51a      	bpl.n	800e31c <__cvt+0x8c>
 800e2e6:	2d46      	cmp	r5, #70	; 0x46
 800e2e8:	eb00 0204 	add.w	r2, r0, r4
 800e2ec:	d10c      	bne.n	800e308 <__cvt+0x78>
 800e2ee:	7803      	ldrb	r3, [r0, #0]
 800e2f0:	2b30      	cmp	r3, #48	; 0x30
 800e2f2:	d107      	bne.n	800e304 <__cvt+0x74>
 800e2f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fc:	bf1c      	itt	ne
 800e2fe:	f1c4 0401 	rsbne	r4, r4, #1
 800e302:	6034      	strne	r4, [r6, #0]
 800e304:	6833      	ldr	r3, [r6, #0]
 800e306:	441a      	add	r2, r3
 800e308:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e310:	bf08      	it	eq
 800e312:	9203      	streq	r2, [sp, #12]
 800e314:	2130      	movs	r1, #48	; 0x30
 800e316:	9b03      	ldr	r3, [sp, #12]
 800e318:	4293      	cmp	r3, r2
 800e31a:	d307      	bcc.n	800e32c <__cvt+0x9c>
 800e31c:	9b03      	ldr	r3, [sp, #12]
 800e31e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e320:	1a1b      	subs	r3, r3, r0
 800e322:	6013      	str	r3, [r2, #0]
 800e324:	b005      	add	sp, #20
 800e326:	ecbd 8b02 	vpop	{d8}
 800e32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e32c:	1c5c      	adds	r4, r3, #1
 800e32e:	9403      	str	r4, [sp, #12]
 800e330:	7019      	strb	r1, [r3, #0]
 800e332:	e7f0      	b.n	800e316 <__cvt+0x86>

0800e334 <__exponent>:
 800e334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e336:	4603      	mov	r3, r0
 800e338:	2900      	cmp	r1, #0
 800e33a:	bfb8      	it	lt
 800e33c:	4249      	neglt	r1, r1
 800e33e:	f803 2b02 	strb.w	r2, [r3], #2
 800e342:	bfb4      	ite	lt
 800e344:	222d      	movlt	r2, #45	; 0x2d
 800e346:	222b      	movge	r2, #43	; 0x2b
 800e348:	2909      	cmp	r1, #9
 800e34a:	7042      	strb	r2, [r0, #1]
 800e34c:	dd2a      	ble.n	800e3a4 <__exponent+0x70>
 800e34e:	f10d 0407 	add.w	r4, sp, #7
 800e352:	46a4      	mov	ip, r4
 800e354:	270a      	movs	r7, #10
 800e356:	46a6      	mov	lr, r4
 800e358:	460a      	mov	r2, r1
 800e35a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e35e:	fb07 1516 	mls	r5, r7, r6, r1
 800e362:	3530      	adds	r5, #48	; 0x30
 800e364:	2a63      	cmp	r2, #99	; 0x63
 800e366:	f104 34ff 	add.w	r4, r4, #4294967295
 800e36a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e36e:	4631      	mov	r1, r6
 800e370:	dcf1      	bgt.n	800e356 <__exponent+0x22>
 800e372:	3130      	adds	r1, #48	; 0x30
 800e374:	f1ae 0502 	sub.w	r5, lr, #2
 800e378:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e37c:	1c44      	adds	r4, r0, #1
 800e37e:	4629      	mov	r1, r5
 800e380:	4561      	cmp	r1, ip
 800e382:	d30a      	bcc.n	800e39a <__exponent+0x66>
 800e384:	f10d 0209 	add.w	r2, sp, #9
 800e388:	eba2 020e 	sub.w	r2, r2, lr
 800e38c:	4565      	cmp	r5, ip
 800e38e:	bf88      	it	hi
 800e390:	2200      	movhi	r2, #0
 800e392:	4413      	add	r3, r2
 800e394:	1a18      	subs	r0, r3, r0
 800e396:	b003      	add	sp, #12
 800e398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e39e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e3a2:	e7ed      	b.n	800e380 <__exponent+0x4c>
 800e3a4:	2330      	movs	r3, #48	; 0x30
 800e3a6:	3130      	adds	r1, #48	; 0x30
 800e3a8:	7083      	strb	r3, [r0, #2]
 800e3aa:	70c1      	strb	r1, [r0, #3]
 800e3ac:	1d03      	adds	r3, r0, #4
 800e3ae:	e7f1      	b.n	800e394 <__exponent+0x60>

0800e3b0 <_printf_float>:
 800e3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b4:	b08b      	sub	sp, #44	; 0x2c
 800e3b6:	460c      	mov	r4, r1
 800e3b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e3bc:	4616      	mov	r6, r2
 800e3be:	461f      	mov	r7, r3
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	f002 fe9b 	bl	80110fc <_localeconv_r>
 800e3c6:	f8d0 b000 	ldr.w	fp, [r0]
 800e3ca:	4658      	mov	r0, fp
 800e3cc:	f7f1 ff88 	bl	80002e0 <strlen>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	9308      	str	r3, [sp, #32]
 800e3d4:	f8d8 3000 	ldr.w	r3, [r8]
 800e3d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e3dc:	6822      	ldr	r2, [r4, #0]
 800e3de:	3307      	adds	r3, #7
 800e3e0:	f023 0307 	bic.w	r3, r3, #7
 800e3e4:	f103 0108 	add.w	r1, r3, #8
 800e3e8:	f8c8 1000 	str.w	r1, [r8]
 800e3ec:	4682      	mov	sl, r0
 800e3ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e3f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e658 <_printf_float+0x2a8>
 800e3fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e3fe:	eeb0 6bc0 	vabs.f64	d6, d0
 800e402:	eeb4 6b47 	vcmp.f64	d6, d7
 800e406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40a:	dd24      	ble.n	800e456 <_printf_float+0xa6>
 800e40c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e414:	d502      	bpl.n	800e41c <_printf_float+0x6c>
 800e416:	232d      	movs	r3, #45	; 0x2d
 800e418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e41c:	4b90      	ldr	r3, [pc, #576]	; (800e660 <_printf_float+0x2b0>)
 800e41e:	4891      	ldr	r0, [pc, #580]	; (800e664 <_printf_float+0x2b4>)
 800e420:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e424:	bf94      	ite	ls
 800e426:	4698      	movls	r8, r3
 800e428:	4680      	movhi	r8, r0
 800e42a:	2303      	movs	r3, #3
 800e42c:	6123      	str	r3, [r4, #16]
 800e42e:	f022 0204 	bic.w	r2, r2, #4
 800e432:	2300      	movs	r3, #0
 800e434:	6022      	str	r2, [r4, #0]
 800e436:	9304      	str	r3, [sp, #16]
 800e438:	9700      	str	r7, [sp, #0]
 800e43a:	4633      	mov	r3, r6
 800e43c:	aa09      	add	r2, sp, #36	; 0x24
 800e43e:	4621      	mov	r1, r4
 800e440:	4628      	mov	r0, r5
 800e442:	f000 f9d3 	bl	800e7ec <_printf_common>
 800e446:	3001      	adds	r0, #1
 800e448:	f040 808a 	bne.w	800e560 <_printf_float+0x1b0>
 800e44c:	f04f 30ff 	mov.w	r0, #4294967295
 800e450:	b00b      	add	sp, #44	; 0x2c
 800e452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e456:	eeb4 0b40 	vcmp.f64	d0, d0
 800e45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45e:	d709      	bvc.n	800e474 <_printf_float+0xc4>
 800e460:	ee10 3a90 	vmov	r3, s1
 800e464:	2b00      	cmp	r3, #0
 800e466:	bfbc      	itt	lt
 800e468:	232d      	movlt	r3, #45	; 0x2d
 800e46a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e46e:	487e      	ldr	r0, [pc, #504]	; (800e668 <_printf_float+0x2b8>)
 800e470:	4b7e      	ldr	r3, [pc, #504]	; (800e66c <_printf_float+0x2bc>)
 800e472:	e7d5      	b.n	800e420 <_printf_float+0x70>
 800e474:	6863      	ldr	r3, [r4, #4]
 800e476:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e47a:	9104      	str	r1, [sp, #16]
 800e47c:	1c59      	adds	r1, r3, #1
 800e47e:	d13c      	bne.n	800e4fa <_printf_float+0x14a>
 800e480:	2306      	movs	r3, #6
 800e482:	6063      	str	r3, [r4, #4]
 800e484:	2300      	movs	r3, #0
 800e486:	9303      	str	r3, [sp, #12]
 800e488:	ab08      	add	r3, sp, #32
 800e48a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e48e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e492:	ab07      	add	r3, sp, #28
 800e494:	6861      	ldr	r1, [r4, #4]
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	6022      	str	r2, [r4, #0]
 800e49a:	f10d 031b 	add.w	r3, sp, #27
 800e49e:	4628      	mov	r0, r5
 800e4a0:	f7ff fef6 	bl	800e290 <__cvt>
 800e4a4:	9b04      	ldr	r3, [sp, #16]
 800e4a6:	9907      	ldr	r1, [sp, #28]
 800e4a8:	2b47      	cmp	r3, #71	; 0x47
 800e4aa:	4680      	mov	r8, r0
 800e4ac:	d108      	bne.n	800e4c0 <_printf_float+0x110>
 800e4ae:	1cc8      	adds	r0, r1, #3
 800e4b0:	db02      	blt.n	800e4b8 <_printf_float+0x108>
 800e4b2:	6863      	ldr	r3, [r4, #4]
 800e4b4:	4299      	cmp	r1, r3
 800e4b6:	dd41      	ble.n	800e53c <_printf_float+0x18c>
 800e4b8:	f1a9 0902 	sub.w	r9, r9, #2
 800e4bc:	fa5f f989 	uxtb.w	r9, r9
 800e4c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e4c4:	d820      	bhi.n	800e508 <_printf_float+0x158>
 800e4c6:	3901      	subs	r1, #1
 800e4c8:	464a      	mov	r2, r9
 800e4ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e4ce:	9107      	str	r1, [sp, #28]
 800e4d0:	f7ff ff30 	bl	800e334 <__exponent>
 800e4d4:	9a08      	ldr	r2, [sp, #32]
 800e4d6:	9004      	str	r0, [sp, #16]
 800e4d8:	1813      	adds	r3, r2, r0
 800e4da:	2a01      	cmp	r2, #1
 800e4dc:	6123      	str	r3, [r4, #16]
 800e4de:	dc02      	bgt.n	800e4e6 <_printf_float+0x136>
 800e4e0:	6822      	ldr	r2, [r4, #0]
 800e4e2:	07d2      	lsls	r2, r2, #31
 800e4e4:	d501      	bpl.n	800e4ea <_printf_float+0x13a>
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	6123      	str	r3, [r4, #16]
 800e4ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d0a2      	beq.n	800e438 <_printf_float+0x88>
 800e4f2:	232d      	movs	r3, #45	; 0x2d
 800e4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4f8:	e79e      	b.n	800e438 <_printf_float+0x88>
 800e4fa:	9904      	ldr	r1, [sp, #16]
 800e4fc:	2947      	cmp	r1, #71	; 0x47
 800e4fe:	d1c1      	bne.n	800e484 <_printf_float+0xd4>
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1bf      	bne.n	800e484 <_printf_float+0xd4>
 800e504:	2301      	movs	r3, #1
 800e506:	e7bc      	b.n	800e482 <_printf_float+0xd2>
 800e508:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e50c:	d118      	bne.n	800e540 <_printf_float+0x190>
 800e50e:	2900      	cmp	r1, #0
 800e510:	6863      	ldr	r3, [r4, #4]
 800e512:	dd0b      	ble.n	800e52c <_printf_float+0x17c>
 800e514:	6121      	str	r1, [r4, #16]
 800e516:	b913      	cbnz	r3, 800e51e <_printf_float+0x16e>
 800e518:	6822      	ldr	r2, [r4, #0]
 800e51a:	07d0      	lsls	r0, r2, #31
 800e51c:	d502      	bpl.n	800e524 <_printf_float+0x174>
 800e51e:	3301      	adds	r3, #1
 800e520:	440b      	add	r3, r1
 800e522:	6123      	str	r3, [r4, #16]
 800e524:	2300      	movs	r3, #0
 800e526:	65a1      	str	r1, [r4, #88]	; 0x58
 800e528:	9304      	str	r3, [sp, #16]
 800e52a:	e7de      	b.n	800e4ea <_printf_float+0x13a>
 800e52c:	b913      	cbnz	r3, 800e534 <_printf_float+0x184>
 800e52e:	6822      	ldr	r2, [r4, #0]
 800e530:	07d2      	lsls	r2, r2, #31
 800e532:	d501      	bpl.n	800e538 <_printf_float+0x188>
 800e534:	3302      	adds	r3, #2
 800e536:	e7f4      	b.n	800e522 <_printf_float+0x172>
 800e538:	2301      	movs	r3, #1
 800e53a:	e7f2      	b.n	800e522 <_printf_float+0x172>
 800e53c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e540:	9b08      	ldr	r3, [sp, #32]
 800e542:	4299      	cmp	r1, r3
 800e544:	db05      	blt.n	800e552 <_printf_float+0x1a2>
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	6121      	str	r1, [r4, #16]
 800e54a:	07d8      	lsls	r0, r3, #31
 800e54c:	d5ea      	bpl.n	800e524 <_printf_float+0x174>
 800e54e:	1c4b      	adds	r3, r1, #1
 800e550:	e7e7      	b.n	800e522 <_printf_float+0x172>
 800e552:	2900      	cmp	r1, #0
 800e554:	bfd4      	ite	le
 800e556:	f1c1 0202 	rsble	r2, r1, #2
 800e55a:	2201      	movgt	r2, #1
 800e55c:	4413      	add	r3, r2
 800e55e:	e7e0      	b.n	800e522 <_printf_float+0x172>
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	055a      	lsls	r2, r3, #21
 800e564:	d407      	bmi.n	800e576 <_printf_float+0x1c6>
 800e566:	6923      	ldr	r3, [r4, #16]
 800e568:	4642      	mov	r2, r8
 800e56a:	4631      	mov	r1, r6
 800e56c:	4628      	mov	r0, r5
 800e56e:	47b8      	blx	r7
 800e570:	3001      	adds	r0, #1
 800e572:	d12a      	bne.n	800e5ca <_printf_float+0x21a>
 800e574:	e76a      	b.n	800e44c <_printf_float+0x9c>
 800e576:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e57a:	f240 80e2 	bls.w	800e742 <_printf_float+0x392>
 800e57e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e582:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e58a:	d133      	bne.n	800e5f4 <_printf_float+0x244>
 800e58c:	4a38      	ldr	r2, [pc, #224]	; (800e670 <_printf_float+0x2c0>)
 800e58e:	2301      	movs	r3, #1
 800e590:	4631      	mov	r1, r6
 800e592:	4628      	mov	r0, r5
 800e594:	47b8      	blx	r7
 800e596:	3001      	adds	r0, #1
 800e598:	f43f af58 	beq.w	800e44c <_printf_float+0x9c>
 800e59c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	db02      	blt.n	800e5aa <_printf_float+0x1fa>
 800e5a4:	6823      	ldr	r3, [r4, #0]
 800e5a6:	07d8      	lsls	r0, r3, #31
 800e5a8:	d50f      	bpl.n	800e5ca <_printf_float+0x21a>
 800e5aa:	4653      	mov	r3, sl
 800e5ac:	465a      	mov	r2, fp
 800e5ae:	4631      	mov	r1, r6
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	47b8      	blx	r7
 800e5b4:	3001      	adds	r0, #1
 800e5b6:	f43f af49 	beq.w	800e44c <_printf_float+0x9c>
 800e5ba:	f04f 0800 	mov.w	r8, #0
 800e5be:	f104 091a 	add.w	r9, r4, #26
 800e5c2:	9b08      	ldr	r3, [sp, #32]
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	4543      	cmp	r3, r8
 800e5c8:	dc09      	bgt.n	800e5de <_printf_float+0x22e>
 800e5ca:	6823      	ldr	r3, [r4, #0]
 800e5cc:	079b      	lsls	r3, r3, #30
 800e5ce:	f100 8108 	bmi.w	800e7e2 <_printf_float+0x432>
 800e5d2:	68e0      	ldr	r0, [r4, #12]
 800e5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5d6:	4298      	cmp	r0, r3
 800e5d8:	bfb8      	it	lt
 800e5da:	4618      	movlt	r0, r3
 800e5dc:	e738      	b.n	800e450 <_printf_float+0xa0>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	464a      	mov	r2, r9
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	47b8      	blx	r7
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	f43f af2f 	beq.w	800e44c <_printf_float+0x9c>
 800e5ee:	f108 0801 	add.w	r8, r8, #1
 800e5f2:	e7e6      	b.n	800e5c2 <_printf_float+0x212>
 800e5f4:	9b07      	ldr	r3, [sp, #28]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	dc3c      	bgt.n	800e674 <_printf_float+0x2c4>
 800e5fa:	4a1d      	ldr	r2, [pc, #116]	; (800e670 <_printf_float+0x2c0>)
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	4631      	mov	r1, r6
 800e600:	4628      	mov	r0, r5
 800e602:	47b8      	blx	r7
 800e604:	3001      	adds	r0, #1
 800e606:	f43f af21 	beq.w	800e44c <_printf_float+0x9c>
 800e60a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e60e:	4313      	orrs	r3, r2
 800e610:	d102      	bne.n	800e618 <_printf_float+0x268>
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	07d9      	lsls	r1, r3, #31
 800e616:	d5d8      	bpl.n	800e5ca <_printf_float+0x21a>
 800e618:	4653      	mov	r3, sl
 800e61a:	465a      	mov	r2, fp
 800e61c:	4631      	mov	r1, r6
 800e61e:	4628      	mov	r0, r5
 800e620:	47b8      	blx	r7
 800e622:	3001      	adds	r0, #1
 800e624:	f43f af12 	beq.w	800e44c <_printf_float+0x9c>
 800e628:	f04f 0900 	mov.w	r9, #0
 800e62c:	f104 0a1a 	add.w	sl, r4, #26
 800e630:	9b07      	ldr	r3, [sp, #28]
 800e632:	425b      	negs	r3, r3
 800e634:	454b      	cmp	r3, r9
 800e636:	dc01      	bgt.n	800e63c <_printf_float+0x28c>
 800e638:	9b08      	ldr	r3, [sp, #32]
 800e63a:	e795      	b.n	800e568 <_printf_float+0x1b8>
 800e63c:	2301      	movs	r3, #1
 800e63e:	4652      	mov	r2, sl
 800e640:	4631      	mov	r1, r6
 800e642:	4628      	mov	r0, r5
 800e644:	47b8      	blx	r7
 800e646:	3001      	adds	r0, #1
 800e648:	f43f af00 	beq.w	800e44c <_printf_float+0x9c>
 800e64c:	f109 0901 	add.w	r9, r9, #1
 800e650:	e7ee      	b.n	800e630 <_printf_float+0x280>
 800e652:	bf00      	nop
 800e654:	f3af 8000 	nop.w
 800e658:	ffffffff 	.word	0xffffffff
 800e65c:	7fefffff 	.word	0x7fefffff
 800e660:	08014328 	.word	0x08014328
 800e664:	0801432c 	.word	0x0801432c
 800e668:	08014334 	.word	0x08014334
 800e66c:	08014330 	.word	0x08014330
 800e670:	08014729 	.word	0x08014729
 800e674:	9a08      	ldr	r2, [sp, #32]
 800e676:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e678:	429a      	cmp	r2, r3
 800e67a:	bfa8      	it	ge
 800e67c:	461a      	movge	r2, r3
 800e67e:	2a00      	cmp	r2, #0
 800e680:	4691      	mov	r9, r2
 800e682:	dc38      	bgt.n	800e6f6 <_printf_float+0x346>
 800e684:	2300      	movs	r3, #0
 800e686:	9305      	str	r3, [sp, #20]
 800e688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e68c:	f104 021a 	add.w	r2, r4, #26
 800e690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e692:	9905      	ldr	r1, [sp, #20]
 800e694:	9304      	str	r3, [sp, #16]
 800e696:	eba3 0309 	sub.w	r3, r3, r9
 800e69a:	428b      	cmp	r3, r1
 800e69c:	dc33      	bgt.n	800e706 <_printf_float+0x356>
 800e69e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	db3c      	blt.n	800e720 <_printf_float+0x370>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	07da      	lsls	r2, r3, #31
 800e6aa:	d439      	bmi.n	800e720 <_printf_float+0x370>
 800e6ac:	9b08      	ldr	r3, [sp, #32]
 800e6ae:	9a04      	ldr	r2, [sp, #16]
 800e6b0:	9907      	ldr	r1, [sp, #28]
 800e6b2:	1a9a      	subs	r2, r3, r2
 800e6b4:	eba3 0901 	sub.w	r9, r3, r1
 800e6b8:	4591      	cmp	r9, r2
 800e6ba:	bfa8      	it	ge
 800e6bc:	4691      	movge	r9, r2
 800e6be:	f1b9 0f00 	cmp.w	r9, #0
 800e6c2:	dc35      	bgt.n	800e730 <_printf_float+0x380>
 800e6c4:	f04f 0800 	mov.w	r8, #0
 800e6c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6cc:	f104 0a1a 	add.w	sl, r4, #26
 800e6d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e6d4:	1a9b      	subs	r3, r3, r2
 800e6d6:	eba3 0309 	sub.w	r3, r3, r9
 800e6da:	4543      	cmp	r3, r8
 800e6dc:	f77f af75 	ble.w	800e5ca <_printf_float+0x21a>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	4652      	mov	r2, sl
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	47b8      	blx	r7
 800e6ea:	3001      	adds	r0, #1
 800e6ec:	f43f aeae 	beq.w	800e44c <_printf_float+0x9c>
 800e6f0:	f108 0801 	add.w	r8, r8, #1
 800e6f4:	e7ec      	b.n	800e6d0 <_printf_float+0x320>
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	4631      	mov	r1, r6
 800e6fa:	4642      	mov	r2, r8
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	47b8      	blx	r7
 800e700:	3001      	adds	r0, #1
 800e702:	d1bf      	bne.n	800e684 <_printf_float+0x2d4>
 800e704:	e6a2      	b.n	800e44c <_printf_float+0x9c>
 800e706:	2301      	movs	r3, #1
 800e708:	4631      	mov	r1, r6
 800e70a:	4628      	mov	r0, r5
 800e70c:	9204      	str	r2, [sp, #16]
 800e70e:	47b8      	blx	r7
 800e710:	3001      	adds	r0, #1
 800e712:	f43f ae9b 	beq.w	800e44c <_printf_float+0x9c>
 800e716:	9b05      	ldr	r3, [sp, #20]
 800e718:	9a04      	ldr	r2, [sp, #16]
 800e71a:	3301      	adds	r3, #1
 800e71c:	9305      	str	r3, [sp, #20]
 800e71e:	e7b7      	b.n	800e690 <_printf_float+0x2e0>
 800e720:	4653      	mov	r3, sl
 800e722:	465a      	mov	r2, fp
 800e724:	4631      	mov	r1, r6
 800e726:	4628      	mov	r0, r5
 800e728:	47b8      	blx	r7
 800e72a:	3001      	adds	r0, #1
 800e72c:	d1be      	bne.n	800e6ac <_printf_float+0x2fc>
 800e72e:	e68d      	b.n	800e44c <_printf_float+0x9c>
 800e730:	9a04      	ldr	r2, [sp, #16]
 800e732:	464b      	mov	r3, r9
 800e734:	4442      	add	r2, r8
 800e736:	4631      	mov	r1, r6
 800e738:	4628      	mov	r0, r5
 800e73a:	47b8      	blx	r7
 800e73c:	3001      	adds	r0, #1
 800e73e:	d1c1      	bne.n	800e6c4 <_printf_float+0x314>
 800e740:	e684      	b.n	800e44c <_printf_float+0x9c>
 800e742:	9a08      	ldr	r2, [sp, #32]
 800e744:	2a01      	cmp	r2, #1
 800e746:	dc01      	bgt.n	800e74c <_printf_float+0x39c>
 800e748:	07db      	lsls	r3, r3, #31
 800e74a:	d537      	bpl.n	800e7bc <_printf_float+0x40c>
 800e74c:	2301      	movs	r3, #1
 800e74e:	4642      	mov	r2, r8
 800e750:	4631      	mov	r1, r6
 800e752:	4628      	mov	r0, r5
 800e754:	47b8      	blx	r7
 800e756:	3001      	adds	r0, #1
 800e758:	f43f ae78 	beq.w	800e44c <_printf_float+0x9c>
 800e75c:	4653      	mov	r3, sl
 800e75e:	465a      	mov	r2, fp
 800e760:	4631      	mov	r1, r6
 800e762:	4628      	mov	r0, r5
 800e764:	47b8      	blx	r7
 800e766:	3001      	adds	r0, #1
 800e768:	f43f ae70 	beq.w	800e44c <_printf_float+0x9c>
 800e76c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e770:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e778:	d01b      	beq.n	800e7b2 <_printf_float+0x402>
 800e77a:	9b08      	ldr	r3, [sp, #32]
 800e77c:	f108 0201 	add.w	r2, r8, #1
 800e780:	3b01      	subs	r3, #1
 800e782:	4631      	mov	r1, r6
 800e784:	4628      	mov	r0, r5
 800e786:	47b8      	blx	r7
 800e788:	3001      	adds	r0, #1
 800e78a:	d10e      	bne.n	800e7aa <_printf_float+0x3fa>
 800e78c:	e65e      	b.n	800e44c <_printf_float+0x9c>
 800e78e:	2301      	movs	r3, #1
 800e790:	464a      	mov	r2, r9
 800e792:	4631      	mov	r1, r6
 800e794:	4628      	mov	r0, r5
 800e796:	47b8      	blx	r7
 800e798:	3001      	adds	r0, #1
 800e79a:	f43f ae57 	beq.w	800e44c <_printf_float+0x9c>
 800e79e:	f108 0801 	add.w	r8, r8, #1
 800e7a2:	9b08      	ldr	r3, [sp, #32]
 800e7a4:	3b01      	subs	r3, #1
 800e7a6:	4543      	cmp	r3, r8
 800e7a8:	dcf1      	bgt.n	800e78e <_printf_float+0x3de>
 800e7aa:	9b04      	ldr	r3, [sp, #16]
 800e7ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e7b0:	e6db      	b.n	800e56a <_printf_float+0x1ba>
 800e7b2:	f04f 0800 	mov.w	r8, #0
 800e7b6:	f104 091a 	add.w	r9, r4, #26
 800e7ba:	e7f2      	b.n	800e7a2 <_printf_float+0x3f2>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	4642      	mov	r2, r8
 800e7c0:	e7df      	b.n	800e782 <_printf_float+0x3d2>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	464a      	mov	r2, r9
 800e7c6:	4631      	mov	r1, r6
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	47b8      	blx	r7
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	f43f ae3d 	beq.w	800e44c <_printf_float+0x9c>
 800e7d2:	f108 0801 	add.w	r8, r8, #1
 800e7d6:	68e3      	ldr	r3, [r4, #12]
 800e7d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7da:	1a5b      	subs	r3, r3, r1
 800e7dc:	4543      	cmp	r3, r8
 800e7de:	dcf0      	bgt.n	800e7c2 <_printf_float+0x412>
 800e7e0:	e6f7      	b.n	800e5d2 <_printf_float+0x222>
 800e7e2:	f04f 0800 	mov.w	r8, #0
 800e7e6:	f104 0919 	add.w	r9, r4, #25
 800e7ea:	e7f4      	b.n	800e7d6 <_printf_float+0x426>

0800e7ec <_printf_common>:
 800e7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f0:	4616      	mov	r6, r2
 800e7f2:	4699      	mov	r9, r3
 800e7f4:	688a      	ldr	r2, [r1, #8]
 800e7f6:	690b      	ldr	r3, [r1, #16]
 800e7f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	bfb8      	it	lt
 800e800:	4613      	movlt	r3, r2
 800e802:	6033      	str	r3, [r6, #0]
 800e804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e808:	4607      	mov	r7, r0
 800e80a:	460c      	mov	r4, r1
 800e80c:	b10a      	cbz	r2, 800e812 <_printf_common+0x26>
 800e80e:	3301      	adds	r3, #1
 800e810:	6033      	str	r3, [r6, #0]
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	0699      	lsls	r1, r3, #26
 800e816:	bf42      	ittt	mi
 800e818:	6833      	ldrmi	r3, [r6, #0]
 800e81a:	3302      	addmi	r3, #2
 800e81c:	6033      	strmi	r3, [r6, #0]
 800e81e:	6825      	ldr	r5, [r4, #0]
 800e820:	f015 0506 	ands.w	r5, r5, #6
 800e824:	d106      	bne.n	800e834 <_printf_common+0x48>
 800e826:	f104 0a19 	add.w	sl, r4, #25
 800e82a:	68e3      	ldr	r3, [r4, #12]
 800e82c:	6832      	ldr	r2, [r6, #0]
 800e82e:	1a9b      	subs	r3, r3, r2
 800e830:	42ab      	cmp	r3, r5
 800e832:	dc26      	bgt.n	800e882 <_printf_common+0x96>
 800e834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e838:	1e13      	subs	r3, r2, #0
 800e83a:	6822      	ldr	r2, [r4, #0]
 800e83c:	bf18      	it	ne
 800e83e:	2301      	movne	r3, #1
 800e840:	0692      	lsls	r2, r2, #26
 800e842:	d42b      	bmi.n	800e89c <_printf_common+0xb0>
 800e844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e848:	4649      	mov	r1, r9
 800e84a:	4638      	mov	r0, r7
 800e84c:	47c0      	blx	r8
 800e84e:	3001      	adds	r0, #1
 800e850:	d01e      	beq.n	800e890 <_printf_common+0xa4>
 800e852:	6823      	ldr	r3, [r4, #0]
 800e854:	68e5      	ldr	r5, [r4, #12]
 800e856:	6832      	ldr	r2, [r6, #0]
 800e858:	f003 0306 	and.w	r3, r3, #6
 800e85c:	2b04      	cmp	r3, #4
 800e85e:	bf08      	it	eq
 800e860:	1aad      	subeq	r5, r5, r2
 800e862:	68a3      	ldr	r3, [r4, #8]
 800e864:	6922      	ldr	r2, [r4, #16]
 800e866:	bf0c      	ite	eq
 800e868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e86c:	2500      	movne	r5, #0
 800e86e:	4293      	cmp	r3, r2
 800e870:	bfc4      	itt	gt
 800e872:	1a9b      	subgt	r3, r3, r2
 800e874:	18ed      	addgt	r5, r5, r3
 800e876:	2600      	movs	r6, #0
 800e878:	341a      	adds	r4, #26
 800e87a:	42b5      	cmp	r5, r6
 800e87c:	d11a      	bne.n	800e8b4 <_printf_common+0xc8>
 800e87e:	2000      	movs	r0, #0
 800e880:	e008      	b.n	800e894 <_printf_common+0xa8>
 800e882:	2301      	movs	r3, #1
 800e884:	4652      	mov	r2, sl
 800e886:	4649      	mov	r1, r9
 800e888:	4638      	mov	r0, r7
 800e88a:	47c0      	blx	r8
 800e88c:	3001      	adds	r0, #1
 800e88e:	d103      	bne.n	800e898 <_printf_common+0xac>
 800e890:	f04f 30ff 	mov.w	r0, #4294967295
 800e894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e898:	3501      	adds	r5, #1
 800e89a:	e7c6      	b.n	800e82a <_printf_common+0x3e>
 800e89c:	18e1      	adds	r1, r4, r3
 800e89e:	1c5a      	adds	r2, r3, #1
 800e8a0:	2030      	movs	r0, #48	; 0x30
 800e8a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8a6:	4422      	add	r2, r4
 800e8a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8b0:	3302      	adds	r3, #2
 800e8b2:	e7c7      	b.n	800e844 <_printf_common+0x58>
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	4622      	mov	r2, r4
 800e8b8:	4649      	mov	r1, r9
 800e8ba:	4638      	mov	r0, r7
 800e8bc:	47c0      	blx	r8
 800e8be:	3001      	adds	r0, #1
 800e8c0:	d0e6      	beq.n	800e890 <_printf_common+0xa4>
 800e8c2:	3601      	adds	r6, #1
 800e8c4:	e7d9      	b.n	800e87a <_printf_common+0x8e>
	...

0800e8c8 <_printf_i>:
 800e8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8cc:	7e0f      	ldrb	r7, [r1, #24]
 800e8ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8d0:	2f78      	cmp	r7, #120	; 0x78
 800e8d2:	4691      	mov	r9, r2
 800e8d4:	4680      	mov	r8, r0
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	469a      	mov	sl, r3
 800e8da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e8de:	d807      	bhi.n	800e8f0 <_printf_i+0x28>
 800e8e0:	2f62      	cmp	r7, #98	; 0x62
 800e8e2:	d80a      	bhi.n	800e8fa <_printf_i+0x32>
 800e8e4:	2f00      	cmp	r7, #0
 800e8e6:	f000 80d8 	beq.w	800ea9a <_printf_i+0x1d2>
 800e8ea:	2f58      	cmp	r7, #88	; 0x58
 800e8ec:	f000 80a3 	beq.w	800ea36 <_printf_i+0x16e>
 800e8f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e8f8:	e03a      	b.n	800e970 <_printf_i+0xa8>
 800e8fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e8fe:	2b15      	cmp	r3, #21
 800e900:	d8f6      	bhi.n	800e8f0 <_printf_i+0x28>
 800e902:	a101      	add	r1, pc, #4	; (adr r1, 800e908 <_printf_i+0x40>)
 800e904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e908:	0800e961 	.word	0x0800e961
 800e90c:	0800e975 	.word	0x0800e975
 800e910:	0800e8f1 	.word	0x0800e8f1
 800e914:	0800e8f1 	.word	0x0800e8f1
 800e918:	0800e8f1 	.word	0x0800e8f1
 800e91c:	0800e8f1 	.word	0x0800e8f1
 800e920:	0800e975 	.word	0x0800e975
 800e924:	0800e8f1 	.word	0x0800e8f1
 800e928:	0800e8f1 	.word	0x0800e8f1
 800e92c:	0800e8f1 	.word	0x0800e8f1
 800e930:	0800e8f1 	.word	0x0800e8f1
 800e934:	0800ea81 	.word	0x0800ea81
 800e938:	0800e9a5 	.word	0x0800e9a5
 800e93c:	0800ea63 	.word	0x0800ea63
 800e940:	0800e8f1 	.word	0x0800e8f1
 800e944:	0800e8f1 	.word	0x0800e8f1
 800e948:	0800eaa3 	.word	0x0800eaa3
 800e94c:	0800e8f1 	.word	0x0800e8f1
 800e950:	0800e9a5 	.word	0x0800e9a5
 800e954:	0800e8f1 	.word	0x0800e8f1
 800e958:	0800e8f1 	.word	0x0800e8f1
 800e95c:	0800ea6b 	.word	0x0800ea6b
 800e960:	682b      	ldr	r3, [r5, #0]
 800e962:	1d1a      	adds	r2, r3, #4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	602a      	str	r2, [r5, #0]
 800e968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e96c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e970:	2301      	movs	r3, #1
 800e972:	e0a3      	b.n	800eabc <_printf_i+0x1f4>
 800e974:	6820      	ldr	r0, [r4, #0]
 800e976:	6829      	ldr	r1, [r5, #0]
 800e978:	0606      	lsls	r6, r0, #24
 800e97a:	f101 0304 	add.w	r3, r1, #4
 800e97e:	d50a      	bpl.n	800e996 <_printf_i+0xce>
 800e980:	680e      	ldr	r6, [r1, #0]
 800e982:	602b      	str	r3, [r5, #0]
 800e984:	2e00      	cmp	r6, #0
 800e986:	da03      	bge.n	800e990 <_printf_i+0xc8>
 800e988:	232d      	movs	r3, #45	; 0x2d
 800e98a:	4276      	negs	r6, r6
 800e98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e990:	485e      	ldr	r0, [pc, #376]	; (800eb0c <_printf_i+0x244>)
 800e992:	230a      	movs	r3, #10
 800e994:	e019      	b.n	800e9ca <_printf_i+0x102>
 800e996:	680e      	ldr	r6, [r1, #0]
 800e998:	602b      	str	r3, [r5, #0]
 800e99a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e99e:	bf18      	it	ne
 800e9a0:	b236      	sxthne	r6, r6
 800e9a2:	e7ef      	b.n	800e984 <_printf_i+0xbc>
 800e9a4:	682b      	ldr	r3, [r5, #0]
 800e9a6:	6820      	ldr	r0, [r4, #0]
 800e9a8:	1d19      	adds	r1, r3, #4
 800e9aa:	6029      	str	r1, [r5, #0]
 800e9ac:	0601      	lsls	r1, r0, #24
 800e9ae:	d501      	bpl.n	800e9b4 <_printf_i+0xec>
 800e9b0:	681e      	ldr	r6, [r3, #0]
 800e9b2:	e002      	b.n	800e9ba <_printf_i+0xf2>
 800e9b4:	0646      	lsls	r6, r0, #25
 800e9b6:	d5fb      	bpl.n	800e9b0 <_printf_i+0xe8>
 800e9b8:	881e      	ldrh	r6, [r3, #0]
 800e9ba:	4854      	ldr	r0, [pc, #336]	; (800eb0c <_printf_i+0x244>)
 800e9bc:	2f6f      	cmp	r7, #111	; 0x6f
 800e9be:	bf0c      	ite	eq
 800e9c0:	2308      	moveq	r3, #8
 800e9c2:	230a      	movne	r3, #10
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9ca:	6865      	ldr	r5, [r4, #4]
 800e9cc:	60a5      	str	r5, [r4, #8]
 800e9ce:	2d00      	cmp	r5, #0
 800e9d0:	bfa2      	ittt	ge
 800e9d2:	6821      	ldrge	r1, [r4, #0]
 800e9d4:	f021 0104 	bicge.w	r1, r1, #4
 800e9d8:	6021      	strge	r1, [r4, #0]
 800e9da:	b90e      	cbnz	r6, 800e9e0 <_printf_i+0x118>
 800e9dc:	2d00      	cmp	r5, #0
 800e9de:	d04d      	beq.n	800ea7c <_printf_i+0x1b4>
 800e9e0:	4615      	mov	r5, r2
 800e9e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e9e6:	fb03 6711 	mls	r7, r3, r1, r6
 800e9ea:	5dc7      	ldrb	r7, [r0, r7]
 800e9ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e9f0:	4637      	mov	r7, r6
 800e9f2:	42bb      	cmp	r3, r7
 800e9f4:	460e      	mov	r6, r1
 800e9f6:	d9f4      	bls.n	800e9e2 <_printf_i+0x11a>
 800e9f8:	2b08      	cmp	r3, #8
 800e9fa:	d10b      	bne.n	800ea14 <_printf_i+0x14c>
 800e9fc:	6823      	ldr	r3, [r4, #0]
 800e9fe:	07de      	lsls	r6, r3, #31
 800ea00:	d508      	bpl.n	800ea14 <_printf_i+0x14c>
 800ea02:	6923      	ldr	r3, [r4, #16]
 800ea04:	6861      	ldr	r1, [r4, #4]
 800ea06:	4299      	cmp	r1, r3
 800ea08:	bfde      	ittt	le
 800ea0a:	2330      	movle	r3, #48	; 0x30
 800ea0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea14:	1b52      	subs	r2, r2, r5
 800ea16:	6122      	str	r2, [r4, #16]
 800ea18:	f8cd a000 	str.w	sl, [sp]
 800ea1c:	464b      	mov	r3, r9
 800ea1e:	aa03      	add	r2, sp, #12
 800ea20:	4621      	mov	r1, r4
 800ea22:	4640      	mov	r0, r8
 800ea24:	f7ff fee2 	bl	800e7ec <_printf_common>
 800ea28:	3001      	adds	r0, #1
 800ea2a:	d14c      	bne.n	800eac6 <_printf_i+0x1fe>
 800ea2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea30:	b004      	add	sp, #16
 800ea32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea36:	4835      	ldr	r0, [pc, #212]	; (800eb0c <_printf_i+0x244>)
 800ea38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ea3c:	6829      	ldr	r1, [r5, #0]
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea44:	6029      	str	r1, [r5, #0]
 800ea46:	061d      	lsls	r5, r3, #24
 800ea48:	d514      	bpl.n	800ea74 <_printf_i+0x1ac>
 800ea4a:	07df      	lsls	r7, r3, #31
 800ea4c:	bf44      	itt	mi
 800ea4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ea52:	6023      	strmi	r3, [r4, #0]
 800ea54:	b91e      	cbnz	r6, 800ea5e <_printf_i+0x196>
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	f023 0320 	bic.w	r3, r3, #32
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	2310      	movs	r3, #16
 800ea60:	e7b0      	b.n	800e9c4 <_printf_i+0xfc>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	f043 0320 	orr.w	r3, r3, #32
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	2378      	movs	r3, #120	; 0x78
 800ea6c:	4828      	ldr	r0, [pc, #160]	; (800eb10 <_printf_i+0x248>)
 800ea6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea72:	e7e3      	b.n	800ea3c <_printf_i+0x174>
 800ea74:	0659      	lsls	r1, r3, #25
 800ea76:	bf48      	it	mi
 800ea78:	b2b6      	uxthmi	r6, r6
 800ea7a:	e7e6      	b.n	800ea4a <_printf_i+0x182>
 800ea7c:	4615      	mov	r5, r2
 800ea7e:	e7bb      	b.n	800e9f8 <_printf_i+0x130>
 800ea80:	682b      	ldr	r3, [r5, #0]
 800ea82:	6826      	ldr	r6, [r4, #0]
 800ea84:	6961      	ldr	r1, [r4, #20]
 800ea86:	1d18      	adds	r0, r3, #4
 800ea88:	6028      	str	r0, [r5, #0]
 800ea8a:	0635      	lsls	r5, r6, #24
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	d501      	bpl.n	800ea94 <_printf_i+0x1cc>
 800ea90:	6019      	str	r1, [r3, #0]
 800ea92:	e002      	b.n	800ea9a <_printf_i+0x1d2>
 800ea94:	0670      	lsls	r0, r6, #25
 800ea96:	d5fb      	bpl.n	800ea90 <_printf_i+0x1c8>
 800ea98:	8019      	strh	r1, [r3, #0]
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	6123      	str	r3, [r4, #16]
 800ea9e:	4615      	mov	r5, r2
 800eaa0:	e7ba      	b.n	800ea18 <_printf_i+0x150>
 800eaa2:	682b      	ldr	r3, [r5, #0]
 800eaa4:	1d1a      	adds	r2, r3, #4
 800eaa6:	602a      	str	r2, [r5, #0]
 800eaa8:	681d      	ldr	r5, [r3, #0]
 800eaaa:	6862      	ldr	r2, [r4, #4]
 800eaac:	2100      	movs	r1, #0
 800eaae:	4628      	mov	r0, r5
 800eab0:	f7f1 fc1e 	bl	80002f0 <memchr>
 800eab4:	b108      	cbz	r0, 800eaba <_printf_i+0x1f2>
 800eab6:	1b40      	subs	r0, r0, r5
 800eab8:	6060      	str	r0, [r4, #4]
 800eaba:	6863      	ldr	r3, [r4, #4]
 800eabc:	6123      	str	r3, [r4, #16]
 800eabe:	2300      	movs	r3, #0
 800eac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eac4:	e7a8      	b.n	800ea18 <_printf_i+0x150>
 800eac6:	6923      	ldr	r3, [r4, #16]
 800eac8:	462a      	mov	r2, r5
 800eaca:	4649      	mov	r1, r9
 800eacc:	4640      	mov	r0, r8
 800eace:	47d0      	blx	sl
 800ead0:	3001      	adds	r0, #1
 800ead2:	d0ab      	beq.n	800ea2c <_printf_i+0x164>
 800ead4:	6823      	ldr	r3, [r4, #0]
 800ead6:	079b      	lsls	r3, r3, #30
 800ead8:	d413      	bmi.n	800eb02 <_printf_i+0x23a>
 800eada:	68e0      	ldr	r0, [r4, #12]
 800eadc:	9b03      	ldr	r3, [sp, #12]
 800eade:	4298      	cmp	r0, r3
 800eae0:	bfb8      	it	lt
 800eae2:	4618      	movlt	r0, r3
 800eae4:	e7a4      	b.n	800ea30 <_printf_i+0x168>
 800eae6:	2301      	movs	r3, #1
 800eae8:	4632      	mov	r2, r6
 800eaea:	4649      	mov	r1, r9
 800eaec:	4640      	mov	r0, r8
 800eaee:	47d0      	blx	sl
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	d09b      	beq.n	800ea2c <_printf_i+0x164>
 800eaf4:	3501      	adds	r5, #1
 800eaf6:	68e3      	ldr	r3, [r4, #12]
 800eaf8:	9903      	ldr	r1, [sp, #12]
 800eafa:	1a5b      	subs	r3, r3, r1
 800eafc:	42ab      	cmp	r3, r5
 800eafe:	dcf2      	bgt.n	800eae6 <_printf_i+0x21e>
 800eb00:	e7eb      	b.n	800eada <_printf_i+0x212>
 800eb02:	2500      	movs	r5, #0
 800eb04:	f104 0619 	add.w	r6, r4, #25
 800eb08:	e7f5      	b.n	800eaf6 <_printf_i+0x22e>
 800eb0a:	bf00      	nop
 800eb0c:	08014338 	.word	0x08014338
 800eb10:	08014349 	.word	0x08014349

0800eb14 <_scanf_float>:
 800eb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb18:	b087      	sub	sp, #28
 800eb1a:	4617      	mov	r7, r2
 800eb1c:	9303      	str	r3, [sp, #12]
 800eb1e:	688b      	ldr	r3, [r1, #8]
 800eb20:	1e5a      	subs	r2, r3, #1
 800eb22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eb26:	bf83      	ittte	hi
 800eb28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800eb2c:	195b      	addhi	r3, r3, r5
 800eb2e:	9302      	strhi	r3, [sp, #8]
 800eb30:	2300      	movls	r3, #0
 800eb32:	bf86      	itte	hi
 800eb34:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eb38:	608b      	strhi	r3, [r1, #8]
 800eb3a:	9302      	strls	r3, [sp, #8]
 800eb3c:	680b      	ldr	r3, [r1, #0]
 800eb3e:	468b      	mov	fp, r1
 800eb40:	2500      	movs	r5, #0
 800eb42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800eb46:	f84b 3b1c 	str.w	r3, [fp], #28
 800eb4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eb4e:	4680      	mov	r8, r0
 800eb50:	460c      	mov	r4, r1
 800eb52:	465e      	mov	r6, fp
 800eb54:	46aa      	mov	sl, r5
 800eb56:	46a9      	mov	r9, r5
 800eb58:	9501      	str	r5, [sp, #4]
 800eb5a:	68a2      	ldr	r2, [r4, #8]
 800eb5c:	b152      	cbz	r2, 800eb74 <_scanf_float+0x60>
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	2b4e      	cmp	r3, #78	; 0x4e
 800eb64:	d864      	bhi.n	800ec30 <_scanf_float+0x11c>
 800eb66:	2b40      	cmp	r3, #64	; 0x40
 800eb68:	d83c      	bhi.n	800ebe4 <_scanf_float+0xd0>
 800eb6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800eb6e:	b2c8      	uxtb	r0, r1
 800eb70:	280e      	cmp	r0, #14
 800eb72:	d93a      	bls.n	800ebea <_scanf_float+0xd6>
 800eb74:	f1b9 0f00 	cmp.w	r9, #0
 800eb78:	d003      	beq.n	800eb82 <_scanf_float+0x6e>
 800eb7a:	6823      	ldr	r3, [r4, #0]
 800eb7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb86:	f1ba 0f01 	cmp.w	sl, #1
 800eb8a:	f200 8113 	bhi.w	800edb4 <_scanf_float+0x2a0>
 800eb8e:	455e      	cmp	r6, fp
 800eb90:	f200 8105 	bhi.w	800ed9e <_scanf_float+0x28a>
 800eb94:	2501      	movs	r5, #1
 800eb96:	4628      	mov	r0, r5
 800eb98:	b007      	add	sp, #28
 800eb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800eba2:	2a0d      	cmp	r2, #13
 800eba4:	d8e6      	bhi.n	800eb74 <_scanf_float+0x60>
 800eba6:	a101      	add	r1, pc, #4	; (adr r1, 800ebac <_scanf_float+0x98>)
 800eba8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ebac:	0800eceb 	.word	0x0800eceb
 800ebb0:	0800eb75 	.word	0x0800eb75
 800ebb4:	0800eb75 	.word	0x0800eb75
 800ebb8:	0800eb75 	.word	0x0800eb75
 800ebbc:	0800ed4b 	.word	0x0800ed4b
 800ebc0:	0800ed23 	.word	0x0800ed23
 800ebc4:	0800eb75 	.word	0x0800eb75
 800ebc8:	0800eb75 	.word	0x0800eb75
 800ebcc:	0800ecf9 	.word	0x0800ecf9
 800ebd0:	0800eb75 	.word	0x0800eb75
 800ebd4:	0800eb75 	.word	0x0800eb75
 800ebd8:	0800eb75 	.word	0x0800eb75
 800ebdc:	0800eb75 	.word	0x0800eb75
 800ebe0:	0800ecb1 	.word	0x0800ecb1
 800ebe4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ebe8:	e7db      	b.n	800eba2 <_scanf_float+0x8e>
 800ebea:	290e      	cmp	r1, #14
 800ebec:	d8c2      	bhi.n	800eb74 <_scanf_float+0x60>
 800ebee:	a001      	add	r0, pc, #4	; (adr r0, 800ebf4 <_scanf_float+0xe0>)
 800ebf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ebf4:	0800eca3 	.word	0x0800eca3
 800ebf8:	0800eb75 	.word	0x0800eb75
 800ebfc:	0800eca3 	.word	0x0800eca3
 800ec00:	0800ed37 	.word	0x0800ed37
 800ec04:	0800eb75 	.word	0x0800eb75
 800ec08:	0800ec51 	.word	0x0800ec51
 800ec0c:	0800ec8d 	.word	0x0800ec8d
 800ec10:	0800ec8d 	.word	0x0800ec8d
 800ec14:	0800ec8d 	.word	0x0800ec8d
 800ec18:	0800ec8d 	.word	0x0800ec8d
 800ec1c:	0800ec8d 	.word	0x0800ec8d
 800ec20:	0800ec8d 	.word	0x0800ec8d
 800ec24:	0800ec8d 	.word	0x0800ec8d
 800ec28:	0800ec8d 	.word	0x0800ec8d
 800ec2c:	0800ec8d 	.word	0x0800ec8d
 800ec30:	2b6e      	cmp	r3, #110	; 0x6e
 800ec32:	d809      	bhi.n	800ec48 <_scanf_float+0x134>
 800ec34:	2b60      	cmp	r3, #96	; 0x60
 800ec36:	d8b2      	bhi.n	800eb9e <_scanf_float+0x8a>
 800ec38:	2b54      	cmp	r3, #84	; 0x54
 800ec3a:	d077      	beq.n	800ed2c <_scanf_float+0x218>
 800ec3c:	2b59      	cmp	r3, #89	; 0x59
 800ec3e:	d199      	bne.n	800eb74 <_scanf_float+0x60>
 800ec40:	2d07      	cmp	r5, #7
 800ec42:	d197      	bne.n	800eb74 <_scanf_float+0x60>
 800ec44:	2508      	movs	r5, #8
 800ec46:	e029      	b.n	800ec9c <_scanf_float+0x188>
 800ec48:	2b74      	cmp	r3, #116	; 0x74
 800ec4a:	d06f      	beq.n	800ed2c <_scanf_float+0x218>
 800ec4c:	2b79      	cmp	r3, #121	; 0x79
 800ec4e:	e7f6      	b.n	800ec3e <_scanf_float+0x12a>
 800ec50:	6821      	ldr	r1, [r4, #0]
 800ec52:	05c8      	lsls	r0, r1, #23
 800ec54:	d51a      	bpl.n	800ec8c <_scanf_float+0x178>
 800ec56:	9b02      	ldr	r3, [sp, #8]
 800ec58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ec5c:	6021      	str	r1, [r4, #0]
 800ec5e:	f109 0901 	add.w	r9, r9, #1
 800ec62:	b11b      	cbz	r3, 800ec6c <_scanf_float+0x158>
 800ec64:	3b01      	subs	r3, #1
 800ec66:	3201      	adds	r2, #1
 800ec68:	9302      	str	r3, [sp, #8]
 800ec6a:	60a2      	str	r2, [r4, #8]
 800ec6c:	68a3      	ldr	r3, [r4, #8]
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	60a3      	str	r3, [r4, #8]
 800ec72:	6923      	ldr	r3, [r4, #16]
 800ec74:	3301      	adds	r3, #1
 800ec76:	6123      	str	r3, [r4, #16]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	3b01      	subs	r3, #1
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	607b      	str	r3, [r7, #4]
 800ec80:	f340 8084 	ble.w	800ed8c <_scanf_float+0x278>
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	3301      	adds	r3, #1
 800ec88:	603b      	str	r3, [r7, #0]
 800ec8a:	e766      	b.n	800eb5a <_scanf_float+0x46>
 800ec8c:	eb1a 0f05 	cmn.w	sl, r5
 800ec90:	f47f af70 	bne.w	800eb74 <_scanf_float+0x60>
 800ec94:	6822      	ldr	r2, [r4, #0]
 800ec96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ec9a:	6022      	str	r2, [r4, #0]
 800ec9c:	f806 3b01 	strb.w	r3, [r6], #1
 800eca0:	e7e4      	b.n	800ec6c <_scanf_float+0x158>
 800eca2:	6822      	ldr	r2, [r4, #0]
 800eca4:	0610      	lsls	r0, r2, #24
 800eca6:	f57f af65 	bpl.w	800eb74 <_scanf_float+0x60>
 800ecaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ecae:	e7f4      	b.n	800ec9a <_scanf_float+0x186>
 800ecb0:	f1ba 0f00 	cmp.w	sl, #0
 800ecb4:	d10e      	bne.n	800ecd4 <_scanf_float+0x1c0>
 800ecb6:	f1b9 0f00 	cmp.w	r9, #0
 800ecba:	d10e      	bne.n	800ecda <_scanf_float+0x1c6>
 800ecbc:	6822      	ldr	r2, [r4, #0]
 800ecbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ecc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ecc6:	d108      	bne.n	800ecda <_scanf_float+0x1c6>
 800ecc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eccc:	6022      	str	r2, [r4, #0]
 800ecce:	f04f 0a01 	mov.w	sl, #1
 800ecd2:	e7e3      	b.n	800ec9c <_scanf_float+0x188>
 800ecd4:	f1ba 0f02 	cmp.w	sl, #2
 800ecd8:	d055      	beq.n	800ed86 <_scanf_float+0x272>
 800ecda:	2d01      	cmp	r5, #1
 800ecdc:	d002      	beq.n	800ece4 <_scanf_float+0x1d0>
 800ecde:	2d04      	cmp	r5, #4
 800ece0:	f47f af48 	bne.w	800eb74 <_scanf_float+0x60>
 800ece4:	3501      	adds	r5, #1
 800ece6:	b2ed      	uxtb	r5, r5
 800ece8:	e7d8      	b.n	800ec9c <_scanf_float+0x188>
 800ecea:	f1ba 0f01 	cmp.w	sl, #1
 800ecee:	f47f af41 	bne.w	800eb74 <_scanf_float+0x60>
 800ecf2:	f04f 0a02 	mov.w	sl, #2
 800ecf6:	e7d1      	b.n	800ec9c <_scanf_float+0x188>
 800ecf8:	b97d      	cbnz	r5, 800ed1a <_scanf_float+0x206>
 800ecfa:	f1b9 0f00 	cmp.w	r9, #0
 800ecfe:	f47f af3c 	bne.w	800eb7a <_scanf_float+0x66>
 800ed02:	6822      	ldr	r2, [r4, #0]
 800ed04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ed08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ed0c:	f47f af39 	bne.w	800eb82 <_scanf_float+0x6e>
 800ed10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ed14:	6022      	str	r2, [r4, #0]
 800ed16:	2501      	movs	r5, #1
 800ed18:	e7c0      	b.n	800ec9c <_scanf_float+0x188>
 800ed1a:	2d03      	cmp	r5, #3
 800ed1c:	d0e2      	beq.n	800ece4 <_scanf_float+0x1d0>
 800ed1e:	2d05      	cmp	r5, #5
 800ed20:	e7de      	b.n	800ece0 <_scanf_float+0x1cc>
 800ed22:	2d02      	cmp	r5, #2
 800ed24:	f47f af26 	bne.w	800eb74 <_scanf_float+0x60>
 800ed28:	2503      	movs	r5, #3
 800ed2a:	e7b7      	b.n	800ec9c <_scanf_float+0x188>
 800ed2c:	2d06      	cmp	r5, #6
 800ed2e:	f47f af21 	bne.w	800eb74 <_scanf_float+0x60>
 800ed32:	2507      	movs	r5, #7
 800ed34:	e7b2      	b.n	800ec9c <_scanf_float+0x188>
 800ed36:	6822      	ldr	r2, [r4, #0]
 800ed38:	0591      	lsls	r1, r2, #22
 800ed3a:	f57f af1b 	bpl.w	800eb74 <_scanf_float+0x60>
 800ed3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ed42:	6022      	str	r2, [r4, #0]
 800ed44:	f8cd 9004 	str.w	r9, [sp, #4]
 800ed48:	e7a8      	b.n	800ec9c <_scanf_float+0x188>
 800ed4a:	6822      	ldr	r2, [r4, #0]
 800ed4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ed50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ed54:	d006      	beq.n	800ed64 <_scanf_float+0x250>
 800ed56:	0550      	lsls	r0, r2, #21
 800ed58:	f57f af0c 	bpl.w	800eb74 <_scanf_float+0x60>
 800ed5c:	f1b9 0f00 	cmp.w	r9, #0
 800ed60:	f43f af0f 	beq.w	800eb82 <_scanf_float+0x6e>
 800ed64:	0591      	lsls	r1, r2, #22
 800ed66:	bf58      	it	pl
 800ed68:	9901      	ldrpl	r1, [sp, #4]
 800ed6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ed6e:	bf58      	it	pl
 800ed70:	eba9 0101 	subpl.w	r1, r9, r1
 800ed74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ed78:	bf58      	it	pl
 800ed7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ed7e:	6022      	str	r2, [r4, #0]
 800ed80:	f04f 0900 	mov.w	r9, #0
 800ed84:	e78a      	b.n	800ec9c <_scanf_float+0x188>
 800ed86:	f04f 0a03 	mov.w	sl, #3
 800ed8a:	e787      	b.n	800ec9c <_scanf_float+0x188>
 800ed8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ed90:	4639      	mov	r1, r7
 800ed92:	4640      	mov	r0, r8
 800ed94:	4798      	blx	r3
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f43f aedf 	beq.w	800eb5a <_scanf_float+0x46>
 800ed9c:	e6ea      	b.n	800eb74 <_scanf_float+0x60>
 800ed9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eda2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eda6:	463a      	mov	r2, r7
 800eda8:	4640      	mov	r0, r8
 800edaa:	4798      	blx	r3
 800edac:	6923      	ldr	r3, [r4, #16]
 800edae:	3b01      	subs	r3, #1
 800edb0:	6123      	str	r3, [r4, #16]
 800edb2:	e6ec      	b.n	800eb8e <_scanf_float+0x7a>
 800edb4:	1e6b      	subs	r3, r5, #1
 800edb6:	2b06      	cmp	r3, #6
 800edb8:	d825      	bhi.n	800ee06 <_scanf_float+0x2f2>
 800edba:	2d02      	cmp	r5, #2
 800edbc:	d836      	bhi.n	800ee2c <_scanf_float+0x318>
 800edbe:	455e      	cmp	r6, fp
 800edc0:	f67f aee8 	bls.w	800eb94 <_scanf_float+0x80>
 800edc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800edc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800edcc:	463a      	mov	r2, r7
 800edce:	4640      	mov	r0, r8
 800edd0:	4798      	blx	r3
 800edd2:	6923      	ldr	r3, [r4, #16]
 800edd4:	3b01      	subs	r3, #1
 800edd6:	6123      	str	r3, [r4, #16]
 800edd8:	e7f1      	b.n	800edbe <_scanf_float+0x2aa>
 800edda:	9802      	ldr	r0, [sp, #8]
 800eddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ede0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ede4:	9002      	str	r0, [sp, #8]
 800ede6:	463a      	mov	r2, r7
 800ede8:	4640      	mov	r0, r8
 800edea:	4798      	blx	r3
 800edec:	6923      	ldr	r3, [r4, #16]
 800edee:	3b01      	subs	r3, #1
 800edf0:	6123      	str	r3, [r4, #16]
 800edf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edf6:	fa5f fa8a 	uxtb.w	sl, sl
 800edfa:	f1ba 0f02 	cmp.w	sl, #2
 800edfe:	d1ec      	bne.n	800edda <_scanf_float+0x2c6>
 800ee00:	3d03      	subs	r5, #3
 800ee02:	b2ed      	uxtb	r5, r5
 800ee04:	1b76      	subs	r6, r6, r5
 800ee06:	6823      	ldr	r3, [r4, #0]
 800ee08:	05da      	lsls	r2, r3, #23
 800ee0a:	d52f      	bpl.n	800ee6c <_scanf_float+0x358>
 800ee0c:	055b      	lsls	r3, r3, #21
 800ee0e:	d510      	bpl.n	800ee32 <_scanf_float+0x31e>
 800ee10:	455e      	cmp	r6, fp
 800ee12:	f67f aebf 	bls.w	800eb94 <_scanf_float+0x80>
 800ee16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ee1e:	463a      	mov	r2, r7
 800ee20:	4640      	mov	r0, r8
 800ee22:	4798      	blx	r3
 800ee24:	6923      	ldr	r3, [r4, #16]
 800ee26:	3b01      	subs	r3, #1
 800ee28:	6123      	str	r3, [r4, #16]
 800ee2a:	e7f1      	b.n	800ee10 <_scanf_float+0x2fc>
 800ee2c:	46aa      	mov	sl, r5
 800ee2e:	9602      	str	r6, [sp, #8]
 800ee30:	e7df      	b.n	800edf2 <_scanf_float+0x2de>
 800ee32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ee36:	6923      	ldr	r3, [r4, #16]
 800ee38:	2965      	cmp	r1, #101	; 0x65
 800ee3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee3e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ee42:	6123      	str	r3, [r4, #16]
 800ee44:	d00c      	beq.n	800ee60 <_scanf_float+0x34c>
 800ee46:	2945      	cmp	r1, #69	; 0x45
 800ee48:	d00a      	beq.n	800ee60 <_scanf_float+0x34c>
 800ee4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee4e:	463a      	mov	r2, r7
 800ee50:	4640      	mov	r0, r8
 800ee52:	4798      	blx	r3
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	1eb5      	subs	r5, r6, #2
 800ee5e:	6123      	str	r3, [r4, #16]
 800ee60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee64:	463a      	mov	r2, r7
 800ee66:	4640      	mov	r0, r8
 800ee68:	4798      	blx	r3
 800ee6a:	462e      	mov	r6, r5
 800ee6c:	6825      	ldr	r5, [r4, #0]
 800ee6e:	f015 0510 	ands.w	r5, r5, #16
 800ee72:	d14e      	bne.n	800ef12 <_scanf_float+0x3fe>
 800ee74:	7035      	strb	r5, [r6, #0]
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ee7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee80:	d119      	bne.n	800eeb6 <_scanf_float+0x3a2>
 800ee82:	9b01      	ldr	r3, [sp, #4]
 800ee84:	454b      	cmp	r3, r9
 800ee86:	eba3 0209 	sub.w	r2, r3, r9
 800ee8a:	d121      	bne.n	800eed0 <_scanf_float+0x3bc>
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4659      	mov	r1, fp
 800ee90:	4640      	mov	r0, r8
 800ee92:	f000 fee3 	bl	800fc5c <_strtod_r>
 800ee96:	6822      	ldr	r2, [r4, #0]
 800ee98:	9b03      	ldr	r3, [sp, #12]
 800ee9a:	f012 0f02 	tst.w	r2, #2
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	d021      	beq.n	800eee6 <_scanf_float+0x3d2>
 800eea2:	9903      	ldr	r1, [sp, #12]
 800eea4:	1d1a      	adds	r2, r3, #4
 800eea6:	600a      	str	r2, [r1, #0]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	ed83 0b00 	vstr	d0, [r3]
 800eeae:	68e3      	ldr	r3, [r4, #12]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	60e3      	str	r3, [r4, #12]
 800eeb4:	e66f      	b.n	800eb96 <_scanf_float+0x82>
 800eeb6:	9b04      	ldr	r3, [sp, #16]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d0e7      	beq.n	800ee8c <_scanf_float+0x378>
 800eebc:	9905      	ldr	r1, [sp, #20]
 800eebe:	230a      	movs	r3, #10
 800eec0:	462a      	mov	r2, r5
 800eec2:	3101      	adds	r1, #1
 800eec4:	4640      	mov	r0, r8
 800eec6:	f000 ff51 	bl	800fd6c <_strtol_r>
 800eeca:	9b04      	ldr	r3, [sp, #16]
 800eecc:	9e05      	ldr	r6, [sp, #20]
 800eece:	1ac2      	subs	r2, r0, r3
 800eed0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eed4:	429e      	cmp	r6, r3
 800eed6:	bf28      	it	cs
 800eed8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800eedc:	490e      	ldr	r1, [pc, #56]	; (800ef18 <_scanf_float+0x404>)
 800eede:	4630      	mov	r0, r6
 800eee0:	f000 f858 	bl	800ef94 <siprintf>
 800eee4:	e7d2      	b.n	800ee8c <_scanf_float+0x378>
 800eee6:	9903      	ldr	r1, [sp, #12]
 800eee8:	f012 0f04 	tst.w	r2, #4
 800eeec:	f103 0204 	add.w	r2, r3, #4
 800eef0:	600a      	str	r2, [r1, #0]
 800eef2:	d1d9      	bne.n	800eea8 <_scanf_float+0x394>
 800eef4:	eeb4 0b40 	vcmp.f64	d0, d0
 800eef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefc:	681e      	ldr	r6, [r3, #0]
 800eefe:	d705      	bvc.n	800ef0c <_scanf_float+0x3f8>
 800ef00:	4806      	ldr	r0, [pc, #24]	; (800ef1c <_scanf_float+0x408>)
 800ef02:	f000 f80d 	bl	800ef20 <nanf>
 800ef06:	ed86 0a00 	vstr	s0, [r6]
 800ef0a:	e7d0      	b.n	800eeae <_scanf_float+0x39a>
 800ef0c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ef10:	e7f9      	b.n	800ef06 <_scanf_float+0x3f2>
 800ef12:	2500      	movs	r5, #0
 800ef14:	e63f      	b.n	800eb96 <_scanf_float+0x82>
 800ef16:	bf00      	nop
 800ef18:	0801435a 	.word	0x0801435a
 800ef1c:	0801477b 	.word	0x0801477b

0800ef20 <nanf>:
 800ef20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ef28 <nanf+0x8>
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	7fc00000 	.word	0x7fc00000

0800ef2c <sniprintf>:
 800ef2c:	b40c      	push	{r2, r3}
 800ef2e:	b530      	push	{r4, r5, lr}
 800ef30:	4b17      	ldr	r3, [pc, #92]	; (800ef90 <sniprintf+0x64>)
 800ef32:	1e0c      	subs	r4, r1, #0
 800ef34:	681d      	ldr	r5, [r3, #0]
 800ef36:	b09d      	sub	sp, #116	; 0x74
 800ef38:	da08      	bge.n	800ef4c <sniprintf+0x20>
 800ef3a:	238b      	movs	r3, #139	; 0x8b
 800ef3c:	602b      	str	r3, [r5, #0]
 800ef3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef42:	b01d      	add	sp, #116	; 0x74
 800ef44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef48:	b002      	add	sp, #8
 800ef4a:	4770      	bx	lr
 800ef4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef50:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef54:	bf14      	ite	ne
 800ef56:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef5a:	4623      	moveq	r3, r4
 800ef5c:	9304      	str	r3, [sp, #16]
 800ef5e:	9307      	str	r3, [sp, #28]
 800ef60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef64:	9002      	str	r0, [sp, #8]
 800ef66:	9006      	str	r0, [sp, #24]
 800ef68:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef6e:	ab21      	add	r3, sp, #132	; 0x84
 800ef70:	a902      	add	r1, sp, #8
 800ef72:	4628      	mov	r0, r5
 800ef74:	9301      	str	r3, [sp, #4]
 800ef76:	f002 ff01 	bl	8011d7c <_svfiprintf_r>
 800ef7a:	1c43      	adds	r3, r0, #1
 800ef7c:	bfbc      	itt	lt
 800ef7e:	238b      	movlt	r3, #139	; 0x8b
 800ef80:	602b      	strlt	r3, [r5, #0]
 800ef82:	2c00      	cmp	r4, #0
 800ef84:	d0dd      	beq.n	800ef42 <sniprintf+0x16>
 800ef86:	9b02      	ldr	r3, [sp, #8]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	701a      	strb	r2, [r3, #0]
 800ef8c:	e7d9      	b.n	800ef42 <sniprintf+0x16>
 800ef8e:	bf00      	nop
 800ef90:	24000024 	.word	0x24000024

0800ef94 <siprintf>:
 800ef94:	b40e      	push	{r1, r2, r3}
 800ef96:	b500      	push	{lr}
 800ef98:	b09c      	sub	sp, #112	; 0x70
 800ef9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ef9c:	9002      	str	r0, [sp, #8]
 800ef9e:	9006      	str	r0, [sp, #24]
 800efa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efa4:	4809      	ldr	r0, [pc, #36]	; (800efcc <siprintf+0x38>)
 800efa6:	9107      	str	r1, [sp, #28]
 800efa8:	9104      	str	r1, [sp, #16]
 800efaa:	4909      	ldr	r1, [pc, #36]	; (800efd0 <siprintf+0x3c>)
 800efac:	f853 2b04 	ldr.w	r2, [r3], #4
 800efb0:	9105      	str	r1, [sp, #20]
 800efb2:	6800      	ldr	r0, [r0, #0]
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	a902      	add	r1, sp, #8
 800efb8:	f002 fee0 	bl	8011d7c <_svfiprintf_r>
 800efbc:	9b02      	ldr	r3, [sp, #8]
 800efbe:	2200      	movs	r2, #0
 800efc0:	701a      	strb	r2, [r3, #0]
 800efc2:	b01c      	add	sp, #112	; 0x70
 800efc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800efc8:	b003      	add	sp, #12
 800efca:	4770      	bx	lr
 800efcc:	24000024 	.word	0x24000024
 800efd0:	ffff0208 	.word	0xffff0208

0800efd4 <siscanf>:
 800efd4:	b40e      	push	{r1, r2, r3}
 800efd6:	b510      	push	{r4, lr}
 800efd8:	b09f      	sub	sp, #124	; 0x7c
 800efda:	ac21      	add	r4, sp, #132	; 0x84
 800efdc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800efe0:	f854 2b04 	ldr.w	r2, [r4], #4
 800efe4:	9201      	str	r2, [sp, #4]
 800efe6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800efea:	9004      	str	r0, [sp, #16]
 800efec:	9008      	str	r0, [sp, #32]
 800efee:	f7f1 f977 	bl	80002e0 <strlen>
 800eff2:	4b0c      	ldr	r3, [pc, #48]	; (800f024 <siscanf+0x50>)
 800eff4:	9005      	str	r0, [sp, #20]
 800eff6:	9009      	str	r0, [sp, #36]	; 0x24
 800eff8:	930d      	str	r3, [sp, #52]	; 0x34
 800effa:	480b      	ldr	r0, [pc, #44]	; (800f028 <siscanf+0x54>)
 800effc:	9a01      	ldr	r2, [sp, #4]
 800effe:	6800      	ldr	r0, [r0, #0]
 800f000:	9403      	str	r4, [sp, #12]
 800f002:	2300      	movs	r3, #0
 800f004:	9311      	str	r3, [sp, #68]	; 0x44
 800f006:	9316      	str	r3, [sp, #88]	; 0x58
 800f008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f00c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f010:	a904      	add	r1, sp, #16
 800f012:	4623      	mov	r3, r4
 800f014:	f003 f80c 	bl	8012030 <__ssvfiscanf_r>
 800f018:	b01f      	add	sp, #124	; 0x7c
 800f01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f01e:	b003      	add	sp, #12
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	0800f04f 	.word	0x0800f04f
 800f028:	24000024 	.word	0x24000024

0800f02c <__sread>:
 800f02c:	b510      	push	{r4, lr}
 800f02e:	460c      	mov	r4, r1
 800f030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f034:	f003 fac6 	bl	80125c4 <_read_r>
 800f038:	2800      	cmp	r0, #0
 800f03a:	bfab      	itete	ge
 800f03c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f03e:	89a3      	ldrhlt	r3, [r4, #12]
 800f040:	181b      	addge	r3, r3, r0
 800f042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f046:	bfac      	ite	ge
 800f048:	6563      	strge	r3, [r4, #84]	; 0x54
 800f04a:	81a3      	strhlt	r3, [r4, #12]
 800f04c:	bd10      	pop	{r4, pc}

0800f04e <__seofread>:
 800f04e:	2000      	movs	r0, #0
 800f050:	4770      	bx	lr

0800f052 <__swrite>:
 800f052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f056:	461f      	mov	r7, r3
 800f058:	898b      	ldrh	r3, [r1, #12]
 800f05a:	05db      	lsls	r3, r3, #23
 800f05c:	4605      	mov	r5, r0
 800f05e:	460c      	mov	r4, r1
 800f060:	4616      	mov	r6, r2
 800f062:	d505      	bpl.n	800f070 <__swrite+0x1e>
 800f064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f068:	2302      	movs	r3, #2
 800f06a:	2200      	movs	r2, #0
 800f06c:	f002 f84a 	bl	8011104 <_lseek_r>
 800f070:	89a3      	ldrh	r3, [r4, #12]
 800f072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f07a:	81a3      	strh	r3, [r4, #12]
 800f07c:	4632      	mov	r2, r6
 800f07e:	463b      	mov	r3, r7
 800f080:	4628      	mov	r0, r5
 800f082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f086:	f000 bead 	b.w	800fde4 <_write_r>

0800f08a <__sseek>:
 800f08a:	b510      	push	{r4, lr}
 800f08c:	460c      	mov	r4, r1
 800f08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f092:	f002 f837 	bl	8011104 <_lseek_r>
 800f096:	1c43      	adds	r3, r0, #1
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	bf15      	itete	ne
 800f09c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f09e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0a6:	81a3      	strheq	r3, [r4, #12]
 800f0a8:	bf18      	it	ne
 800f0aa:	81a3      	strhne	r3, [r4, #12]
 800f0ac:	bd10      	pop	{r4, pc}

0800f0ae <__sclose>:
 800f0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b2:	f000 bea9 	b.w	800fe08 <_close_r>

0800f0b6 <sulp>:
 800f0b6:	b570      	push	{r4, r5, r6, lr}
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	460d      	mov	r5, r1
 800f0bc:	4616      	mov	r6, r2
 800f0be:	ec45 4b10 	vmov	d0, r4, r5
 800f0c2:	f002 fbbd 	bl	8011840 <__ulp>
 800f0c6:	b17e      	cbz	r6, 800f0e8 <sulp+0x32>
 800f0c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f0cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	dd09      	ble.n	800f0e8 <sulp+0x32>
 800f0d4:	051b      	lsls	r3, r3, #20
 800f0d6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f0da:	2000      	movs	r0, #0
 800f0dc:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f0e0:	ec41 0b17 	vmov	d7, r0, r1
 800f0e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f0e8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ea:	0000      	movs	r0, r0
 800f0ec:	0000      	movs	r0, r0
	...

0800f0f0 <_strtod_l>:
 800f0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f4:	ed2d 8b0e 	vpush	{d8-d14}
 800f0f8:	b097      	sub	sp, #92	; 0x5c
 800f0fa:	461f      	mov	r7, r3
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	9312      	str	r3, [sp, #72]	; 0x48
 800f100:	4ba1      	ldr	r3, [pc, #644]	; (800f388 <_strtod_l+0x298>)
 800f102:	920d      	str	r2, [sp, #52]	; 0x34
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	9307      	str	r3, [sp, #28]
 800f108:	4604      	mov	r4, r0
 800f10a:	4618      	mov	r0, r3
 800f10c:	468b      	mov	fp, r1
 800f10e:	f7f1 f8e7 	bl	80002e0 <strlen>
 800f112:	f04f 0800 	mov.w	r8, #0
 800f116:	4605      	mov	r5, r0
 800f118:	f04f 0900 	mov.w	r9, #0
 800f11c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f120:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f122:	7813      	ldrb	r3, [r2, #0]
 800f124:	2b2b      	cmp	r3, #43	; 0x2b
 800f126:	d04d      	beq.n	800f1c4 <_strtod_l+0xd4>
 800f128:	d83a      	bhi.n	800f1a0 <_strtod_l+0xb0>
 800f12a:	2b0d      	cmp	r3, #13
 800f12c:	d833      	bhi.n	800f196 <_strtod_l+0xa6>
 800f12e:	2b08      	cmp	r3, #8
 800f130:	d833      	bhi.n	800f19a <_strtod_l+0xaa>
 800f132:	2b00      	cmp	r3, #0
 800f134:	d03d      	beq.n	800f1b2 <_strtod_l+0xc2>
 800f136:	2300      	movs	r3, #0
 800f138:	9308      	str	r3, [sp, #32]
 800f13a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f13c:	7833      	ldrb	r3, [r6, #0]
 800f13e:	2b30      	cmp	r3, #48	; 0x30
 800f140:	f040 80b0 	bne.w	800f2a4 <_strtod_l+0x1b4>
 800f144:	7873      	ldrb	r3, [r6, #1]
 800f146:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f14a:	2b58      	cmp	r3, #88	; 0x58
 800f14c:	d167      	bne.n	800f21e <_strtod_l+0x12e>
 800f14e:	9b08      	ldr	r3, [sp, #32]
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	ab12      	add	r3, sp, #72	; 0x48
 800f154:	9702      	str	r7, [sp, #8]
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	4a8c      	ldr	r2, [pc, #560]	; (800f38c <_strtod_l+0x29c>)
 800f15a:	ab13      	add	r3, sp, #76	; 0x4c
 800f15c:	a911      	add	r1, sp, #68	; 0x44
 800f15e:	4620      	mov	r0, r4
 800f160:	f001 fcc4 	bl	8010aec <__gethex>
 800f164:	f010 0507 	ands.w	r5, r0, #7
 800f168:	4607      	mov	r7, r0
 800f16a:	d005      	beq.n	800f178 <_strtod_l+0x88>
 800f16c:	2d06      	cmp	r5, #6
 800f16e:	d12b      	bne.n	800f1c8 <_strtod_l+0xd8>
 800f170:	3601      	adds	r6, #1
 800f172:	2300      	movs	r3, #0
 800f174:	9611      	str	r6, [sp, #68]	; 0x44
 800f176:	9308      	str	r3, [sp, #32]
 800f178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f040 854e 	bne.w	800fc1c <_strtod_l+0xb2c>
 800f180:	9b08      	ldr	r3, [sp, #32]
 800f182:	b1e3      	cbz	r3, 800f1be <_strtod_l+0xce>
 800f184:	ec49 8b17 	vmov	d7, r8, r9
 800f188:	eeb1 0b47 	vneg.f64	d0, d7
 800f18c:	b017      	add	sp, #92	; 0x5c
 800f18e:	ecbd 8b0e 	vpop	{d8-d14}
 800f192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f196:	2b20      	cmp	r3, #32
 800f198:	d1cd      	bne.n	800f136 <_strtod_l+0x46>
 800f19a:	3201      	adds	r2, #1
 800f19c:	9211      	str	r2, [sp, #68]	; 0x44
 800f19e:	e7bf      	b.n	800f120 <_strtod_l+0x30>
 800f1a0:	2b2d      	cmp	r3, #45	; 0x2d
 800f1a2:	d1c8      	bne.n	800f136 <_strtod_l+0x46>
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	9308      	str	r3, [sp, #32]
 800f1a8:	1c53      	adds	r3, r2, #1
 800f1aa:	9311      	str	r3, [sp, #68]	; 0x44
 800f1ac:	7853      	ldrb	r3, [r2, #1]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1c3      	bne.n	800f13a <_strtod_l+0x4a>
 800f1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1b4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f040 852d 	bne.w	800fc18 <_strtod_l+0xb28>
 800f1be:	ec49 8b10 	vmov	d0, r8, r9
 800f1c2:	e7e3      	b.n	800f18c <_strtod_l+0x9c>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	e7ee      	b.n	800f1a6 <_strtod_l+0xb6>
 800f1c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1ca:	b13a      	cbz	r2, 800f1dc <_strtod_l+0xec>
 800f1cc:	2135      	movs	r1, #53	; 0x35
 800f1ce:	a814      	add	r0, sp, #80	; 0x50
 800f1d0:	f002 fc3e 	bl	8011a50 <__copybits>
 800f1d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f002 f800 	bl	80111dc <_Bfree>
 800f1dc:	3d01      	subs	r5, #1
 800f1de:	2d04      	cmp	r5, #4
 800f1e0:	d806      	bhi.n	800f1f0 <_strtod_l+0x100>
 800f1e2:	e8df f005 	tbb	[pc, r5]
 800f1e6:	030a      	.short	0x030a
 800f1e8:	1714      	.short	0x1714
 800f1ea:	0a          	.byte	0x0a
 800f1eb:	00          	.byte	0x00
 800f1ec:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f1f0:	073f      	lsls	r7, r7, #28
 800f1f2:	d5c1      	bpl.n	800f178 <_strtod_l+0x88>
 800f1f4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f1f8:	e7be      	b.n	800f178 <_strtod_l+0x88>
 800f1fa:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f1fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f200:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f204:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f208:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f20c:	e7f0      	b.n	800f1f0 <_strtod_l+0x100>
 800f20e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f390 <_strtod_l+0x2a0>
 800f212:	e7ed      	b.n	800f1f0 <_strtod_l+0x100>
 800f214:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f218:	f04f 38ff 	mov.w	r8, #4294967295
 800f21c:	e7e8      	b.n	800f1f0 <_strtod_l+0x100>
 800f21e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f220:	1c5a      	adds	r2, r3, #1
 800f222:	9211      	str	r2, [sp, #68]	; 0x44
 800f224:	785b      	ldrb	r3, [r3, #1]
 800f226:	2b30      	cmp	r3, #48	; 0x30
 800f228:	d0f9      	beq.n	800f21e <_strtod_l+0x12e>
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d0a4      	beq.n	800f178 <_strtod_l+0x88>
 800f22e:	2301      	movs	r3, #1
 800f230:	f04f 0a00 	mov.w	sl, #0
 800f234:	9304      	str	r3, [sp, #16]
 800f236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f238:	930a      	str	r3, [sp, #40]	; 0x28
 800f23a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f23e:	f8cd a018 	str.w	sl, [sp, #24]
 800f242:	220a      	movs	r2, #10
 800f244:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f246:	7807      	ldrb	r7, [r0, #0]
 800f248:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f24c:	b2d9      	uxtb	r1, r3
 800f24e:	2909      	cmp	r1, #9
 800f250:	d92a      	bls.n	800f2a8 <_strtod_l+0x1b8>
 800f252:	9907      	ldr	r1, [sp, #28]
 800f254:	462a      	mov	r2, r5
 800f256:	f003 fa17 	bl	8012688 <strncmp>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d033      	beq.n	800f2c6 <_strtod_l+0x1d6>
 800f25e:	2000      	movs	r0, #0
 800f260:	9b06      	ldr	r3, [sp, #24]
 800f262:	463a      	mov	r2, r7
 800f264:	4601      	mov	r1, r0
 800f266:	4607      	mov	r7, r0
 800f268:	2a65      	cmp	r2, #101	; 0x65
 800f26a:	d001      	beq.n	800f270 <_strtod_l+0x180>
 800f26c:	2a45      	cmp	r2, #69	; 0x45
 800f26e:	d117      	bne.n	800f2a0 <_strtod_l+0x1b0>
 800f270:	b91b      	cbnz	r3, 800f27a <_strtod_l+0x18a>
 800f272:	9b04      	ldr	r3, [sp, #16]
 800f274:	4303      	orrs	r3, r0
 800f276:	d09c      	beq.n	800f1b2 <_strtod_l+0xc2>
 800f278:	2300      	movs	r3, #0
 800f27a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f27e:	f10b 0201 	add.w	r2, fp, #1
 800f282:	9211      	str	r2, [sp, #68]	; 0x44
 800f284:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f288:	2a2b      	cmp	r2, #43	; 0x2b
 800f28a:	d071      	beq.n	800f370 <_strtod_l+0x280>
 800f28c:	2a2d      	cmp	r2, #45	; 0x2d
 800f28e:	d077      	beq.n	800f380 <_strtod_l+0x290>
 800f290:	f04f 0e00 	mov.w	lr, #0
 800f294:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f298:	2d09      	cmp	r5, #9
 800f29a:	d97f      	bls.n	800f39c <_strtod_l+0x2ac>
 800f29c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f2a0:	2500      	movs	r5, #0
 800f2a2:	e09b      	b.n	800f3dc <_strtod_l+0x2ec>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	e7c3      	b.n	800f230 <_strtod_l+0x140>
 800f2a8:	9906      	ldr	r1, [sp, #24]
 800f2aa:	2908      	cmp	r1, #8
 800f2ac:	bfdd      	ittte	le
 800f2ae:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f2b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800f2b4:	9309      	strle	r3, [sp, #36]	; 0x24
 800f2b6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f2ba:	9b06      	ldr	r3, [sp, #24]
 800f2bc:	3001      	adds	r0, #1
 800f2be:	3301      	adds	r3, #1
 800f2c0:	9306      	str	r3, [sp, #24]
 800f2c2:	9011      	str	r0, [sp, #68]	; 0x44
 800f2c4:	e7be      	b.n	800f244 <_strtod_l+0x154>
 800f2c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2c8:	195a      	adds	r2, r3, r5
 800f2ca:	9211      	str	r2, [sp, #68]	; 0x44
 800f2cc:	5d5a      	ldrb	r2, [r3, r5]
 800f2ce:	9b06      	ldr	r3, [sp, #24]
 800f2d0:	b3a3      	cbz	r3, 800f33c <_strtod_l+0x24c>
 800f2d2:	4607      	mov	r7, r0
 800f2d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f2d8:	2909      	cmp	r1, #9
 800f2da:	d912      	bls.n	800f302 <_strtod_l+0x212>
 800f2dc:	2101      	movs	r1, #1
 800f2de:	e7c3      	b.n	800f268 <_strtod_l+0x178>
 800f2e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	9211      	str	r2, [sp, #68]	; 0x44
 800f2e6:	785a      	ldrb	r2, [r3, #1]
 800f2e8:	3001      	adds	r0, #1
 800f2ea:	2a30      	cmp	r2, #48	; 0x30
 800f2ec:	d0f8      	beq.n	800f2e0 <_strtod_l+0x1f0>
 800f2ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f2f2:	2b08      	cmp	r3, #8
 800f2f4:	f200 8497 	bhi.w	800fc26 <_strtod_l+0xb36>
 800f2f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800f2fc:	4607      	mov	r7, r0
 800f2fe:	2000      	movs	r0, #0
 800f300:	4603      	mov	r3, r0
 800f302:	3a30      	subs	r2, #48	; 0x30
 800f304:	f100 0101 	add.w	r1, r0, #1
 800f308:	d012      	beq.n	800f330 <_strtod_l+0x240>
 800f30a:	440f      	add	r7, r1
 800f30c:	eb00 0c03 	add.w	ip, r0, r3
 800f310:	4619      	mov	r1, r3
 800f312:	250a      	movs	r5, #10
 800f314:	4561      	cmp	r1, ip
 800f316:	d113      	bne.n	800f340 <_strtod_l+0x250>
 800f318:	1819      	adds	r1, r3, r0
 800f31a:	2908      	cmp	r1, #8
 800f31c:	f103 0301 	add.w	r3, r3, #1
 800f320:	4403      	add	r3, r0
 800f322:	dc1c      	bgt.n	800f35e <_strtod_l+0x26e>
 800f324:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f326:	210a      	movs	r1, #10
 800f328:	fb01 2200 	mla	r2, r1, r0, r2
 800f32c:	9209      	str	r2, [sp, #36]	; 0x24
 800f32e:	2100      	movs	r1, #0
 800f330:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f332:	1c50      	adds	r0, r2, #1
 800f334:	9011      	str	r0, [sp, #68]	; 0x44
 800f336:	7852      	ldrb	r2, [r2, #1]
 800f338:	4608      	mov	r0, r1
 800f33a:	e7cb      	b.n	800f2d4 <_strtod_l+0x1e4>
 800f33c:	9806      	ldr	r0, [sp, #24]
 800f33e:	e7d4      	b.n	800f2ea <_strtod_l+0x1fa>
 800f340:	2908      	cmp	r1, #8
 800f342:	dc04      	bgt.n	800f34e <_strtod_l+0x25e>
 800f344:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f346:	436e      	muls	r6, r5
 800f348:	9609      	str	r6, [sp, #36]	; 0x24
 800f34a:	3101      	adds	r1, #1
 800f34c:	e7e2      	b.n	800f314 <_strtod_l+0x224>
 800f34e:	f101 0e01 	add.w	lr, r1, #1
 800f352:	f1be 0f10 	cmp.w	lr, #16
 800f356:	bfd8      	it	le
 800f358:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f35c:	e7f5      	b.n	800f34a <_strtod_l+0x25a>
 800f35e:	2b10      	cmp	r3, #16
 800f360:	bfdc      	itt	le
 800f362:	210a      	movle	r1, #10
 800f364:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f368:	e7e1      	b.n	800f32e <_strtod_l+0x23e>
 800f36a:	2700      	movs	r7, #0
 800f36c:	2101      	movs	r1, #1
 800f36e:	e780      	b.n	800f272 <_strtod_l+0x182>
 800f370:	f04f 0e00 	mov.w	lr, #0
 800f374:	f10b 0202 	add.w	r2, fp, #2
 800f378:	9211      	str	r2, [sp, #68]	; 0x44
 800f37a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f37e:	e789      	b.n	800f294 <_strtod_l+0x1a4>
 800f380:	f04f 0e01 	mov.w	lr, #1
 800f384:	e7f6      	b.n	800f374 <_strtod_l+0x284>
 800f386:	bf00      	nop
 800f388:	080145a8 	.word	0x080145a8
 800f38c:	08014360 	.word	0x08014360
 800f390:	7ff00000 	.word	0x7ff00000
 800f394:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f396:	1c55      	adds	r5, r2, #1
 800f398:	9511      	str	r5, [sp, #68]	; 0x44
 800f39a:	7852      	ldrb	r2, [r2, #1]
 800f39c:	2a30      	cmp	r2, #48	; 0x30
 800f39e:	d0f9      	beq.n	800f394 <_strtod_l+0x2a4>
 800f3a0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f3a4:	2d08      	cmp	r5, #8
 800f3a6:	f63f af7b 	bhi.w	800f2a0 <_strtod_l+0x1b0>
 800f3aa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f3ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f3b0:	9207      	str	r2, [sp, #28]
 800f3b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f3b4:	1c55      	adds	r5, r2, #1
 800f3b6:	9511      	str	r5, [sp, #68]	; 0x44
 800f3b8:	7852      	ldrb	r2, [r2, #1]
 800f3ba:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f3be:	2e09      	cmp	r6, #9
 800f3c0:	d937      	bls.n	800f432 <_strtod_l+0x342>
 800f3c2:	9e07      	ldr	r6, [sp, #28]
 800f3c4:	1bad      	subs	r5, r5, r6
 800f3c6:	2d08      	cmp	r5, #8
 800f3c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f3cc:	dc02      	bgt.n	800f3d4 <_strtod_l+0x2e4>
 800f3ce:	4565      	cmp	r5, ip
 800f3d0:	bfa8      	it	ge
 800f3d2:	4665      	movge	r5, ip
 800f3d4:	f1be 0f00 	cmp.w	lr, #0
 800f3d8:	d000      	beq.n	800f3dc <_strtod_l+0x2ec>
 800f3da:	426d      	negs	r5, r5
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d14d      	bne.n	800f47c <_strtod_l+0x38c>
 800f3e0:	9b04      	ldr	r3, [sp, #16]
 800f3e2:	4303      	orrs	r3, r0
 800f3e4:	f47f aec8 	bne.w	800f178 <_strtod_l+0x88>
 800f3e8:	2900      	cmp	r1, #0
 800f3ea:	f47f aee2 	bne.w	800f1b2 <_strtod_l+0xc2>
 800f3ee:	2a69      	cmp	r2, #105	; 0x69
 800f3f0:	d027      	beq.n	800f442 <_strtod_l+0x352>
 800f3f2:	dc24      	bgt.n	800f43e <_strtod_l+0x34e>
 800f3f4:	2a49      	cmp	r2, #73	; 0x49
 800f3f6:	d024      	beq.n	800f442 <_strtod_l+0x352>
 800f3f8:	2a4e      	cmp	r2, #78	; 0x4e
 800f3fa:	f47f aeda 	bne.w	800f1b2 <_strtod_l+0xc2>
 800f3fe:	4996      	ldr	r1, [pc, #600]	; (800f658 <_strtod_l+0x568>)
 800f400:	a811      	add	r0, sp, #68	; 0x44
 800f402:	f001 fdcb 	bl	8010f9c <__match>
 800f406:	2800      	cmp	r0, #0
 800f408:	f43f aed3 	beq.w	800f1b2 <_strtod_l+0xc2>
 800f40c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	2b28      	cmp	r3, #40	; 0x28
 800f412:	d12d      	bne.n	800f470 <_strtod_l+0x380>
 800f414:	4991      	ldr	r1, [pc, #580]	; (800f65c <_strtod_l+0x56c>)
 800f416:	aa14      	add	r2, sp, #80	; 0x50
 800f418:	a811      	add	r0, sp, #68	; 0x44
 800f41a:	f001 fdd3 	bl	8010fc4 <__hexnan>
 800f41e:	2805      	cmp	r0, #5
 800f420:	d126      	bne.n	800f470 <_strtod_l+0x380>
 800f422:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f424:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f428:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f42c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f430:	e6a2      	b.n	800f178 <_strtod_l+0x88>
 800f432:	250a      	movs	r5, #10
 800f434:	fb05 250c 	mla	r5, r5, ip, r2
 800f438:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f43c:	e7b9      	b.n	800f3b2 <_strtod_l+0x2c2>
 800f43e:	2a6e      	cmp	r2, #110	; 0x6e
 800f440:	e7db      	b.n	800f3fa <_strtod_l+0x30a>
 800f442:	4987      	ldr	r1, [pc, #540]	; (800f660 <_strtod_l+0x570>)
 800f444:	a811      	add	r0, sp, #68	; 0x44
 800f446:	f001 fda9 	bl	8010f9c <__match>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	f43f aeb1 	beq.w	800f1b2 <_strtod_l+0xc2>
 800f450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f452:	4984      	ldr	r1, [pc, #528]	; (800f664 <_strtod_l+0x574>)
 800f454:	3b01      	subs	r3, #1
 800f456:	a811      	add	r0, sp, #68	; 0x44
 800f458:	9311      	str	r3, [sp, #68]	; 0x44
 800f45a:	f001 fd9f 	bl	8010f9c <__match>
 800f45e:	b910      	cbnz	r0, 800f466 <_strtod_l+0x376>
 800f460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f462:	3301      	adds	r3, #1
 800f464:	9311      	str	r3, [sp, #68]	; 0x44
 800f466:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f678 <_strtod_l+0x588>
 800f46a:	f04f 0800 	mov.w	r8, #0
 800f46e:	e683      	b.n	800f178 <_strtod_l+0x88>
 800f470:	487d      	ldr	r0, [pc, #500]	; (800f668 <_strtod_l+0x578>)
 800f472:	f003 f8b9 	bl	80125e8 <nan>
 800f476:	ec59 8b10 	vmov	r8, r9, d0
 800f47a:	e67d      	b.n	800f178 <_strtod_l+0x88>
 800f47c:	1bea      	subs	r2, r5, r7
 800f47e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f482:	9207      	str	r2, [sp, #28]
 800f484:	9a06      	ldr	r2, [sp, #24]
 800f486:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f48a:	2a00      	cmp	r2, #0
 800f48c:	bf08      	it	eq
 800f48e:	461a      	moveq	r2, r3
 800f490:	2b10      	cmp	r3, #16
 800f492:	9206      	str	r2, [sp, #24]
 800f494:	461a      	mov	r2, r3
 800f496:	bfa8      	it	ge
 800f498:	2210      	movge	r2, #16
 800f49a:	2b09      	cmp	r3, #9
 800f49c:	ec59 8b17 	vmov	r8, r9, d7
 800f4a0:	dd0c      	ble.n	800f4bc <_strtod_l+0x3cc>
 800f4a2:	4972      	ldr	r1, [pc, #456]	; (800f66c <_strtod_l+0x57c>)
 800f4a4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f4a8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f4ac:	ee06 aa90 	vmov	s13, sl
 800f4b0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f4b4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f4b8:	ec59 8b16 	vmov	r8, r9, d6
 800f4bc:	2b0f      	cmp	r3, #15
 800f4be:	dc36      	bgt.n	800f52e <_strtod_l+0x43e>
 800f4c0:	9907      	ldr	r1, [sp, #28]
 800f4c2:	2900      	cmp	r1, #0
 800f4c4:	f43f ae58 	beq.w	800f178 <_strtod_l+0x88>
 800f4c8:	dd23      	ble.n	800f512 <_strtod_l+0x422>
 800f4ca:	2916      	cmp	r1, #22
 800f4cc:	dc0b      	bgt.n	800f4e6 <_strtod_l+0x3f6>
 800f4ce:	4b67      	ldr	r3, [pc, #412]	; (800f66c <_strtod_l+0x57c>)
 800f4d0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f4d4:	ed93 7b00 	vldr	d7, [r3]
 800f4d8:	ec49 8b16 	vmov	d6, r8, r9
 800f4dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f4e0:	ec59 8b17 	vmov	r8, r9, d7
 800f4e4:	e648      	b.n	800f178 <_strtod_l+0x88>
 800f4e6:	9807      	ldr	r0, [sp, #28]
 800f4e8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f4ec:	4281      	cmp	r1, r0
 800f4ee:	db1e      	blt.n	800f52e <_strtod_l+0x43e>
 800f4f0:	4a5e      	ldr	r2, [pc, #376]	; (800f66c <_strtod_l+0x57c>)
 800f4f2:	f1c3 030f 	rsb	r3, r3, #15
 800f4f6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f4fa:	ed91 7b00 	vldr	d7, [r1]
 800f4fe:	ec49 8b16 	vmov	d6, r8, r9
 800f502:	1ac3      	subs	r3, r0, r3
 800f504:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f508:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f50c:	ed92 6b00 	vldr	d6, [r2]
 800f510:	e7e4      	b.n	800f4dc <_strtod_l+0x3ec>
 800f512:	9907      	ldr	r1, [sp, #28]
 800f514:	3116      	adds	r1, #22
 800f516:	db0a      	blt.n	800f52e <_strtod_l+0x43e>
 800f518:	4b54      	ldr	r3, [pc, #336]	; (800f66c <_strtod_l+0x57c>)
 800f51a:	1b7d      	subs	r5, r7, r5
 800f51c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f520:	ed95 7b00 	vldr	d7, [r5]
 800f524:	ec49 8b16 	vmov	d6, r8, r9
 800f528:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f52c:	e7d8      	b.n	800f4e0 <_strtod_l+0x3f0>
 800f52e:	9907      	ldr	r1, [sp, #28]
 800f530:	1a9a      	subs	r2, r3, r2
 800f532:	440a      	add	r2, r1
 800f534:	2a00      	cmp	r2, #0
 800f536:	dd6f      	ble.n	800f618 <_strtod_l+0x528>
 800f538:	f012 000f 	ands.w	r0, r2, #15
 800f53c:	d00a      	beq.n	800f554 <_strtod_l+0x464>
 800f53e:	494b      	ldr	r1, [pc, #300]	; (800f66c <_strtod_l+0x57c>)
 800f540:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f544:	ed91 7b00 	vldr	d7, [r1]
 800f548:	ec49 8b16 	vmov	d6, r8, r9
 800f54c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f550:	ec59 8b17 	vmov	r8, r9, d7
 800f554:	f032 020f 	bics.w	r2, r2, #15
 800f558:	d04f      	beq.n	800f5fa <_strtod_l+0x50a>
 800f55a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f55e:	dd22      	ble.n	800f5a6 <_strtod_l+0x4b6>
 800f560:	2500      	movs	r5, #0
 800f562:	462e      	mov	r6, r5
 800f564:	9506      	str	r5, [sp, #24]
 800f566:	462f      	mov	r7, r5
 800f568:	2322      	movs	r3, #34	; 0x22
 800f56a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f678 <_strtod_l+0x588>
 800f56e:	6023      	str	r3, [r4, #0]
 800f570:	f04f 0800 	mov.w	r8, #0
 800f574:	9b06      	ldr	r3, [sp, #24]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f43f adfe 	beq.w	800f178 <_strtod_l+0x88>
 800f57c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f57e:	4620      	mov	r0, r4
 800f580:	f001 fe2c 	bl	80111dc <_Bfree>
 800f584:	4639      	mov	r1, r7
 800f586:	4620      	mov	r0, r4
 800f588:	f001 fe28 	bl	80111dc <_Bfree>
 800f58c:	4631      	mov	r1, r6
 800f58e:	4620      	mov	r0, r4
 800f590:	f001 fe24 	bl	80111dc <_Bfree>
 800f594:	9906      	ldr	r1, [sp, #24]
 800f596:	4620      	mov	r0, r4
 800f598:	f001 fe20 	bl	80111dc <_Bfree>
 800f59c:	4629      	mov	r1, r5
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f001 fe1c 	bl	80111dc <_Bfree>
 800f5a4:	e5e8      	b.n	800f178 <_strtod_l+0x88>
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	ec49 8b17 	vmov	d7, r8, r9
 800f5ac:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f670 <_strtod_l+0x580>
 800f5b0:	1112      	asrs	r2, r2, #4
 800f5b2:	4601      	mov	r1, r0
 800f5b4:	2a01      	cmp	r2, #1
 800f5b6:	dc23      	bgt.n	800f600 <_strtod_l+0x510>
 800f5b8:	b108      	cbz	r0, 800f5be <_strtod_l+0x4ce>
 800f5ba:	ec59 8b17 	vmov	r8, r9, d7
 800f5be:	4a2c      	ldr	r2, [pc, #176]	; (800f670 <_strtod_l+0x580>)
 800f5c0:	482c      	ldr	r0, [pc, #176]	; (800f674 <_strtod_l+0x584>)
 800f5c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f5c6:	ed92 7b00 	vldr	d7, [r2]
 800f5ca:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f5ce:	ec49 8b16 	vmov	d6, r8, r9
 800f5d2:	4a29      	ldr	r2, [pc, #164]	; (800f678 <_strtod_l+0x588>)
 800f5d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5d8:	ee17 1a90 	vmov	r1, s15
 800f5dc:	400a      	ands	r2, r1
 800f5de:	4282      	cmp	r2, r0
 800f5e0:	ec59 8b17 	vmov	r8, r9, d7
 800f5e4:	d8bc      	bhi.n	800f560 <_strtod_l+0x470>
 800f5e6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f5ea:	4282      	cmp	r2, r0
 800f5ec:	bf86      	itte	hi
 800f5ee:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f67c <_strtod_l+0x58c>
 800f5f2:	f04f 38ff 	movhi.w	r8, #4294967295
 800f5f6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	9204      	str	r2, [sp, #16]
 800f5fe:	e078      	b.n	800f6f2 <_strtod_l+0x602>
 800f600:	07d6      	lsls	r6, r2, #31
 800f602:	d504      	bpl.n	800f60e <_strtod_l+0x51e>
 800f604:	ed9c 6b00 	vldr	d6, [ip]
 800f608:	2001      	movs	r0, #1
 800f60a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f60e:	3101      	adds	r1, #1
 800f610:	1052      	asrs	r2, r2, #1
 800f612:	f10c 0c08 	add.w	ip, ip, #8
 800f616:	e7cd      	b.n	800f5b4 <_strtod_l+0x4c4>
 800f618:	d0ef      	beq.n	800f5fa <_strtod_l+0x50a>
 800f61a:	4252      	negs	r2, r2
 800f61c:	f012 000f 	ands.w	r0, r2, #15
 800f620:	d00a      	beq.n	800f638 <_strtod_l+0x548>
 800f622:	4912      	ldr	r1, [pc, #72]	; (800f66c <_strtod_l+0x57c>)
 800f624:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f628:	ed91 7b00 	vldr	d7, [r1]
 800f62c:	ec49 8b16 	vmov	d6, r8, r9
 800f630:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f634:	ec59 8b17 	vmov	r8, r9, d7
 800f638:	1112      	asrs	r2, r2, #4
 800f63a:	d0de      	beq.n	800f5fa <_strtod_l+0x50a>
 800f63c:	2a1f      	cmp	r2, #31
 800f63e:	dd1f      	ble.n	800f680 <_strtod_l+0x590>
 800f640:	2500      	movs	r5, #0
 800f642:	462e      	mov	r6, r5
 800f644:	9506      	str	r5, [sp, #24]
 800f646:	462f      	mov	r7, r5
 800f648:	2322      	movs	r3, #34	; 0x22
 800f64a:	f04f 0800 	mov.w	r8, #0
 800f64e:	f04f 0900 	mov.w	r9, #0
 800f652:	6023      	str	r3, [r4, #0]
 800f654:	e78e      	b.n	800f574 <_strtod_l+0x484>
 800f656:	bf00      	nop
 800f658:	08014335 	.word	0x08014335
 800f65c:	08014374 	.word	0x08014374
 800f660:	0801432d 	.word	0x0801432d
 800f664:	080144b4 	.word	0x080144b4
 800f668:	0801477b 	.word	0x0801477b
 800f66c:	08014640 	.word	0x08014640
 800f670:	08014618 	.word	0x08014618
 800f674:	7ca00000 	.word	0x7ca00000
 800f678:	7ff00000 	.word	0x7ff00000
 800f67c:	7fefffff 	.word	0x7fefffff
 800f680:	f012 0110 	ands.w	r1, r2, #16
 800f684:	bf18      	it	ne
 800f686:	216a      	movne	r1, #106	; 0x6a
 800f688:	9104      	str	r1, [sp, #16]
 800f68a:	ec49 8b17 	vmov	d7, r8, r9
 800f68e:	49be      	ldr	r1, [pc, #760]	; (800f988 <_strtod_l+0x898>)
 800f690:	2000      	movs	r0, #0
 800f692:	07d6      	lsls	r6, r2, #31
 800f694:	d504      	bpl.n	800f6a0 <_strtod_l+0x5b0>
 800f696:	ed91 6b00 	vldr	d6, [r1]
 800f69a:	2001      	movs	r0, #1
 800f69c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6a0:	1052      	asrs	r2, r2, #1
 800f6a2:	f101 0108 	add.w	r1, r1, #8
 800f6a6:	d1f4      	bne.n	800f692 <_strtod_l+0x5a2>
 800f6a8:	b108      	cbz	r0, 800f6ae <_strtod_l+0x5be>
 800f6aa:	ec59 8b17 	vmov	r8, r9, d7
 800f6ae:	9a04      	ldr	r2, [sp, #16]
 800f6b0:	b1c2      	cbz	r2, 800f6e4 <_strtod_l+0x5f4>
 800f6b2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f6b6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f6ba:	2a00      	cmp	r2, #0
 800f6bc:	4648      	mov	r0, r9
 800f6be:	dd11      	ble.n	800f6e4 <_strtod_l+0x5f4>
 800f6c0:	2a1f      	cmp	r2, #31
 800f6c2:	f340 812e 	ble.w	800f922 <_strtod_l+0x832>
 800f6c6:	2a34      	cmp	r2, #52	; 0x34
 800f6c8:	bfde      	ittt	le
 800f6ca:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f6ce:	f04f 32ff 	movle.w	r2, #4294967295
 800f6d2:	fa02 f101 	lslle.w	r1, r2, r1
 800f6d6:	f04f 0800 	mov.w	r8, #0
 800f6da:	bfcc      	ite	gt
 800f6dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f6e0:	ea01 0900 	andle.w	r9, r1, r0
 800f6e4:	ec49 8b17 	vmov	d7, r8, r9
 800f6e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f0:	d0a6      	beq.n	800f640 <_strtod_l+0x550>
 800f6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6f4:	9200      	str	r2, [sp, #0]
 800f6f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f6f8:	9a06      	ldr	r2, [sp, #24]
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f001 fdd6 	bl	80112ac <__s2b>
 800f700:	9006      	str	r0, [sp, #24]
 800f702:	2800      	cmp	r0, #0
 800f704:	f43f af2c 	beq.w	800f560 <_strtod_l+0x470>
 800f708:	9b07      	ldr	r3, [sp, #28]
 800f70a:	1b7d      	subs	r5, r7, r5
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	bfb4      	ite	lt
 800f710:	462b      	movlt	r3, r5
 800f712:	2300      	movge	r3, #0
 800f714:	9309      	str	r3, [sp, #36]	; 0x24
 800f716:	9b07      	ldr	r3, [sp, #28]
 800f718:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f968 <_strtod_l+0x878>
 800f71c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f970 <_strtod_l+0x880>
 800f720:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f978 <_strtod_l+0x888>
 800f724:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f728:	2500      	movs	r5, #0
 800f72a:	930c      	str	r3, [sp, #48]	; 0x30
 800f72c:	462e      	mov	r6, r5
 800f72e:	9b06      	ldr	r3, [sp, #24]
 800f730:	4620      	mov	r0, r4
 800f732:	6859      	ldr	r1, [r3, #4]
 800f734:	f001 fd12 	bl	801115c <_Balloc>
 800f738:	4607      	mov	r7, r0
 800f73a:	2800      	cmp	r0, #0
 800f73c:	f43f af14 	beq.w	800f568 <_strtod_l+0x478>
 800f740:	9b06      	ldr	r3, [sp, #24]
 800f742:	691a      	ldr	r2, [r3, #16]
 800f744:	3202      	adds	r2, #2
 800f746:	f103 010c 	add.w	r1, r3, #12
 800f74a:	0092      	lsls	r2, r2, #2
 800f74c:	300c      	adds	r0, #12
 800f74e:	f7fe fd89 	bl	800e264 <memcpy>
 800f752:	ec49 8b10 	vmov	d0, r8, r9
 800f756:	aa14      	add	r2, sp, #80	; 0x50
 800f758:	a913      	add	r1, sp, #76	; 0x4c
 800f75a:	4620      	mov	r0, r4
 800f75c:	f002 f8ec 	bl	8011938 <__d2b>
 800f760:	ec49 8b18 	vmov	d8, r8, r9
 800f764:	9012      	str	r0, [sp, #72]	; 0x48
 800f766:	2800      	cmp	r0, #0
 800f768:	f43f aefe 	beq.w	800f568 <_strtod_l+0x478>
 800f76c:	2101      	movs	r1, #1
 800f76e:	4620      	mov	r0, r4
 800f770:	f001 fe36 	bl	80113e0 <__i2b>
 800f774:	4606      	mov	r6, r0
 800f776:	2800      	cmp	r0, #0
 800f778:	f43f aef6 	beq.w	800f568 <_strtod_l+0x478>
 800f77c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f77e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f780:	2b00      	cmp	r3, #0
 800f782:	bfab      	itete	ge
 800f784:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f786:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f788:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f78c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f790:	bfac      	ite	ge
 800f792:	eb03 0b02 	addge.w	fp, r3, r2
 800f796:	eba2 0a03 	sublt.w	sl, r2, r3
 800f79a:	9a04      	ldr	r2, [sp, #16]
 800f79c:	1a9b      	subs	r3, r3, r2
 800f79e:	440b      	add	r3, r1
 800f7a0:	4a7a      	ldr	r2, [pc, #488]	; (800f98c <_strtod_l+0x89c>)
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f7aa:	f280 80cd 	bge.w	800f948 <_strtod_l+0x858>
 800f7ae:	1ad2      	subs	r2, r2, r3
 800f7b0:	2a1f      	cmp	r2, #31
 800f7b2:	eba1 0102 	sub.w	r1, r1, r2
 800f7b6:	f04f 0001 	mov.w	r0, #1
 800f7ba:	f300 80b9 	bgt.w	800f930 <_strtod_l+0x840>
 800f7be:	fa00 f302 	lsl.w	r3, r0, r2
 800f7c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	930a      	str	r3, [sp, #40]	; 0x28
 800f7c8:	eb0b 0301 	add.w	r3, fp, r1
 800f7cc:	9a04      	ldr	r2, [sp, #16]
 800f7ce:	459b      	cmp	fp, r3
 800f7d0:	448a      	add	sl, r1
 800f7d2:	4492      	add	sl, r2
 800f7d4:	465a      	mov	r2, fp
 800f7d6:	bfa8      	it	ge
 800f7d8:	461a      	movge	r2, r3
 800f7da:	4552      	cmp	r2, sl
 800f7dc:	bfa8      	it	ge
 800f7de:	4652      	movge	r2, sl
 800f7e0:	2a00      	cmp	r2, #0
 800f7e2:	bfc2      	ittt	gt
 800f7e4:	1a9b      	subgt	r3, r3, r2
 800f7e6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f7ea:	ebab 0b02 	subgt.w	fp, fp, r2
 800f7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7f0:	2a00      	cmp	r2, #0
 800f7f2:	dd18      	ble.n	800f826 <_strtod_l+0x736>
 800f7f4:	4631      	mov	r1, r6
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7fa:	f001 feb1 	bl	8011560 <__pow5mult>
 800f7fe:	4606      	mov	r6, r0
 800f800:	2800      	cmp	r0, #0
 800f802:	f43f aeb1 	beq.w	800f568 <_strtod_l+0x478>
 800f806:	4601      	mov	r1, r0
 800f808:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f80a:	4620      	mov	r0, r4
 800f80c:	f001 fdfe 	bl	801140c <__multiply>
 800f810:	900e      	str	r0, [sp, #56]	; 0x38
 800f812:	2800      	cmp	r0, #0
 800f814:	f43f aea8 	beq.w	800f568 <_strtod_l+0x478>
 800f818:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f81a:	4620      	mov	r0, r4
 800f81c:	f001 fcde 	bl	80111dc <_Bfree>
 800f820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f824:	9212      	str	r2, [sp, #72]	; 0x48
 800f826:	2b00      	cmp	r3, #0
 800f828:	f300 8093 	bgt.w	800f952 <_strtod_l+0x862>
 800f82c:	9b07      	ldr	r3, [sp, #28]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	dd08      	ble.n	800f844 <_strtod_l+0x754>
 800f832:	4639      	mov	r1, r7
 800f834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f836:	4620      	mov	r0, r4
 800f838:	f001 fe92 	bl	8011560 <__pow5mult>
 800f83c:	4607      	mov	r7, r0
 800f83e:	2800      	cmp	r0, #0
 800f840:	f43f ae92 	beq.w	800f568 <_strtod_l+0x478>
 800f844:	f1ba 0f00 	cmp.w	sl, #0
 800f848:	dd08      	ble.n	800f85c <_strtod_l+0x76c>
 800f84a:	4639      	mov	r1, r7
 800f84c:	4652      	mov	r2, sl
 800f84e:	4620      	mov	r0, r4
 800f850:	f001 fee0 	bl	8011614 <__lshift>
 800f854:	4607      	mov	r7, r0
 800f856:	2800      	cmp	r0, #0
 800f858:	f43f ae86 	beq.w	800f568 <_strtod_l+0x478>
 800f85c:	f1bb 0f00 	cmp.w	fp, #0
 800f860:	dd08      	ble.n	800f874 <_strtod_l+0x784>
 800f862:	4631      	mov	r1, r6
 800f864:	465a      	mov	r2, fp
 800f866:	4620      	mov	r0, r4
 800f868:	f001 fed4 	bl	8011614 <__lshift>
 800f86c:	4606      	mov	r6, r0
 800f86e:	2800      	cmp	r0, #0
 800f870:	f43f ae7a 	beq.w	800f568 <_strtod_l+0x478>
 800f874:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f876:	463a      	mov	r2, r7
 800f878:	4620      	mov	r0, r4
 800f87a:	f001 ff57 	bl	801172c <__mdiff>
 800f87e:	4605      	mov	r5, r0
 800f880:	2800      	cmp	r0, #0
 800f882:	f43f ae71 	beq.w	800f568 <_strtod_l+0x478>
 800f886:	2300      	movs	r3, #0
 800f888:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f88c:	60c3      	str	r3, [r0, #12]
 800f88e:	4631      	mov	r1, r6
 800f890:	f001 ff30 	bl	80116f4 <__mcmp>
 800f894:	2800      	cmp	r0, #0
 800f896:	da7d      	bge.n	800f994 <_strtod_l+0x8a4>
 800f898:	ea5a 0308 	orrs.w	r3, sl, r8
 800f89c:	f040 80a3 	bne.w	800f9e6 <_strtod_l+0x8f6>
 800f8a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f040 809e 	bne.w	800f9e6 <_strtod_l+0x8f6>
 800f8aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f8ae:	0d1b      	lsrs	r3, r3, #20
 800f8b0:	051b      	lsls	r3, r3, #20
 800f8b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f8b6:	f240 8096 	bls.w	800f9e6 <_strtod_l+0x8f6>
 800f8ba:	696b      	ldr	r3, [r5, #20]
 800f8bc:	b91b      	cbnz	r3, 800f8c6 <_strtod_l+0x7d6>
 800f8be:	692b      	ldr	r3, [r5, #16]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	f340 8090 	ble.w	800f9e6 <_strtod_l+0x8f6>
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f001 fea2 	bl	8011614 <__lshift>
 800f8d0:	4631      	mov	r1, r6
 800f8d2:	4605      	mov	r5, r0
 800f8d4:	f001 ff0e 	bl	80116f4 <__mcmp>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	f340 8084 	ble.w	800f9e6 <_strtod_l+0x8f6>
 800f8de:	9904      	ldr	r1, [sp, #16]
 800f8e0:	4a2b      	ldr	r2, [pc, #172]	; (800f990 <_strtod_l+0x8a0>)
 800f8e2:	464b      	mov	r3, r9
 800f8e4:	2900      	cmp	r1, #0
 800f8e6:	f000 809d 	beq.w	800fa24 <_strtod_l+0x934>
 800f8ea:	ea02 0109 	and.w	r1, r2, r9
 800f8ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f8f2:	f300 8097 	bgt.w	800fa24 <_strtod_l+0x934>
 800f8f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f8fa:	f77f aea5 	ble.w	800f648 <_strtod_l+0x558>
 800f8fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f980 <_strtod_l+0x890>
 800f902:	ec49 8b16 	vmov	d6, r8, r9
 800f906:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f90a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f90e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f912:	4313      	orrs	r3, r2
 800f914:	bf08      	it	eq
 800f916:	2322      	moveq	r3, #34	; 0x22
 800f918:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f91c:	bf08      	it	eq
 800f91e:	6023      	streq	r3, [r4, #0]
 800f920:	e62c      	b.n	800f57c <_strtod_l+0x48c>
 800f922:	f04f 31ff 	mov.w	r1, #4294967295
 800f926:	fa01 f202 	lsl.w	r2, r1, r2
 800f92a:	ea02 0808 	and.w	r8, r2, r8
 800f92e:	e6d9      	b.n	800f6e4 <_strtod_l+0x5f4>
 800f930:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f934:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f938:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f93c:	33e2      	adds	r3, #226	; 0xe2
 800f93e:	fa00 f303 	lsl.w	r3, r0, r3
 800f942:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f946:	e73f      	b.n	800f7c8 <_strtod_l+0x6d8>
 800f948:	2200      	movs	r2, #0
 800f94a:	2301      	movs	r3, #1
 800f94c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f950:	e73a      	b.n	800f7c8 <_strtod_l+0x6d8>
 800f952:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f954:	461a      	mov	r2, r3
 800f956:	4620      	mov	r0, r4
 800f958:	f001 fe5c 	bl	8011614 <__lshift>
 800f95c:	9012      	str	r0, [sp, #72]	; 0x48
 800f95e:	2800      	cmp	r0, #0
 800f960:	f47f af64 	bne.w	800f82c <_strtod_l+0x73c>
 800f964:	e600      	b.n	800f568 <_strtod_l+0x478>
 800f966:	bf00      	nop
 800f968:	94a03595 	.word	0x94a03595
 800f96c:	3fcfffff 	.word	0x3fcfffff
 800f970:	94a03595 	.word	0x94a03595
 800f974:	3fdfffff 	.word	0x3fdfffff
 800f978:	35afe535 	.word	0x35afe535
 800f97c:	3fe00000 	.word	0x3fe00000
 800f980:	00000000 	.word	0x00000000
 800f984:	39500000 	.word	0x39500000
 800f988:	08014388 	.word	0x08014388
 800f98c:	fffffc02 	.word	0xfffffc02
 800f990:	7ff00000 	.word	0x7ff00000
 800f994:	46cb      	mov	fp, r9
 800f996:	d15f      	bne.n	800fa58 <_strtod_l+0x968>
 800f998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f99c:	f1ba 0f00 	cmp.w	sl, #0
 800f9a0:	d02a      	beq.n	800f9f8 <_strtod_l+0x908>
 800f9a2:	4aa7      	ldr	r2, [pc, #668]	; (800fc40 <_strtod_l+0xb50>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d12b      	bne.n	800fa00 <_strtod_l+0x910>
 800f9a8:	9b04      	ldr	r3, [sp, #16]
 800f9aa:	4642      	mov	r2, r8
 800f9ac:	b1fb      	cbz	r3, 800f9ee <_strtod_l+0x8fe>
 800f9ae:	4ba5      	ldr	r3, [pc, #660]	; (800fc44 <_strtod_l+0xb54>)
 800f9b0:	ea09 0303 	and.w	r3, r9, r3
 800f9b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f9b8:	f04f 31ff 	mov.w	r1, #4294967295
 800f9bc:	d81a      	bhi.n	800f9f4 <_strtod_l+0x904>
 800f9be:	0d1b      	lsrs	r3, r3, #20
 800f9c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d119      	bne.n	800fa00 <_strtod_l+0x910>
 800f9cc:	4b9e      	ldr	r3, [pc, #632]	; (800fc48 <_strtod_l+0xb58>)
 800f9ce:	459b      	cmp	fp, r3
 800f9d0:	d102      	bne.n	800f9d8 <_strtod_l+0x8e8>
 800f9d2:	3201      	adds	r2, #1
 800f9d4:	f43f adc8 	beq.w	800f568 <_strtod_l+0x478>
 800f9d8:	4b9a      	ldr	r3, [pc, #616]	; (800fc44 <_strtod_l+0xb54>)
 800f9da:	ea0b 0303 	and.w	r3, fp, r3
 800f9de:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f9e2:	f04f 0800 	mov.w	r8, #0
 800f9e6:	9b04      	ldr	r3, [sp, #16]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d188      	bne.n	800f8fe <_strtod_l+0x80e>
 800f9ec:	e5c6      	b.n	800f57c <_strtod_l+0x48c>
 800f9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f9f2:	e7e9      	b.n	800f9c8 <_strtod_l+0x8d8>
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	e7e7      	b.n	800f9c8 <_strtod_l+0x8d8>
 800f9f8:	ea53 0308 	orrs.w	r3, r3, r8
 800f9fc:	f43f af6f 	beq.w	800f8de <_strtod_l+0x7ee>
 800fa00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa02:	b1cb      	cbz	r3, 800fa38 <_strtod_l+0x948>
 800fa04:	ea13 0f0b 	tst.w	r3, fp
 800fa08:	d0ed      	beq.n	800f9e6 <_strtod_l+0x8f6>
 800fa0a:	9a04      	ldr	r2, [sp, #16]
 800fa0c:	4640      	mov	r0, r8
 800fa0e:	4649      	mov	r1, r9
 800fa10:	f1ba 0f00 	cmp.w	sl, #0
 800fa14:	d014      	beq.n	800fa40 <_strtod_l+0x950>
 800fa16:	f7ff fb4e 	bl	800f0b6 <sulp>
 800fa1a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800fa1e:	ec59 8b17 	vmov	r8, r9, d7
 800fa22:	e7e0      	b.n	800f9e6 <_strtod_l+0x8f6>
 800fa24:	4013      	ands	r3, r2
 800fa26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fa2a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fa2e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fa32:	f04f 38ff 	mov.w	r8, #4294967295
 800fa36:	e7d6      	b.n	800f9e6 <_strtod_l+0x8f6>
 800fa38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa3a:	ea13 0f08 	tst.w	r3, r8
 800fa3e:	e7e3      	b.n	800fa08 <_strtod_l+0x918>
 800fa40:	f7ff fb39 	bl	800f0b6 <sulp>
 800fa44:	ee38 0b40 	vsub.f64	d0, d8, d0
 800fa48:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fa4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa50:	ec59 8b10 	vmov	r8, r9, d0
 800fa54:	d1c7      	bne.n	800f9e6 <_strtod_l+0x8f6>
 800fa56:	e5f7      	b.n	800f648 <_strtod_l+0x558>
 800fa58:	4631      	mov	r1, r6
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	f001 ffc8 	bl	80119f0 <__ratio>
 800fa60:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800fa64:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fa68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6c:	d865      	bhi.n	800fb3a <_strtod_l+0xa4a>
 800fa6e:	f1ba 0f00 	cmp.w	sl, #0
 800fa72:	d042      	beq.n	800fafa <_strtod_l+0xa0a>
 800fa74:	4b75      	ldr	r3, [pc, #468]	; (800fc4c <_strtod_l+0xb5c>)
 800fa76:	2200      	movs	r2, #0
 800fa78:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800fa7c:	4871      	ldr	r0, [pc, #452]	; (800fc44 <_strtod_l+0xb54>)
 800fa7e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fc58 <_strtod_l+0xb68>
 800fa82:	ea0b 0100 	and.w	r1, fp, r0
 800fa86:	4561      	cmp	r1, ip
 800fa88:	f040 808e 	bne.w	800fba8 <_strtod_l+0xab8>
 800fa8c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800fa90:	ec49 8b10 	vmov	d0, r8, r9
 800fa94:	ec43 2b1c 	vmov	d12, r2, r3
 800fa98:	910a      	str	r1, [sp, #40]	; 0x28
 800fa9a:	f001 fed1 	bl	8011840 <__ulp>
 800fa9e:	ec49 8b1e 	vmov	d14, r8, r9
 800faa2:	4868      	ldr	r0, [pc, #416]	; (800fc44 <_strtod_l+0xb54>)
 800faa4:	eeac eb00 	vfma.f64	d14, d12, d0
 800faa8:	ee1e 3a90 	vmov	r3, s29
 800faac:	4a68      	ldr	r2, [pc, #416]	; (800fc50 <_strtod_l+0xb60>)
 800faae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fab0:	4018      	ands	r0, r3
 800fab2:	4290      	cmp	r0, r2
 800fab4:	ec59 8b1e 	vmov	r8, r9, d14
 800fab8:	d94e      	bls.n	800fb58 <_strtod_l+0xa68>
 800faba:	ee18 3a90 	vmov	r3, s17
 800fabe:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d104      	bne.n	800fad0 <_strtod_l+0x9e0>
 800fac6:	ee18 3a10 	vmov	r3, s16
 800faca:	3301      	adds	r3, #1
 800facc:	f43f ad4c 	beq.w	800f568 <_strtod_l+0x478>
 800fad0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fc48 <_strtod_l+0xb58>
 800fad4:	f04f 38ff 	mov.w	r8, #4294967295
 800fad8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fada:	4620      	mov	r0, r4
 800fadc:	f001 fb7e 	bl	80111dc <_Bfree>
 800fae0:	4639      	mov	r1, r7
 800fae2:	4620      	mov	r0, r4
 800fae4:	f001 fb7a 	bl	80111dc <_Bfree>
 800fae8:	4631      	mov	r1, r6
 800faea:	4620      	mov	r0, r4
 800faec:	f001 fb76 	bl	80111dc <_Bfree>
 800faf0:	4629      	mov	r1, r5
 800faf2:	4620      	mov	r0, r4
 800faf4:	f001 fb72 	bl	80111dc <_Bfree>
 800faf8:	e619      	b.n	800f72e <_strtod_l+0x63e>
 800fafa:	f1b8 0f00 	cmp.w	r8, #0
 800fafe:	d112      	bne.n	800fb26 <_strtod_l+0xa36>
 800fb00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb04:	b9b3      	cbnz	r3, 800fb34 <_strtod_l+0xa44>
 800fb06:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fb0a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb12:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fb16:	bf58      	it	pl
 800fb18:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800fb1c:	eeb1 7b4d 	vneg.f64	d7, d13
 800fb20:	ec53 2b17 	vmov	r2, r3, d7
 800fb24:	e7aa      	b.n	800fa7c <_strtod_l+0x98c>
 800fb26:	f1b8 0f01 	cmp.w	r8, #1
 800fb2a:	d103      	bne.n	800fb34 <_strtod_l+0xa44>
 800fb2c:	f1b9 0f00 	cmp.w	r9, #0
 800fb30:	f43f ad8a 	beq.w	800f648 <_strtod_l+0x558>
 800fb34:	4b47      	ldr	r3, [pc, #284]	; (800fc54 <_strtod_l+0xb64>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	e79e      	b.n	800fa78 <_strtod_l+0x988>
 800fb3a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fb3e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800fb42:	f1ba 0f00 	cmp.w	sl, #0
 800fb46:	d104      	bne.n	800fb52 <_strtod_l+0xa62>
 800fb48:	eeb1 7b4d 	vneg.f64	d7, d13
 800fb4c:	ec53 2b17 	vmov	r2, r3, d7
 800fb50:	e794      	b.n	800fa7c <_strtod_l+0x98c>
 800fb52:	eeb0 7b4d 	vmov.f64	d7, d13
 800fb56:	e7f9      	b.n	800fb4c <_strtod_l+0xa5c>
 800fb58:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fb5c:	9b04      	ldr	r3, [sp, #16]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d1ba      	bne.n	800fad8 <_strtod_l+0x9e8>
 800fb62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fb66:	0d1b      	lsrs	r3, r3, #20
 800fb68:	051b      	lsls	r3, r3, #20
 800fb6a:	4299      	cmp	r1, r3
 800fb6c:	d1b4      	bne.n	800fad8 <_strtod_l+0x9e8>
 800fb6e:	ec51 0b1d 	vmov	r0, r1, d13
 800fb72:	f7f0 fde1 	bl	8000738 <__aeabi_d2lz>
 800fb76:	f7f0 fd99 	bl	80006ac <__aeabi_l2d>
 800fb7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb7e:	ec41 0b17 	vmov	d7, r0, r1
 800fb82:	ea43 0308 	orr.w	r3, r3, r8
 800fb86:	ea53 030a 	orrs.w	r3, r3, sl
 800fb8a:	ee3d db47 	vsub.f64	d13, d13, d7
 800fb8e:	d03c      	beq.n	800fc0a <_strtod_l+0xb1a>
 800fb90:	eeb4 dbca 	vcmpe.f64	d13, d10
 800fb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb98:	f53f acf0 	bmi.w	800f57c <_strtod_l+0x48c>
 800fb9c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba4:	dd98      	ble.n	800fad8 <_strtod_l+0x9e8>
 800fba6:	e4e9      	b.n	800f57c <_strtod_l+0x48c>
 800fba8:	9804      	ldr	r0, [sp, #16]
 800fbaa:	b1f0      	cbz	r0, 800fbea <_strtod_l+0xafa>
 800fbac:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800fbb0:	d81b      	bhi.n	800fbea <_strtod_l+0xafa>
 800fbb2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fc38 <_strtod_l+0xb48>
 800fbb6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800fbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbbe:	d811      	bhi.n	800fbe4 <_strtod_l+0xaf4>
 800fbc0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800fbc4:	ee1d 3a10 	vmov	r3, s26
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	bf38      	it	cc
 800fbcc:	2301      	movcc	r3, #1
 800fbce:	ee0d 3a10 	vmov	s26, r3
 800fbd2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800fbd6:	f1ba 0f00 	cmp.w	sl, #0
 800fbda:	d113      	bne.n	800fc04 <_strtod_l+0xb14>
 800fbdc:	eeb1 7b4d 	vneg.f64	d7, d13
 800fbe0:	ec53 2b17 	vmov	r2, r3, d7
 800fbe4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fbe8:	1a43      	subs	r3, r0, r1
 800fbea:	eeb0 0b48 	vmov.f64	d0, d8
 800fbee:	ec43 2b1c 	vmov	d12, r2, r3
 800fbf2:	910a      	str	r1, [sp, #40]	; 0x28
 800fbf4:	f001 fe24 	bl	8011840 <__ulp>
 800fbf8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fbfa:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fbfe:	ec59 8b18 	vmov	r8, r9, d8
 800fc02:	e7ab      	b.n	800fb5c <_strtod_l+0xa6c>
 800fc04:	eeb0 7b4d 	vmov.f64	d7, d13
 800fc08:	e7ea      	b.n	800fbe0 <_strtod_l+0xaf0>
 800fc0a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc12:	f57f af61 	bpl.w	800fad8 <_strtod_l+0x9e8>
 800fc16:	e4b1      	b.n	800f57c <_strtod_l+0x48c>
 800fc18:	2300      	movs	r3, #0
 800fc1a:	9308      	str	r3, [sp, #32]
 800fc1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc20:	6013      	str	r3, [r2, #0]
 800fc22:	f7ff baad 	b.w	800f180 <_strtod_l+0x90>
 800fc26:	2a65      	cmp	r2, #101	; 0x65
 800fc28:	f43f ab9f 	beq.w	800f36a <_strtod_l+0x27a>
 800fc2c:	2a45      	cmp	r2, #69	; 0x45
 800fc2e:	f43f ab9c 	beq.w	800f36a <_strtod_l+0x27a>
 800fc32:	2101      	movs	r1, #1
 800fc34:	f7ff bbd4 	b.w	800f3e0 <_strtod_l+0x2f0>
 800fc38:	ffc00000 	.word	0xffc00000
 800fc3c:	41dfffff 	.word	0x41dfffff
 800fc40:	000fffff 	.word	0x000fffff
 800fc44:	7ff00000 	.word	0x7ff00000
 800fc48:	7fefffff 	.word	0x7fefffff
 800fc4c:	3ff00000 	.word	0x3ff00000
 800fc50:	7c9fffff 	.word	0x7c9fffff
 800fc54:	bff00000 	.word	0xbff00000
 800fc58:	7fe00000 	.word	0x7fe00000

0800fc5c <_strtod_r>:
 800fc5c:	4b01      	ldr	r3, [pc, #4]	; (800fc64 <_strtod_r+0x8>)
 800fc5e:	f7ff ba47 	b.w	800f0f0 <_strtod_l>
 800fc62:	bf00      	nop
 800fc64:	2400008c 	.word	0x2400008c

0800fc68 <_strtol_l.constprop.0>:
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc6e:	d001      	beq.n	800fc74 <_strtol_l.constprop.0+0xc>
 800fc70:	2b24      	cmp	r3, #36	; 0x24
 800fc72:	d906      	bls.n	800fc82 <_strtol_l.constprop.0+0x1a>
 800fc74:	f7fe facc 	bl	800e210 <__errno>
 800fc78:	2316      	movs	r3, #22
 800fc7a:	6003      	str	r3, [r0, #0]
 800fc7c:	2000      	movs	r0, #0
 800fc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fd68 <_strtol_l.constprop.0+0x100>
 800fc86:	460d      	mov	r5, r1
 800fc88:	462e      	mov	r6, r5
 800fc8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fc92:	f017 0708 	ands.w	r7, r7, #8
 800fc96:	d1f7      	bne.n	800fc88 <_strtol_l.constprop.0+0x20>
 800fc98:	2c2d      	cmp	r4, #45	; 0x2d
 800fc9a:	d132      	bne.n	800fd02 <_strtol_l.constprop.0+0x9a>
 800fc9c:	782c      	ldrb	r4, [r5, #0]
 800fc9e:	2701      	movs	r7, #1
 800fca0:	1cb5      	adds	r5, r6, #2
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d05b      	beq.n	800fd5e <_strtol_l.constprop.0+0xf6>
 800fca6:	2b10      	cmp	r3, #16
 800fca8:	d109      	bne.n	800fcbe <_strtol_l.constprop.0+0x56>
 800fcaa:	2c30      	cmp	r4, #48	; 0x30
 800fcac:	d107      	bne.n	800fcbe <_strtol_l.constprop.0+0x56>
 800fcae:	782c      	ldrb	r4, [r5, #0]
 800fcb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fcb4:	2c58      	cmp	r4, #88	; 0x58
 800fcb6:	d14d      	bne.n	800fd54 <_strtol_l.constprop.0+0xec>
 800fcb8:	786c      	ldrb	r4, [r5, #1]
 800fcba:	2310      	movs	r3, #16
 800fcbc:	3502      	adds	r5, #2
 800fcbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fcc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800fcc6:	f04f 0c00 	mov.w	ip, #0
 800fcca:	fbb8 f9f3 	udiv	r9, r8, r3
 800fcce:	4666      	mov	r6, ip
 800fcd0:	fb03 8a19 	mls	sl, r3, r9, r8
 800fcd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fcd8:	f1be 0f09 	cmp.w	lr, #9
 800fcdc:	d816      	bhi.n	800fd0c <_strtol_l.constprop.0+0xa4>
 800fcde:	4674      	mov	r4, lr
 800fce0:	42a3      	cmp	r3, r4
 800fce2:	dd24      	ble.n	800fd2e <_strtol_l.constprop.0+0xc6>
 800fce4:	f1bc 0f00 	cmp.w	ip, #0
 800fce8:	db1e      	blt.n	800fd28 <_strtol_l.constprop.0+0xc0>
 800fcea:	45b1      	cmp	r9, r6
 800fcec:	d31c      	bcc.n	800fd28 <_strtol_l.constprop.0+0xc0>
 800fcee:	d101      	bne.n	800fcf4 <_strtol_l.constprop.0+0x8c>
 800fcf0:	45a2      	cmp	sl, r4
 800fcf2:	db19      	blt.n	800fd28 <_strtol_l.constprop.0+0xc0>
 800fcf4:	fb06 4603 	mla	r6, r6, r3, r4
 800fcf8:	f04f 0c01 	mov.w	ip, #1
 800fcfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd00:	e7e8      	b.n	800fcd4 <_strtol_l.constprop.0+0x6c>
 800fd02:	2c2b      	cmp	r4, #43	; 0x2b
 800fd04:	bf04      	itt	eq
 800fd06:	782c      	ldrbeq	r4, [r5, #0]
 800fd08:	1cb5      	addeq	r5, r6, #2
 800fd0a:	e7ca      	b.n	800fca2 <_strtol_l.constprop.0+0x3a>
 800fd0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fd10:	f1be 0f19 	cmp.w	lr, #25
 800fd14:	d801      	bhi.n	800fd1a <_strtol_l.constprop.0+0xb2>
 800fd16:	3c37      	subs	r4, #55	; 0x37
 800fd18:	e7e2      	b.n	800fce0 <_strtol_l.constprop.0+0x78>
 800fd1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fd1e:	f1be 0f19 	cmp.w	lr, #25
 800fd22:	d804      	bhi.n	800fd2e <_strtol_l.constprop.0+0xc6>
 800fd24:	3c57      	subs	r4, #87	; 0x57
 800fd26:	e7db      	b.n	800fce0 <_strtol_l.constprop.0+0x78>
 800fd28:	f04f 3cff 	mov.w	ip, #4294967295
 800fd2c:	e7e6      	b.n	800fcfc <_strtol_l.constprop.0+0x94>
 800fd2e:	f1bc 0f00 	cmp.w	ip, #0
 800fd32:	da05      	bge.n	800fd40 <_strtol_l.constprop.0+0xd8>
 800fd34:	2322      	movs	r3, #34	; 0x22
 800fd36:	6003      	str	r3, [r0, #0]
 800fd38:	4646      	mov	r6, r8
 800fd3a:	b942      	cbnz	r2, 800fd4e <_strtol_l.constprop.0+0xe6>
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	e79e      	b.n	800fc7e <_strtol_l.constprop.0+0x16>
 800fd40:	b107      	cbz	r7, 800fd44 <_strtol_l.constprop.0+0xdc>
 800fd42:	4276      	negs	r6, r6
 800fd44:	2a00      	cmp	r2, #0
 800fd46:	d0f9      	beq.n	800fd3c <_strtol_l.constprop.0+0xd4>
 800fd48:	f1bc 0f00 	cmp.w	ip, #0
 800fd4c:	d000      	beq.n	800fd50 <_strtol_l.constprop.0+0xe8>
 800fd4e:	1e69      	subs	r1, r5, #1
 800fd50:	6011      	str	r1, [r2, #0]
 800fd52:	e7f3      	b.n	800fd3c <_strtol_l.constprop.0+0xd4>
 800fd54:	2430      	movs	r4, #48	; 0x30
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1b1      	bne.n	800fcbe <_strtol_l.constprop.0+0x56>
 800fd5a:	2308      	movs	r3, #8
 800fd5c:	e7af      	b.n	800fcbe <_strtol_l.constprop.0+0x56>
 800fd5e:	2c30      	cmp	r4, #48	; 0x30
 800fd60:	d0a5      	beq.n	800fcae <_strtol_l.constprop.0+0x46>
 800fd62:	230a      	movs	r3, #10
 800fd64:	e7ab      	b.n	800fcbe <_strtol_l.constprop.0+0x56>
 800fd66:	bf00      	nop
 800fd68:	080143b1 	.word	0x080143b1

0800fd6c <_strtol_r>:
 800fd6c:	f7ff bf7c 	b.w	800fc68 <_strtol_l.constprop.0>

0800fd70 <_vsniprintf_r>:
 800fd70:	b530      	push	{r4, r5, lr}
 800fd72:	4614      	mov	r4, r2
 800fd74:	2c00      	cmp	r4, #0
 800fd76:	b09b      	sub	sp, #108	; 0x6c
 800fd78:	4605      	mov	r5, r0
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	da05      	bge.n	800fd8a <_vsniprintf_r+0x1a>
 800fd7e:	238b      	movs	r3, #139	; 0x8b
 800fd80:	6003      	str	r3, [r0, #0]
 800fd82:	f04f 30ff 	mov.w	r0, #4294967295
 800fd86:	b01b      	add	sp, #108	; 0x6c
 800fd88:	bd30      	pop	{r4, r5, pc}
 800fd8a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fd8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fd92:	bf14      	ite	ne
 800fd94:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd98:	4623      	moveq	r3, r4
 800fd9a:	9302      	str	r3, [sp, #8]
 800fd9c:	9305      	str	r3, [sp, #20]
 800fd9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fda2:	9100      	str	r1, [sp, #0]
 800fda4:	9104      	str	r1, [sp, #16]
 800fda6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fdaa:	4669      	mov	r1, sp
 800fdac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fdae:	f001 ffe5 	bl	8011d7c <_svfiprintf_r>
 800fdb2:	1c43      	adds	r3, r0, #1
 800fdb4:	bfbc      	itt	lt
 800fdb6:	238b      	movlt	r3, #139	; 0x8b
 800fdb8:	602b      	strlt	r3, [r5, #0]
 800fdba:	2c00      	cmp	r4, #0
 800fdbc:	d0e3      	beq.n	800fd86 <_vsniprintf_r+0x16>
 800fdbe:	9b00      	ldr	r3, [sp, #0]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	701a      	strb	r2, [r3, #0]
 800fdc4:	e7df      	b.n	800fd86 <_vsniprintf_r+0x16>
	...

0800fdc8 <vsniprintf>:
 800fdc8:	b507      	push	{r0, r1, r2, lr}
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	4613      	mov	r3, r2
 800fdce:	460a      	mov	r2, r1
 800fdd0:	4601      	mov	r1, r0
 800fdd2:	4803      	ldr	r0, [pc, #12]	; (800fde0 <vsniprintf+0x18>)
 800fdd4:	6800      	ldr	r0, [r0, #0]
 800fdd6:	f7ff ffcb 	bl	800fd70 <_vsniprintf_r>
 800fdda:	b003      	add	sp, #12
 800fddc:	f85d fb04 	ldr.w	pc, [sp], #4
 800fde0:	24000024 	.word	0x24000024

0800fde4 <_write_r>:
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	4d07      	ldr	r5, [pc, #28]	; (800fe04 <_write_r+0x20>)
 800fde8:	4604      	mov	r4, r0
 800fdea:	4608      	mov	r0, r1
 800fdec:	4611      	mov	r1, r2
 800fdee:	2200      	movs	r2, #0
 800fdf0:	602a      	str	r2, [r5, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	f7f2 fb65 	bl	80024c2 <_write>
 800fdf8:	1c43      	adds	r3, r0, #1
 800fdfa:	d102      	bne.n	800fe02 <_write_r+0x1e>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	b103      	cbz	r3, 800fe02 <_write_r+0x1e>
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	bd38      	pop	{r3, r4, r5, pc}
 800fe04:	240051d0 	.word	0x240051d0

0800fe08 <_close_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4d06      	ldr	r5, [pc, #24]	; (800fe24 <_close_r+0x1c>)
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	4604      	mov	r4, r0
 800fe10:	4608      	mov	r0, r1
 800fe12:	602b      	str	r3, [r5, #0]
 800fe14:	f7f2 fb71 	bl	80024fa <_close>
 800fe18:	1c43      	adds	r3, r0, #1
 800fe1a:	d102      	bne.n	800fe22 <_close_r+0x1a>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	b103      	cbz	r3, 800fe22 <_close_r+0x1a>
 800fe20:	6023      	str	r3, [r4, #0]
 800fe22:	bd38      	pop	{r3, r4, r5, pc}
 800fe24:	240051d0 	.word	0x240051d0

0800fe28 <quorem>:
 800fe28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2c:	6903      	ldr	r3, [r0, #16]
 800fe2e:	690c      	ldr	r4, [r1, #16]
 800fe30:	42a3      	cmp	r3, r4
 800fe32:	4607      	mov	r7, r0
 800fe34:	f2c0 8081 	blt.w	800ff3a <quorem+0x112>
 800fe38:	3c01      	subs	r4, #1
 800fe3a:	f101 0814 	add.w	r8, r1, #20
 800fe3e:	f100 0514 	add.w	r5, r0, #20
 800fe42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe46:	9301      	str	r3, [sp, #4]
 800fe48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fe4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe50:	3301      	adds	r3, #1
 800fe52:	429a      	cmp	r2, r3
 800fe54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fe58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe60:	d331      	bcc.n	800fec6 <quorem+0x9e>
 800fe62:	f04f 0e00 	mov.w	lr, #0
 800fe66:	4640      	mov	r0, r8
 800fe68:	46ac      	mov	ip, r5
 800fe6a:	46f2      	mov	sl, lr
 800fe6c:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe70:	b293      	uxth	r3, r2
 800fe72:	fb06 e303 	mla	r3, r6, r3, lr
 800fe76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	ebaa 0303 	sub.w	r3, sl, r3
 800fe80:	f8dc a000 	ldr.w	sl, [ip]
 800fe84:	0c12      	lsrs	r2, r2, #16
 800fe86:	fa13 f38a 	uxtah	r3, r3, sl
 800fe8a:	fb06 e202 	mla	r2, r6, r2, lr
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	9b00      	ldr	r3, [sp, #0]
 800fe92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe96:	b292      	uxth	r2, r2
 800fe98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fe9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fea0:	f8bd 3000 	ldrh.w	r3, [sp]
 800fea4:	4581      	cmp	r9, r0
 800fea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800feaa:	f84c 3b04 	str.w	r3, [ip], #4
 800feae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800feb2:	d2db      	bcs.n	800fe6c <quorem+0x44>
 800feb4:	f855 300b 	ldr.w	r3, [r5, fp]
 800feb8:	b92b      	cbnz	r3, 800fec6 <quorem+0x9e>
 800feba:	9b01      	ldr	r3, [sp, #4]
 800febc:	3b04      	subs	r3, #4
 800febe:	429d      	cmp	r5, r3
 800fec0:	461a      	mov	r2, r3
 800fec2:	d32e      	bcc.n	800ff22 <quorem+0xfa>
 800fec4:	613c      	str	r4, [r7, #16]
 800fec6:	4638      	mov	r0, r7
 800fec8:	f001 fc14 	bl	80116f4 <__mcmp>
 800fecc:	2800      	cmp	r0, #0
 800fece:	db24      	blt.n	800ff1a <quorem+0xf2>
 800fed0:	3601      	adds	r6, #1
 800fed2:	4628      	mov	r0, r5
 800fed4:	f04f 0c00 	mov.w	ip, #0
 800fed8:	f858 2b04 	ldr.w	r2, [r8], #4
 800fedc:	f8d0 e000 	ldr.w	lr, [r0]
 800fee0:	b293      	uxth	r3, r2
 800fee2:	ebac 0303 	sub.w	r3, ip, r3
 800fee6:	0c12      	lsrs	r2, r2, #16
 800fee8:	fa13 f38e 	uxtah	r3, r3, lr
 800feec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fefa:	45c1      	cmp	r9, r8
 800fefc:	f840 3b04 	str.w	r3, [r0], #4
 800ff00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ff04:	d2e8      	bcs.n	800fed8 <quorem+0xb0>
 800ff06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff0e:	b922      	cbnz	r2, 800ff1a <quorem+0xf2>
 800ff10:	3b04      	subs	r3, #4
 800ff12:	429d      	cmp	r5, r3
 800ff14:	461a      	mov	r2, r3
 800ff16:	d30a      	bcc.n	800ff2e <quorem+0x106>
 800ff18:	613c      	str	r4, [r7, #16]
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	b003      	add	sp, #12
 800ff1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff22:	6812      	ldr	r2, [r2, #0]
 800ff24:	3b04      	subs	r3, #4
 800ff26:	2a00      	cmp	r2, #0
 800ff28:	d1cc      	bne.n	800fec4 <quorem+0x9c>
 800ff2a:	3c01      	subs	r4, #1
 800ff2c:	e7c7      	b.n	800febe <quorem+0x96>
 800ff2e:	6812      	ldr	r2, [r2, #0]
 800ff30:	3b04      	subs	r3, #4
 800ff32:	2a00      	cmp	r2, #0
 800ff34:	d1f0      	bne.n	800ff18 <quorem+0xf0>
 800ff36:	3c01      	subs	r4, #1
 800ff38:	e7eb      	b.n	800ff12 <quorem+0xea>
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	e7ee      	b.n	800ff1c <quorem+0xf4>
	...

0800ff40 <_dtoa_r>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	ed2d 8b02 	vpush	{d8}
 800ff48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ff4a:	b091      	sub	sp, #68	; 0x44
 800ff4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ff50:	ec59 8b10 	vmov	r8, r9, d0
 800ff54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ff56:	9106      	str	r1, [sp, #24]
 800ff58:	4606      	mov	r6, r0
 800ff5a:	9208      	str	r2, [sp, #32]
 800ff5c:	930c      	str	r3, [sp, #48]	; 0x30
 800ff5e:	b975      	cbnz	r5, 800ff7e <_dtoa_r+0x3e>
 800ff60:	2010      	movs	r0, #16
 800ff62:	f001 f8e1 	bl	8011128 <malloc>
 800ff66:	4602      	mov	r2, r0
 800ff68:	6270      	str	r0, [r6, #36]	; 0x24
 800ff6a:	b920      	cbnz	r0, 800ff76 <_dtoa_r+0x36>
 800ff6c:	4baa      	ldr	r3, [pc, #680]	; (8010218 <_dtoa_r+0x2d8>)
 800ff6e:	21ea      	movs	r1, #234	; 0xea
 800ff70:	48aa      	ldr	r0, [pc, #680]	; (801021c <_dtoa_r+0x2dc>)
 800ff72:	f002 fc59 	bl	8012828 <__assert_func>
 800ff76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff7a:	6005      	str	r5, [r0, #0]
 800ff7c:	60c5      	str	r5, [r0, #12]
 800ff7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff80:	6819      	ldr	r1, [r3, #0]
 800ff82:	b151      	cbz	r1, 800ff9a <_dtoa_r+0x5a>
 800ff84:	685a      	ldr	r2, [r3, #4]
 800ff86:	604a      	str	r2, [r1, #4]
 800ff88:	2301      	movs	r3, #1
 800ff8a:	4093      	lsls	r3, r2
 800ff8c:	608b      	str	r3, [r1, #8]
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f001 f924 	bl	80111dc <_Bfree>
 800ff94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff96:	2200      	movs	r2, #0
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	f1b9 0300 	subs.w	r3, r9, #0
 800ff9e:	bfbb      	ittet	lt
 800ffa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ffa4:	9303      	strlt	r3, [sp, #12]
 800ffa6:	2300      	movge	r3, #0
 800ffa8:	2201      	movlt	r2, #1
 800ffaa:	bfac      	ite	ge
 800ffac:	6023      	strge	r3, [r4, #0]
 800ffae:	6022      	strlt	r2, [r4, #0]
 800ffb0:	4b9b      	ldr	r3, [pc, #620]	; (8010220 <_dtoa_r+0x2e0>)
 800ffb2:	9c03      	ldr	r4, [sp, #12]
 800ffb4:	43a3      	bics	r3, r4
 800ffb6:	d11c      	bne.n	800fff2 <_dtoa_r+0xb2>
 800ffb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffba:	f242 730f 	movw	r3, #9999	; 0x270f
 800ffbe:	6013      	str	r3, [r2, #0]
 800ffc0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ffc4:	ea53 0308 	orrs.w	r3, r3, r8
 800ffc8:	f000 84fd 	beq.w	80109c6 <_dtoa_r+0xa86>
 800ffcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ffce:	b963      	cbnz	r3, 800ffea <_dtoa_r+0xaa>
 800ffd0:	4b94      	ldr	r3, [pc, #592]	; (8010224 <_dtoa_r+0x2e4>)
 800ffd2:	e01f      	b.n	8010014 <_dtoa_r+0xd4>
 800ffd4:	4b94      	ldr	r3, [pc, #592]	; (8010228 <_dtoa_r+0x2e8>)
 800ffd6:	9301      	str	r3, [sp, #4]
 800ffd8:	3308      	adds	r3, #8
 800ffda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ffdc:	6013      	str	r3, [r2, #0]
 800ffde:	9801      	ldr	r0, [sp, #4]
 800ffe0:	b011      	add	sp, #68	; 0x44
 800ffe2:	ecbd 8b02 	vpop	{d8}
 800ffe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffea:	4b8e      	ldr	r3, [pc, #568]	; (8010224 <_dtoa_r+0x2e4>)
 800ffec:	9301      	str	r3, [sp, #4]
 800ffee:	3303      	adds	r3, #3
 800fff0:	e7f3      	b.n	800ffda <_dtoa_r+0x9a>
 800fff2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fff6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffe:	d10b      	bne.n	8010018 <_dtoa_r+0xd8>
 8010000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010002:	2301      	movs	r3, #1
 8010004:	6013      	str	r3, [r2, #0]
 8010006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010008:	2b00      	cmp	r3, #0
 801000a:	f000 84d9 	beq.w	80109c0 <_dtoa_r+0xa80>
 801000e:	4887      	ldr	r0, [pc, #540]	; (801022c <_dtoa_r+0x2ec>)
 8010010:	6018      	str	r0, [r3, #0]
 8010012:	1e43      	subs	r3, r0, #1
 8010014:	9301      	str	r3, [sp, #4]
 8010016:	e7e2      	b.n	800ffde <_dtoa_r+0x9e>
 8010018:	a90f      	add	r1, sp, #60	; 0x3c
 801001a:	aa0e      	add	r2, sp, #56	; 0x38
 801001c:	4630      	mov	r0, r6
 801001e:	eeb0 0b48 	vmov.f64	d0, d8
 8010022:	f001 fc89 	bl	8011938 <__d2b>
 8010026:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801002a:	4605      	mov	r5, r0
 801002c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801002e:	2900      	cmp	r1, #0
 8010030:	d046      	beq.n	80100c0 <_dtoa_r+0x180>
 8010032:	ee18 4a90 	vmov	r4, s17
 8010036:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801003a:	ec53 2b18 	vmov	r2, r3, d8
 801003e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010042:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010046:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801004a:	2400      	movs	r4, #0
 801004c:	ec43 2b16 	vmov	d6, r2, r3
 8010050:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010054:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010200 <_dtoa_r+0x2c0>
 8010058:	ee36 7b47 	vsub.f64	d7, d6, d7
 801005c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8010208 <_dtoa_r+0x2c8>
 8010060:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010064:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010210 <_dtoa_r+0x2d0>
 8010068:	ee07 1a90 	vmov	s15, r1
 801006c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010070:	eeb0 7b46 	vmov.f64	d7, d6
 8010074:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010078:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801007c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010084:	ee16 ba90 	vmov	fp, s13
 8010088:	940a      	str	r4, [sp, #40]	; 0x28
 801008a:	d508      	bpl.n	801009e <_dtoa_r+0x15e>
 801008c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010090:	eeb4 6b47 	vcmp.f64	d6, d7
 8010094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010098:	bf18      	it	ne
 801009a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801009e:	f1bb 0f16 	cmp.w	fp, #22
 80100a2:	d82f      	bhi.n	8010104 <_dtoa_r+0x1c4>
 80100a4:	4b62      	ldr	r3, [pc, #392]	; (8010230 <_dtoa_r+0x2f0>)
 80100a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80100aa:	ed93 7b00 	vldr	d7, [r3]
 80100ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80100b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b6:	d501      	bpl.n	80100bc <_dtoa_r+0x17c>
 80100b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80100bc:	2300      	movs	r3, #0
 80100be:	e022      	b.n	8010106 <_dtoa_r+0x1c6>
 80100c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80100c2:	4401      	add	r1, r0
 80100c4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80100c8:	2b20      	cmp	r3, #32
 80100ca:	bfc1      	itttt	gt
 80100cc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80100d0:	fa04 f303 	lslgt.w	r3, r4, r3
 80100d4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80100d8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80100dc:	bfd6      	itet	le
 80100de:	f1c3 0320 	rsble	r3, r3, #32
 80100e2:	ea43 0808 	orrgt.w	r8, r3, r8
 80100e6:	fa08 f803 	lslle.w	r8, r8, r3
 80100ea:	ee07 8a90 	vmov	s15, r8
 80100ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80100f2:	3901      	subs	r1, #1
 80100f4:	ee17 4a90 	vmov	r4, s15
 80100f8:	ec53 2b17 	vmov	r2, r3, d7
 80100fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010100:	2401      	movs	r4, #1
 8010102:	e7a3      	b.n	801004c <_dtoa_r+0x10c>
 8010104:	2301      	movs	r3, #1
 8010106:	930b      	str	r3, [sp, #44]	; 0x2c
 8010108:	1a43      	subs	r3, r0, r1
 801010a:	1e5a      	subs	r2, r3, #1
 801010c:	bf45      	ittet	mi
 801010e:	f1c3 0301 	rsbmi	r3, r3, #1
 8010112:	9304      	strmi	r3, [sp, #16]
 8010114:	2300      	movpl	r3, #0
 8010116:	2300      	movmi	r3, #0
 8010118:	9205      	str	r2, [sp, #20]
 801011a:	bf54      	ite	pl
 801011c:	9304      	strpl	r3, [sp, #16]
 801011e:	9305      	strmi	r3, [sp, #20]
 8010120:	f1bb 0f00 	cmp.w	fp, #0
 8010124:	db18      	blt.n	8010158 <_dtoa_r+0x218>
 8010126:	9b05      	ldr	r3, [sp, #20]
 8010128:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801012c:	445b      	add	r3, fp
 801012e:	9305      	str	r3, [sp, #20]
 8010130:	2300      	movs	r3, #0
 8010132:	9a06      	ldr	r2, [sp, #24]
 8010134:	2a09      	cmp	r2, #9
 8010136:	d849      	bhi.n	80101cc <_dtoa_r+0x28c>
 8010138:	2a05      	cmp	r2, #5
 801013a:	bfc4      	itt	gt
 801013c:	3a04      	subgt	r2, #4
 801013e:	9206      	strgt	r2, [sp, #24]
 8010140:	9a06      	ldr	r2, [sp, #24]
 8010142:	f1a2 0202 	sub.w	r2, r2, #2
 8010146:	bfcc      	ite	gt
 8010148:	2400      	movgt	r4, #0
 801014a:	2401      	movle	r4, #1
 801014c:	2a03      	cmp	r2, #3
 801014e:	d848      	bhi.n	80101e2 <_dtoa_r+0x2a2>
 8010150:	e8df f002 	tbb	[pc, r2]
 8010154:	3a2c2e0b 	.word	0x3a2c2e0b
 8010158:	9b04      	ldr	r3, [sp, #16]
 801015a:	2200      	movs	r2, #0
 801015c:	eba3 030b 	sub.w	r3, r3, fp
 8010160:	9304      	str	r3, [sp, #16]
 8010162:	9209      	str	r2, [sp, #36]	; 0x24
 8010164:	f1cb 0300 	rsb	r3, fp, #0
 8010168:	e7e3      	b.n	8010132 <_dtoa_r+0x1f2>
 801016a:	2200      	movs	r2, #0
 801016c:	9207      	str	r2, [sp, #28]
 801016e:	9a08      	ldr	r2, [sp, #32]
 8010170:	2a00      	cmp	r2, #0
 8010172:	dc39      	bgt.n	80101e8 <_dtoa_r+0x2a8>
 8010174:	f04f 0a01 	mov.w	sl, #1
 8010178:	46d1      	mov	r9, sl
 801017a:	4652      	mov	r2, sl
 801017c:	f8cd a020 	str.w	sl, [sp, #32]
 8010180:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010182:	2100      	movs	r1, #0
 8010184:	6079      	str	r1, [r7, #4]
 8010186:	2004      	movs	r0, #4
 8010188:	f100 0c14 	add.w	ip, r0, #20
 801018c:	4594      	cmp	ip, r2
 801018e:	6879      	ldr	r1, [r7, #4]
 8010190:	d92f      	bls.n	80101f2 <_dtoa_r+0x2b2>
 8010192:	4630      	mov	r0, r6
 8010194:	930d      	str	r3, [sp, #52]	; 0x34
 8010196:	f000 ffe1 	bl	801115c <_Balloc>
 801019a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801019c:	9001      	str	r0, [sp, #4]
 801019e:	4602      	mov	r2, r0
 80101a0:	2800      	cmp	r0, #0
 80101a2:	d149      	bne.n	8010238 <_dtoa_r+0x2f8>
 80101a4:	4b23      	ldr	r3, [pc, #140]	; (8010234 <_dtoa_r+0x2f4>)
 80101a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80101aa:	e6e1      	b.n	800ff70 <_dtoa_r+0x30>
 80101ac:	2201      	movs	r2, #1
 80101ae:	e7dd      	b.n	801016c <_dtoa_r+0x22c>
 80101b0:	2200      	movs	r2, #0
 80101b2:	9207      	str	r2, [sp, #28]
 80101b4:	9a08      	ldr	r2, [sp, #32]
 80101b6:	eb0b 0a02 	add.w	sl, fp, r2
 80101ba:	f10a 0901 	add.w	r9, sl, #1
 80101be:	464a      	mov	r2, r9
 80101c0:	2a01      	cmp	r2, #1
 80101c2:	bfb8      	it	lt
 80101c4:	2201      	movlt	r2, #1
 80101c6:	e7db      	b.n	8010180 <_dtoa_r+0x240>
 80101c8:	2201      	movs	r2, #1
 80101ca:	e7f2      	b.n	80101b2 <_dtoa_r+0x272>
 80101cc:	2401      	movs	r4, #1
 80101ce:	2200      	movs	r2, #0
 80101d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80101d4:	f04f 3aff 	mov.w	sl, #4294967295
 80101d8:	2100      	movs	r1, #0
 80101da:	46d1      	mov	r9, sl
 80101dc:	2212      	movs	r2, #18
 80101de:	9108      	str	r1, [sp, #32]
 80101e0:	e7ce      	b.n	8010180 <_dtoa_r+0x240>
 80101e2:	2201      	movs	r2, #1
 80101e4:	9207      	str	r2, [sp, #28]
 80101e6:	e7f5      	b.n	80101d4 <_dtoa_r+0x294>
 80101e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80101ec:	46d1      	mov	r9, sl
 80101ee:	4652      	mov	r2, sl
 80101f0:	e7c6      	b.n	8010180 <_dtoa_r+0x240>
 80101f2:	3101      	adds	r1, #1
 80101f4:	6079      	str	r1, [r7, #4]
 80101f6:	0040      	lsls	r0, r0, #1
 80101f8:	e7c6      	b.n	8010188 <_dtoa_r+0x248>
 80101fa:	bf00      	nop
 80101fc:	f3af 8000 	nop.w
 8010200:	636f4361 	.word	0x636f4361
 8010204:	3fd287a7 	.word	0x3fd287a7
 8010208:	8b60c8b3 	.word	0x8b60c8b3
 801020c:	3fc68a28 	.word	0x3fc68a28
 8010210:	509f79fb 	.word	0x509f79fb
 8010214:	3fd34413 	.word	0x3fd34413
 8010218:	080144be 	.word	0x080144be
 801021c:	080144d5 	.word	0x080144d5
 8010220:	7ff00000 	.word	0x7ff00000
 8010224:	080144ba 	.word	0x080144ba
 8010228:	080144b1 	.word	0x080144b1
 801022c:	0801472a 	.word	0x0801472a
 8010230:	08014640 	.word	0x08014640
 8010234:	08014530 	.word	0x08014530
 8010238:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801023a:	9901      	ldr	r1, [sp, #4]
 801023c:	6011      	str	r1, [r2, #0]
 801023e:	f1b9 0f0e 	cmp.w	r9, #14
 8010242:	d86c      	bhi.n	801031e <_dtoa_r+0x3de>
 8010244:	2c00      	cmp	r4, #0
 8010246:	d06a      	beq.n	801031e <_dtoa_r+0x3de>
 8010248:	f1bb 0f00 	cmp.w	fp, #0
 801024c:	f340 80a0 	ble.w	8010390 <_dtoa_r+0x450>
 8010250:	49c1      	ldr	r1, [pc, #772]	; (8010558 <_dtoa_r+0x618>)
 8010252:	f00b 020f 	and.w	r2, fp, #15
 8010256:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801025a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801025e:	ed92 7b00 	vldr	d7, [r2]
 8010262:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010266:	f000 8087 	beq.w	8010378 <_dtoa_r+0x438>
 801026a:	4abc      	ldr	r2, [pc, #752]	; (801055c <_dtoa_r+0x61c>)
 801026c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010270:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010274:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010278:	f001 010f 	and.w	r1, r1, #15
 801027c:	2203      	movs	r2, #3
 801027e:	48b7      	ldr	r0, [pc, #732]	; (801055c <_dtoa_r+0x61c>)
 8010280:	2900      	cmp	r1, #0
 8010282:	d17b      	bne.n	801037c <_dtoa_r+0x43c>
 8010284:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010288:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801028c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010292:	2900      	cmp	r1, #0
 8010294:	f000 80a2 	beq.w	80103dc <_dtoa_r+0x49c>
 8010298:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801029c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80102a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a8:	f140 8098 	bpl.w	80103dc <_dtoa_r+0x49c>
 80102ac:	f1b9 0f00 	cmp.w	r9, #0
 80102b0:	f000 8094 	beq.w	80103dc <_dtoa_r+0x49c>
 80102b4:	f1ba 0f00 	cmp.w	sl, #0
 80102b8:	dd2f      	ble.n	801031a <_dtoa_r+0x3da>
 80102ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80102be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80102c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80102c6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80102ca:	3201      	adds	r2, #1
 80102cc:	4650      	mov	r0, sl
 80102ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80102d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80102d6:	ee07 2a90 	vmov	s15, r2
 80102da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80102de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80102e2:	ee15 4a90 	vmov	r4, s11
 80102e6:	ec52 1b15 	vmov	r1, r2, d5
 80102ea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80102ee:	2800      	cmp	r0, #0
 80102f0:	d177      	bne.n	80103e2 <_dtoa_r+0x4a2>
 80102f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80102f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80102fa:	ec42 1b17 	vmov	d7, r1, r2
 80102fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010306:	f300 8263 	bgt.w	80107d0 <_dtoa_r+0x890>
 801030a:	eeb1 7b47 	vneg.f64	d7, d7
 801030e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010316:	f100 8258 	bmi.w	80107ca <_dtoa_r+0x88a>
 801031a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801031e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010320:	2a00      	cmp	r2, #0
 8010322:	f2c0 811d 	blt.w	8010560 <_dtoa_r+0x620>
 8010326:	f1bb 0f0e 	cmp.w	fp, #14
 801032a:	f300 8119 	bgt.w	8010560 <_dtoa_r+0x620>
 801032e:	4b8a      	ldr	r3, [pc, #552]	; (8010558 <_dtoa_r+0x618>)
 8010330:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010334:	ed93 6b00 	vldr	d6, [r3]
 8010338:	9b08      	ldr	r3, [sp, #32]
 801033a:	2b00      	cmp	r3, #0
 801033c:	f280 80b7 	bge.w	80104ae <_dtoa_r+0x56e>
 8010340:	f1b9 0f00 	cmp.w	r9, #0
 8010344:	f300 80b3 	bgt.w	80104ae <_dtoa_r+0x56e>
 8010348:	f040 823f 	bne.w	80107ca <_dtoa_r+0x88a>
 801034c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010350:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010354:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010358:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801035c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010360:	464c      	mov	r4, r9
 8010362:	464f      	mov	r7, r9
 8010364:	f280 8215 	bge.w	8010792 <_dtoa_r+0x852>
 8010368:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801036c:	2331      	movs	r3, #49	; 0x31
 801036e:	f808 3b01 	strb.w	r3, [r8], #1
 8010372:	f10b 0b01 	add.w	fp, fp, #1
 8010376:	e211      	b.n	801079c <_dtoa_r+0x85c>
 8010378:	2202      	movs	r2, #2
 801037a:	e780      	b.n	801027e <_dtoa_r+0x33e>
 801037c:	07cc      	lsls	r4, r1, #31
 801037e:	d504      	bpl.n	801038a <_dtoa_r+0x44a>
 8010380:	ed90 6b00 	vldr	d6, [r0]
 8010384:	3201      	adds	r2, #1
 8010386:	ee27 7b06 	vmul.f64	d7, d7, d6
 801038a:	1049      	asrs	r1, r1, #1
 801038c:	3008      	adds	r0, #8
 801038e:	e777      	b.n	8010280 <_dtoa_r+0x340>
 8010390:	d022      	beq.n	80103d8 <_dtoa_r+0x498>
 8010392:	f1cb 0100 	rsb	r1, fp, #0
 8010396:	4a70      	ldr	r2, [pc, #448]	; (8010558 <_dtoa_r+0x618>)
 8010398:	f001 000f 	and.w	r0, r1, #15
 801039c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80103a0:	ed92 7b00 	vldr	d7, [r2]
 80103a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80103a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80103ac:	486b      	ldr	r0, [pc, #428]	; (801055c <_dtoa_r+0x61c>)
 80103ae:	1109      	asrs	r1, r1, #4
 80103b0:	2400      	movs	r4, #0
 80103b2:	2202      	movs	r2, #2
 80103b4:	b929      	cbnz	r1, 80103c2 <_dtoa_r+0x482>
 80103b6:	2c00      	cmp	r4, #0
 80103b8:	f43f af6a 	beq.w	8010290 <_dtoa_r+0x350>
 80103bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80103c0:	e766      	b.n	8010290 <_dtoa_r+0x350>
 80103c2:	07cf      	lsls	r7, r1, #31
 80103c4:	d505      	bpl.n	80103d2 <_dtoa_r+0x492>
 80103c6:	ed90 6b00 	vldr	d6, [r0]
 80103ca:	3201      	adds	r2, #1
 80103cc:	2401      	movs	r4, #1
 80103ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80103d2:	1049      	asrs	r1, r1, #1
 80103d4:	3008      	adds	r0, #8
 80103d6:	e7ed      	b.n	80103b4 <_dtoa_r+0x474>
 80103d8:	2202      	movs	r2, #2
 80103da:	e759      	b.n	8010290 <_dtoa_r+0x350>
 80103dc:	465f      	mov	r7, fp
 80103de:	4648      	mov	r0, r9
 80103e0:	e775      	b.n	80102ce <_dtoa_r+0x38e>
 80103e2:	ec42 1b17 	vmov	d7, r1, r2
 80103e6:	4a5c      	ldr	r2, [pc, #368]	; (8010558 <_dtoa_r+0x618>)
 80103e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80103ec:	ed12 4b02 	vldr	d4, [r2, #-8]
 80103f0:	9a01      	ldr	r2, [sp, #4]
 80103f2:	1814      	adds	r4, r2, r0
 80103f4:	9a07      	ldr	r2, [sp, #28]
 80103f6:	b352      	cbz	r2, 801044e <_dtoa_r+0x50e>
 80103f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80103fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010400:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010404:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010408:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801040c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010410:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010414:	ee14 2a90 	vmov	r2, s9
 8010418:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801041c:	3230      	adds	r2, #48	; 0x30
 801041e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010422:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042a:	f808 2b01 	strb.w	r2, [r8], #1
 801042e:	d439      	bmi.n	80104a4 <_dtoa_r+0x564>
 8010430:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010434:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043c:	d472      	bmi.n	8010524 <_dtoa_r+0x5e4>
 801043e:	45a0      	cmp	r8, r4
 8010440:	f43f af6b 	beq.w	801031a <_dtoa_r+0x3da>
 8010444:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010448:	ee26 6b03 	vmul.f64	d6, d6, d3
 801044c:	e7e0      	b.n	8010410 <_dtoa_r+0x4d0>
 801044e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010452:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010456:	4621      	mov	r1, r4
 8010458:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801045c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010460:	ee14 2a90 	vmov	r2, s9
 8010464:	3230      	adds	r2, #48	; 0x30
 8010466:	f808 2b01 	strb.w	r2, [r8], #1
 801046a:	45a0      	cmp	r8, r4
 801046c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010470:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010474:	d118      	bne.n	80104a8 <_dtoa_r+0x568>
 8010476:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801047a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801047e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010486:	dc4d      	bgt.n	8010524 <_dtoa_r+0x5e4>
 8010488:	ee35 7b47 	vsub.f64	d7, d5, d7
 801048c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010494:	f57f af41 	bpl.w	801031a <_dtoa_r+0x3da>
 8010498:	4688      	mov	r8, r1
 801049a:	3901      	subs	r1, #1
 801049c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80104a0:	2b30      	cmp	r3, #48	; 0x30
 80104a2:	d0f9      	beq.n	8010498 <_dtoa_r+0x558>
 80104a4:	46bb      	mov	fp, r7
 80104a6:	e02a      	b.n	80104fe <_dtoa_r+0x5be>
 80104a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80104ac:	e7d6      	b.n	801045c <_dtoa_r+0x51c>
 80104ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80104b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80104ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80104be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80104c2:	ee15 3a10 	vmov	r3, s10
 80104c6:	3330      	adds	r3, #48	; 0x30
 80104c8:	f808 3b01 	strb.w	r3, [r8], #1
 80104cc:	9b01      	ldr	r3, [sp, #4]
 80104ce:	eba8 0303 	sub.w	r3, r8, r3
 80104d2:	4599      	cmp	r9, r3
 80104d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80104d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80104dc:	d133      	bne.n	8010546 <_dtoa_r+0x606>
 80104de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80104e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80104e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ea:	dc1a      	bgt.n	8010522 <_dtoa_r+0x5e2>
 80104ec:	eeb4 7b46 	vcmp.f64	d7, d6
 80104f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104f4:	d103      	bne.n	80104fe <_dtoa_r+0x5be>
 80104f6:	ee15 3a10 	vmov	r3, s10
 80104fa:	07d9      	lsls	r1, r3, #31
 80104fc:	d411      	bmi.n	8010522 <_dtoa_r+0x5e2>
 80104fe:	4629      	mov	r1, r5
 8010500:	4630      	mov	r0, r6
 8010502:	f000 fe6b 	bl	80111dc <_Bfree>
 8010506:	2300      	movs	r3, #0
 8010508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801050a:	f888 3000 	strb.w	r3, [r8]
 801050e:	f10b 0301 	add.w	r3, fp, #1
 8010512:	6013      	str	r3, [r2, #0]
 8010514:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010516:	2b00      	cmp	r3, #0
 8010518:	f43f ad61 	beq.w	800ffde <_dtoa_r+0x9e>
 801051c:	f8c3 8000 	str.w	r8, [r3]
 8010520:	e55d      	b.n	800ffde <_dtoa_r+0x9e>
 8010522:	465f      	mov	r7, fp
 8010524:	4643      	mov	r3, r8
 8010526:	4698      	mov	r8, r3
 8010528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801052c:	2a39      	cmp	r2, #57	; 0x39
 801052e:	d106      	bne.n	801053e <_dtoa_r+0x5fe>
 8010530:	9a01      	ldr	r2, [sp, #4]
 8010532:	429a      	cmp	r2, r3
 8010534:	d1f7      	bne.n	8010526 <_dtoa_r+0x5e6>
 8010536:	9901      	ldr	r1, [sp, #4]
 8010538:	2230      	movs	r2, #48	; 0x30
 801053a:	3701      	adds	r7, #1
 801053c:	700a      	strb	r2, [r1, #0]
 801053e:	781a      	ldrb	r2, [r3, #0]
 8010540:	3201      	adds	r2, #1
 8010542:	701a      	strb	r2, [r3, #0]
 8010544:	e7ae      	b.n	80104a4 <_dtoa_r+0x564>
 8010546:	ee27 7b04 	vmul.f64	d7, d7, d4
 801054a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010552:	d1b2      	bne.n	80104ba <_dtoa_r+0x57a>
 8010554:	e7d3      	b.n	80104fe <_dtoa_r+0x5be>
 8010556:	bf00      	nop
 8010558:	08014640 	.word	0x08014640
 801055c:	08014618 	.word	0x08014618
 8010560:	9907      	ldr	r1, [sp, #28]
 8010562:	2900      	cmp	r1, #0
 8010564:	f000 80d0 	beq.w	8010708 <_dtoa_r+0x7c8>
 8010568:	9906      	ldr	r1, [sp, #24]
 801056a:	2901      	cmp	r1, #1
 801056c:	f300 80b4 	bgt.w	80106d8 <_dtoa_r+0x798>
 8010570:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010572:	2900      	cmp	r1, #0
 8010574:	f000 80ac 	beq.w	80106d0 <_dtoa_r+0x790>
 8010578:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801057c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010580:	461c      	mov	r4, r3
 8010582:	930a      	str	r3, [sp, #40]	; 0x28
 8010584:	9b04      	ldr	r3, [sp, #16]
 8010586:	4413      	add	r3, r2
 8010588:	9304      	str	r3, [sp, #16]
 801058a:	9b05      	ldr	r3, [sp, #20]
 801058c:	2101      	movs	r1, #1
 801058e:	4413      	add	r3, r2
 8010590:	4630      	mov	r0, r6
 8010592:	9305      	str	r3, [sp, #20]
 8010594:	f000 ff24 	bl	80113e0 <__i2b>
 8010598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801059a:	4607      	mov	r7, r0
 801059c:	f1b8 0f00 	cmp.w	r8, #0
 80105a0:	dd0d      	ble.n	80105be <_dtoa_r+0x67e>
 80105a2:	9a05      	ldr	r2, [sp, #20]
 80105a4:	2a00      	cmp	r2, #0
 80105a6:	dd0a      	ble.n	80105be <_dtoa_r+0x67e>
 80105a8:	4542      	cmp	r2, r8
 80105aa:	9904      	ldr	r1, [sp, #16]
 80105ac:	bfa8      	it	ge
 80105ae:	4642      	movge	r2, r8
 80105b0:	1a89      	subs	r1, r1, r2
 80105b2:	9104      	str	r1, [sp, #16]
 80105b4:	9905      	ldr	r1, [sp, #20]
 80105b6:	eba8 0802 	sub.w	r8, r8, r2
 80105ba:	1a8a      	subs	r2, r1, r2
 80105bc:	9205      	str	r2, [sp, #20]
 80105be:	b303      	cbz	r3, 8010602 <_dtoa_r+0x6c2>
 80105c0:	9a07      	ldr	r2, [sp, #28]
 80105c2:	2a00      	cmp	r2, #0
 80105c4:	f000 80a5 	beq.w	8010712 <_dtoa_r+0x7d2>
 80105c8:	2c00      	cmp	r4, #0
 80105ca:	dd13      	ble.n	80105f4 <_dtoa_r+0x6b4>
 80105cc:	4639      	mov	r1, r7
 80105ce:	4622      	mov	r2, r4
 80105d0:	4630      	mov	r0, r6
 80105d2:	930d      	str	r3, [sp, #52]	; 0x34
 80105d4:	f000 ffc4 	bl	8011560 <__pow5mult>
 80105d8:	462a      	mov	r2, r5
 80105da:	4601      	mov	r1, r0
 80105dc:	4607      	mov	r7, r0
 80105de:	4630      	mov	r0, r6
 80105e0:	f000 ff14 	bl	801140c <__multiply>
 80105e4:	4629      	mov	r1, r5
 80105e6:	900a      	str	r0, [sp, #40]	; 0x28
 80105e8:	4630      	mov	r0, r6
 80105ea:	f000 fdf7 	bl	80111dc <_Bfree>
 80105ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105f2:	4615      	mov	r5, r2
 80105f4:	1b1a      	subs	r2, r3, r4
 80105f6:	d004      	beq.n	8010602 <_dtoa_r+0x6c2>
 80105f8:	4629      	mov	r1, r5
 80105fa:	4630      	mov	r0, r6
 80105fc:	f000 ffb0 	bl	8011560 <__pow5mult>
 8010600:	4605      	mov	r5, r0
 8010602:	2101      	movs	r1, #1
 8010604:	4630      	mov	r0, r6
 8010606:	f000 feeb 	bl	80113e0 <__i2b>
 801060a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801060c:	2b00      	cmp	r3, #0
 801060e:	4604      	mov	r4, r0
 8010610:	f340 8081 	ble.w	8010716 <_dtoa_r+0x7d6>
 8010614:	461a      	mov	r2, r3
 8010616:	4601      	mov	r1, r0
 8010618:	4630      	mov	r0, r6
 801061a:	f000 ffa1 	bl	8011560 <__pow5mult>
 801061e:	9b06      	ldr	r3, [sp, #24]
 8010620:	2b01      	cmp	r3, #1
 8010622:	4604      	mov	r4, r0
 8010624:	dd7a      	ble.n	801071c <_dtoa_r+0x7dc>
 8010626:	2300      	movs	r3, #0
 8010628:	930a      	str	r3, [sp, #40]	; 0x28
 801062a:	6922      	ldr	r2, [r4, #16]
 801062c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010630:	6910      	ldr	r0, [r2, #16]
 8010632:	f000 fe85 	bl	8011340 <__hi0bits>
 8010636:	f1c0 0020 	rsb	r0, r0, #32
 801063a:	9b05      	ldr	r3, [sp, #20]
 801063c:	4418      	add	r0, r3
 801063e:	f010 001f 	ands.w	r0, r0, #31
 8010642:	f000 808c 	beq.w	801075e <_dtoa_r+0x81e>
 8010646:	f1c0 0220 	rsb	r2, r0, #32
 801064a:	2a04      	cmp	r2, #4
 801064c:	f340 8085 	ble.w	801075a <_dtoa_r+0x81a>
 8010650:	f1c0 001c 	rsb	r0, r0, #28
 8010654:	9b04      	ldr	r3, [sp, #16]
 8010656:	4403      	add	r3, r0
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	9b05      	ldr	r3, [sp, #20]
 801065c:	4403      	add	r3, r0
 801065e:	4480      	add	r8, r0
 8010660:	9305      	str	r3, [sp, #20]
 8010662:	9b04      	ldr	r3, [sp, #16]
 8010664:	2b00      	cmp	r3, #0
 8010666:	dd05      	ble.n	8010674 <_dtoa_r+0x734>
 8010668:	4629      	mov	r1, r5
 801066a:	461a      	mov	r2, r3
 801066c:	4630      	mov	r0, r6
 801066e:	f000 ffd1 	bl	8011614 <__lshift>
 8010672:	4605      	mov	r5, r0
 8010674:	9b05      	ldr	r3, [sp, #20]
 8010676:	2b00      	cmp	r3, #0
 8010678:	dd05      	ble.n	8010686 <_dtoa_r+0x746>
 801067a:	4621      	mov	r1, r4
 801067c:	461a      	mov	r2, r3
 801067e:	4630      	mov	r0, r6
 8010680:	f000 ffc8 	bl	8011614 <__lshift>
 8010684:	4604      	mov	r4, r0
 8010686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010688:	2b00      	cmp	r3, #0
 801068a:	d06a      	beq.n	8010762 <_dtoa_r+0x822>
 801068c:	4621      	mov	r1, r4
 801068e:	4628      	mov	r0, r5
 8010690:	f001 f830 	bl	80116f4 <__mcmp>
 8010694:	2800      	cmp	r0, #0
 8010696:	da64      	bge.n	8010762 <_dtoa_r+0x822>
 8010698:	2300      	movs	r3, #0
 801069a:	4629      	mov	r1, r5
 801069c:	220a      	movs	r2, #10
 801069e:	4630      	mov	r0, r6
 80106a0:	f000 fdbe 	bl	8011220 <__multadd>
 80106a4:	9b07      	ldr	r3, [sp, #28]
 80106a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106aa:	4605      	mov	r5, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f000 8191 	beq.w	80109d4 <_dtoa_r+0xa94>
 80106b2:	4639      	mov	r1, r7
 80106b4:	2300      	movs	r3, #0
 80106b6:	220a      	movs	r2, #10
 80106b8:	4630      	mov	r0, r6
 80106ba:	f000 fdb1 	bl	8011220 <__multadd>
 80106be:	f1ba 0f00 	cmp.w	sl, #0
 80106c2:	4607      	mov	r7, r0
 80106c4:	f300 808d 	bgt.w	80107e2 <_dtoa_r+0x8a2>
 80106c8:	9b06      	ldr	r3, [sp, #24]
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	dc50      	bgt.n	8010770 <_dtoa_r+0x830>
 80106ce:	e088      	b.n	80107e2 <_dtoa_r+0x8a2>
 80106d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80106d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80106d6:	e751      	b.n	801057c <_dtoa_r+0x63c>
 80106d8:	f109 34ff 	add.w	r4, r9, #4294967295
 80106dc:	42a3      	cmp	r3, r4
 80106de:	bfbf      	itttt	lt
 80106e0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80106e2:	1ae3      	sublt	r3, r4, r3
 80106e4:	18d2      	addlt	r2, r2, r3
 80106e6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80106e8:	bfb6      	itet	lt
 80106ea:	4623      	movlt	r3, r4
 80106ec:	1b1c      	subge	r4, r3, r4
 80106ee:	2400      	movlt	r4, #0
 80106f0:	f1b9 0f00 	cmp.w	r9, #0
 80106f4:	bfb5      	itete	lt
 80106f6:	9a04      	ldrlt	r2, [sp, #16]
 80106f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80106fc:	eba2 0809 	sublt.w	r8, r2, r9
 8010700:	464a      	movge	r2, r9
 8010702:	bfb8      	it	lt
 8010704:	2200      	movlt	r2, #0
 8010706:	e73c      	b.n	8010582 <_dtoa_r+0x642>
 8010708:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801070c:	9f07      	ldr	r7, [sp, #28]
 801070e:	461c      	mov	r4, r3
 8010710:	e744      	b.n	801059c <_dtoa_r+0x65c>
 8010712:	461a      	mov	r2, r3
 8010714:	e770      	b.n	80105f8 <_dtoa_r+0x6b8>
 8010716:	9b06      	ldr	r3, [sp, #24]
 8010718:	2b01      	cmp	r3, #1
 801071a:	dc18      	bgt.n	801074e <_dtoa_r+0x80e>
 801071c:	9b02      	ldr	r3, [sp, #8]
 801071e:	b9b3      	cbnz	r3, 801074e <_dtoa_r+0x80e>
 8010720:	9b03      	ldr	r3, [sp, #12]
 8010722:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010726:	b9a2      	cbnz	r2, 8010752 <_dtoa_r+0x812>
 8010728:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801072c:	0d12      	lsrs	r2, r2, #20
 801072e:	0512      	lsls	r2, r2, #20
 8010730:	b18a      	cbz	r2, 8010756 <_dtoa_r+0x816>
 8010732:	9b04      	ldr	r3, [sp, #16]
 8010734:	3301      	adds	r3, #1
 8010736:	9304      	str	r3, [sp, #16]
 8010738:	9b05      	ldr	r3, [sp, #20]
 801073a:	3301      	adds	r3, #1
 801073c:	9305      	str	r3, [sp, #20]
 801073e:	2301      	movs	r3, #1
 8010740:	930a      	str	r3, [sp, #40]	; 0x28
 8010742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010744:	2b00      	cmp	r3, #0
 8010746:	f47f af70 	bne.w	801062a <_dtoa_r+0x6ea>
 801074a:	2001      	movs	r0, #1
 801074c:	e775      	b.n	801063a <_dtoa_r+0x6fa>
 801074e:	2300      	movs	r3, #0
 8010750:	e7f6      	b.n	8010740 <_dtoa_r+0x800>
 8010752:	9b02      	ldr	r3, [sp, #8]
 8010754:	e7f4      	b.n	8010740 <_dtoa_r+0x800>
 8010756:	920a      	str	r2, [sp, #40]	; 0x28
 8010758:	e7f3      	b.n	8010742 <_dtoa_r+0x802>
 801075a:	d082      	beq.n	8010662 <_dtoa_r+0x722>
 801075c:	4610      	mov	r0, r2
 801075e:	301c      	adds	r0, #28
 8010760:	e778      	b.n	8010654 <_dtoa_r+0x714>
 8010762:	f1b9 0f00 	cmp.w	r9, #0
 8010766:	dc37      	bgt.n	80107d8 <_dtoa_r+0x898>
 8010768:	9b06      	ldr	r3, [sp, #24]
 801076a:	2b02      	cmp	r3, #2
 801076c:	dd34      	ble.n	80107d8 <_dtoa_r+0x898>
 801076e:	46ca      	mov	sl, r9
 8010770:	f1ba 0f00 	cmp.w	sl, #0
 8010774:	d10d      	bne.n	8010792 <_dtoa_r+0x852>
 8010776:	4621      	mov	r1, r4
 8010778:	4653      	mov	r3, sl
 801077a:	2205      	movs	r2, #5
 801077c:	4630      	mov	r0, r6
 801077e:	f000 fd4f 	bl	8011220 <__multadd>
 8010782:	4601      	mov	r1, r0
 8010784:	4604      	mov	r4, r0
 8010786:	4628      	mov	r0, r5
 8010788:	f000 ffb4 	bl	80116f4 <__mcmp>
 801078c:	2800      	cmp	r0, #0
 801078e:	f73f adeb 	bgt.w	8010368 <_dtoa_r+0x428>
 8010792:	9b08      	ldr	r3, [sp, #32]
 8010794:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010798:	ea6f 0b03 	mvn.w	fp, r3
 801079c:	f04f 0900 	mov.w	r9, #0
 80107a0:	4621      	mov	r1, r4
 80107a2:	4630      	mov	r0, r6
 80107a4:	f000 fd1a 	bl	80111dc <_Bfree>
 80107a8:	2f00      	cmp	r7, #0
 80107aa:	f43f aea8 	beq.w	80104fe <_dtoa_r+0x5be>
 80107ae:	f1b9 0f00 	cmp.w	r9, #0
 80107b2:	d005      	beq.n	80107c0 <_dtoa_r+0x880>
 80107b4:	45b9      	cmp	r9, r7
 80107b6:	d003      	beq.n	80107c0 <_dtoa_r+0x880>
 80107b8:	4649      	mov	r1, r9
 80107ba:	4630      	mov	r0, r6
 80107bc:	f000 fd0e 	bl	80111dc <_Bfree>
 80107c0:	4639      	mov	r1, r7
 80107c2:	4630      	mov	r0, r6
 80107c4:	f000 fd0a 	bl	80111dc <_Bfree>
 80107c8:	e699      	b.n	80104fe <_dtoa_r+0x5be>
 80107ca:	2400      	movs	r4, #0
 80107cc:	4627      	mov	r7, r4
 80107ce:	e7e0      	b.n	8010792 <_dtoa_r+0x852>
 80107d0:	46bb      	mov	fp, r7
 80107d2:	4604      	mov	r4, r0
 80107d4:	4607      	mov	r7, r0
 80107d6:	e5c7      	b.n	8010368 <_dtoa_r+0x428>
 80107d8:	9b07      	ldr	r3, [sp, #28]
 80107da:	46ca      	mov	sl, r9
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 8100 	beq.w	80109e2 <_dtoa_r+0xaa2>
 80107e2:	f1b8 0f00 	cmp.w	r8, #0
 80107e6:	dd05      	ble.n	80107f4 <_dtoa_r+0x8b4>
 80107e8:	4639      	mov	r1, r7
 80107ea:	4642      	mov	r2, r8
 80107ec:	4630      	mov	r0, r6
 80107ee:	f000 ff11 	bl	8011614 <__lshift>
 80107f2:	4607      	mov	r7, r0
 80107f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d05d      	beq.n	80108b6 <_dtoa_r+0x976>
 80107fa:	6879      	ldr	r1, [r7, #4]
 80107fc:	4630      	mov	r0, r6
 80107fe:	f000 fcad 	bl	801115c <_Balloc>
 8010802:	4680      	mov	r8, r0
 8010804:	b928      	cbnz	r0, 8010812 <_dtoa_r+0x8d2>
 8010806:	4b82      	ldr	r3, [pc, #520]	; (8010a10 <_dtoa_r+0xad0>)
 8010808:	4602      	mov	r2, r0
 801080a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801080e:	f7ff bbaf 	b.w	800ff70 <_dtoa_r+0x30>
 8010812:	693a      	ldr	r2, [r7, #16]
 8010814:	3202      	adds	r2, #2
 8010816:	0092      	lsls	r2, r2, #2
 8010818:	f107 010c 	add.w	r1, r7, #12
 801081c:	300c      	adds	r0, #12
 801081e:	f7fd fd21 	bl	800e264 <memcpy>
 8010822:	2201      	movs	r2, #1
 8010824:	4641      	mov	r1, r8
 8010826:	4630      	mov	r0, r6
 8010828:	f000 fef4 	bl	8011614 <__lshift>
 801082c:	9b01      	ldr	r3, [sp, #4]
 801082e:	3301      	adds	r3, #1
 8010830:	9304      	str	r3, [sp, #16]
 8010832:	9b01      	ldr	r3, [sp, #4]
 8010834:	4453      	add	r3, sl
 8010836:	9308      	str	r3, [sp, #32]
 8010838:	9b02      	ldr	r3, [sp, #8]
 801083a:	f003 0301 	and.w	r3, r3, #1
 801083e:	46b9      	mov	r9, r7
 8010840:	9307      	str	r3, [sp, #28]
 8010842:	4607      	mov	r7, r0
 8010844:	9b04      	ldr	r3, [sp, #16]
 8010846:	4621      	mov	r1, r4
 8010848:	3b01      	subs	r3, #1
 801084a:	4628      	mov	r0, r5
 801084c:	9302      	str	r3, [sp, #8]
 801084e:	f7ff faeb 	bl	800fe28 <quorem>
 8010852:	4603      	mov	r3, r0
 8010854:	3330      	adds	r3, #48	; 0x30
 8010856:	9005      	str	r0, [sp, #20]
 8010858:	4649      	mov	r1, r9
 801085a:	4628      	mov	r0, r5
 801085c:	9309      	str	r3, [sp, #36]	; 0x24
 801085e:	f000 ff49 	bl	80116f4 <__mcmp>
 8010862:	463a      	mov	r2, r7
 8010864:	4682      	mov	sl, r0
 8010866:	4621      	mov	r1, r4
 8010868:	4630      	mov	r0, r6
 801086a:	f000 ff5f 	bl	801172c <__mdiff>
 801086e:	68c2      	ldr	r2, [r0, #12]
 8010870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010872:	4680      	mov	r8, r0
 8010874:	bb0a      	cbnz	r2, 80108ba <_dtoa_r+0x97a>
 8010876:	4601      	mov	r1, r0
 8010878:	4628      	mov	r0, r5
 801087a:	f000 ff3b 	bl	80116f4 <__mcmp>
 801087e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010880:	4602      	mov	r2, r0
 8010882:	4641      	mov	r1, r8
 8010884:	4630      	mov	r0, r6
 8010886:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801088a:	f000 fca7 	bl	80111dc <_Bfree>
 801088e:	9b06      	ldr	r3, [sp, #24]
 8010890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010892:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010896:	ea43 0102 	orr.w	r1, r3, r2
 801089a:	9b07      	ldr	r3, [sp, #28]
 801089c:	430b      	orrs	r3, r1
 801089e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108a0:	d10d      	bne.n	80108be <_dtoa_r+0x97e>
 80108a2:	2b39      	cmp	r3, #57	; 0x39
 80108a4:	d029      	beq.n	80108fa <_dtoa_r+0x9ba>
 80108a6:	f1ba 0f00 	cmp.w	sl, #0
 80108aa:	dd01      	ble.n	80108b0 <_dtoa_r+0x970>
 80108ac:	9b05      	ldr	r3, [sp, #20]
 80108ae:	3331      	adds	r3, #49	; 0x31
 80108b0:	9a02      	ldr	r2, [sp, #8]
 80108b2:	7013      	strb	r3, [r2, #0]
 80108b4:	e774      	b.n	80107a0 <_dtoa_r+0x860>
 80108b6:	4638      	mov	r0, r7
 80108b8:	e7b8      	b.n	801082c <_dtoa_r+0x8ec>
 80108ba:	2201      	movs	r2, #1
 80108bc:	e7e1      	b.n	8010882 <_dtoa_r+0x942>
 80108be:	f1ba 0f00 	cmp.w	sl, #0
 80108c2:	db06      	blt.n	80108d2 <_dtoa_r+0x992>
 80108c4:	9906      	ldr	r1, [sp, #24]
 80108c6:	ea41 0a0a 	orr.w	sl, r1, sl
 80108ca:	9907      	ldr	r1, [sp, #28]
 80108cc:	ea5a 0101 	orrs.w	r1, sl, r1
 80108d0:	d120      	bne.n	8010914 <_dtoa_r+0x9d4>
 80108d2:	2a00      	cmp	r2, #0
 80108d4:	ddec      	ble.n	80108b0 <_dtoa_r+0x970>
 80108d6:	4629      	mov	r1, r5
 80108d8:	2201      	movs	r2, #1
 80108da:	4630      	mov	r0, r6
 80108dc:	9304      	str	r3, [sp, #16]
 80108de:	f000 fe99 	bl	8011614 <__lshift>
 80108e2:	4621      	mov	r1, r4
 80108e4:	4605      	mov	r5, r0
 80108e6:	f000 ff05 	bl	80116f4 <__mcmp>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	9b04      	ldr	r3, [sp, #16]
 80108ee:	dc02      	bgt.n	80108f6 <_dtoa_r+0x9b6>
 80108f0:	d1de      	bne.n	80108b0 <_dtoa_r+0x970>
 80108f2:	07da      	lsls	r2, r3, #31
 80108f4:	d5dc      	bpl.n	80108b0 <_dtoa_r+0x970>
 80108f6:	2b39      	cmp	r3, #57	; 0x39
 80108f8:	d1d8      	bne.n	80108ac <_dtoa_r+0x96c>
 80108fa:	9a02      	ldr	r2, [sp, #8]
 80108fc:	2339      	movs	r3, #57	; 0x39
 80108fe:	7013      	strb	r3, [r2, #0]
 8010900:	4643      	mov	r3, r8
 8010902:	4698      	mov	r8, r3
 8010904:	3b01      	subs	r3, #1
 8010906:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801090a:	2a39      	cmp	r2, #57	; 0x39
 801090c:	d051      	beq.n	80109b2 <_dtoa_r+0xa72>
 801090e:	3201      	adds	r2, #1
 8010910:	701a      	strb	r2, [r3, #0]
 8010912:	e745      	b.n	80107a0 <_dtoa_r+0x860>
 8010914:	2a00      	cmp	r2, #0
 8010916:	dd03      	ble.n	8010920 <_dtoa_r+0x9e0>
 8010918:	2b39      	cmp	r3, #57	; 0x39
 801091a:	d0ee      	beq.n	80108fa <_dtoa_r+0x9ba>
 801091c:	3301      	adds	r3, #1
 801091e:	e7c7      	b.n	80108b0 <_dtoa_r+0x970>
 8010920:	9a04      	ldr	r2, [sp, #16]
 8010922:	9908      	ldr	r1, [sp, #32]
 8010924:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010928:	428a      	cmp	r2, r1
 801092a:	d02b      	beq.n	8010984 <_dtoa_r+0xa44>
 801092c:	4629      	mov	r1, r5
 801092e:	2300      	movs	r3, #0
 8010930:	220a      	movs	r2, #10
 8010932:	4630      	mov	r0, r6
 8010934:	f000 fc74 	bl	8011220 <__multadd>
 8010938:	45b9      	cmp	r9, r7
 801093a:	4605      	mov	r5, r0
 801093c:	f04f 0300 	mov.w	r3, #0
 8010940:	f04f 020a 	mov.w	r2, #10
 8010944:	4649      	mov	r1, r9
 8010946:	4630      	mov	r0, r6
 8010948:	d107      	bne.n	801095a <_dtoa_r+0xa1a>
 801094a:	f000 fc69 	bl	8011220 <__multadd>
 801094e:	4681      	mov	r9, r0
 8010950:	4607      	mov	r7, r0
 8010952:	9b04      	ldr	r3, [sp, #16]
 8010954:	3301      	adds	r3, #1
 8010956:	9304      	str	r3, [sp, #16]
 8010958:	e774      	b.n	8010844 <_dtoa_r+0x904>
 801095a:	f000 fc61 	bl	8011220 <__multadd>
 801095e:	4639      	mov	r1, r7
 8010960:	4681      	mov	r9, r0
 8010962:	2300      	movs	r3, #0
 8010964:	220a      	movs	r2, #10
 8010966:	4630      	mov	r0, r6
 8010968:	f000 fc5a 	bl	8011220 <__multadd>
 801096c:	4607      	mov	r7, r0
 801096e:	e7f0      	b.n	8010952 <_dtoa_r+0xa12>
 8010970:	f1ba 0f00 	cmp.w	sl, #0
 8010974:	9a01      	ldr	r2, [sp, #4]
 8010976:	bfcc      	ite	gt
 8010978:	46d0      	movgt	r8, sl
 801097a:	f04f 0801 	movle.w	r8, #1
 801097e:	4490      	add	r8, r2
 8010980:	f04f 0900 	mov.w	r9, #0
 8010984:	4629      	mov	r1, r5
 8010986:	2201      	movs	r2, #1
 8010988:	4630      	mov	r0, r6
 801098a:	9302      	str	r3, [sp, #8]
 801098c:	f000 fe42 	bl	8011614 <__lshift>
 8010990:	4621      	mov	r1, r4
 8010992:	4605      	mov	r5, r0
 8010994:	f000 feae 	bl	80116f4 <__mcmp>
 8010998:	2800      	cmp	r0, #0
 801099a:	dcb1      	bgt.n	8010900 <_dtoa_r+0x9c0>
 801099c:	d102      	bne.n	80109a4 <_dtoa_r+0xa64>
 801099e:	9b02      	ldr	r3, [sp, #8]
 80109a0:	07db      	lsls	r3, r3, #31
 80109a2:	d4ad      	bmi.n	8010900 <_dtoa_r+0x9c0>
 80109a4:	4643      	mov	r3, r8
 80109a6:	4698      	mov	r8, r3
 80109a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109ac:	2a30      	cmp	r2, #48	; 0x30
 80109ae:	d0fa      	beq.n	80109a6 <_dtoa_r+0xa66>
 80109b0:	e6f6      	b.n	80107a0 <_dtoa_r+0x860>
 80109b2:	9a01      	ldr	r2, [sp, #4]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d1a4      	bne.n	8010902 <_dtoa_r+0x9c2>
 80109b8:	f10b 0b01 	add.w	fp, fp, #1
 80109bc:	2331      	movs	r3, #49	; 0x31
 80109be:	e778      	b.n	80108b2 <_dtoa_r+0x972>
 80109c0:	4b14      	ldr	r3, [pc, #80]	; (8010a14 <_dtoa_r+0xad4>)
 80109c2:	f7ff bb27 	b.w	8010014 <_dtoa_r+0xd4>
 80109c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f47f ab03 	bne.w	800ffd4 <_dtoa_r+0x94>
 80109ce:	4b12      	ldr	r3, [pc, #72]	; (8010a18 <_dtoa_r+0xad8>)
 80109d0:	f7ff bb20 	b.w	8010014 <_dtoa_r+0xd4>
 80109d4:	f1ba 0f00 	cmp.w	sl, #0
 80109d8:	dc03      	bgt.n	80109e2 <_dtoa_r+0xaa2>
 80109da:	9b06      	ldr	r3, [sp, #24]
 80109dc:	2b02      	cmp	r3, #2
 80109de:	f73f aec7 	bgt.w	8010770 <_dtoa_r+0x830>
 80109e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80109e6:	4621      	mov	r1, r4
 80109e8:	4628      	mov	r0, r5
 80109ea:	f7ff fa1d 	bl	800fe28 <quorem>
 80109ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80109f2:	f808 3b01 	strb.w	r3, [r8], #1
 80109f6:	9a01      	ldr	r2, [sp, #4]
 80109f8:	eba8 0202 	sub.w	r2, r8, r2
 80109fc:	4592      	cmp	sl, r2
 80109fe:	ddb7      	ble.n	8010970 <_dtoa_r+0xa30>
 8010a00:	4629      	mov	r1, r5
 8010a02:	2300      	movs	r3, #0
 8010a04:	220a      	movs	r2, #10
 8010a06:	4630      	mov	r0, r6
 8010a08:	f000 fc0a 	bl	8011220 <__multadd>
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	e7ea      	b.n	80109e6 <_dtoa_r+0xaa6>
 8010a10:	08014530 	.word	0x08014530
 8010a14:	08014729 	.word	0x08014729
 8010a18:	080144b1 	.word	0x080144b1

08010a1c <rshift>:
 8010a1c:	6903      	ldr	r3, [r0, #16]
 8010a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a2a:	f100 0414 	add.w	r4, r0, #20
 8010a2e:	dd45      	ble.n	8010abc <rshift+0xa0>
 8010a30:	f011 011f 	ands.w	r1, r1, #31
 8010a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a3c:	d10c      	bne.n	8010a58 <rshift+0x3c>
 8010a3e:	f100 0710 	add.w	r7, r0, #16
 8010a42:	4629      	mov	r1, r5
 8010a44:	42b1      	cmp	r1, r6
 8010a46:	d334      	bcc.n	8010ab2 <rshift+0x96>
 8010a48:	1a9b      	subs	r3, r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	1eea      	subs	r2, r5, #3
 8010a4e:	4296      	cmp	r6, r2
 8010a50:	bf38      	it	cc
 8010a52:	2300      	movcc	r3, #0
 8010a54:	4423      	add	r3, r4
 8010a56:	e015      	b.n	8010a84 <rshift+0x68>
 8010a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a5c:	f1c1 0820 	rsb	r8, r1, #32
 8010a60:	40cf      	lsrs	r7, r1
 8010a62:	f105 0e04 	add.w	lr, r5, #4
 8010a66:	46a1      	mov	r9, r4
 8010a68:	4576      	cmp	r6, lr
 8010a6a:	46f4      	mov	ip, lr
 8010a6c:	d815      	bhi.n	8010a9a <rshift+0x7e>
 8010a6e:	1a9a      	subs	r2, r3, r2
 8010a70:	0092      	lsls	r2, r2, #2
 8010a72:	3a04      	subs	r2, #4
 8010a74:	3501      	adds	r5, #1
 8010a76:	42ae      	cmp	r6, r5
 8010a78:	bf38      	it	cc
 8010a7a:	2200      	movcc	r2, #0
 8010a7c:	18a3      	adds	r3, r4, r2
 8010a7e:	50a7      	str	r7, [r4, r2]
 8010a80:	b107      	cbz	r7, 8010a84 <rshift+0x68>
 8010a82:	3304      	adds	r3, #4
 8010a84:	1b1a      	subs	r2, r3, r4
 8010a86:	42a3      	cmp	r3, r4
 8010a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a8c:	bf08      	it	eq
 8010a8e:	2300      	moveq	r3, #0
 8010a90:	6102      	str	r2, [r0, #16]
 8010a92:	bf08      	it	eq
 8010a94:	6143      	streq	r3, [r0, #20]
 8010a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a9a:	f8dc c000 	ldr.w	ip, [ip]
 8010a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8010aa6:	f849 7b04 	str.w	r7, [r9], #4
 8010aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010aae:	40cf      	lsrs	r7, r1
 8010ab0:	e7da      	b.n	8010a68 <rshift+0x4c>
 8010ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8010ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8010aba:	e7c3      	b.n	8010a44 <rshift+0x28>
 8010abc:	4623      	mov	r3, r4
 8010abe:	e7e1      	b.n	8010a84 <rshift+0x68>

08010ac0 <__hexdig_fun>:
 8010ac0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010ac4:	2b09      	cmp	r3, #9
 8010ac6:	d802      	bhi.n	8010ace <__hexdig_fun+0xe>
 8010ac8:	3820      	subs	r0, #32
 8010aca:	b2c0      	uxtb	r0, r0
 8010acc:	4770      	bx	lr
 8010ace:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010ad2:	2b05      	cmp	r3, #5
 8010ad4:	d801      	bhi.n	8010ada <__hexdig_fun+0x1a>
 8010ad6:	3847      	subs	r0, #71	; 0x47
 8010ad8:	e7f7      	b.n	8010aca <__hexdig_fun+0xa>
 8010ada:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010ade:	2b05      	cmp	r3, #5
 8010ae0:	d801      	bhi.n	8010ae6 <__hexdig_fun+0x26>
 8010ae2:	3827      	subs	r0, #39	; 0x27
 8010ae4:	e7f1      	b.n	8010aca <__hexdig_fun+0xa>
 8010ae6:	2000      	movs	r0, #0
 8010ae8:	4770      	bx	lr
	...

08010aec <__gethex>:
 8010aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af0:	ed2d 8b02 	vpush	{d8}
 8010af4:	b089      	sub	sp, #36	; 0x24
 8010af6:	ee08 0a10 	vmov	s16, r0
 8010afa:	9304      	str	r3, [sp, #16]
 8010afc:	4bb4      	ldr	r3, [pc, #720]	; (8010dd0 <__gethex+0x2e4>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	9301      	str	r3, [sp, #4]
 8010b02:	4618      	mov	r0, r3
 8010b04:	468b      	mov	fp, r1
 8010b06:	4690      	mov	r8, r2
 8010b08:	f7ef fbea 	bl	80002e0 <strlen>
 8010b0c:	9b01      	ldr	r3, [sp, #4]
 8010b0e:	f8db 2000 	ldr.w	r2, [fp]
 8010b12:	4403      	add	r3, r0
 8010b14:	4682      	mov	sl, r0
 8010b16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010b1a:	9305      	str	r3, [sp, #20]
 8010b1c:	1c93      	adds	r3, r2, #2
 8010b1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010b22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010b26:	32fe      	adds	r2, #254	; 0xfe
 8010b28:	18d1      	adds	r1, r2, r3
 8010b2a:	461f      	mov	r7, r3
 8010b2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b30:	9100      	str	r1, [sp, #0]
 8010b32:	2830      	cmp	r0, #48	; 0x30
 8010b34:	d0f8      	beq.n	8010b28 <__gethex+0x3c>
 8010b36:	f7ff ffc3 	bl	8010ac0 <__hexdig_fun>
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d13a      	bne.n	8010bb6 <__gethex+0xca>
 8010b40:	9901      	ldr	r1, [sp, #4]
 8010b42:	4652      	mov	r2, sl
 8010b44:	4638      	mov	r0, r7
 8010b46:	f001 fd9f 	bl	8012688 <strncmp>
 8010b4a:	4605      	mov	r5, r0
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d168      	bne.n	8010c22 <__gethex+0x136>
 8010b50:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010b54:	eb07 060a 	add.w	r6, r7, sl
 8010b58:	f7ff ffb2 	bl	8010ac0 <__hexdig_fun>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	d062      	beq.n	8010c26 <__gethex+0x13a>
 8010b60:	4633      	mov	r3, r6
 8010b62:	7818      	ldrb	r0, [r3, #0]
 8010b64:	2830      	cmp	r0, #48	; 0x30
 8010b66:	461f      	mov	r7, r3
 8010b68:	f103 0301 	add.w	r3, r3, #1
 8010b6c:	d0f9      	beq.n	8010b62 <__gethex+0x76>
 8010b6e:	f7ff ffa7 	bl	8010ac0 <__hexdig_fun>
 8010b72:	2301      	movs	r3, #1
 8010b74:	fab0 f480 	clz	r4, r0
 8010b78:	0964      	lsrs	r4, r4, #5
 8010b7a:	4635      	mov	r5, r6
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	463a      	mov	r2, r7
 8010b80:	4616      	mov	r6, r2
 8010b82:	3201      	adds	r2, #1
 8010b84:	7830      	ldrb	r0, [r6, #0]
 8010b86:	f7ff ff9b 	bl	8010ac0 <__hexdig_fun>
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	d1f8      	bne.n	8010b80 <__gethex+0x94>
 8010b8e:	9901      	ldr	r1, [sp, #4]
 8010b90:	4652      	mov	r2, sl
 8010b92:	4630      	mov	r0, r6
 8010b94:	f001 fd78 	bl	8012688 <strncmp>
 8010b98:	b980      	cbnz	r0, 8010bbc <__gethex+0xd0>
 8010b9a:	b94d      	cbnz	r5, 8010bb0 <__gethex+0xc4>
 8010b9c:	eb06 050a 	add.w	r5, r6, sl
 8010ba0:	462a      	mov	r2, r5
 8010ba2:	4616      	mov	r6, r2
 8010ba4:	3201      	adds	r2, #1
 8010ba6:	7830      	ldrb	r0, [r6, #0]
 8010ba8:	f7ff ff8a 	bl	8010ac0 <__hexdig_fun>
 8010bac:	2800      	cmp	r0, #0
 8010bae:	d1f8      	bne.n	8010ba2 <__gethex+0xb6>
 8010bb0:	1bad      	subs	r5, r5, r6
 8010bb2:	00ad      	lsls	r5, r5, #2
 8010bb4:	e004      	b.n	8010bc0 <__gethex+0xd4>
 8010bb6:	2400      	movs	r4, #0
 8010bb8:	4625      	mov	r5, r4
 8010bba:	e7e0      	b.n	8010b7e <__gethex+0x92>
 8010bbc:	2d00      	cmp	r5, #0
 8010bbe:	d1f7      	bne.n	8010bb0 <__gethex+0xc4>
 8010bc0:	7833      	ldrb	r3, [r6, #0]
 8010bc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010bc6:	2b50      	cmp	r3, #80	; 0x50
 8010bc8:	d13b      	bne.n	8010c42 <__gethex+0x156>
 8010bca:	7873      	ldrb	r3, [r6, #1]
 8010bcc:	2b2b      	cmp	r3, #43	; 0x2b
 8010bce:	d02c      	beq.n	8010c2a <__gethex+0x13e>
 8010bd0:	2b2d      	cmp	r3, #45	; 0x2d
 8010bd2:	d02e      	beq.n	8010c32 <__gethex+0x146>
 8010bd4:	1c71      	adds	r1, r6, #1
 8010bd6:	f04f 0900 	mov.w	r9, #0
 8010bda:	7808      	ldrb	r0, [r1, #0]
 8010bdc:	f7ff ff70 	bl	8010ac0 <__hexdig_fun>
 8010be0:	1e43      	subs	r3, r0, #1
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	2b18      	cmp	r3, #24
 8010be6:	d82c      	bhi.n	8010c42 <__gethex+0x156>
 8010be8:	f1a0 0210 	sub.w	r2, r0, #16
 8010bec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bf0:	f7ff ff66 	bl	8010ac0 <__hexdig_fun>
 8010bf4:	1e43      	subs	r3, r0, #1
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	2b18      	cmp	r3, #24
 8010bfa:	d91d      	bls.n	8010c38 <__gethex+0x14c>
 8010bfc:	f1b9 0f00 	cmp.w	r9, #0
 8010c00:	d000      	beq.n	8010c04 <__gethex+0x118>
 8010c02:	4252      	negs	r2, r2
 8010c04:	4415      	add	r5, r2
 8010c06:	f8cb 1000 	str.w	r1, [fp]
 8010c0a:	b1e4      	cbz	r4, 8010c46 <__gethex+0x15a>
 8010c0c:	9b00      	ldr	r3, [sp, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	bf14      	ite	ne
 8010c12:	2700      	movne	r7, #0
 8010c14:	2706      	moveq	r7, #6
 8010c16:	4638      	mov	r0, r7
 8010c18:	b009      	add	sp, #36	; 0x24
 8010c1a:	ecbd 8b02 	vpop	{d8}
 8010c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c22:	463e      	mov	r6, r7
 8010c24:	4625      	mov	r5, r4
 8010c26:	2401      	movs	r4, #1
 8010c28:	e7ca      	b.n	8010bc0 <__gethex+0xd4>
 8010c2a:	f04f 0900 	mov.w	r9, #0
 8010c2e:	1cb1      	adds	r1, r6, #2
 8010c30:	e7d3      	b.n	8010bda <__gethex+0xee>
 8010c32:	f04f 0901 	mov.w	r9, #1
 8010c36:	e7fa      	b.n	8010c2e <__gethex+0x142>
 8010c38:	230a      	movs	r3, #10
 8010c3a:	fb03 0202 	mla	r2, r3, r2, r0
 8010c3e:	3a10      	subs	r2, #16
 8010c40:	e7d4      	b.n	8010bec <__gethex+0x100>
 8010c42:	4631      	mov	r1, r6
 8010c44:	e7df      	b.n	8010c06 <__gethex+0x11a>
 8010c46:	1bf3      	subs	r3, r6, r7
 8010c48:	3b01      	subs	r3, #1
 8010c4a:	4621      	mov	r1, r4
 8010c4c:	2b07      	cmp	r3, #7
 8010c4e:	dc0b      	bgt.n	8010c68 <__gethex+0x17c>
 8010c50:	ee18 0a10 	vmov	r0, s16
 8010c54:	f000 fa82 	bl	801115c <_Balloc>
 8010c58:	4604      	mov	r4, r0
 8010c5a:	b940      	cbnz	r0, 8010c6e <__gethex+0x182>
 8010c5c:	4b5d      	ldr	r3, [pc, #372]	; (8010dd4 <__gethex+0x2e8>)
 8010c5e:	4602      	mov	r2, r0
 8010c60:	21de      	movs	r1, #222	; 0xde
 8010c62:	485d      	ldr	r0, [pc, #372]	; (8010dd8 <__gethex+0x2ec>)
 8010c64:	f001 fde0 	bl	8012828 <__assert_func>
 8010c68:	3101      	adds	r1, #1
 8010c6a:	105b      	asrs	r3, r3, #1
 8010c6c:	e7ee      	b.n	8010c4c <__gethex+0x160>
 8010c6e:	f100 0914 	add.w	r9, r0, #20
 8010c72:	f04f 0b00 	mov.w	fp, #0
 8010c76:	f1ca 0301 	rsb	r3, sl, #1
 8010c7a:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c7e:	f8cd b000 	str.w	fp, [sp]
 8010c82:	9306      	str	r3, [sp, #24]
 8010c84:	42b7      	cmp	r7, r6
 8010c86:	d340      	bcc.n	8010d0a <__gethex+0x21e>
 8010c88:	9802      	ldr	r0, [sp, #8]
 8010c8a:	9b00      	ldr	r3, [sp, #0]
 8010c8c:	f840 3b04 	str.w	r3, [r0], #4
 8010c90:	eba0 0009 	sub.w	r0, r0, r9
 8010c94:	1080      	asrs	r0, r0, #2
 8010c96:	0146      	lsls	r6, r0, #5
 8010c98:	6120      	str	r0, [r4, #16]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f000 fb50 	bl	8011340 <__hi0bits>
 8010ca0:	1a30      	subs	r0, r6, r0
 8010ca2:	f8d8 6000 	ldr.w	r6, [r8]
 8010ca6:	42b0      	cmp	r0, r6
 8010ca8:	dd63      	ble.n	8010d72 <__gethex+0x286>
 8010caa:	1b87      	subs	r7, r0, r6
 8010cac:	4639      	mov	r1, r7
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f000 fef1 	bl	8011a96 <__any_on>
 8010cb4:	4682      	mov	sl, r0
 8010cb6:	b1a8      	cbz	r0, 8010ce4 <__gethex+0x1f8>
 8010cb8:	1e7b      	subs	r3, r7, #1
 8010cba:	1159      	asrs	r1, r3, #5
 8010cbc:	f003 021f 	and.w	r2, r3, #31
 8010cc0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010cc4:	f04f 0a01 	mov.w	sl, #1
 8010cc8:	fa0a f202 	lsl.w	r2, sl, r2
 8010ccc:	420a      	tst	r2, r1
 8010cce:	d009      	beq.n	8010ce4 <__gethex+0x1f8>
 8010cd0:	4553      	cmp	r3, sl
 8010cd2:	dd05      	ble.n	8010ce0 <__gethex+0x1f4>
 8010cd4:	1eb9      	subs	r1, r7, #2
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f000 fedd 	bl	8011a96 <__any_on>
 8010cdc:	2800      	cmp	r0, #0
 8010cde:	d145      	bne.n	8010d6c <__gethex+0x280>
 8010ce0:	f04f 0a02 	mov.w	sl, #2
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f7ff fe98 	bl	8010a1c <rshift>
 8010cec:	443d      	add	r5, r7
 8010cee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cf2:	42ab      	cmp	r3, r5
 8010cf4:	da4c      	bge.n	8010d90 <__gethex+0x2a4>
 8010cf6:	ee18 0a10 	vmov	r0, s16
 8010cfa:	4621      	mov	r1, r4
 8010cfc:	f000 fa6e 	bl	80111dc <_Bfree>
 8010d00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d02:	2300      	movs	r3, #0
 8010d04:	6013      	str	r3, [r2, #0]
 8010d06:	27a3      	movs	r7, #163	; 0xa3
 8010d08:	e785      	b.n	8010c16 <__gethex+0x12a>
 8010d0a:	1e73      	subs	r3, r6, #1
 8010d0c:	9a05      	ldr	r2, [sp, #20]
 8010d0e:	9303      	str	r3, [sp, #12]
 8010d10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d019      	beq.n	8010d4c <__gethex+0x260>
 8010d18:	f1bb 0f20 	cmp.w	fp, #32
 8010d1c:	d107      	bne.n	8010d2e <__gethex+0x242>
 8010d1e:	9b02      	ldr	r3, [sp, #8]
 8010d20:	9a00      	ldr	r2, [sp, #0]
 8010d22:	f843 2b04 	str.w	r2, [r3], #4
 8010d26:	9302      	str	r3, [sp, #8]
 8010d28:	2300      	movs	r3, #0
 8010d2a:	9300      	str	r3, [sp, #0]
 8010d2c:	469b      	mov	fp, r3
 8010d2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010d32:	f7ff fec5 	bl	8010ac0 <__hexdig_fun>
 8010d36:	9b00      	ldr	r3, [sp, #0]
 8010d38:	f000 000f 	and.w	r0, r0, #15
 8010d3c:	fa00 f00b 	lsl.w	r0, r0, fp
 8010d40:	4303      	orrs	r3, r0
 8010d42:	9300      	str	r3, [sp, #0]
 8010d44:	f10b 0b04 	add.w	fp, fp, #4
 8010d48:	9b03      	ldr	r3, [sp, #12]
 8010d4a:	e00d      	b.n	8010d68 <__gethex+0x27c>
 8010d4c:	9b03      	ldr	r3, [sp, #12]
 8010d4e:	9a06      	ldr	r2, [sp, #24]
 8010d50:	4413      	add	r3, r2
 8010d52:	42bb      	cmp	r3, r7
 8010d54:	d3e0      	bcc.n	8010d18 <__gethex+0x22c>
 8010d56:	4618      	mov	r0, r3
 8010d58:	9901      	ldr	r1, [sp, #4]
 8010d5a:	9307      	str	r3, [sp, #28]
 8010d5c:	4652      	mov	r2, sl
 8010d5e:	f001 fc93 	bl	8012688 <strncmp>
 8010d62:	9b07      	ldr	r3, [sp, #28]
 8010d64:	2800      	cmp	r0, #0
 8010d66:	d1d7      	bne.n	8010d18 <__gethex+0x22c>
 8010d68:	461e      	mov	r6, r3
 8010d6a:	e78b      	b.n	8010c84 <__gethex+0x198>
 8010d6c:	f04f 0a03 	mov.w	sl, #3
 8010d70:	e7b8      	b.n	8010ce4 <__gethex+0x1f8>
 8010d72:	da0a      	bge.n	8010d8a <__gethex+0x29e>
 8010d74:	1a37      	subs	r7, r6, r0
 8010d76:	4621      	mov	r1, r4
 8010d78:	ee18 0a10 	vmov	r0, s16
 8010d7c:	463a      	mov	r2, r7
 8010d7e:	f000 fc49 	bl	8011614 <__lshift>
 8010d82:	1bed      	subs	r5, r5, r7
 8010d84:	4604      	mov	r4, r0
 8010d86:	f100 0914 	add.w	r9, r0, #20
 8010d8a:	f04f 0a00 	mov.w	sl, #0
 8010d8e:	e7ae      	b.n	8010cee <__gethex+0x202>
 8010d90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010d94:	42a8      	cmp	r0, r5
 8010d96:	dd72      	ble.n	8010e7e <__gethex+0x392>
 8010d98:	1b45      	subs	r5, r0, r5
 8010d9a:	42ae      	cmp	r6, r5
 8010d9c:	dc36      	bgt.n	8010e0c <__gethex+0x320>
 8010d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010da2:	2b02      	cmp	r3, #2
 8010da4:	d02a      	beq.n	8010dfc <__gethex+0x310>
 8010da6:	2b03      	cmp	r3, #3
 8010da8:	d02c      	beq.n	8010e04 <__gethex+0x318>
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d11c      	bne.n	8010de8 <__gethex+0x2fc>
 8010dae:	42ae      	cmp	r6, r5
 8010db0:	d11a      	bne.n	8010de8 <__gethex+0x2fc>
 8010db2:	2e01      	cmp	r6, #1
 8010db4:	d112      	bne.n	8010ddc <__gethex+0x2f0>
 8010db6:	9a04      	ldr	r2, [sp, #16]
 8010db8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010dbc:	6013      	str	r3, [r2, #0]
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	6123      	str	r3, [r4, #16]
 8010dc2:	f8c9 3000 	str.w	r3, [r9]
 8010dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010dc8:	2762      	movs	r7, #98	; 0x62
 8010dca:	601c      	str	r4, [r3, #0]
 8010dcc:	e723      	b.n	8010c16 <__gethex+0x12a>
 8010dce:	bf00      	nop
 8010dd0:	080145a8 	.word	0x080145a8
 8010dd4:	08014530 	.word	0x08014530
 8010dd8:	08014541 	.word	0x08014541
 8010ddc:	1e71      	subs	r1, r6, #1
 8010dde:	4620      	mov	r0, r4
 8010de0:	f000 fe59 	bl	8011a96 <__any_on>
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d1e6      	bne.n	8010db6 <__gethex+0x2ca>
 8010de8:	ee18 0a10 	vmov	r0, s16
 8010dec:	4621      	mov	r1, r4
 8010dee:	f000 f9f5 	bl	80111dc <_Bfree>
 8010df2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010df4:	2300      	movs	r3, #0
 8010df6:	6013      	str	r3, [r2, #0]
 8010df8:	2750      	movs	r7, #80	; 0x50
 8010dfa:	e70c      	b.n	8010c16 <__gethex+0x12a>
 8010dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d1f2      	bne.n	8010de8 <__gethex+0x2fc>
 8010e02:	e7d8      	b.n	8010db6 <__gethex+0x2ca>
 8010e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1d5      	bne.n	8010db6 <__gethex+0x2ca>
 8010e0a:	e7ed      	b.n	8010de8 <__gethex+0x2fc>
 8010e0c:	1e6f      	subs	r7, r5, #1
 8010e0e:	f1ba 0f00 	cmp.w	sl, #0
 8010e12:	d131      	bne.n	8010e78 <__gethex+0x38c>
 8010e14:	b127      	cbz	r7, 8010e20 <__gethex+0x334>
 8010e16:	4639      	mov	r1, r7
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f000 fe3c 	bl	8011a96 <__any_on>
 8010e1e:	4682      	mov	sl, r0
 8010e20:	117b      	asrs	r3, r7, #5
 8010e22:	2101      	movs	r1, #1
 8010e24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010e28:	f007 071f 	and.w	r7, r7, #31
 8010e2c:	fa01 f707 	lsl.w	r7, r1, r7
 8010e30:	421f      	tst	r7, r3
 8010e32:	4629      	mov	r1, r5
 8010e34:	4620      	mov	r0, r4
 8010e36:	bf18      	it	ne
 8010e38:	f04a 0a02 	orrne.w	sl, sl, #2
 8010e3c:	1b76      	subs	r6, r6, r5
 8010e3e:	f7ff fded 	bl	8010a1c <rshift>
 8010e42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010e46:	2702      	movs	r7, #2
 8010e48:	f1ba 0f00 	cmp.w	sl, #0
 8010e4c:	d048      	beq.n	8010ee0 <__gethex+0x3f4>
 8010e4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e52:	2b02      	cmp	r3, #2
 8010e54:	d015      	beq.n	8010e82 <__gethex+0x396>
 8010e56:	2b03      	cmp	r3, #3
 8010e58:	d017      	beq.n	8010e8a <__gethex+0x39e>
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d109      	bne.n	8010e72 <__gethex+0x386>
 8010e5e:	f01a 0f02 	tst.w	sl, #2
 8010e62:	d006      	beq.n	8010e72 <__gethex+0x386>
 8010e64:	f8d9 0000 	ldr.w	r0, [r9]
 8010e68:	ea4a 0a00 	orr.w	sl, sl, r0
 8010e6c:	f01a 0f01 	tst.w	sl, #1
 8010e70:	d10e      	bne.n	8010e90 <__gethex+0x3a4>
 8010e72:	f047 0710 	orr.w	r7, r7, #16
 8010e76:	e033      	b.n	8010ee0 <__gethex+0x3f4>
 8010e78:	f04f 0a01 	mov.w	sl, #1
 8010e7c:	e7d0      	b.n	8010e20 <__gethex+0x334>
 8010e7e:	2701      	movs	r7, #1
 8010e80:	e7e2      	b.n	8010e48 <__gethex+0x35c>
 8010e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e84:	f1c3 0301 	rsb	r3, r3, #1
 8010e88:	9315      	str	r3, [sp, #84]	; 0x54
 8010e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d0f0      	beq.n	8010e72 <__gethex+0x386>
 8010e90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e94:	f104 0314 	add.w	r3, r4, #20
 8010e98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010ea0:	f04f 0c00 	mov.w	ip, #0
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eaa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010eae:	d01c      	beq.n	8010eea <__gethex+0x3fe>
 8010eb0:	3201      	adds	r2, #1
 8010eb2:	6002      	str	r2, [r0, #0]
 8010eb4:	2f02      	cmp	r7, #2
 8010eb6:	f104 0314 	add.w	r3, r4, #20
 8010eba:	d13f      	bne.n	8010f3c <__gethex+0x450>
 8010ebc:	f8d8 2000 	ldr.w	r2, [r8]
 8010ec0:	3a01      	subs	r2, #1
 8010ec2:	42b2      	cmp	r2, r6
 8010ec4:	d10a      	bne.n	8010edc <__gethex+0x3f0>
 8010ec6:	1171      	asrs	r1, r6, #5
 8010ec8:	2201      	movs	r2, #1
 8010eca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ece:	f006 061f 	and.w	r6, r6, #31
 8010ed2:	fa02 f606 	lsl.w	r6, r2, r6
 8010ed6:	421e      	tst	r6, r3
 8010ed8:	bf18      	it	ne
 8010eda:	4617      	movne	r7, r2
 8010edc:	f047 0720 	orr.w	r7, r7, #32
 8010ee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ee2:	601c      	str	r4, [r3, #0]
 8010ee4:	9b04      	ldr	r3, [sp, #16]
 8010ee6:	601d      	str	r5, [r3, #0]
 8010ee8:	e695      	b.n	8010c16 <__gethex+0x12a>
 8010eea:	4299      	cmp	r1, r3
 8010eec:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ef0:	d8d8      	bhi.n	8010ea4 <__gethex+0x3b8>
 8010ef2:	68a3      	ldr	r3, [r4, #8]
 8010ef4:	459b      	cmp	fp, r3
 8010ef6:	db19      	blt.n	8010f2c <__gethex+0x440>
 8010ef8:	6861      	ldr	r1, [r4, #4]
 8010efa:	ee18 0a10 	vmov	r0, s16
 8010efe:	3101      	adds	r1, #1
 8010f00:	f000 f92c 	bl	801115c <_Balloc>
 8010f04:	4681      	mov	r9, r0
 8010f06:	b918      	cbnz	r0, 8010f10 <__gethex+0x424>
 8010f08:	4b1a      	ldr	r3, [pc, #104]	; (8010f74 <__gethex+0x488>)
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	2184      	movs	r1, #132	; 0x84
 8010f0e:	e6a8      	b.n	8010c62 <__gethex+0x176>
 8010f10:	6922      	ldr	r2, [r4, #16]
 8010f12:	3202      	adds	r2, #2
 8010f14:	f104 010c 	add.w	r1, r4, #12
 8010f18:	0092      	lsls	r2, r2, #2
 8010f1a:	300c      	adds	r0, #12
 8010f1c:	f7fd f9a2 	bl	800e264 <memcpy>
 8010f20:	4621      	mov	r1, r4
 8010f22:	ee18 0a10 	vmov	r0, s16
 8010f26:	f000 f959 	bl	80111dc <_Bfree>
 8010f2a:	464c      	mov	r4, r9
 8010f2c:	6923      	ldr	r3, [r4, #16]
 8010f2e:	1c5a      	adds	r2, r3, #1
 8010f30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010f34:	6122      	str	r2, [r4, #16]
 8010f36:	2201      	movs	r2, #1
 8010f38:	615a      	str	r2, [r3, #20]
 8010f3a:	e7bb      	b.n	8010eb4 <__gethex+0x3c8>
 8010f3c:	6922      	ldr	r2, [r4, #16]
 8010f3e:	455a      	cmp	r2, fp
 8010f40:	dd0b      	ble.n	8010f5a <__gethex+0x46e>
 8010f42:	2101      	movs	r1, #1
 8010f44:	4620      	mov	r0, r4
 8010f46:	f7ff fd69 	bl	8010a1c <rshift>
 8010f4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f4e:	3501      	adds	r5, #1
 8010f50:	42ab      	cmp	r3, r5
 8010f52:	f6ff aed0 	blt.w	8010cf6 <__gethex+0x20a>
 8010f56:	2701      	movs	r7, #1
 8010f58:	e7c0      	b.n	8010edc <__gethex+0x3f0>
 8010f5a:	f016 061f 	ands.w	r6, r6, #31
 8010f5e:	d0fa      	beq.n	8010f56 <__gethex+0x46a>
 8010f60:	4453      	add	r3, sl
 8010f62:	f1c6 0620 	rsb	r6, r6, #32
 8010f66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f6a:	f000 f9e9 	bl	8011340 <__hi0bits>
 8010f6e:	42b0      	cmp	r0, r6
 8010f70:	dbe7      	blt.n	8010f42 <__gethex+0x456>
 8010f72:	e7f0      	b.n	8010f56 <__gethex+0x46a>
 8010f74:	08014530 	.word	0x08014530

08010f78 <L_shift>:
 8010f78:	f1c2 0208 	rsb	r2, r2, #8
 8010f7c:	0092      	lsls	r2, r2, #2
 8010f7e:	b570      	push	{r4, r5, r6, lr}
 8010f80:	f1c2 0620 	rsb	r6, r2, #32
 8010f84:	6843      	ldr	r3, [r0, #4]
 8010f86:	6804      	ldr	r4, [r0, #0]
 8010f88:	fa03 f506 	lsl.w	r5, r3, r6
 8010f8c:	432c      	orrs	r4, r5
 8010f8e:	40d3      	lsrs	r3, r2
 8010f90:	6004      	str	r4, [r0, #0]
 8010f92:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f96:	4288      	cmp	r0, r1
 8010f98:	d3f4      	bcc.n	8010f84 <L_shift+0xc>
 8010f9a:	bd70      	pop	{r4, r5, r6, pc}

08010f9c <__match>:
 8010f9c:	b530      	push	{r4, r5, lr}
 8010f9e:	6803      	ldr	r3, [r0, #0]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fa6:	b914      	cbnz	r4, 8010fae <__match+0x12>
 8010fa8:	6003      	str	r3, [r0, #0]
 8010faa:	2001      	movs	r0, #1
 8010fac:	bd30      	pop	{r4, r5, pc}
 8010fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010fb6:	2d19      	cmp	r5, #25
 8010fb8:	bf98      	it	ls
 8010fba:	3220      	addls	r2, #32
 8010fbc:	42a2      	cmp	r2, r4
 8010fbe:	d0f0      	beq.n	8010fa2 <__match+0x6>
 8010fc0:	2000      	movs	r0, #0
 8010fc2:	e7f3      	b.n	8010fac <__match+0x10>

08010fc4 <__hexnan>:
 8010fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc8:	680b      	ldr	r3, [r1, #0]
 8010fca:	115e      	asrs	r6, r3, #5
 8010fcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010fd0:	f013 031f 	ands.w	r3, r3, #31
 8010fd4:	b087      	sub	sp, #28
 8010fd6:	bf18      	it	ne
 8010fd8:	3604      	addne	r6, #4
 8010fda:	2500      	movs	r5, #0
 8010fdc:	1f37      	subs	r7, r6, #4
 8010fde:	4690      	mov	r8, r2
 8010fe0:	6802      	ldr	r2, [r0, #0]
 8010fe2:	9301      	str	r3, [sp, #4]
 8010fe4:	4682      	mov	sl, r0
 8010fe6:	f846 5c04 	str.w	r5, [r6, #-4]
 8010fea:	46b9      	mov	r9, r7
 8010fec:	463c      	mov	r4, r7
 8010fee:	9502      	str	r5, [sp, #8]
 8010ff0:	46ab      	mov	fp, r5
 8010ff2:	7851      	ldrb	r1, [r2, #1]
 8010ff4:	1c53      	adds	r3, r2, #1
 8010ff6:	9303      	str	r3, [sp, #12]
 8010ff8:	b341      	cbz	r1, 801104c <__hexnan+0x88>
 8010ffa:	4608      	mov	r0, r1
 8010ffc:	9205      	str	r2, [sp, #20]
 8010ffe:	9104      	str	r1, [sp, #16]
 8011000:	f7ff fd5e 	bl	8010ac0 <__hexdig_fun>
 8011004:	2800      	cmp	r0, #0
 8011006:	d14f      	bne.n	80110a8 <__hexnan+0xe4>
 8011008:	9904      	ldr	r1, [sp, #16]
 801100a:	9a05      	ldr	r2, [sp, #20]
 801100c:	2920      	cmp	r1, #32
 801100e:	d818      	bhi.n	8011042 <__hexnan+0x7e>
 8011010:	9b02      	ldr	r3, [sp, #8]
 8011012:	459b      	cmp	fp, r3
 8011014:	dd13      	ble.n	801103e <__hexnan+0x7a>
 8011016:	454c      	cmp	r4, r9
 8011018:	d206      	bcs.n	8011028 <__hexnan+0x64>
 801101a:	2d07      	cmp	r5, #7
 801101c:	dc04      	bgt.n	8011028 <__hexnan+0x64>
 801101e:	462a      	mov	r2, r5
 8011020:	4649      	mov	r1, r9
 8011022:	4620      	mov	r0, r4
 8011024:	f7ff ffa8 	bl	8010f78 <L_shift>
 8011028:	4544      	cmp	r4, r8
 801102a:	d950      	bls.n	80110ce <__hexnan+0x10a>
 801102c:	2300      	movs	r3, #0
 801102e:	f1a4 0904 	sub.w	r9, r4, #4
 8011032:	f844 3c04 	str.w	r3, [r4, #-4]
 8011036:	f8cd b008 	str.w	fp, [sp, #8]
 801103a:	464c      	mov	r4, r9
 801103c:	461d      	mov	r5, r3
 801103e:	9a03      	ldr	r2, [sp, #12]
 8011040:	e7d7      	b.n	8010ff2 <__hexnan+0x2e>
 8011042:	2929      	cmp	r1, #41	; 0x29
 8011044:	d156      	bne.n	80110f4 <__hexnan+0x130>
 8011046:	3202      	adds	r2, #2
 8011048:	f8ca 2000 	str.w	r2, [sl]
 801104c:	f1bb 0f00 	cmp.w	fp, #0
 8011050:	d050      	beq.n	80110f4 <__hexnan+0x130>
 8011052:	454c      	cmp	r4, r9
 8011054:	d206      	bcs.n	8011064 <__hexnan+0xa0>
 8011056:	2d07      	cmp	r5, #7
 8011058:	dc04      	bgt.n	8011064 <__hexnan+0xa0>
 801105a:	462a      	mov	r2, r5
 801105c:	4649      	mov	r1, r9
 801105e:	4620      	mov	r0, r4
 8011060:	f7ff ff8a 	bl	8010f78 <L_shift>
 8011064:	4544      	cmp	r4, r8
 8011066:	d934      	bls.n	80110d2 <__hexnan+0x10e>
 8011068:	f1a8 0204 	sub.w	r2, r8, #4
 801106c:	4623      	mov	r3, r4
 801106e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011072:	f842 1f04 	str.w	r1, [r2, #4]!
 8011076:	429f      	cmp	r7, r3
 8011078:	d2f9      	bcs.n	801106e <__hexnan+0xaa>
 801107a:	1b3b      	subs	r3, r7, r4
 801107c:	f023 0303 	bic.w	r3, r3, #3
 8011080:	3304      	adds	r3, #4
 8011082:	3401      	adds	r4, #1
 8011084:	3e03      	subs	r6, #3
 8011086:	42b4      	cmp	r4, r6
 8011088:	bf88      	it	hi
 801108a:	2304      	movhi	r3, #4
 801108c:	4443      	add	r3, r8
 801108e:	2200      	movs	r2, #0
 8011090:	f843 2b04 	str.w	r2, [r3], #4
 8011094:	429f      	cmp	r7, r3
 8011096:	d2fb      	bcs.n	8011090 <__hexnan+0xcc>
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	b91b      	cbnz	r3, 80110a4 <__hexnan+0xe0>
 801109c:	4547      	cmp	r7, r8
 801109e:	d127      	bne.n	80110f0 <__hexnan+0x12c>
 80110a0:	2301      	movs	r3, #1
 80110a2:	603b      	str	r3, [r7, #0]
 80110a4:	2005      	movs	r0, #5
 80110a6:	e026      	b.n	80110f6 <__hexnan+0x132>
 80110a8:	3501      	adds	r5, #1
 80110aa:	2d08      	cmp	r5, #8
 80110ac:	f10b 0b01 	add.w	fp, fp, #1
 80110b0:	dd06      	ble.n	80110c0 <__hexnan+0xfc>
 80110b2:	4544      	cmp	r4, r8
 80110b4:	d9c3      	bls.n	801103e <__hexnan+0x7a>
 80110b6:	2300      	movs	r3, #0
 80110b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80110bc:	2501      	movs	r5, #1
 80110be:	3c04      	subs	r4, #4
 80110c0:	6822      	ldr	r2, [r4, #0]
 80110c2:	f000 000f 	and.w	r0, r0, #15
 80110c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80110ca:	6022      	str	r2, [r4, #0]
 80110cc:	e7b7      	b.n	801103e <__hexnan+0x7a>
 80110ce:	2508      	movs	r5, #8
 80110d0:	e7b5      	b.n	801103e <__hexnan+0x7a>
 80110d2:	9b01      	ldr	r3, [sp, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d0df      	beq.n	8011098 <__hexnan+0xd4>
 80110d8:	f04f 32ff 	mov.w	r2, #4294967295
 80110dc:	f1c3 0320 	rsb	r3, r3, #32
 80110e0:	fa22 f303 	lsr.w	r3, r2, r3
 80110e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80110e8:	401a      	ands	r2, r3
 80110ea:	f846 2c04 	str.w	r2, [r6, #-4]
 80110ee:	e7d3      	b.n	8011098 <__hexnan+0xd4>
 80110f0:	3f04      	subs	r7, #4
 80110f2:	e7d1      	b.n	8011098 <__hexnan+0xd4>
 80110f4:	2004      	movs	r0, #4
 80110f6:	b007      	add	sp, #28
 80110f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110fc <_localeconv_r>:
 80110fc:	4800      	ldr	r0, [pc, #0]	; (8011100 <_localeconv_r+0x4>)
 80110fe:	4770      	bx	lr
 8011100:	2400017c 	.word	0x2400017c

08011104 <_lseek_r>:
 8011104:	b538      	push	{r3, r4, r5, lr}
 8011106:	4d07      	ldr	r5, [pc, #28]	; (8011124 <_lseek_r+0x20>)
 8011108:	4604      	mov	r4, r0
 801110a:	4608      	mov	r0, r1
 801110c:	4611      	mov	r1, r2
 801110e:	2200      	movs	r2, #0
 8011110:	602a      	str	r2, [r5, #0]
 8011112:	461a      	mov	r2, r3
 8011114:	f7f1 fa18 	bl	8002548 <_lseek>
 8011118:	1c43      	adds	r3, r0, #1
 801111a:	d102      	bne.n	8011122 <_lseek_r+0x1e>
 801111c:	682b      	ldr	r3, [r5, #0]
 801111e:	b103      	cbz	r3, 8011122 <_lseek_r+0x1e>
 8011120:	6023      	str	r3, [r4, #0]
 8011122:	bd38      	pop	{r3, r4, r5, pc}
 8011124:	240051d0 	.word	0x240051d0

08011128 <malloc>:
 8011128:	4b02      	ldr	r3, [pc, #8]	; (8011134 <malloc+0xc>)
 801112a:	4601      	mov	r1, r0
 801112c:	6818      	ldr	r0, [r3, #0]
 801112e:	f000 bd55 	b.w	8011bdc <_malloc_r>
 8011132:	bf00      	nop
 8011134:	24000024 	.word	0x24000024

08011138 <__ascii_mbtowc>:
 8011138:	b082      	sub	sp, #8
 801113a:	b901      	cbnz	r1, 801113e <__ascii_mbtowc+0x6>
 801113c:	a901      	add	r1, sp, #4
 801113e:	b142      	cbz	r2, 8011152 <__ascii_mbtowc+0x1a>
 8011140:	b14b      	cbz	r3, 8011156 <__ascii_mbtowc+0x1e>
 8011142:	7813      	ldrb	r3, [r2, #0]
 8011144:	600b      	str	r3, [r1, #0]
 8011146:	7812      	ldrb	r2, [r2, #0]
 8011148:	1e10      	subs	r0, r2, #0
 801114a:	bf18      	it	ne
 801114c:	2001      	movne	r0, #1
 801114e:	b002      	add	sp, #8
 8011150:	4770      	bx	lr
 8011152:	4610      	mov	r0, r2
 8011154:	e7fb      	b.n	801114e <__ascii_mbtowc+0x16>
 8011156:	f06f 0001 	mvn.w	r0, #1
 801115a:	e7f8      	b.n	801114e <__ascii_mbtowc+0x16>

0801115c <_Balloc>:
 801115c:	b570      	push	{r4, r5, r6, lr}
 801115e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011160:	4604      	mov	r4, r0
 8011162:	460d      	mov	r5, r1
 8011164:	b976      	cbnz	r6, 8011184 <_Balloc+0x28>
 8011166:	2010      	movs	r0, #16
 8011168:	f7ff ffde 	bl	8011128 <malloc>
 801116c:	4602      	mov	r2, r0
 801116e:	6260      	str	r0, [r4, #36]	; 0x24
 8011170:	b920      	cbnz	r0, 801117c <_Balloc+0x20>
 8011172:	4b18      	ldr	r3, [pc, #96]	; (80111d4 <_Balloc+0x78>)
 8011174:	4818      	ldr	r0, [pc, #96]	; (80111d8 <_Balloc+0x7c>)
 8011176:	2166      	movs	r1, #102	; 0x66
 8011178:	f001 fb56 	bl	8012828 <__assert_func>
 801117c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011180:	6006      	str	r6, [r0, #0]
 8011182:	60c6      	str	r6, [r0, #12]
 8011184:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011186:	68f3      	ldr	r3, [r6, #12]
 8011188:	b183      	cbz	r3, 80111ac <_Balloc+0x50>
 801118a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011192:	b9b8      	cbnz	r0, 80111c4 <_Balloc+0x68>
 8011194:	2101      	movs	r1, #1
 8011196:	fa01 f605 	lsl.w	r6, r1, r5
 801119a:	1d72      	adds	r2, r6, #5
 801119c:	0092      	lsls	r2, r2, #2
 801119e:	4620      	mov	r0, r4
 80111a0:	f000 fc9a 	bl	8011ad8 <_calloc_r>
 80111a4:	b160      	cbz	r0, 80111c0 <_Balloc+0x64>
 80111a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80111aa:	e00e      	b.n	80111ca <_Balloc+0x6e>
 80111ac:	2221      	movs	r2, #33	; 0x21
 80111ae:	2104      	movs	r1, #4
 80111b0:	4620      	mov	r0, r4
 80111b2:	f000 fc91 	bl	8011ad8 <_calloc_r>
 80111b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111b8:	60f0      	str	r0, [r6, #12]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d1e4      	bne.n	801118a <_Balloc+0x2e>
 80111c0:	2000      	movs	r0, #0
 80111c2:	bd70      	pop	{r4, r5, r6, pc}
 80111c4:	6802      	ldr	r2, [r0, #0]
 80111c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111ca:	2300      	movs	r3, #0
 80111cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111d0:	e7f7      	b.n	80111c2 <_Balloc+0x66>
 80111d2:	bf00      	nop
 80111d4:	080144be 	.word	0x080144be
 80111d8:	080145bc 	.word	0x080145bc

080111dc <_Bfree>:
 80111dc:	b570      	push	{r4, r5, r6, lr}
 80111de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111e0:	4605      	mov	r5, r0
 80111e2:	460c      	mov	r4, r1
 80111e4:	b976      	cbnz	r6, 8011204 <_Bfree+0x28>
 80111e6:	2010      	movs	r0, #16
 80111e8:	f7ff ff9e 	bl	8011128 <malloc>
 80111ec:	4602      	mov	r2, r0
 80111ee:	6268      	str	r0, [r5, #36]	; 0x24
 80111f0:	b920      	cbnz	r0, 80111fc <_Bfree+0x20>
 80111f2:	4b09      	ldr	r3, [pc, #36]	; (8011218 <_Bfree+0x3c>)
 80111f4:	4809      	ldr	r0, [pc, #36]	; (801121c <_Bfree+0x40>)
 80111f6:	218a      	movs	r1, #138	; 0x8a
 80111f8:	f001 fb16 	bl	8012828 <__assert_func>
 80111fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011200:	6006      	str	r6, [r0, #0]
 8011202:	60c6      	str	r6, [r0, #12]
 8011204:	b13c      	cbz	r4, 8011216 <_Bfree+0x3a>
 8011206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011208:	6862      	ldr	r2, [r4, #4]
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011210:	6021      	str	r1, [r4, #0]
 8011212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011216:	bd70      	pop	{r4, r5, r6, pc}
 8011218:	080144be 	.word	0x080144be
 801121c:	080145bc 	.word	0x080145bc

08011220 <__multadd>:
 8011220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011224:	690d      	ldr	r5, [r1, #16]
 8011226:	4607      	mov	r7, r0
 8011228:	460c      	mov	r4, r1
 801122a:	461e      	mov	r6, r3
 801122c:	f101 0c14 	add.w	ip, r1, #20
 8011230:	2000      	movs	r0, #0
 8011232:	f8dc 3000 	ldr.w	r3, [ip]
 8011236:	b299      	uxth	r1, r3
 8011238:	fb02 6101 	mla	r1, r2, r1, r6
 801123c:	0c1e      	lsrs	r6, r3, #16
 801123e:	0c0b      	lsrs	r3, r1, #16
 8011240:	fb02 3306 	mla	r3, r2, r6, r3
 8011244:	b289      	uxth	r1, r1
 8011246:	3001      	adds	r0, #1
 8011248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801124c:	4285      	cmp	r5, r0
 801124e:	f84c 1b04 	str.w	r1, [ip], #4
 8011252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011256:	dcec      	bgt.n	8011232 <__multadd+0x12>
 8011258:	b30e      	cbz	r6, 801129e <__multadd+0x7e>
 801125a:	68a3      	ldr	r3, [r4, #8]
 801125c:	42ab      	cmp	r3, r5
 801125e:	dc19      	bgt.n	8011294 <__multadd+0x74>
 8011260:	6861      	ldr	r1, [r4, #4]
 8011262:	4638      	mov	r0, r7
 8011264:	3101      	adds	r1, #1
 8011266:	f7ff ff79 	bl	801115c <_Balloc>
 801126a:	4680      	mov	r8, r0
 801126c:	b928      	cbnz	r0, 801127a <__multadd+0x5a>
 801126e:	4602      	mov	r2, r0
 8011270:	4b0c      	ldr	r3, [pc, #48]	; (80112a4 <__multadd+0x84>)
 8011272:	480d      	ldr	r0, [pc, #52]	; (80112a8 <__multadd+0x88>)
 8011274:	21b5      	movs	r1, #181	; 0xb5
 8011276:	f001 fad7 	bl	8012828 <__assert_func>
 801127a:	6922      	ldr	r2, [r4, #16]
 801127c:	3202      	adds	r2, #2
 801127e:	f104 010c 	add.w	r1, r4, #12
 8011282:	0092      	lsls	r2, r2, #2
 8011284:	300c      	adds	r0, #12
 8011286:	f7fc ffed 	bl	800e264 <memcpy>
 801128a:	4621      	mov	r1, r4
 801128c:	4638      	mov	r0, r7
 801128e:	f7ff ffa5 	bl	80111dc <_Bfree>
 8011292:	4644      	mov	r4, r8
 8011294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011298:	3501      	adds	r5, #1
 801129a:	615e      	str	r6, [r3, #20]
 801129c:	6125      	str	r5, [r4, #16]
 801129e:	4620      	mov	r0, r4
 80112a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a4:	08014530 	.word	0x08014530
 80112a8:	080145bc 	.word	0x080145bc

080112ac <__s2b>:
 80112ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112b0:	460c      	mov	r4, r1
 80112b2:	4615      	mov	r5, r2
 80112b4:	461f      	mov	r7, r3
 80112b6:	2209      	movs	r2, #9
 80112b8:	3308      	adds	r3, #8
 80112ba:	4606      	mov	r6, r0
 80112bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80112c0:	2100      	movs	r1, #0
 80112c2:	2201      	movs	r2, #1
 80112c4:	429a      	cmp	r2, r3
 80112c6:	db09      	blt.n	80112dc <__s2b+0x30>
 80112c8:	4630      	mov	r0, r6
 80112ca:	f7ff ff47 	bl	801115c <_Balloc>
 80112ce:	b940      	cbnz	r0, 80112e2 <__s2b+0x36>
 80112d0:	4602      	mov	r2, r0
 80112d2:	4b19      	ldr	r3, [pc, #100]	; (8011338 <__s2b+0x8c>)
 80112d4:	4819      	ldr	r0, [pc, #100]	; (801133c <__s2b+0x90>)
 80112d6:	21ce      	movs	r1, #206	; 0xce
 80112d8:	f001 faa6 	bl	8012828 <__assert_func>
 80112dc:	0052      	lsls	r2, r2, #1
 80112de:	3101      	adds	r1, #1
 80112e0:	e7f0      	b.n	80112c4 <__s2b+0x18>
 80112e2:	9b08      	ldr	r3, [sp, #32]
 80112e4:	6143      	str	r3, [r0, #20]
 80112e6:	2d09      	cmp	r5, #9
 80112e8:	f04f 0301 	mov.w	r3, #1
 80112ec:	6103      	str	r3, [r0, #16]
 80112ee:	dd16      	ble.n	801131e <__s2b+0x72>
 80112f0:	f104 0909 	add.w	r9, r4, #9
 80112f4:	46c8      	mov	r8, r9
 80112f6:	442c      	add	r4, r5
 80112f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112fc:	4601      	mov	r1, r0
 80112fe:	3b30      	subs	r3, #48	; 0x30
 8011300:	220a      	movs	r2, #10
 8011302:	4630      	mov	r0, r6
 8011304:	f7ff ff8c 	bl	8011220 <__multadd>
 8011308:	45a0      	cmp	r8, r4
 801130a:	d1f5      	bne.n	80112f8 <__s2b+0x4c>
 801130c:	f1a5 0408 	sub.w	r4, r5, #8
 8011310:	444c      	add	r4, r9
 8011312:	1b2d      	subs	r5, r5, r4
 8011314:	1963      	adds	r3, r4, r5
 8011316:	42bb      	cmp	r3, r7
 8011318:	db04      	blt.n	8011324 <__s2b+0x78>
 801131a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801131e:	340a      	adds	r4, #10
 8011320:	2509      	movs	r5, #9
 8011322:	e7f6      	b.n	8011312 <__s2b+0x66>
 8011324:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011328:	4601      	mov	r1, r0
 801132a:	3b30      	subs	r3, #48	; 0x30
 801132c:	220a      	movs	r2, #10
 801132e:	4630      	mov	r0, r6
 8011330:	f7ff ff76 	bl	8011220 <__multadd>
 8011334:	e7ee      	b.n	8011314 <__s2b+0x68>
 8011336:	bf00      	nop
 8011338:	08014530 	.word	0x08014530
 801133c:	080145bc 	.word	0x080145bc

08011340 <__hi0bits>:
 8011340:	0c03      	lsrs	r3, r0, #16
 8011342:	041b      	lsls	r3, r3, #16
 8011344:	b9d3      	cbnz	r3, 801137c <__hi0bits+0x3c>
 8011346:	0400      	lsls	r0, r0, #16
 8011348:	2310      	movs	r3, #16
 801134a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801134e:	bf04      	itt	eq
 8011350:	0200      	lsleq	r0, r0, #8
 8011352:	3308      	addeq	r3, #8
 8011354:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011358:	bf04      	itt	eq
 801135a:	0100      	lsleq	r0, r0, #4
 801135c:	3304      	addeq	r3, #4
 801135e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011362:	bf04      	itt	eq
 8011364:	0080      	lsleq	r0, r0, #2
 8011366:	3302      	addeq	r3, #2
 8011368:	2800      	cmp	r0, #0
 801136a:	db05      	blt.n	8011378 <__hi0bits+0x38>
 801136c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011370:	f103 0301 	add.w	r3, r3, #1
 8011374:	bf08      	it	eq
 8011376:	2320      	moveq	r3, #32
 8011378:	4618      	mov	r0, r3
 801137a:	4770      	bx	lr
 801137c:	2300      	movs	r3, #0
 801137e:	e7e4      	b.n	801134a <__hi0bits+0xa>

08011380 <__lo0bits>:
 8011380:	6803      	ldr	r3, [r0, #0]
 8011382:	f013 0207 	ands.w	r2, r3, #7
 8011386:	4601      	mov	r1, r0
 8011388:	d00b      	beq.n	80113a2 <__lo0bits+0x22>
 801138a:	07da      	lsls	r2, r3, #31
 801138c:	d423      	bmi.n	80113d6 <__lo0bits+0x56>
 801138e:	0798      	lsls	r0, r3, #30
 8011390:	bf49      	itett	mi
 8011392:	085b      	lsrmi	r3, r3, #1
 8011394:	089b      	lsrpl	r3, r3, #2
 8011396:	2001      	movmi	r0, #1
 8011398:	600b      	strmi	r3, [r1, #0]
 801139a:	bf5c      	itt	pl
 801139c:	600b      	strpl	r3, [r1, #0]
 801139e:	2002      	movpl	r0, #2
 80113a0:	4770      	bx	lr
 80113a2:	b298      	uxth	r0, r3
 80113a4:	b9a8      	cbnz	r0, 80113d2 <__lo0bits+0x52>
 80113a6:	0c1b      	lsrs	r3, r3, #16
 80113a8:	2010      	movs	r0, #16
 80113aa:	b2da      	uxtb	r2, r3
 80113ac:	b90a      	cbnz	r2, 80113b2 <__lo0bits+0x32>
 80113ae:	3008      	adds	r0, #8
 80113b0:	0a1b      	lsrs	r3, r3, #8
 80113b2:	071a      	lsls	r2, r3, #28
 80113b4:	bf04      	itt	eq
 80113b6:	091b      	lsreq	r3, r3, #4
 80113b8:	3004      	addeq	r0, #4
 80113ba:	079a      	lsls	r2, r3, #30
 80113bc:	bf04      	itt	eq
 80113be:	089b      	lsreq	r3, r3, #2
 80113c0:	3002      	addeq	r0, #2
 80113c2:	07da      	lsls	r2, r3, #31
 80113c4:	d403      	bmi.n	80113ce <__lo0bits+0x4e>
 80113c6:	085b      	lsrs	r3, r3, #1
 80113c8:	f100 0001 	add.w	r0, r0, #1
 80113cc:	d005      	beq.n	80113da <__lo0bits+0x5a>
 80113ce:	600b      	str	r3, [r1, #0]
 80113d0:	4770      	bx	lr
 80113d2:	4610      	mov	r0, r2
 80113d4:	e7e9      	b.n	80113aa <__lo0bits+0x2a>
 80113d6:	2000      	movs	r0, #0
 80113d8:	4770      	bx	lr
 80113da:	2020      	movs	r0, #32
 80113dc:	4770      	bx	lr
	...

080113e0 <__i2b>:
 80113e0:	b510      	push	{r4, lr}
 80113e2:	460c      	mov	r4, r1
 80113e4:	2101      	movs	r1, #1
 80113e6:	f7ff feb9 	bl	801115c <_Balloc>
 80113ea:	4602      	mov	r2, r0
 80113ec:	b928      	cbnz	r0, 80113fa <__i2b+0x1a>
 80113ee:	4b05      	ldr	r3, [pc, #20]	; (8011404 <__i2b+0x24>)
 80113f0:	4805      	ldr	r0, [pc, #20]	; (8011408 <__i2b+0x28>)
 80113f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113f6:	f001 fa17 	bl	8012828 <__assert_func>
 80113fa:	2301      	movs	r3, #1
 80113fc:	6144      	str	r4, [r0, #20]
 80113fe:	6103      	str	r3, [r0, #16]
 8011400:	bd10      	pop	{r4, pc}
 8011402:	bf00      	nop
 8011404:	08014530 	.word	0x08014530
 8011408:	080145bc 	.word	0x080145bc

0801140c <__multiply>:
 801140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011410:	4691      	mov	r9, r2
 8011412:	690a      	ldr	r2, [r1, #16]
 8011414:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011418:	429a      	cmp	r2, r3
 801141a:	bfb8      	it	lt
 801141c:	460b      	movlt	r3, r1
 801141e:	460c      	mov	r4, r1
 8011420:	bfbc      	itt	lt
 8011422:	464c      	movlt	r4, r9
 8011424:	4699      	movlt	r9, r3
 8011426:	6927      	ldr	r7, [r4, #16]
 8011428:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801142c:	68a3      	ldr	r3, [r4, #8]
 801142e:	6861      	ldr	r1, [r4, #4]
 8011430:	eb07 060a 	add.w	r6, r7, sl
 8011434:	42b3      	cmp	r3, r6
 8011436:	b085      	sub	sp, #20
 8011438:	bfb8      	it	lt
 801143a:	3101      	addlt	r1, #1
 801143c:	f7ff fe8e 	bl	801115c <_Balloc>
 8011440:	b930      	cbnz	r0, 8011450 <__multiply+0x44>
 8011442:	4602      	mov	r2, r0
 8011444:	4b44      	ldr	r3, [pc, #272]	; (8011558 <__multiply+0x14c>)
 8011446:	4845      	ldr	r0, [pc, #276]	; (801155c <__multiply+0x150>)
 8011448:	f240 115d 	movw	r1, #349	; 0x15d
 801144c:	f001 f9ec 	bl	8012828 <__assert_func>
 8011450:	f100 0514 	add.w	r5, r0, #20
 8011454:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011458:	462b      	mov	r3, r5
 801145a:	2200      	movs	r2, #0
 801145c:	4543      	cmp	r3, r8
 801145e:	d321      	bcc.n	80114a4 <__multiply+0x98>
 8011460:	f104 0314 	add.w	r3, r4, #20
 8011464:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011468:	f109 0314 	add.w	r3, r9, #20
 801146c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011470:	9202      	str	r2, [sp, #8]
 8011472:	1b3a      	subs	r2, r7, r4
 8011474:	3a15      	subs	r2, #21
 8011476:	f022 0203 	bic.w	r2, r2, #3
 801147a:	3204      	adds	r2, #4
 801147c:	f104 0115 	add.w	r1, r4, #21
 8011480:	428f      	cmp	r7, r1
 8011482:	bf38      	it	cc
 8011484:	2204      	movcc	r2, #4
 8011486:	9201      	str	r2, [sp, #4]
 8011488:	9a02      	ldr	r2, [sp, #8]
 801148a:	9303      	str	r3, [sp, #12]
 801148c:	429a      	cmp	r2, r3
 801148e:	d80c      	bhi.n	80114aa <__multiply+0x9e>
 8011490:	2e00      	cmp	r6, #0
 8011492:	dd03      	ble.n	801149c <__multiply+0x90>
 8011494:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011498:	2b00      	cmp	r3, #0
 801149a:	d05a      	beq.n	8011552 <__multiply+0x146>
 801149c:	6106      	str	r6, [r0, #16]
 801149e:	b005      	add	sp, #20
 80114a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a4:	f843 2b04 	str.w	r2, [r3], #4
 80114a8:	e7d8      	b.n	801145c <__multiply+0x50>
 80114aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80114ae:	f1ba 0f00 	cmp.w	sl, #0
 80114b2:	d024      	beq.n	80114fe <__multiply+0xf2>
 80114b4:	f104 0e14 	add.w	lr, r4, #20
 80114b8:	46a9      	mov	r9, r5
 80114ba:	f04f 0c00 	mov.w	ip, #0
 80114be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80114c2:	f8d9 1000 	ldr.w	r1, [r9]
 80114c6:	fa1f fb82 	uxth.w	fp, r2
 80114ca:	b289      	uxth	r1, r1
 80114cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80114d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80114d4:	f8d9 2000 	ldr.w	r2, [r9]
 80114d8:	4461      	add	r1, ip
 80114da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114de:	fb0a c20b 	mla	r2, sl, fp, ip
 80114e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80114e6:	b289      	uxth	r1, r1
 80114e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80114ec:	4577      	cmp	r7, lr
 80114ee:	f849 1b04 	str.w	r1, [r9], #4
 80114f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114f6:	d8e2      	bhi.n	80114be <__multiply+0xb2>
 80114f8:	9a01      	ldr	r2, [sp, #4]
 80114fa:	f845 c002 	str.w	ip, [r5, r2]
 80114fe:	9a03      	ldr	r2, [sp, #12]
 8011500:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011504:	3304      	adds	r3, #4
 8011506:	f1b9 0f00 	cmp.w	r9, #0
 801150a:	d020      	beq.n	801154e <__multiply+0x142>
 801150c:	6829      	ldr	r1, [r5, #0]
 801150e:	f104 0c14 	add.w	ip, r4, #20
 8011512:	46ae      	mov	lr, r5
 8011514:	f04f 0a00 	mov.w	sl, #0
 8011518:	f8bc b000 	ldrh.w	fp, [ip]
 801151c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011520:	fb09 220b 	mla	r2, r9, fp, r2
 8011524:	4492      	add	sl, r2
 8011526:	b289      	uxth	r1, r1
 8011528:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801152c:	f84e 1b04 	str.w	r1, [lr], #4
 8011530:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011534:	f8be 1000 	ldrh.w	r1, [lr]
 8011538:	0c12      	lsrs	r2, r2, #16
 801153a:	fb09 1102 	mla	r1, r9, r2, r1
 801153e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011542:	4567      	cmp	r7, ip
 8011544:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011548:	d8e6      	bhi.n	8011518 <__multiply+0x10c>
 801154a:	9a01      	ldr	r2, [sp, #4]
 801154c:	50a9      	str	r1, [r5, r2]
 801154e:	3504      	adds	r5, #4
 8011550:	e79a      	b.n	8011488 <__multiply+0x7c>
 8011552:	3e01      	subs	r6, #1
 8011554:	e79c      	b.n	8011490 <__multiply+0x84>
 8011556:	bf00      	nop
 8011558:	08014530 	.word	0x08014530
 801155c:	080145bc 	.word	0x080145bc

08011560 <__pow5mult>:
 8011560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011564:	4615      	mov	r5, r2
 8011566:	f012 0203 	ands.w	r2, r2, #3
 801156a:	4606      	mov	r6, r0
 801156c:	460f      	mov	r7, r1
 801156e:	d007      	beq.n	8011580 <__pow5mult+0x20>
 8011570:	4c25      	ldr	r4, [pc, #148]	; (8011608 <__pow5mult+0xa8>)
 8011572:	3a01      	subs	r2, #1
 8011574:	2300      	movs	r3, #0
 8011576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801157a:	f7ff fe51 	bl	8011220 <__multadd>
 801157e:	4607      	mov	r7, r0
 8011580:	10ad      	asrs	r5, r5, #2
 8011582:	d03d      	beq.n	8011600 <__pow5mult+0xa0>
 8011584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011586:	b97c      	cbnz	r4, 80115a8 <__pow5mult+0x48>
 8011588:	2010      	movs	r0, #16
 801158a:	f7ff fdcd 	bl	8011128 <malloc>
 801158e:	4602      	mov	r2, r0
 8011590:	6270      	str	r0, [r6, #36]	; 0x24
 8011592:	b928      	cbnz	r0, 80115a0 <__pow5mult+0x40>
 8011594:	4b1d      	ldr	r3, [pc, #116]	; (801160c <__pow5mult+0xac>)
 8011596:	481e      	ldr	r0, [pc, #120]	; (8011610 <__pow5mult+0xb0>)
 8011598:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801159c:	f001 f944 	bl	8012828 <__assert_func>
 80115a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115a4:	6004      	str	r4, [r0, #0]
 80115a6:	60c4      	str	r4, [r0, #12]
 80115a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80115ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115b0:	b94c      	cbnz	r4, 80115c6 <__pow5mult+0x66>
 80115b2:	f240 2171 	movw	r1, #625	; 0x271
 80115b6:	4630      	mov	r0, r6
 80115b8:	f7ff ff12 	bl	80113e0 <__i2b>
 80115bc:	2300      	movs	r3, #0
 80115be:	f8c8 0008 	str.w	r0, [r8, #8]
 80115c2:	4604      	mov	r4, r0
 80115c4:	6003      	str	r3, [r0, #0]
 80115c6:	f04f 0900 	mov.w	r9, #0
 80115ca:	07eb      	lsls	r3, r5, #31
 80115cc:	d50a      	bpl.n	80115e4 <__pow5mult+0x84>
 80115ce:	4639      	mov	r1, r7
 80115d0:	4622      	mov	r2, r4
 80115d2:	4630      	mov	r0, r6
 80115d4:	f7ff ff1a 	bl	801140c <__multiply>
 80115d8:	4639      	mov	r1, r7
 80115da:	4680      	mov	r8, r0
 80115dc:	4630      	mov	r0, r6
 80115de:	f7ff fdfd 	bl	80111dc <_Bfree>
 80115e2:	4647      	mov	r7, r8
 80115e4:	106d      	asrs	r5, r5, #1
 80115e6:	d00b      	beq.n	8011600 <__pow5mult+0xa0>
 80115e8:	6820      	ldr	r0, [r4, #0]
 80115ea:	b938      	cbnz	r0, 80115fc <__pow5mult+0x9c>
 80115ec:	4622      	mov	r2, r4
 80115ee:	4621      	mov	r1, r4
 80115f0:	4630      	mov	r0, r6
 80115f2:	f7ff ff0b 	bl	801140c <__multiply>
 80115f6:	6020      	str	r0, [r4, #0]
 80115f8:	f8c0 9000 	str.w	r9, [r0]
 80115fc:	4604      	mov	r4, r0
 80115fe:	e7e4      	b.n	80115ca <__pow5mult+0x6a>
 8011600:	4638      	mov	r0, r7
 8011602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011606:	bf00      	nop
 8011608:	08014708 	.word	0x08014708
 801160c:	080144be 	.word	0x080144be
 8011610:	080145bc 	.word	0x080145bc

08011614 <__lshift>:
 8011614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011618:	460c      	mov	r4, r1
 801161a:	6849      	ldr	r1, [r1, #4]
 801161c:	6923      	ldr	r3, [r4, #16]
 801161e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011622:	68a3      	ldr	r3, [r4, #8]
 8011624:	4607      	mov	r7, r0
 8011626:	4691      	mov	r9, r2
 8011628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801162c:	f108 0601 	add.w	r6, r8, #1
 8011630:	42b3      	cmp	r3, r6
 8011632:	db0b      	blt.n	801164c <__lshift+0x38>
 8011634:	4638      	mov	r0, r7
 8011636:	f7ff fd91 	bl	801115c <_Balloc>
 801163a:	4605      	mov	r5, r0
 801163c:	b948      	cbnz	r0, 8011652 <__lshift+0x3e>
 801163e:	4602      	mov	r2, r0
 8011640:	4b2a      	ldr	r3, [pc, #168]	; (80116ec <__lshift+0xd8>)
 8011642:	482b      	ldr	r0, [pc, #172]	; (80116f0 <__lshift+0xdc>)
 8011644:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011648:	f001 f8ee 	bl	8012828 <__assert_func>
 801164c:	3101      	adds	r1, #1
 801164e:	005b      	lsls	r3, r3, #1
 8011650:	e7ee      	b.n	8011630 <__lshift+0x1c>
 8011652:	2300      	movs	r3, #0
 8011654:	f100 0114 	add.w	r1, r0, #20
 8011658:	f100 0210 	add.w	r2, r0, #16
 801165c:	4618      	mov	r0, r3
 801165e:	4553      	cmp	r3, sl
 8011660:	db37      	blt.n	80116d2 <__lshift+0xbe>
 8011662:	6920      	ldr	r0, [r4, #16]
 8011664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011668:	f104 0314 	add.w	r3, r4, #20
 801166c:	f019 091f 	ands.w	r9, r9, #31
 8011670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011674:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011678:	d02f      	beq.n	80116da <__lshift+0xc6>
 801167a:	f1c9 0e20 	rsb	lr, r9, #32
 801167e:	468a      	mov	sl, r1
 8011680:	f04f 0c00 	mov.w	ip, #0
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	fa02 f209 	lsl.w	r2, r2, r9
 801168a:	ea42 020c 	orr.w	r2, r2, ip
 801168e:	f84a 2b04 	str.w	r2, [sl], #4
 8011692:	f853 2b04 	ldr.w	r2, [r3], #4
 8011696:	4298      	cmp	r0, r3
 8011698:	fa22 fc0e 	lsr.w	ip, r2, lr
 801169c:	d8f2      	bhi.n	8011684 <__lshift+0x70>
 801169e:	1b03      	subs	r3, r0, r4
 80116a0:	3b15      	subs	r3, #21
 80116a2:	f023 0303 	bic.w	r3, r3, #3
 80116a6:	3304      	adds	r3, #4
 80116a8:	f104 0215 	add.w	r2, r4, #21
 80116ac:	4290      	cmp	r0, r2
 80116ae:	bf38      	it	cc
 80116b0:	2304      	movcc	r3, #4
 80116b2:	f841 c003 	str.w	ip, [r1, r3]
 80116b6:	f1bc 0f00 	cmp.w	ip, #0
 80116ba:	d001      	beq.n	80116c0 <__lshift+0xac>
 80116bc:	f108 0602 	add.w	r6, r8, #2
 80116c0:	3e01      	subs	r6, #1
 80116c2:	4638      	mov	r0, r7
 80116c4:	612e      	str	r6, [r5, #16]
 80116c6:	4621      	mov	r1, r4
 80116c8:	f7ff fd88 	bl	80111dc <_Bfree>
 80116cc:	4628      	mov	r0, r5
 80116ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80116d6:	3301      	adds	r3, #1
 80116d8:	e7c1      	b.n	801165e <__lshift+0x4a>
 80116da:	3904      	subs	r1, #4
 80116dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80116e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80116e4:	4298      	cmp	r0, r3
 80116e6:	d8f9      	bhi.n	80116dc <__lshift+0xc8>
 80116e8:	e7ea      	b.n	80116c0 <__lshift+0xac>
 80116ea:	bf00      	nop
 80116ec:	08014530 	.word	0x08014530
 80116f0:	080145bc 	.word	0x080145bc

080116f4 <__mcmp>:
 80116f4:	b530      	push	{r4, r5, lr}
 80116f6:	6902      	ldr	r2, [r0, #16]
 80116f8:	690c      	ldr	r4, [r1, #16]
 80116fa:	1b12      	subs	r2, r2, r4
 80116fc:	d10e      	bne.n	801171c <__mcmp+0x28>
 80116fe:	f100 0314 	add.w	r3, r0, #20
 8011702:	3114      	adds	r1, #20
 8011704:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011708:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801170c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011710:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011714:	42a5      	cmp	r5, r4
 8011716:	d003      	beq.n	8011720 <__mcmp+0x2c>
 8011718:	d305      	bcc.n	8011726 <__mcmp+0x32>
 801171a:	2201      	movs	r2, #1
 801171c:	4610      	mov	r0, r2
 801171e:	bd30      	pop	{r4, r5, pc}
 8011720:	4283      	cmp	r3, r0
 8011722:	d3f3      	bcc.n	801170c <__mcmp+0x18>
 8011724:	e7fa      	b.n	801171c <__mcmp+0x28>
 8011726:	f04f 32ff 	mov.w	r2, #4294967295
 801172a:	e7f7      	b.n	801171c <__mcmp+0x28>

0801172c <__mdiff>:
 801172c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011730:	460c      	mov	r4, r1
 8011732:	4606      	mov	r6, r0
 8011734:	4611      	mov	r1, r2
 8011736:	4620      	mov	r0, r4
 8011738:	4690      	mov	r8, r2
 801173a:	f7ff ffdb 	bl	80116f4 <__mcmp>
 801173e:	1e05      	subs	r5, r0, #0
 8011740:	d110      	bne.n	8011764 <__mdiff+0x38>
 8011742:	4629      	mov	r1, r5
 8011744:	4630      	mov	r0, r6
 8011746:	f7ff fd09 	bl	801115c <_Balloc>
 801174a:	b930      	cbnz	r0, 801175a <__mdiff+0x2e>
 801174c:	4b3a      	ldr	r3, [pc, #232]	; (8011838 <__mdiff+0x10c>)
 801174e:	4602      	mov	r2, r0
 8011750:	f240 2132 	movw	r1, #562	; 0x232
 8011754:	4839      	ldr	r0, [pc, #228]	; (801183c <__mdiff+0x110>)
 8011756:	f001 f867 	bl	8012828 <__assert_func>
 801175a:	2301      	movs	r3, #1
 801175c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011764:	bfa4      	itt	ge
 8011766:	4643      	movge	r3, r8
 8011768:	46a0      	movge	r8, r4
 801176a:	4630      	mov	r0, r6
 801176c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011770:	bfa6      	itte	ge
 8011772:	461c      	movge	r4, r3
 8011774:	2500      	movge	r5, #0
 8011776:	2501      	movlt	r5, #1
 8011778:	f7ff fcf0 	bl	801115c <_Balloc>
 801177c:	b920      	cbnz	r0, 8011788 <__mdiff+0x5c>
 801177e:	4b2e      	ldr	r3, [pc, #184]	; (8011838 <__mdiff+0x10c>)
 8011780:	4602      	mov	r2, r0
 8011782:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011786:	e7e5      	b.n	8011754 <__mdiff+0x28>
 8011788:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801178c:	6926      	ldr	r6, [r4, #16]
 801178e:	60c5      	str	r5, [r0, #12]
 8011790:	f104 0914 	add.w	r9, r4, #20
 8011794:	f108 0514 	add.w	r5, r8, #20
 8011798:	f100 0e14 	add.w	lr, r0, #20
 801179c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80117a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80117a4:	f108 0210 	add.w	r2, r8, #16
 80117a8:	46f2      	mov	sl, lr
 80117aa:	2100      	movs	r1, #0
 80117ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80117b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80117b4:	fa1f f883 	uxth.w	r8, r3
 80117b8:	fa11 f18b 	uxtah	r1, r1, fp
 80117bc:	0c1b      	lsrs	r3, r3, #16
 80117be:	eba1 0808 	sub.w	r8, r1, r8
 80117c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80117ca:	fa1f f888 	uxth.w	r8, r8
 80117ce:	1419      	asrs	r1, r3, #16
 80117d0:	454e      	cmp	r6, r9
 80117d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80117d6:	f84a 3b04 	str.w	r3, [sl], #4
 80117da:	d8e7      	bhi.n	80117ac <__mdiff+0x80>
 80117dc:	1b33      	subs	r3, r6, r4
 80117de:	3b15      	subs	r3, #21
 80117e0:	f023 0303 	bic.w	r3, r3, #3
 80117e4:	3304      	adds	r3, #4
 80117e6:	3415      	adds	r4, #21
 80117e8:	42a6      	cmp	r6, r4
 80117ea:	bf38      	it	cc
 80117ec:	2304      	movcc	r3, #4
 80117ee:	441d      	add	r5, r3
 80117f0:	4473      	add	r3, lr
 80117f2:	469e      	mov	lr, r3
 80117f4:	462e      	mov	r6, r5
 80117f6:	4566      	cmp	r6, ip
 80117f8:	d30e      	bcc.n	8011818 <__mdiff+0xec>
 80117fa:	f10c 0203 	add.w	r2, ip, #3
 80117fe:	1b52      	subs	r2, r2, r5
 8011800:	f022 0203 	bic.w	r2, r2, #3
 8011804:	3d03      	subs	r5, #3
 8011806:	45ac      	cmp	ip, r5
 8011808:	bf38      	it	cc
 801180a:	2200      	movcc	r2, #0
 801180c:	441a      	add	r2, r3
 801180e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011812:	b17b      	cbz	r3, 8011834 <__mdiff+0x108>
 8011814:	6107      	str	r7, [r0, #16]
 8011816:	e7a3      	b.n	8011760 <__mdiff+0x34>
 8011818:	f856 8b04 	ldr.w	r8, [r6], #4
 801181c:	fa11 f288 	uxtah	r2, r1, r8
 8011820:	1414      	asrs	r4, r2, #16
 8011822:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011826:	b292      	uxth	r2, r2
 8011828:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801182c:	f84e 2b04 	str.w	r2, [lr], #4
 8011830:	1421      	asrs	r1, r4, #16
 8011832:	e7e0      	b.n	80117f6 <__mdiff+0xca>
 8011834:	3f01      	subs	r7, #1
 8011836:	e7ea      	b.n	801180e <__mdiff+0xe2>
 8011838:	08014530 	.word	0x08014530
 801183c:	080145bc 	.word	0x080145bc

08011840 <__ulp>:
 8011840:	b082      	sub	sp, #8
 8011842:	ed8d 0b00 	vstr	d0, [sp]
 8011846:	9b01      	ldr	r3, [sp, #4]
 8011848:	4912      	ldr	r1, [pc, #72]	; (8011894 <__ulp+0x54>)
 801184a:	4019      	ands	r1, r3
 801184c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011850:	2900      	cmp	r1, #0
 8011852:	dd05      	ble.n	8011860 <__ulp+0x20>
 8011854:	2200      	movs	r2, #0
 8011856:	460b      	mov	r3, r1
 8011858:	ec43 2b10 	vmov	d0, r2, r3
 801185c:	b002      	add	sp, #8
 801185e:	4770      	bx	lr
 8011860:	4249      	negs	r1, r1
 8011862:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011866:	ea4f 5021 	mov.w	r0, r1, asr #20
 801186a:	f04f 0200 	mov.w	r2, #0
 801186e:	f04f 0300 	mov.w	r3, #0
 8011872:	da04      	bge.n	801187e <__ulp+0x3e>
 8011874:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011878:	fa41 f300 	asr.w	r3, r1, r0
 801187c:	e7ec      	b.n	8011858 <__ulp+0x18>
 801187e:	f1a0 0114 	sub.w	r1, r0, #20
 8011882:	291e      	cmp	r1, #30
 8011884:	bfda      	itte	le
 8011886:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801188a:	fa20 f101 	lsrle.w	r1, r0, r1
 801188e:	2101      	movgt	r1, #1
 8011890:	460a      	mov	r2, r1
 8011892:	e7e1      	b.n	8011858 <__ulp+0x18>
 8011894:	7ff00000 	.word	0x7ff00000

08011898 <__b2d>:
 8011898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801189a:	6905      	ldr	r5, [r0, #16]
 801189c:	f100 0714 	add.w	r7, r0, #20
 80118a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80118a4:	1f2e      	subs	r6, r5, #4
 80118a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80118aa:	4620      	mov	r0, r4
 80118ac:	f7ff fd48 	bl	8011340 <__hi0bits>
 80118b0:	f1c0 0320 	rsb	r3, r0, #32
 80118b4:	280a      	cmp	r0, #10
 80118b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011934 <__b2d+0x9c>
 80118ba:	600b      	str	r3, [r1, #0]
 80118bc:	dc14      	bgt.n	80118e8 <__b2d+0x50>
 80118be:	f1c0 0e0b 	rsb	lr, r0, #11
 80118c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80118c6:	42b7      	cmp	r7, r6
 80118c8:	ea41 030c 	orr.w	r3, r1, ip
 80118cc:	bf34      	ite	cc
 80118ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118d2:	2100      	movcs	r1, #0
 80118d4:	3015      	adds	r0, #21
 80118d6:	fa04 f000 	lsl.w	r0, r4, r0
 80118da:	fa21 f10e 	lsr.w	r1, r1, lr
 80118de:	ea40 0201 	orr.w	r2, r0, r1
 80118e2:	ec43 2b10 	vmov	d0, r2, r3
 80118e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e8:	42b7      	cmp	r7, r6
 80118ea:	bf3a      	itte	cc
 80118ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80118f4:	2100      	movcs	r1, #0
 80118f6:	380b      	subs	r0, #11
 80118f8:	d017      	beq.n	801192a <__b2d+0x92>
 80118fa:	f1c0 0c20 	rsb	ip, r0, #32
 80118fe:	fa04 f500 	lsl.w	r5, r4, r0
 8011902:	42be      	cmp	r6, r7
 8011904:	fa21 f40c 	lsr.w	r4, r1, ip
 8011908:	ea45 0504 	orr.w	r5, r5, r4
 801190c:	bf8c      	ite	hi
 801190e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011912:	2400      	movls	r4, #0
 8011914:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011918:	fa01 f000 	lsl.w	r0, r1, r0
 801191c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011920:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011924:	ea40 0204 	orr.w	r2, r0, r4
 8011928:	e7db      	b.n	80118e2 <__b2d+0x4a>
 801192a:	ea44 030c 	orr.w	r3, r4, ip
 801192e:	460a      	mov	r2, r1
 8011930:	e7d7      	b.n	80118e2 <__b2d+0x4a>
 8011932:	bf00      	nop
 8011934:	3ff00000 	.word	0x3ff00000

08011938 <__d2b>:
 8011938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801193c:	4689      	mov	r9, r1
 801193e:	2101      	movs	r1, #1
 8011940:	ec57 6b10 	vmov	r6, r7, d0
 8011944:	4690      	mov	r8, r2
 8011946:	f7ff fc09 	bl	801115c <_Balloc>
 801194a:	4604      	mov	r4, r0
 801194c:	b930      	cbnz	r0, 801195c <__d2b+0x24>
 801194e:	4602      	mov	r2, r0
 8011950:	4b25      	ldr	r3, [pc, #148]	; (80119e8 <__d2b+0xb0>)
 8011952:	4826      	ldr	r0, [pc, #152]	; (80119ec <__d2b+0xb4>)
 8011954:	f240 310a 	movw	r1, #778	; 0x30a
 8011958:	f000 ff66 	bl	8012828 <__assert_func>
 801195c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011964:	bb35      	cbnz	r5, 80119b4 <__d2b+0x7c>
 8011966:	2e00      	cmp	r6, #0
 8011968:	9301      	str	r3, [sp, #4]
 801196a:	d028      	beq.n	80119be <__d2b+0x86>
 801196c:	4668      	mov	r0, sp
 801196e:	9600      	str	r6, [sp, #0]
 8011970:	f7ff fd06 	bl	8011380 <__lo0bits>
 8011974:	9900      	ldr	r1, [sp, #0]
 8011976:	b300      	cbz	r0, 80119ba <__d2b+0x82>
 8011978:	9a01      	ldr	r2, [sp, #4]
 801197a:	f1c0 0320 	rsb	r3, r0, #32
 801197e:	fa02 f303 	lsl.w	r3, r2, r3
 8011982:	430b      	orrs	r3, r1
 8011984:	40c2      	lsrs	r2, r0
 8011986:	6163      	str	r3, [r4, #20]
 8011988:	9201      	str	r2, [sp, #4]
 801198a:	9b01      	ldr	r3, [sp, #4]
 801198c:	61a3      	str	r3, [r4, #24]
 801198e:	2b00      	cmp	r3, #0
 8011990:	bf14      	ite	ne
 8011992:	2202      	movne	r2, #2
 8011994:	2201      	moveq	r2, #1
 8011996:	6122      	str	r2, [r4, #16]
 8011998:	b1d5      	cbz	r5, 80119d0 <__d2b+0x98>
 801199a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801199e:	4405      	add	r5, r0
 80119a0:	f8c9 5000 	str.w	r5, [r9]
 80119a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80119a8:	f8c8 0000 	str.w	r0, [r8]
 80119ac:	4620      	mov	r0, r4
 80119ae:	b003      	add	sp, #12
 80119b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80119b8:	e7d5      	b.n	8011966 <__d2b+0x2e>
 80119ba:	6161      	str	r1, [r4, #20]
 80119bc:	e7e5      	b.n	801198a <__d2b+0x52>
 80119be:	a801      	add	r0, sp, #4
 80119c0:	f7ff fcde 	bl	8011380 <__lo0bits>
 80119c4:	9b01      	ldr	r3, [sp, #4]
 80119c6:	6163      	str	r3, [r4, #20]
 80119c8:	2201      	movs	r2, #1
 80119ca:	6122      	str	r2, [r4, #16]
 80119cc:	3020      	adds	r0, #32
 80119ce:	e7e3      	b.n	8011998 <__d2b+0x60>
 80119d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80119d8:	f8c9 0000 	str.w	r0, [r9]
 80119dc:	6918      	ldr	r0, [r3, #16]
 80119de:	f7ff fcaf 	bl	8011340 <__hi0bits>
 80119e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119e6:	e7df      	b.n	80119a8 <__d2b+0x70>
 80119e8:	08014530 	.word	0x08014530
 80119ec:	080145bc 	.word	0x080145bc

080119f0 <__ratio>:
 80119f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	4688      	mov	r8, r1
 80119f6:	4669      	mov	r1, sp
 80119f8:	4681      	mov	r9, r0
 80119fa:	f7ff ff4d 	bl	8011898 <__b2d>
 80119fe:	a901      	add	r1, sp, #4
 8011a00:	4640      	mov	r0, r8
 8011a02:	ec55 4b10 	vmov	r4, r5, d0
 8011a06:	ee10 aa10 	vmov	sl, s0
 8011a0a:	f7ff ff45 	bl	8011898 <__b2d>
 8011a0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011a16:	1a59      	subs	r1, r3, r1
 8011a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011a22:	ec57 6b10 	vmov	r6, r7, d0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	bfd6      	itet	le
 8011a2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011a2e:	462a      	movgt	r2, r5
 8011a30:	463a      	movle	r2, r7
 8011a32:	46ab      	mov	fp, r5
 8011a34:	bfd6      	itet	le
 8011a36:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8011a3a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011a3e:	ee00 3a90 	vmovle	s1, r3
 8011a42:	ec4b ab17 	vmov	d7, sl, fp
 8011a46:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8011a4a:	b003      	add	sp, #12
 8011a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a50 <__copybits>:
 8011a50:	3901      	subs	r1, #1
 8011a52:	b570      	push	{r4, r5, r6, lr}
 8011a54:	1149      	asrs	r1, r1, #5
 8011a56:	6914      	ldr	r4, [r2, #16]
 8011a58:	3101      	adds	r1, #1
 8011a5a:	f102 0314 	add.w	r3, r2, #20
 8011a5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a66:	1f05      	subs	r5, r0, #4
 8011a68:	42a3      	cmp	r3, r4
 8011a6a:	d30c      	bcc.n	8011a86 <__copybits+0x36>
 8011a6c:	1aa3      	subs	r3, r4, r2
 8011a6e:	3b11      	subs	r3, #17
 8011a70:	f023 0303 	bic.w	r3, r3, #3
 8011a74:	3211      	adds	r2, #17
 8011a76:	42a2      	cmp	r2, r4
 8011a78:	bf88      	it	hi
 8011a7a:	2300      	movhi	r3, #0
 8011a7c:	4418      	add	r0, r3
 8011a7e:	2300      	movs	r3, #0
 8011a80:	4288      	cmp	r0, r1
 8011a82:	d305      	bcc.n	8011a90 <__copybits+0x40>
 8011a84:	bd70      	pop	{r4, r5, r6, pc}
 8011a86:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a8a:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a8e:	e7eb      	b.n	8011a68 <__copybits+0x18>
 8011a90:	f840 3b04 	str.w	r3, [r0], #4
 8011a94:	e7f4      	b.n	8011a80 <__copybits+0x30>

08011a96 <__any_on>:
 8011a96:	f100 0214 	add.w	r2, r0, #20
 8011a9a:	6900      	ldr	r0, [r0, #16]
 8011a9c:	114b      	asrs	r3, r1, #5
 8011a9e:	4298      	cmp	r0, r3
 8011aa0:	b510      	push	{r4, lr}
 8011aa2:	db11      	blt.n	8011ac8 <__any_on+0x32>
 8011aa4:	dd0a      	ble.n	8011abc <__any_on+0x26>
 8011aa6:	f011 011f 	ands.w	r1, r1, #31
 8011aaa:	d007      	beq.n	8011abc <__any_on+0x26>
 8011aac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011ab0:	fa24 f001 	lsr.w	r0, r4, r1
 8011ab4:	fa00 f101 	lsl.w	r1, r0, r1
 8011ab8:	428c      	cmp	r4, r1
 8011aba:	d10b      	bne.n	8011ad4 <__any_on+0x3e>
 8011abc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d803      	bhi.n	8011acc <__any_on+0x36>
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	bd10      	pop	{r4, pc}
 8011ac8:	4603      	mov	r3, r0
 8011aca:	e7f7      	b.n	8011abc <__any_on+0x26>
 8011acc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ad0:	2900      	cmp	r1, #0
 8011ad2:	d0f5      	beq.n	8011ac0 <__any_on+0x2a>
 8011ad4:	2001      	movs	r0, #1
 8011ad6:	e7f6      	b.n	8011ac6 <__any_on+0x30>

08011ad8 <_calloc_r>:
 8011ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ada:	fba1 2402 	umull	r2, r4, r1, r2
 8011ade:	b94c      	cbnz	r4, 8011af4 <_calloc_r+0x1c>
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	9201      	str	r2, [sp, #4]
 8011ae4:	f000 f87a 	bl	8011bdc <_malloc_r>
 8011ae8:	9a01      	ldr	r2, [sp, #4]
 8011aea:	4605      	mov	r5, r0
 8011aec:	b930      	cbnz	r0, 8011afc <_calloc_r+0x24>
 8011aee:	4628      	mov	r0, r5
 8011af0:	b003      	add	sp, #12
 8011af2:	bd30      	pop	{r4, r5, pc}
 8011af4:	220c      	movs	r2, #12
 8011af6:	6002      	str	r2, [r0, #0]
 8011af8:	2500      	movs	r5, #0
 8011afa:	e7f8      	b.n	8011aee <_calloc_r+0x16>
 8011afc:	4621      	mov	r1, r4
 8011afe:	f7fc fbbf 	bl	800e280 <memset>
 8011b02:	e7f4      	b.n	8011aee <_calloc_r+0x16>

08011b04 <_free_r>:
 8011b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b06:	2900      	cmp	r1, #0
 8011b08:	d044      	beq.n	8011b94 <_free_r+0x90>
 8011b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b0e:	9001      	str	r0, [sp, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	f1a1 0404 	sub.w	r4, r1, #4
 8011b16:	bfb8      	it	lt
 8011b18:	18e4      	addlt	r4, r4, r3
 8011b1a:	f001 f889 	bl	8012c30 <__malloc_lock>
 8011b1e:	4a1e      	ldr	r2, [pc, #120]	; (8011b98 <_free_r+0x94>)
 8011b20:	9801      	ldr	r0, [sp, #4]
 8011b22:	6813      	ldr	r3, [r2, #0]
 8011b24:	b933      	cbnz	r3, 8011b34 <_free_r+0x30>
 8011b26:	6063      	str	r3, [r4, #4]
 8011b28:	6014      	str	r4, [r2, #0]
 8011b2a:	b003      	add	sp, #12
 8011b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b30:	f001 b884 	b.w	8012c3c <__malloc_unlock>
 8011b34:	42a3      	cmp	r3, r4
 8011b36:	d908      	bls.n	8011b4a <_free_r+0x46>
 8011b38:	6825      	ldr	r5, [r4, #0]
 8011b3a:	1961      	adds	r1, r4, r5
 8011b3c:	428b      	cmp	r3, r1
 8011b3e:	bf01      	itttt	eq
 8011b40:	6819      	ldreq	r1, [r3, #0]
 8011b42:	685b      	ldreq	r3, [r3, #4]
 8011b44:	1949      	addeq	r1, r1, r5
 8011b46:	6021      	streq	r1, [r4, #0]
 8011b48:	e7ed      	b.n	8011b26 <_free_r+0x22>
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	b10b      	cbz	r3, 8011b54 <_free_r+0x50>
 8011b50:	42a3      	cmp	r3, r4
 8011b52:	d9fa      	bls.n	8011b4a <_free_r+0x46>
 8011b54:	6811      	ldr	r1, [r2, #0]
 8011b56:	1855      	adds	r5, r2, r1
 8011b58:	42a5      	cmp	r5, r4
 8011b5a:	d10b      	bne.n	8011b74 <_free_r+0x70>
 8011b5c:	6824      	ldr	r4, [r4, #0]
 8011b5e:	4421      	add	r1, r4
 8011b60:	1854      	adds	r4, r2, r1
 8011b62:	42a3      	cmp	r3, r4
 8011b64:	6011      	str	r1, [r2, #0]
 8011b66:	d1e0      	bne.n	8011b2a <_free_r+0x26>
 8011b68:	681c      	ldr	r4, [r3, #0]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	6053      	str	r3, [r2, #4]
 8011b6e:	4421      	add	r1, r4
 8011b70:	6011      	str	r1, [r2, #0]
 8011b72:	e7da      	b.n	8011b2a <_free_r+0x26>
 8011b74:	d902      	bls.n	8011b7c <_free_r+0x78>
 8011b76:	230c      	movs	r3, #12
 8011b78:	6003      	str	r3, [r0, #0]
 8011b7a:	e7d6      	b.n	8011b2a <_free_r+0x26>
 8011b7c:	6825      	ldr	r5, [r4, #0]
 8011b7e:	1961      	adds	r1, r4, r5
 8011b80:	428b      	cmp	r3, r1
 8011b82:	bf04      	itt	eq
 8011b84:	6819      	ldreq	r1, [r3, #0]
 8011b86:	685b      	ldreq	r3, [r3, #4]
 8011b88:	6063      	str	r3, [r4, #4]
 8011b8a:	bf04      	itt	eq
 8011b8c:	1949      	addeq	r1, r1, r5
 8011b8e:	6021      	streq	r1, [r4, #0]
 8011b90:	6054      	str	r4, [r2, #4]
 8011b92:	e7ca      	b.n	8011b2a <_free_r+0x26>
 8011b94:	b003      	add	sp, #12
 8011b96:	bd30      	pop	{r4, r5, pc}
 8011b98:	240051c8 	.word	0x240051c8

08011b9c <sbrk_aligned>:
 8011b9c:	b570      	push	{r4, r5, r6, lr}
 8011b9e:	4e0e      	ldr	r6, [pc, #56]	; (8011bd8 <sbrk_aligned+0x3c>)
 8011ba0:	460c      	mov	r4, r1
 8011ba2:	6831      	ldr	r1, [r6, #0]
 8011ba4:	4605      	mov	r5, r0
 8011ba6:	b911      	cbnz	r1, 8011bae <sbrk_aligned+0x12>
 8011ba8:	f000 fd26 	bl	80125f8 <_sbrk_r>
 8011bac:	6030      	str	r0, [r6, #0]
 8011bae:	4621      	mov	r1, r4
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	f000 fd21 	bl	80125f8 <_sbrk_r>
 8011bb6:	1c43      	adds	r3, r0, #1
 8011bb8:	d00a      	beq.n	8011bd0 <sbrk_aligned+0x34>
 8011bba:	1cc4      	adds	r4, r0, #3
 8011bbc:	f024 0403 	bic.w	r4, r4, #3
 8011bc0:	42a0      	cmp	r0, r4
 8011bc2:	d007      	beq.n	8011bd4 <sbrk_aligned+0x38>
 8011bc4:	1a21      	subs	r1, r4, r0
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	f000 fd16 	bl	80125f8 <_sbrk_r>
 8011bcc:	3001      	adds	r0, #1
 8011bce:	d101      	bne.n	8011bd4 <sbrk_aligned+0x38>
 8011bd0:	f04f 34ff 	mov.w	r4, #4294967295
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	bd70      	pop	{r4, r5, r6, pc}
 8011bd8:	240051cc 	.word	0x240051cc

08011bdc <_malloc_r>:
 8011bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be0:	1ccd      	adds	r5, r1, #3
 8011be2:	f025 0503 	bic.w	r5, r5, #3
 8011be6:	3508      	adds	r5, #8
 8011be8:	2d0c      	cmp	r5, #12
 8011bea:	bf38      	it	cc
 8011bec:	250c      	movcc	r5, #12
 8011bee:	2d00      	cmp	r5, #0
 8011bf0:	4607      	mov	r7, r0
 8011bf2:	db01      	blt.n	8011bf8 <_malloc_r+0x1c>
 8011bf4:	42a9      	cmp	r1, r5
 8011bf6:	d905      	bls.n	8011c04 <_malloc_r+0x28>
 8011bf8:	230c      	movs	r3, #12
 8011bfa:	603b      	str	r3, [r7, #0]
 8011bfc:	2600      	movs	r6, #0
 8011bfe:	4630      	mov	r0, r6
 8011c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c04:	4e2e      	ldr	r6, [pc, #184]	; (8011cc0 <_malloc_r+0xe4>)
 8011c06:	f001 f813 	bl	8012c30 <__malloc_lock>
 8011c0a:	6833      	ldr	r3, [r6, #0]
 8011c0c:	461c      	mov	r4, r3
 8011c0e:	bb34      	cbnz	r4, 8011c5e <_malloc_r+0x82>
 8011c10:	4629      	mov	r1, r5
 8011c12:	4638      	mov	r0, r7
 8011c14:	f7ff ffc2 	bl	8011b9c <sbrk_aligned>
 8011c18:	1c43      	adds	r3, r0, #1
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	d14d      	bne.n	8011cba <_malloc_r+0xde>
 8011c1e:	6834      	ldr	r4, [r6, #0]
 8011c20:	4626      	mov	r6, r4
 8011c22:	2e00      	cmp	r6, #0
 8011c24:	d140      	bne.n	8011ca8 <_malloc_r+0xcc>
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	4631      	mov	r1, r6
 8011c2a:	4638      	mov	r0, r7
 8011c2c:	eb04 0803 	add.w	r8, r4, r3
 8011c30:	f000 fce2 	bl	80125f8 <_sbrk_r>
 8011c34:	4580      	cmp	r8, r0
 8011c36:	d13a      	bne.n	8011cae <_malloc_r+0xd2>
 8011c38:	6821      	ldr	r1, [r4, #0]
 8011c3a:	3503      	adds	r5, #3
 8011c3c:	1a6d      	subs	r5, r5, r1
 8011c3e:	f025 0503 	bic.w	r5, r5, #3
 8011c42:	3508      	adds	r5, #8
 8011c44:	2d0c      	cmp	r5, #12
 8011c46:	bf38      	it	cc
 8011c48:	250c      	movcc	r5, #12
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	4638      	mov	r0, r7
 8011c4e:	f7ff ffa5 	bl	8011b9c <sbrk_aligned>
 8011c52:	3001      	adds	r0, #1
 8011c54:	d02b      	beq.n	8011cae <_malloc_r+0xd2>
 8011c56:	6823      	ldr	r3, [r4, #0]
 8011c58:	442b      	add	r3, r5
 8011c5a:	6023      	str	r3, [r4, #0]
 8011c5c:	e00e      	b.n	8011c7c <_malloc_r+0xa0>
 8011c5e:	6822      	ldr	r2, [r4, #0]
 8011c60:	1b52      	subs	r2, r2, r5
 8011c62:	d41e      	bmi.n	8011ca2 <_malloc_r+0xc6>
 8011c64:	2a0b      	cmp	r2, #11
 8011c66:	d916      	bls.n	8011c96 <_malloc_r+0xba>
 8011c68:	1961      	adds	r1, r4, r5
 8011c6a:	42a3      	cmp	r3, r4
 8011c6c:	6025      	str	r5, [r4, #0]
 8011c6e:	bf18      	it	ne
 8011c70:	6059      	strne	r1, [r3, #4]
 8011c72:	6863      	ldr	r3, [r4, #4]
 8011c74:	bf08      	it	eq
 8011c76:	6031      	streq	r1, [r6, #0]
 8011c78:	5162      	str	r2, [r4, r5]
 8011c7a:	604b      	str	r3, [r1, #4]
 8011c7c:	4638      	mov	r0, r7
 8011c7e:	f104 060b 	add.w	r6, r4, #11
 8011c82:	f000 ffdb 	bl	8012c3c <__malloc_unlock>
 8011c86:	f026 0607 	bic.w	r6, r6, #7
 8011c8a:	1d23      	adds	r3, r4, #4
 8011c8c:	1af2      	subs	r2, r6, r3
 8011c8e:	d0b6      	beq.n	8011bfe <_malloc_r+0x22>
 8011c90:	1b9b      	subs	r3, r3, r6
 8011c92:	50a3      	str	r3, [r4, r2]
 8011c94:	e7b3      	b.n	8011bfe <_malloc_r+0x22>
 8011c96:	6862      	ldr	r2, [r4, #4]
 8011c98:	42a3      	cmp	r3, r4
 8011c9a:	bf0c      	ite	eq
 8011c9c:	6032      	streq	r2, [r6, #0]
 8011c9e:	605a      	strne	r2, [r3, #4]
 8011ca0:	e7ec      	b.n	8011c7c <_malloc_r+0xa0>
 8011ca2:	4623      	mov	r3, r4
 8011ca4:	6864      	ldr	r4, [r4, #4]
 8011ca6:	e7b2      	b.n	8011c0e <_malloc_r+0x32>
 8011ca8:	4634      	mov	r4, r6
 8011caa:	6876      	ldr	r6, [r6, #4]
 8011cac:	e7b9      	b.n	8011c22 <_malloc_r+0x46>
 8011cae:	230c      	movs	r3, #12
 8011cb0:	603b      	str	r3, [r7, #0]
 8011cb2:	4638      	mov	r0, r7
 8011cb4:	f000 ffc2 	bl	8012c3c <__malloc_unlock>
 8011cb8:	e7a1      	b.n	8011bfe <_malloc_r+0x22>
 8011cba:	6025      	str	r5, [r4, #0]
 8011cbc:	e7de      	b.n	8011c7c <_malloc_r+0xa0>
 8011cbe:	bf00      	nop
 8011cc0:	240051c8 	.word	0x240051c8

08011cc4 <__ssputs_r>:
 8011cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cc8:	688e      	ldr	r6, [r1, #8]
 8011cca:	429e      	cmp	r6, r3
 8011ccc:	4682      	mov	sl, r0
 8011cce:	460c      	mov	r4, r1
 8011cd0:	4690      	mov	r8, r2
 8011cd2:	461f      	mov	r7, r3
 8011cd4:	d838      	bhi.n	8011d48 <__ssputs_r+0x84>
 8011cd6:	898a      	ldrh	r2, [r1, #12]
 8011cd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011cdc:	d032      	beq.n	8011d44 <__ssputs_r+0x80>
 8011cde:	6825      	ldr	r5, [r4, #0]
 8011ce0:	6909      	ldr	r1, [r1, #16]
 8011ce2:	eba5 0901 	sub.w	r9, r5, r1
 8011ce6:	6965      	ldr	r5, [r4, #20]
 8011ce8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011cec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	444b      	add	r3, r9
 8011cf4:	106d      	asrs	r5, r5, #1
 8011cf6:	429d      	cmp	r5, r3
 8011cf8:	bf38      	it	cc
 8011cfa:	461d      	movcc	r5, r3
 8011cfc:	0553      	lsls	r3, r2, #21
 8011cfe:	d531      	bpl.n	8011d64 <__ssputs_r+0xa0>
 8011d00:	4629      	mov	r1, r5
 8011d02:	f7ff ff6b 	bl	8011bdc <_malloc_r>
 8011d06:	4606      	mov	r6, r0
 8011d08:	b950      	cbnz	r0, 8011d20 <__ssputs_r+0x5c>
 8011d0a:	230c      	movs	r3, #12
 8011d0c:	f8ca 3000 	str.w	r3, [sl]
 8011d10:	89a3      	ldrh	r3, [r4, #12]
 8011d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d16:	81a3      	strh	r3, [r4, #12]
 8011d18:	f04f 30ff 	mov.w	r0, #4294967295
 8011d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d20:	6921      	ldr	r1, [r4, #16]
 8011d22:	464a      	mov	r2, r9
 8011d24:	f7fc fa9e 	bl	800e264 <memcpy>
 8011d28:	89a3      	ldrh	r3, [r4, #12]
 8011d2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d32:	81a3      	strh	r3, [r4, #12]
 8011d34:	6126      	str	r6, [r4, #16]
 8011d36:	6165      	str	r5, [r4, #20]
 8011d38:	444e      	add	r6, r9
 8011d3a:	eba5 0509 	sub.w	r5, r5, r9
 8011d3e:	6026      	str	r6, [r4, #0]
 8011d40:	60a5      	str	r5, [r4, #8]
 8011d42:	463e      	mov	r6, r7
 8011d44:	42be      	cmp	r6, r7
 8011d46:	d900      	bls.n	8011d4a <__ssputs_r+0x86>
 8011d48:	463e      	mov	r6, r7
 8011d4a:	6820      	ldr	r0, [r4, #0]
 8011d4c:	4632      	mov	r2, r6
 8011d4e:	4641      	mov	r1, r8
 8011d50:	f000 ff54 	bl	8012bfc <memmove>
 8011d54:	68a3      	ldr	r3, [r4, #8]
 8011d56:	1b9b      	subs	r3, r3, r6
 8011d58:	60a3      	str	r3, [r4, #8]
 8011d5a:	6823      	ldr	r3, [r4, #0]
 8011d5c:	4433      	add	r3, r6
 8011d5e:	6023      	str	r3, [r4, #0]
 8011d60:	2000      	movs	r0, #0
 8011d62:	e7db      	b.n	8011d1c <__ssputs_r+0x58>
 8011d64:	462a      	mov	r2, r5
 8011d66:	f000 ff6f 	bl	8012c48 <_realloc_r>
 8011d6a:	4606      	mov	r6, r0
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d1e1      	bne.n	8011d34 <__ssputs_r+0x70>
 8011d70:	6921      	ldr	r1, [r4, #16]
 8011d72:	4650      	mov	r0, sl
 8011d74:	f7ff fec6 	bl	8011b04 <_free_r>
 8011d78:	e7c7      	b.n	8011d0a <__ssputs_r+0x46>
	...

08011d7c <_svfiprintf_r>:
 8011d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d80:	4698      	mov	r8, r3
 8011d82:	898b      	ldrh	r3, [r1, #12]
 8011d84:	061b      	lsls	r3, r3, #24
 8011d86:	b09d      	sub	sp, #116	; 0x74
 8011d88:	4607      	mov	r7, r0
 8011d8a:	460d      	mov	r5, r1
 8011d8c:	4614      	mov	r4, r2
 8011d8e:	d50e      	bpl.n	8011dae <_svfiprintf_r+0x32>
 8011d90:	690b      	ldr	r3, [r1, #16]
 8011d92:	b963      	cbnz	r3, 8011dae <_svfiprintf_r+0x32>
 8011d94:	2140      	movs	r1, #64	; 0x40
 8011d96:	f7ff ff21 	bl	8011bdc <_malloc_r>
 8011d9a:	6028      	str	r0, [r5, #0]
 8011d9c:	6128      	str	r0, [r5, #16]
 8011d9e:	b920      	cbnz	r0, 8011daa <_svfiprintf_r+0x2e>
 8011da0:	230c      	movs	r3, #12
 8011da2:	603b      	str	r3, [r7, #0]
 8011da4:	f04f 30ff 	mov.w	r0, #4294967295
 8011da8:	e0d1      	b.n	8011f4e <_svfiprintf_r+0x1d2>
 8011daa:	2340      	movs	r3, #64	; 0x40
 8011dac:	616b      	str	r3, [r5, #20]
 8011dae:	2300      	movs	r3, #0
 8011db0:	9309      	str	r3, [sp, #36]	; 0x24
 8011db2:	2320      	movs	r3, #32
 8011db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dbc:	2330      	movs	r3, #48	; 0x30
 8011dbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f68 <_svfiprintf_r+0x1ec>
 8011dc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011dc6:	f04f 0901 	mov.w	r9, #1
 8011dca:	4623      	mov	r3, r4
 8011dcc:	469a      	mov	sl, r3
 8011dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dd2:	b10a      	cbz	r2, 8011dd8 <_svfiprintf_r+0x5c>
 8011dd4:	2a25      	cmp	r2, #37	; 0x25
 8011dd6:	d1f9      	bne.n	8011dcc <_svfiprintf_r+0x50>
 8011dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8011ddc:	d00b      	beq.n	8011df6 <_svfiprintf_r+0x7a>
 8011dde:	465b      	mov	r3, fp
 8011de0:	4622      	mov	r2, r4
 8011de2:	4629      	mov	r1, r5
 8011de4:	4638      	mov	r0, r7
 8011de6:	f7ff ff6d 	bl	8011cc4 <__ssputs_r>
 8011dea:	3001      	adds	r0, #1
 8011dec:	f000 80aa 	beq.w	8011f44 <_svfiprintf_r+0x1c8>
 8011df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011df2:	445a      	add	r2, fp
 8011df4:	9209      	str	r2, [sp, #36]	; 0x24
 8011df6:	f89a 3000 	ldrb.w	r3, [sl]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f000 80a2 	beq.w	8011f44 <_svfiprintf_r+0x1c8>
 8011e00:	2300      	movs	r3, #0
 8011e02:	f04f 32ff 	mov.w	r2, #4294967295
 8011e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e0a:	f10a 0a01 	add.w	sl, sl, #1
 8011e0e:	9304      	str	r3, [sp, #16]
 8011e10:	9307      	str	r3, [sp, #28]
 8011e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e16:	931a      	str	r3, [sp, #104]	; 0x68
 8011e18:	4654      	mov	r4, sl
 8011e1a:	2205      	movs	r2, #5
 8011e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e20:	4851      	ldr	r0, [pc, #324]	; (8011f68 <_svfiprintf_r+0x1ec>)
 8011e22:	f7ee fa65 	bl	80002f0 <memchr>
 8011e26:	9a04      	ldr	r2, [sp, #16]
 8011e28:	b9d8      	cbnz	r0, 8011e62 <_svfiprintf_r+0xe6>
 8011e2a:	06d0      	lsls	r0, r2, #27
 8011e2c:	bf44      	itt	mi
 8011e2e:	2320      	movmi	r3, #32
 8011e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e34:	0711      	lsls	r1, r2, #28
 8011e36:	bf44      	itt	mi
 8011e38:	232b      	movmi	r3, #43	; 0x2b
 8011e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e42:	2b2a      	cmp	r3, #42	; 0x2a
 8011e44:	d015      	beq.n	8011e72 <_svfiprintf_r+0xf6>
 8011e46:	9a07      	ldr	r2, [sp, #28]
 8011e48:	4654      	mov	r4, sl
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	f04f 0c0a 	mov.w	ip, #10
 8011e50:	4621      	mov	r1, r4
 8011e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e56:	3b30      	subs	r3, #48	; 0x30
 8011e58:	2b09      	cmp	r3, #9
 8011e5a:	d94e      	bls.n	8011efa <_svfiprintf_r+0x17e>
 8011e5c:	b1b0      	cbz	r0, 8011e8c <_svfiprintf_r+0x110>
 8011e5e:	9207      	str	r2, [sp, #28]
 8011e60:	e014      	b.n	8011e8c <_svfiprintf_r+0x110>
 8011e62:	eba0 0308 	sub.w	r3, r0, r8
 8011e66:	fa09 f303 	lsl.w	r3, r9, r3
 8011e6a:	4313      	orrs	r3, r2
 8011e6c:	9304      	str	r3, [sp, #16]
 8011e6e:	46a2      	mov	sl, r4
 8011e70:	e7d2      	b.n	8011e18 <_svfiprintf_r+0x9c>
 8011e72:	9b03      	ldr	r3, [sp, #12]
 8011e74:	1d19      	adds	r1, r3, #4
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	9103      	str	r1, [sp, #12]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	bfbb      	ittet	lt
 8011e7e:	425b      	neglt	r3, r3
 8011e80:	f042 0202 	orrlt.w	r2, r2, #2
 8011e84:	9307      	strge	r3, [sp, #28]
 8011e86:	9307      	strlt	r3, [sp, #28]
 8011e88:	bfb8      	it	lt
 8011e8a:	9204      	strlt	r2, [sp, #16]
 8011e8c:	7823      	ldrb	r3, [r4, #0]
 8011e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8011e90:	d10c      	bne.n	8011eac <_svfiprintf_r+0x130>
 8011e92:	7863      	ldrb	r3, [r4, #1]
 8011e94:	2b2a      	cmp	r3, #42	; 0x2a
 8011e96:	d135      	bne.n	8011f04 <_svfiprintf_r+0x188>
 8011e98:	9b03      	ldr	r3, [sp, #12]
 8011e9a:	1d1a      	adds	r2, r3, #4
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	9203      	str	r2, [sp, #12]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	bfb8      	it	lt
 8011ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ea8:	3402      	adds	r4, #2
 8011eaa:	9305      	str	r3, [sp, #20]
 8011eac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011f78 <_svfiprintf_r+0x1fc>
 8011eb0:	7821      	ldrb	r1, [r4, #0]
 8011eb2:	2203      	movs	r2, #3
 8011eb4:	4650      	mov	r0, sl
 8011eb6:	f7ee fa1b 	bl	80002f0 <memchr>
 8011eba:	b140      	cbz	r0, 8011ece <_svfiprintf_r+0x152>
 8011ebc:	2340      	movs	r3, #64	; 0x40
 8011ebe:	eba0 000a 	sub.w	r0, r0, sl
 8011ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8011ec6:	9b04      	ldr	r3, [sp, #16]
 8011ec8:	4303      	orrs	r3, r0
 8011eca:	3401      	adds	r4, #1
 8011ecc:	9304      	str	r3, [sp, #16]
 8011ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ed2:	4826      	ldr	r0, [pc, #152]	; (8011f6c <_svfiprintf_r+0x1f0>)
 8011ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ed8:	2206      	movs	r2, #6
 8011eda:	f7ee fa09 	bl	80002f0 <memchr>
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	d038      	beq.n	8011f54 <_svfiprintf_r+0x1d8>
 8011ee2:	4b23      	ldr	r3, [pc, #140]	; (8011f70 <_svfiprintf_r+0x1f4>)
 8011ee4:	bb1b      	cbnz	r3, 8011f2e <_svfiprintf_r+0x1b2>
 8011ee6:	9b03      	ldr	r3, [sp, #12]
 8011ee8:	3307      	adds	r3, #7
 8011eea:	f023 0307 	bic.w	r3, r3, #7
 8011eee:	3308      	adds	r3, #8
 8011ef0:	9303      	str	r3, [sp, #12]
 8011ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ef4:	4433      	add	r3, r6
 8011ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ef8:	e767      	b.n	8011dca <_svfiprintf_r+0x4e>
 8011efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8011efe:	460c      	mov	r4, r1
 8011f00:	2001      	movs	r0, #1
 8011f02:	e7a5      	b.n	8011e50 <_svfiprintf_r+0xd4>
 8011f04:	2300      	movs	r3, #0
 8011f06:	3401      	adds	r4, #1
 8011f08:	9305      	str	r3, [sp, #20]
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	f04f 0c0a 	mov.w	ip, #10
 8011f10:	4620      	mov	r0, r4
 8011f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f16:	3a30      	subs	r2, #48	; 0x30
 8011f18:	2a09      	cmp	r2, #9
 8011f1a:	d903      	bls.n	8011f24 <_svfiprintf_r+0x1a8>
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d0c5      	beq.n	8011eac <_svfiprintf_r+0x130>
 8011f20:	9105      	str	r1, [sp, #20]
 8011f22:	e7c3      	b.n	8011eac <_svfiprintf_r+0x130>
 8011f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f28:	4604      	mov	r4, r0
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e7f0      	b.n	8011f10 <_svfiprintf_r+0x194>
 8011f2e:	ab03      	add	r3, sp, #12
 8011f30:	9300      	str	r3, [sp, #0]
 8011f32:	462a      	mov	r2, r5
 8011f34:	4b0f      	ldr	r3, [pc, #60]	; (8011f74 <_svfiprintf_r+0x1f8>)
 8011f36:	a904      	add	r1, sp, #16
 8011f38:	4638      	mov	r0, r7
 8011f3a:	f7fc fa39 	bl	800e3b0 <_printf_float>
 8011f3e:	1c42      	adds	r2, r0, #1
 8011f40:	4606      	mov	r6, r0
 8011f42:	d1d6      	bne.n	8011ef2 <_svfiprintf_r+0x176>
 8011f44:	89ab      	ldrh	r3, [r5, #12]
 8011f46:	065b      	lsls	r3, r3, #25
 8011f48:	f53f af2c 	bmi.w	8011da4 <_svfiprintf_r+0x28>
 8011f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f4e:	b01d      	add	sp, #116	; 0x74
 8011f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f54:	ab03      	add	r3, sp, #12
 8011f56:	9300      	str	r3, [sp, #0]
 8011f58:	462a      	mov	r2, r5
 8011f5a:	4b06      	ldr	r3, [pc, #24]	; (8011f74 <_svfiprintf_r+0x1f8>)
 8011f5c:	a904      	add	r1, sp, #16
 8011f5e:	4638      	mov	r0, r7
 8011f60:	f7fc fcb2 	bl	800e8c8 <_printf_i>
 8011f64:	e7eb      	b.n	8011f3e <_svfiprintf_r+0x1c2>
 8011f66:	bf00      	nop
 8011f68:	08014714 	.word	0x08014714
 8011f6c:	0801471e 	.word	0x0801471e
 8011f70:	0800e3b1 	.word	0x0800e3b1
 8011f74:	08011cc5 	.word	0x08011cc5
 8011f78:	0801471a 	.word	0x0801471a

08011f7c <_sungetc_r>:
 8011f7c:	b538      	push	{r3, r4, r5, lr}
 8011f7e:	1c4b      	adds	r3, r1, #1
 8011f80:	4614      	mov	r4, r2
 8011f82:	d103      	bne.n	8011f8c <_sungetc_r+0x10>
 8011f84:	f04f 35ff 	mov.w	r5, #4294967295
 8011f88:	4628      	mov	r0, r5
 8011f8a:	bd38      	pop	{r3, r4, r5, pc}
 8011f8c:	8993      	ldrh	r3, [r2, #12]
 8011f8e:	f023 0320 	bic.w	r3, r3, #32
 8011f92:	8193      	strh	r3, [r2, #12]
 8011f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f96:	6852      	ldr	r2, [r2, #4]
 8011f98:	b2cd      	uxtb	r5, r1
 8011f9a:	b18b      	cbz	r3, 8011fc0 <_sungetc_r+0x44>
 8011f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	dd08      	ble.n	8011fb4 <_sungetc_r+0x38>
 8011fa2:	6823      	ldr	r3, [r4, #0]
 8011fa4:	1e5a      	subs	r2, r3, #1
 8011fa6:	6022      	str	r2, [r4, #0]
 8011fa8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011fac:	6863      	ldr	r3, [r4, #4]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	6063      	str	r3, [r4, #4]
 8011fb2:	e7e9      	b.n	8011f88 <_sungetc_r+0xc>
 8011fb4:	4621      	mov	r1, r4
 8011fb6:	f000 fbef 	bl	8012798 <__submore>
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	d0f1      	beq.n	8011fa2 <_sungetc_r+0x26>
 8011fbe:	e7e1      	b.n	8011f84 <_sungetc_r+0x8>
 8011fc0:	6921      	ldr	r1, [r4, #16]
 8011fc2:	6823      	ldr	r3, [r4, #0]
 8011fc4:	b151      	cbz	r1, 8011fdc <_sungetc_r+0x60>
 8011fc6:	4299      	cmp	r1, r3
 8011fc8:	d208      	bcs.n	8011fdc <_sungetc_r+0x60>
 8011fca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011fce:	42a9      	cmp	r1, r5
 8011fd0:	d104      	bne.n	8011fdc <_sungetc_r+0x60>
 8011fd2:	3b01      	subs	r3, #1
 8011fd4:	3201      	adds	r2, #1
 8011fd6:	6023      	str	r3, [r4, #0]
 8011fd8:	6062      	str	r2, [r4, #4]
 8011fda:	e7d5      	b.n	8011f88 <_sungetc_r+0xc>
 8011fdc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8011fe6:	2303      	movs	r3, #3
 8011fe8:	63a3      	str	r3, [r4, #56]	; 0x38
 8011fea:	4623      	mov	r3, r4
 8011fec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011ff0:	6023      	str	r3, [r4, #0]
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e7dc      	b.n	8011fb0 <_sungetc_r+0x34>

08011ff6 <__ssrefill_r>:
 8011ff6:	b510      	push	{r4, lr}
 8011ff8:	460c      	mov	r4, r1
 8011ffa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011ffc:	b169      	cbz	r1, 801201a <__ssrefill_r+0x24>
 8011ffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012002:	4299      	cmp	r1, r3
 8012004:	d001      	beq.n	801200a <__ssrefill_r+0x14>
 8012006:	f7ff fd7d 	bl	8011b04 <_free_r>
 801200a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801200c:	6063      	str	r3, [r4, #4]
 801200e:	2000      	movs	r0, #0
 8012010:	6360      	str	r0, [r4, #52]	; 0x34
 8012012:	b113      	cbz	r3, 801201a <__ssrefill_r+0x24>
 8012014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012016:	6023      	str	r3, [r4, #0]
 8012018:	bd10      	pop	{r4, pc}
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	6023      	str	r3, [r4, #0]
 801201e:	2300      	movs	r3, #0
 8012020:	6063      	str	r3, [r4, #4]
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	f043 0320 	orr.w	r3, r3, #32
 8012028:	81a3      	strh	r3, [r4, #12]
 801202a:	f04f 30ff 	mov.w	r0, #4294967295
 801202e:	e7f3      	b.n	8012018 <__ssrefill_r+0x22>

08012030 <__ssvfiscanf_r>:
 8012030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012034:	460c      	mov	r4, r1
 8012036:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801203a:	2100      	movs	r1, #0
 801203c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012040:	49a6      	ldr	r1, [pc, #664]	; (80122dc <__ssvfiscanf_r+0x2ac>)
 8012042:	91a0      	str	r1, [sp, #640]	; 0x280
 8012044:	f10d 0804 	add.w	r8, sp, #4
 8012048:	49a5      	ldr	r1, [pc, #660]	; (80122e0 <__ssvfiscanf_r+0x2b0>)
 801204a:	4fa6      	ldr	r7, [pc, #664]	; (80122e4 <__ssvfiscanf_r+0x2b4>)
 801204c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80122e8 <__ssvfiscanf_r+0x2b8>
 8012050:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012054:	4606      	mov	r6, r0
 8012056:	91a1      	str	r1, [sp, #644]	; 0x284
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	7813      	ldrb	r3, [r2, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	f000 815a 	beq.w	8012316 <__ssvfiscanf_r+0x2e6>
 8012062:	5dd9      	ldrb	r1, [r3, r7]
 8012064:	f011 0108 	ands.w	r1, r1, #8
 8012068:	f102 0501 	add.w	r5, r2, #1
 801206c:	d019      	beq.n	80120a2 <__ssvfiscanf_r+0x72>
 801206e:	6863      	ldr	r3, [r4, #4]
 8012070:	2b00      	cmp	r3, #0
 8012072:	dd0f      	ble.n	8012094 <__ssvfiscanf_r+0x64>
 8012074:	6823      	ldr	r3, [r4, #0]
 8012076:	781a      	ldrb	r2, [r3, #0]
 8012078:	5cba      	ldrb	r2, [r7, r2]
 801207a:	0712      	lsls	r2, r2, #28
 801207c:	d401      	bmi.n	8012082 <__ssvfiscanf_r+0x52>
 801207e:	462a      	mov	r2, r5
 8012080:	e7eb      	b.n	801205a <__ssvfiscanf_r+0x2a>
 8012082:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012084:	3201      	adds	r2, #1
 8012086:	9245      	str	r2, [sp, #276]	; 0x114
 8012088:	6862      	ldr	r2, [r4, #4]
 801208a:	3301      	adds	r3, #1
 801208c:	3a01      	subs	r2, #1
 801208e:	6062      	str	r2, [r4, #4]
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	e7ec      	b.n	801206e <__ssvfiscanf_r+0x3e>
 8012094:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012096:	4621      	mov	r1, r4
 8012098:	4630      	mov	r0, r6
 801209a:	4798      	blx	r3
 801209c:	2800      	cmp	r0, #0
 801209e:	d0e9      	beq.n	8012074 <__ssvfiscanf_r+0x44>
 80120a0:	e7ed      	b.n	801207e <__ssvfiscanf_r+0x4e>
 80120a2:	2b25      	cmp	r3, #37	; 0x25
 80120a4:	d012      	beq.n	80120cc <__ssvfiscanf_r+0x9c>
 80120a6:	469a      	mov	sl, r3
 80120a8:	6863      	ldr	r3, [r4, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	f340 8091 	ble.w	80121d2 <__ssvfiscanf_r+0x1a2>
 80120b0:	6822      	ldr	r2, [r4, #0]
 80120b2:	7813      	ldrb	r3, [r2, #0]
 80120b4:	4553      	cmp	r3, sl
 80120b6:	f040 812e 	bne.w	8012316 <__ssvfiscanf_r+0x2e6>
 80120ba:	6863      	ldr	r3, [r4, #4]
 80120bc:	3b01      	subs	r3, #1
 80120be:	6063      	str	r3, [r4, #4]
 80120c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80120c2:	3201      	adds	r2, #1
 80120c4:	3301      	adds	r3, #1
 80120c6:	6022      	str	r2, [r4, #0]
 80120c8:	9345      	str	r3, [sp, #276]	; 0x114
 80120ca:	e7d8      	b.n	801207e <__ssvfiscanf_r+0x4e>
 80120cc:	9141      	str	r1, [sp, #260]	; 0x104
 80120ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80120d0:	7853      	ldrb	r3, [r2, #1]
 80120d2:	2b2a      	cmp	r3, #42	; 0x2a
 80120d4:	bf02      	ittt	eq
 80120d6:	2310      	moveq	r3, #16
 80120d8:	1c95      	addeq	r5, r2, #2
 80120da:	9341      	streq	r3, [sp, #260]	; 0x104
 80120dc:	220a      	movs	r2, #10
 80120de:	46aa      	mov	sl, r5
 80120e0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80120e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80120e8:	2b09      	cmp	r3, #9
 80120ea:	d91d      	bls.n	8012128 <__ssvfiscanf_r+0xf8>
 80120ec:	487e      	ldr	r0, [pc, #504]	; (80122e8 <__ssvfiscanf_r+0x2b8>)
 80120ee:	2203      	movs	r2, #3
 80120f0:	f7ee f8fe 	bl	80002f0 <memchr>
 80120f4:	b140      	cbz	r0, 8012108 <__ssvfiscanf_r+0xd8>
 80120f6:	2301      	movs	r3, #1
 80120f8:	eba0 0009 	sub.w	r0, r0, r9
 80120fc:	fa03 f000 	lsl.w	r0, r3, r0
 8012100:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012102:	4318      	orrs	r0, r3
 8012104:	9041      	str	r0, [sp, #260]	; 0x104
 8012106:	4655      	mov	r5, sl
 8012108:	f815 3b01 	ldrb.w	r3, [r5], #1
 801210c:	2b78      	cmp	r3, #120	; 0x78
 801210e:	d806      	bhi.n	801211e <__ssvfiscanf_r+0xee>
 8012110:	2b57      	cmp	r3, #87	; 0x57
 8012112:	d810      	bhi.n	8012136 <__ssvfiscanf_r+0x106>
 8012114:	2b25      	cmp	r3, #37	; 0x25
 8012116:	d0c6      	beq.n	80120a6 <__ssvfiscanf_r+0x76>
 8012118:	d856      	bhi.n	80121c8 <__ssvfiscanf_r+0x198>
 801211a:	2b00      	cmp	r3, #0
 801211c:	d064      	beq.n	80121e8 <__ssvfiscanf_r+0x1b8>
 801211e:	2303      	movs	r3, #3
 8012120:	9347      	str	r3, [sp, #284]	; 0x11c
 8012122:	230a      	movs	r3, #10
 8012124:	9342      	str	r3, [sp, #264]	; 0x108
 8012126:	e071      	b.n	801220c <__ssvfiscanf_r+0x1dc>
 8012128:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801212a:	fb02 1103 	mla	r1, r2, r3, r1
 801212e:	3930      	subs	r1, #48	; 0x30
 8012130:	9143      	str	r1, [sp, #268]	; 0x10c
 8012132:	4655      	mov	r5, sl
 8012134:	e7d3      	b.n	80120de <__ssvfiscanf_r+0xae>
 8012136:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801213a:	2a20      	cmp	r2, #32
 801213c:	d8ef      	bhi.n	801211e <__ssvfiscanf_r+0xee>
 801213e:	a101      	add	r1, pc, #4	; (adr r1, 8012144 <__ssvfiscanf_r+0x114>)
 8012140:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012144:	080121f7 	.word	0x080121f7
 8012148:	0801211f 	.word	0x0801211f
 801214c:	0801211f 	.word	0x0801211f
 8012150:	08012255 	.word	0x08012255
 8012154:	0801211f 	.word	0x0801211f
 8012158:	0801211f 	.word	0x0801211f
 801215c:	0801211f 	.word	0x0801211f
 8012160:	0801211f 	.word	0x0801211f
 8012164:	0801211f 	.word	0x0801211f
 8012168:	0801211f 	.word	0x0801211f
 801216c:	0801211f 	.word	0x0801211f
 8012170:	0801226b 	.word	0x0801226b
 8012174:	08012241 	.word	0x08012241
 8012178:	080121cf 	.word	0x080121cf
 801217c:	080121cf 	.word	0x080121cf
 8012180:	080121cf 	.word	0x080121cf
 8012184:	0801211f 	.word	0x0801211f
 8012188:	08012245 	.word	0x08012245
 801218c:	0801211f 	.word	0x0801211f
 8012190:	0801211f 	.word	0x0801211f
 8012194:	0801211f 	.word	0x0801211f
 8012198:	0801211f 	.word	0x0801211f
 801219c:	0801227b 	.word	0x0801227b
 80121a0:	0801224d 	.word	0x0801224d
 80121a4:	080121ef 	.word	0x080121ef
 80121a8:	0801211f 	.word	0x0801211f
 80121ac:	0801211f 	.word	0x0801211f
 80121b0:	08012277 	.word	0x08012277
 80121b4:	0801211f 	.word	0x0801211f
 80121b8:	08012241 	.word	0x08012241
 80121bc:	0801211f 	.word	0x0801211f
 80121c0:	0801211f 	.word	0x0801211f
 80121c4:	080121f7 	.word	0x080121f7
 80121c8:	3b45      	subs	r3, #69	; 0x45
 80121ca:	2b02      	cmp	r3, #2
 80121cc:	d8a7      	bhi.n	801211e <__ssvfiscanf_r+0xee>
 80121ce:	2305      	movs	r3, #5
 80121d0:	e01b      	b.n	801220a <__ssvfiscanf_r+0x1da>
 80121d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80121d4:	4621      	mov	r1, r4
 80121d6:	4630      	mov	r0, r6
 80121d8:	4798      	blx	r3
 80121da:	2800      	cmp	r0, #0
 80121dc:	f43f af68 	beq.w	80120b0 <__ssvfiscanf_r+0x80>
 80121e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80121e2:	2800      	cmp	r0, #0
 80121e4:	f040 808d 	bne.w	8012302 <__ssvfiscanf_r+0x2d2>
 80121e8:	f04f 30ff 	mov.w	r0, #4294967295
 80121ec:	e08f      	b.n	801230e <__ssvfiscanf_r+0x2de>
 80121ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80121f0:	f042 0220 	orr.w	r2, r2, #32
 80121f4:	9241      	str	r2, [sp, #260]	; 0x104
 80121f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80121f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80121fc:	9241      	str	r2, [sp, #260]	; 0x104
 80121fe:	2210      	movs	r2, #16
 8012200:	2b6f      	cmp	r3, #111	; 0x6f
 8012202:	9242      	str	r2, [sp, #264]	; 0x108
 8012204:	bf34      	ite	cc
 8012206:	2303      	movcc	r3, #3
 8012208:	2304      	movcs	r3, #4
 801220a:	9347      	str	r3, [sp, #284]	; 0x11c
 801220c:	6863      	ldr	r3, [r4, #4]
 801220e:	2b00      	cmp	r3, #0
 8012210:	dd42      	ble.n	8012298 <__ssvfiscanf_r+0x268>
 8012212:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012214:	0659      	lsls	r1, r3, #25
 8012216:	d404      	bmi.n	8012222 <__ssvfiscanf_r+0x1f2>
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	781a      	ldrb	r2, [r3, #0]
 801221c:	5cba      	ldrb	r2, [r7, r2]
 801221e:	0712      	lsls	r2, r2, #28
 8012220:	d441      	bmi.n	80122a6 <__ssvfiscanf_r+0x276>
 8012222:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012224:	2b02      	cmp	r3, #2
 8012226:	dc50      	bgt.n	80122ca <__ssvfiscanf_r+0x29a>
 8012228:	466b      	mov	r3, sp
 801222a:	4622      	mov	r2, r4
 801222c:	a941      	add	r1, sp, #260	; 0x104
 801222e:	4630      	mov	r0, r6
 8012230:	f000 f876 	bl	8012320 <_scanf_chars>
 8012234:	2801      	cmp	r0, #1
 8012236:	d06e      	beq.n	8012316 <__ssvfiscanf_r+0x2e6>
 8012238:	2802      	cmp	r0, #2
 801223a:	f47f af20 	bne.w	801207e <__ssvfiscanf_r+0x4e>
 801223e:	e7cf      	b.n	80121e0 <__ssvfiscanf_r+0x1b0>
 8012240:	220a      	movs	r2, #10
 8012242:	e7dd      	b.n	8012200 <__ssvfiscanf_r+0x1d0>
 8012244:	2300      	movs	r3, #0
 8012246:	9342      	str	r3, [sp, #264]	; 0x108
 8012248:	2303      	movs	r3, #3
 801224a:	e7de      	b.n	801220a <__ssvfiscanf_r+0x1da>
 801224c:	2308      	movs	r3, #8
 801224e:	9342      	str	r3, [sp, #264]	; 0x108
 8012250:	2304      	movs	r3, #4
 8012252:	e7da      	b.n	801220a <__ssvfiscanf_r+0x1da>
 8012254:	4629      	mov	r1, r5
 8012256:	4640      	mov	r0, r8
 8012258:	f000 f9de 	bl	8012618 <__sccl>
 801225c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801225e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012262:	9341      	str	r3, [sp, #260]	; 0x104
 8012264:	4605      	mov	r5, r0
 8012266:	2301      	movs	r3, #1
 8012268:	e7cf      	b.n	801220a <__ssvfiscanf_r+0x1da>
 801226a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801226c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012270:	9341      	str	r3, [sp, #260]	; 0x104
 8012272:	2300      	movs	r3, #0
 8012274:	e7c9      	b.n	801220a <__ssvfiscanf_r+0x1da>
 8012276:	2302      	movs	r3, #2
 8012278:	e7c7      	b.n	801220a <__ssvfiscanf_r+0x1da>
 801227a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801227c:	06c3      	lsls	r3, r0, #27
 801227e:	f53f aefe 	bmi.w	801207e <__ssvfiscanf_r+0x4e>
 8012282:	9b00      	ldr	r3, [sp, #0]
 8012284:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012286:	1d19      	adds	r1, r3, #4
 8012288:	9100      	str	r1, [sp, #0]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	f010 0f01 	tst.w	r0, #1
 8012290:	bf14      	ite	ne
 8012292:	801a      	strhne	r2, [r3, #0]
 8012294:	601a      	streq	r2, [r3, #0]
 8012296:	e6f2      	b.n	801207e <__ssvfiscanf_r+0x4e>
 8012298:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801229a:	4621      	mov	r1, r4
 801229c:	4630      	mov	r0, r6
 801229e:	4798      	blx	r3
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d0b6      	beq.n	8012212 <__ssvfiscanf_r+0x1e2>
 80122a4:	e79c      	b.n	80121e0 <__ssvfiscanf_r+0x1b0>
 80122a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80122a8:	3201      	adds	r2, #1
 80122aa:	9245      	str	r2, [sp, #276]	; 0x114
 80122ac:	6862      	ldr	r2, [r4, #4]
 80122ae:	3a01      	subs	r2, #1
 80122b0:	2a00      	cmp	r2, #0
 80122b2:	6062      	str	r2, [r4, #4]
 80122b4:	dd02      	ble.n	80122bc <__ssvfiscanf_r+0x28c>
 80122b6:	3301      	adds	r3, #1
 80122b8:	6023      	str	r3, [r4, #0]
 80122ba:	e7ad      	b.n	8012218 <__ssvfiscanf_r+0x1e8>
 80122bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80122be:	4621      	mov	r1, r4
 80122c0:	4630      	mov	r0, r6
 80122c2:	4798      	blx	r3
 80122c4:	2800      	cmp	r0, #0
 80122c6:	d0a7      	beq.n	8012218 <__ssvfiscanf_r+0x1e8>
 80122c8:	e78a      	b.n	80121e0 <__ssvfiscanf_r+0x1b0>
 80122ca:	2b04      	cmp	r3, #4
 80122cc:	dc0e      	bgt.n	80122ec <__ssvfiscanf_r+0x2bc>
 80122ce:	466b      	mov	r3, sp
 80122d0:	4622      	mov	r2, r4
 80122d2:	a941      	add	r1, sp, #260	; 0x104
 80122d4:	4630      	mov	r0, r6
 80122d6:	f000 f87d 	bl	80123d4 <_scanf_i>
 80122da:	e7ab      	b.n	8012234 <__ssvfiscanf_r+0x204>
 80122dc:	08011f7d 	.word	0x08011f7d
 80122e0:	08011ff7 	.word	0x08011ff7
 80122e4:	080143b1 	.word	0x080143b1
 80122e8:	0801471a 	.word	0x0801471a
 80122ec:	4b0b      	ldr	r3, [pc, #44]	; (801231c <__ssvfiscanf_r+0x2ec>)
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f43f aec5 	beq.w	801207e <__ssvfiscanf_r+0x4e>
 80122f4:	466b      	mov	r3, sp
 80122f6:	4622      	mov	r2, r4
 80122f8:	a941      	add	r1, sp, #260	; 0x104
 80122fa:	4630      	mov	r0, r6
 80122fc:	f7fc fc0a 	bl	800eb14 <_scanf_float>
 8012300:	e798      	b.n	8012234 <__ssvfiscanf_r+0x204>
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012308:	bf18      	it	ne
 801230a:	f04f 30ff 	movne.w	r0, #4294967295
 801230e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012316:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012318:	e7f9      	b.n	801230e <__ssvfiscanf_r+0x2de>
 801231a:	bf00      	nop
 801231c:	0800eb15 	.word	0x0800eb15

08012320 <_scanf_chars>:
 8012320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012324:	4615      	mov	r5, r2
 8012326:	688a      	ldr	r2, [r1, #8]
 8012328:	4680      	mov	r8, r0
 801232a:	460c      	mov	r4, r1
 801232c:	b932      	cbnz	r2, 801233c <_scanf_chars+0x1c>
 801232e:	698a      	ldr	r2, [r1, #24]
 8012330:	2a00      	cmp	r2, #0
 8012332:	bf0c      	ite	eq
 8012334:	2201      	moveq	r2, #1
 8012336:	f04f 32ff 	movne.w	r2, #4294967295
 801233a:	608a      	str	r2, [r1, #8]
 801233c:	6822      	ldr	r2, [r4, #0]
 801233e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80123d0 <_scanf_chars+0xb0>
 8012342:	06d1      	lsls	r1, r2, #27
 8012344:	bf5f      	itttt	pl
 8012346:	681a      	ldrpl	r2, [r3, #0]
 8012348:	1d11      	addpl	r1, r2, #4
 801234a:	6019      	strpl	r1, [r3, #0]
 801234c:	6816      	ldrpl	r6, [r2, #0]
 801234e:	2700      	movs	r7, #0
 8012350:	69a0      	ldr	r0, [r4, #24]
 8012352:	b188      	cbz	r0, 8012378 <_scanf_chars+0x58>
 8012354:	2801      	cmp	r0, #1
 8012356:	d107      	bne.n	8012368 <_scanf_chars+0x48>
 8012358:	682a      	ldr	r2, [r5, #0]
 801235a:	7811      	ldrb	r1, [r2, #0]
 801235c:	6962      	ldr	r2, [r4, #20]
 801235e:	5c52      	ldrb	r2, [r2, r1]
 8012360:	b952      	cbnz	r2, 8012378 <_scanf_chars+0x58>
 8012362:	2f00      	cmp	r7, #0
 8012364:	d031      	beq.n	80123ca <_scanf_chars+0xaa>
 8012366:	e022      	b.n	80123ae <_scanf_chars+0x8e>
 8012368:	2802      	cmp	r0, #2
 801236a:	d120      	bne.n	80123ae <_scanf_chars+0x8e>
 801236c:	682b      	ldr	r3, [r5, #0]
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012374:	071b      	lsls	r3, r3, #28
 8012376:	d41a      	bmi.n	80123ae <_scanf_chars+0x8e>
 8012378:	6823      	ldr	r3, [r4, #0]
 801237a:	06da      	lsls	r2, r3, #27
 801237c:	bf5e      	ittt	pl
 801237e:	682b      	ldrpl	r3, [r5, #0]
 8012380:	781b      	ldrbpl	r3, [r3, #0]
 8012382:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012386:	682a      	ldr	r2, [r5, #0]
 8012388:	686b      	ldr	r3, [r5, #4]
 801238a:	3201      	adds	r2, #1
 801238c:	602a      	str	r2, [r5, #0]
 801238e:	68a2      	ldr	r2, [r4, #8]
 8012390:	3b01      	subs	r3, #1
 8012392:	3a01      	subs	r2, #1
 8012394:	606b      	str	r3, [r5, #4]
 8012396:	3701      	adds	r7, #1
 8012398:	60a2      	str	r2, [r4, #8]
 801239a:	b142      	cbz	r2, 80123ae <_scanf_chars+0x8e>
 801239c:	2b00      	cmp	r3, #0
 801239e:	dcd7      	bgt.n	8012350 <_scanf_chars+0x30>
 80123a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80123a4:	4629      	mov	r1, r5
 80123a6:	4640      	mov	r0, r8
 80123a8:	4798      	blx	r3
 80123aa:	2800      	cmp	r0, #0
 80123ac:	d0d0      	beq.n	8012350 <_scanf_chars+0x30>
 80123ae:	6823      	ldr	r3, [r4, #0]
 80123b0:	f013 0310 	ands.w	r3, r3, #16
 80123b4:	d105      	bne.n	80123c2 <_scanf_chars+0xa2>
 80123b6:	68e2      	ldr	r2, [r4, #12]
 80123b8:	3201      	adds	r2, #1
 80123ba:	60e2      	str	r2, [r4, #12]
 80123bc:	69a2      	ldr	r2, [r4, #24]
 80123be:	b102      	cbz	r2, 80123c2 <_scanf_chars+0xa2>
 80123c0:	7033      	strb	r3, [r6, #0]
 80123c2:	6923      	ldr	r3, [r4, #16]
 80123c4:	443b      	add	r3, r7
 80123c6:	6123      	str	r3, [r4, #16]
 80123c8:	2000      	movs	r0, #0
 80123ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ce:	bf00      	nop
 80123d0:	080143b1 	.word	0x080143b1

080123d4 <_scanf_i>:
 80123d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d8:	4698      	mov	r8, r3
 80123da:	4b76      	ldr	r3, [pc, #472]	; (80125b4 <_scanf_i+0x1e0>)
 80123dc:	460c      	mov	r4, r1
 80123de:	4682      	mov	sl, r0
 80123e0:	4616      	mov	r6, r2
 80123e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80123e6:	b087      	sub	sp, #28
 80123e8:	ab03      	add	r3, sp, #12
 80123ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80123ee:	4b72      	ldr	r3, [pc, #456]	; (80125b8 <_scanf_i+0x1e4>)
 80123f0:	69a1      	ldr	r1, [r4, #24]
 80123f2:	4a72      	ldr	r2, [pc, #456]	; (80125bc <_scanf_i+0x1e8>)
 80123f4:	2903      	cmp	r1, #3
 80123f6:	bf18      	it	ne
 80123f8:	461a      	movne	r2, r3
 80123fa:	68a3      	ldr	r3, [r4, #8]
 80123fc:	9201      	str	r2, [sp, #4]
 80123fe:	1e5a      	subs	r2, r3, #1
 8012400:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012404:	bf88      	it	hi
 8012406:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801240a:	4627      	mov	r7, r4
 801240c:	bf82      	ittt	hi
 801240e:	eb03 0905 	addhi.w	r9, r3, r5
 8012412:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012416:	60a3      	strhi	r3, [r4, #8]
 8012418:	f857 3b1c 	ldr.w	r3, [r7], #28
 801241c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012420:	bf98      	it	ls
 8012422:	f04f 0900 	movls.w	r9, #0
 8012426:	6023      	str	r3, [r4, #0]
 8012428:	463d      	mov	r5, r7
 801242a:	f04f 0b00 	mov.w	fp, #0
 801242e:	6831      	ldr	r1, [r6, #0]
 8012430:	ab03      	add	r3, sp, #12
 8012432:	7809      	ldrb	r1, [r1, #0]
 8012434:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012438:	2202      	movs	r2, #2
 801243a:	f7ed ff59 	bl	80002f0 <memchr>
 801243e:	b328      	cbz	r0, 801248c <_scanf_i+0xb8>
 8012440:	f1bb 0f01 	cmp.w	fp, #1
 8012444:	d159      	bne.n	80124fa <_scanf_i+0x126>
 8012446:	6862      	ldr	r2, [r4, #4]
 8012448:	b92a      	cbnz	r2, 8012456 <_scanf_i+0x82>
 801244a:	6822      	ldr	r2, [r4, #0]
 801244c:	2308      	movs	r3, #8
 801244e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012452:	6063      	str	r3, [r4, #4]
 8012454:	6022      	str	r2, [r4, #0]
 8012456:	6822      	ldr	r2, [r4, #0]
 8012458:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801245c:	6022      	str	r2, [r4, #0]
 801245e:	68a2      	ldr	r2, [r4, #8]
 8012460:	1e51      	subs	r1, r2, #1
 8012462:	60a1      	str	r1, [r4, #8]
 8012464:	b192      	cbz	r2, 801248c <_scanf_i+0xb8>
 8012466:	6832      	ldr	r2, [r6, #0]
 8012468:	1c51      	adds	r1, r2, #1
 801246a:	6031      	str	r1, [r6, #0]
 801246c:	7812      	ldrb	r2, [r2, #0]
 801246e:	f805 2b01 	strb.w	r2, [r5], #1
 8012472:	6872      	ldr	r2, [r6, #4]
 8012474:	3a01      	subs	r2, #1
 8012476:	2a00      	cmp	r2, #0
 8012478:	6072      	str	r2, [r6, #4]
 801247a:	dc07      	bgt.n	801248c <_scanf_i+0xb8>
 801247c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012480:	4631      	mov	r1, r6
 8012482:	4650      	mov	r0, sl
 8012484:	4790      	blx	r2
 8012486:	2800      	cmp	r0, #0
 8012488:	f040 8085 	bne.w	8012596 <_scanf_i+0x1c2>
 801248c:	f10b 0b01 	add.w	fp, fp, #1
 8012490:	f1bb 0f03 	cmp.w	fp, #3
 8012494:	d1cb      	bne.n	801242e <_scanf_i+0x5a>
 8012496:	6863      	ldr	r3, [r4, #4]
 8012498:	b90b      	cbnz	r3, 801249e <_scanf_i+0xca>
 801249a:	230a      	movs	r3, #10
 801249c:	6063      	str	r3, [r4, #4]
 801249e:	6863      	ldr	r3, [r4, #4]
 80124a0:	4947      	ldr	r1, [pc, #284]	; (80125c0 <_scanf_i+0x1ec>)
 80124a2:	6960      	ldr	r0, [r4, #20]
 80124a4:	1ac9      	subs	r1, r1, r3
 80124a6:	f000 f8b7 	bl	8012618 <__sccl>
 80124aa:	f04f 0b00 	mov.w	fp, #0
 80124ae:	68a3      	ldr	r3, [r4, #8]
 80124b0:	6822      	ldr	r2, [r4, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d03d      	beq.n	8012532 <_scanf_i+0x15e>
 80124b6:	6831      	ldr	r1, [r6, #0]
 80124b8:	6960      	ldr	r0, [r4, #20]
 80124ba:	f891 c000 	ldrb.w	ip, [r1]
 80124be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80124c2:	2800      	cmp	r0, #0
 80124c4:	d035      	beq.n	8012532 <_scanf_i+0x15e>
 80124c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80124ca:	d124      	bne.n	8012516 <_scanf_i+0x142>
 80124cc:	0510      	lsls	r0, r2, #20
 80124ce:	d522      	bpl.n	8012516 <_scanf_i+0x142>
 80124d0:	f10b 0b01 	add.w	fp, fp, #1
 80124d4:	f1b9 0f00 	cmp.w	r9, #0
 80124d8:	d003      	beq.n	80124e2 <_scanf_i+0x10e>
 80124da:	3301      	adds	r3, #1
 80124dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80124e0:	60a3      	str	r3, [r4, #8]
 80124e2:	6873      	ldr	r3, [r6, #4]
 80124e4:	3b01      	subs	r3, #1
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	6073      	str	r3, [r6, #4]
 80124ea:	dd1b      	ble.n	8012524 <_scanf_i+0x150>
 80124ec:	6833      	ldr	r3, [r6, #0]
 80124ee:	3301      	adds	r3, #1
 80124f0:	6033      	str	r3, [r6, #0]
 80124f2:	68a3      	ldr	r3, [r4, #8]
 80124f4:	3b01      	subs	r3, #1
 80124f6:	60a3      	str	r3, [r4, #8]
 80124f8:	e7d9      	b.n	80124ae <_scanf_i+0xda>
 80124fa:	f1bb 0f02 	cmp.w	fp, #2
 80124fe:	d1ae      	bne.n	801245e <_scanf_i+0x8a>
 8012500:	6822      	ldr	r2, [r4, #0]
 8012502:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012506:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801250a:	d1bf      	bne.n	801248c <_scanf_i+0xb8>
 801250c:	2310      	movs	r3, #16
 801250e:	6063      	str	r3, [r4, #4]
 8012510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012514:	e7a2      	b.n	801245c <_scanf_i+0x88>
 8012516:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801251a:	6022      	str	r2, [r4, #0]
 801251c:	780b      	ldrb	r3, [r1, #0]
 801251e:	f805 3b01 	strb.w	r3, [r5], #1
 8012522:	e7de      	b.n	80124e2 <_scanf_i+0x10e>
 8012524:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012528:	4631      	mov	r1, r6
 801252a:	4650      	mov	r0, sl
 801252c:	4798      	blx	r3
 801252e:	2800      	cmp	r0, #0
 8012530:	d0df      	beq.n	80124f2 <_scanf_i+0x11e>
 8012532:	6823      	ldr	r3, [r4, #0]
 8012534:	05db      	lsls	r3, r3, #23
 8012536:	d50d      	bpl.n	8012554 <_scanf_i+0x180>
 8012538:	42bd      	cmp	r5, r7
 801253a:	d909      	bls.n	8012550 <_scanf_i+0x17c>
 801253c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012544:	4632      	mov	r2, r6
 8012546:	4650      	mov	r0, sl
 8012548:	4798      	blx	r3
 801254a:	f105 39ff 	add.w	r9, r5, #4294967295
 801254e:	464d      	mov	r5, r9
 8012550:	42bd      	cmp	r5, r7
 8012552:	d02d      	beq.n	80125b0 <_scanf_i+0x1dc>
 8012554:	6822      	ldr	r2, [r4, #0]
 8012556:	f012 0210 	ands.w	r2, r2, #16
 801255a:	d113      	bne.n	8012584 <_scanf_i+0x1b0>
 801255c:	702a      	strb	r2, [r5, #0]
 801255e:	6863      	ldr	r3, [r4, #4]
 8012560:	9e01      	ldr	r6, [sp, #4]
 8012562:	4639      	mov	r1, r7
 8012564:	4650      	mov	r0, sl
 8012566:	47b0      	blx	r6
 8012568:	6821      	ldr	r1, [r4, #0]
 801256a:	f8d8 3000 	ldr.w	r3, [r8]
 801256e:	f011 0f20 	tst.w	r1, #32
 8012572:	d013      	beq.n	801259c <_scanf_i+0x1c8>
 8012574:	1d1a      	adds	r2, r3, #4
 8012576:	f8c8 2000 	str.w	r2, [r8]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	6018      	str	r0, [r3, #0]
 801257e:	68e3      	ldr	r3, [r4, #12]
 8012580:	3301      	adds	r3, #1
 8012582:	60e3      	str	r3, [r4, #12]
 8012584:	1bed      	subs	r5, r5, r7
 8012586:	44ab      	add	fp, r5
 8012588:	6925      	ldr	r5, [r4, #16]
 801258a:	445d      	add	r5, fp
 801258c:	6125      	str	r5, [r4, #16]
 801258e:	2000      	movs	r0, #0
 8012590:	b007      	add	sp, #28
 8012592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012596:	f04f 0b00 	mov.w	fp, #0
 801259a:	e7ca      	b.n	8012532 <_scanf_i+0x15e>
 801259c:	1d1a      	adds	r2, r3, #4
 801259e:	f8c8 2000 	str.w	r2, [r8]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	f011 0f01 	tst.w	r1, #1
 80125a8:	bf14      	ite	ne
 80125aa:	8018      	strhne	r0, [r3, #0]
 80125ac:	6018      	streq	r0, [r3, #0]
 80125ae:	e7e6      	b.n	801257e <_scanf_i+0x1aa>
 80125b0:	2001      	movs	r0, #1
 80125b2:	e7ed      	b.n	8012590 <_scanf_i+0x1bc>
 80125b4:	08014248 	.word	0x08014248
 80125b8:	08012795 	.word	0x08012795
 80125bc:	0800fd6d 	.word	0x0800fd6d
 80125c0:	0801473e 	.word	0x0801473e

080125c4 <_read_r>:
 80125c4:	b538      	push	{r3, r4, r5, lr}
 80125c6:	4d07      	ldr	r5, [pc, #28]	; (80125e4 <_read_r+0x20>)
 80125c8:	4604      	mov	r4, r0
 80125ca:	4608      	mov	r0, r1
 80125cc:	4611      	mov	r1, r2
 80125ce:	2200      	movs	r2, #0
 80125d0:	602a      	str	r2, [r5, #0]
 80125d2:	461a      	mov	r2, r3
 80125d4:	f7ef ff58 	bl	8002488 <_read>
 80125d8:	1c43      	adds	r3, r0, #1
 80125da:	d102      	bne.n	80125e2 <_read_r+0x1e>
 80125dc:	682b      	ldr	r3, [r5, #0]
 80125de:	b103      	cbz	r3, 80125e2 <_read_r+0x1e>
 80125e0:	6023      	str	r3, [r4, #0]
 80125e2:	bd38      	pop	{r3, r4, r5, pc}
 80125e4:	240051d0 	.word	0x240051d0

080125e8 <nan>:
 80125e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80125f0 <nan+0x8>
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	00000000 	.word	0x00000000
 80125f4:	7ff80000 	.word	0x7ff80000

080125f8 <_sbrk_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	4d06      	ldr	r5, [pc, #24]	; (8012614 <_sbrk_r+0x1c>)
 80125fc:	2300      	movs	r3, #0
 80125fe:	4604      	mov	r4, r0
 8012600:	4608      	mov	r0, r1
 8012602:	602b      	str	r3, [r5, #0]
 8012604:	f7ef ffae 	bl	8002564 <_sbrk>
 8012608:	1c43      	adds	r3, r0, #1
 801260a:	d102      	bne.n	8012612 <_sbrk_r+0x1a>
 801260c:	682b      	ldr	r3, [r5, #0]
 801260e:	b103      	cbz	r3, 8012612 <_sbrk_r+0x1a>
 8012610:	6023      	str	r3, [r4, #0]
 8012612:	bd38      	pop	{r3, r4, r5, pc}
 8012614:	240051d0 	.word	0x240051d0

08012618 <__sccl>:
 8012618:	b570      	push	{r4, r5, r6, lr}
 801261a:	780b      	ldrb	r3, [r1, #0]
 801261c:	4604      	mov	r4, r0
 801261e:	2b5e      	cmp	r3, #94	; 0x5e
 8012620:	bf0b      	itete	eq
 8012622:	784b      	ldrbeq	r3, [r1, #1]
 8012624:	1c48      	addne	r0, r1, #1
 8012626:	1c88      	addeq	r0, r1, #2
 8012628:	2200      	movne	r2, #0
 801262a:	bf08      	it	eq
 801262c:	2201      	moveq	r2, #1
 801262e:	1e61      	subs	r1, r4, #1
 8012630:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012634:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012638:	42a9      	cmp	r1, r5
 801263a:	d1fb      	bne.n	8012634 <__sccl+0x1c>
 801263c:	b90b      	cbnz	r3, 8012642 <__sccl+0x2a>
 801263e:	3801      	subs	r0, #1
 8012640:	bd70      	pop	{r4, r5, r6, pc}
 8012642:	f082 0201 	eor.w	r2, r2, #1
 8012646:	54e2      	strb	r2, [r4, r3]
 8012648:	4605      	mov	r5, r0
 801264a:	4628      	mov	r0, r5
 801264c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012650:	292d      	cmp	r1, #45	; 0x2d
 8012652:	d006      	beq.n	8012662 <__sccl+0x4a>
 8012654:	295d      	cmp	r1, #93	; 0x5d
 8012656:	d0f3      	beq.n	8012640 <__sccl+0x28>
 8012658:	b909      	cbnz	r1, 801265e <__sccl+0x46>
 801265a:	4628      	mov	r0, r5
 801265c:	e7f0      	b.n	8012640 <__sccl+0x28>
 801265e:	460b      	mov	r3, r1
 8012660:	e7f1      	b.n	8012646 <__sccl+0x2e>
 8012662:	786e      	ldrb	r6, [r5, #1]
 8012664:	2e5d      	cmp	r6, #93	; 0x5d
 8012666:	d0fa      	beq.n	801265e <__sccl+0x46>
 8012668:	42b3      	cmp	r3, r6
 801266a:	dcf8      	bgt.n	801265e <__sccl+0x46>
 801266c:	3502      	adds	r5, #2
 801266e:	4619      	mov	r1, r3
 8012670:	3101      	adds	r1, #1
 8012672:	428e      	cmp	r6, r1
 8012674:	5462      	strb	r2, [r4, r1]
 8012676:	dcfb      	bgt.n	8012670 <__sccl+0x58>
 8012678:	1af1      	subs	r1, r6, r3
 801267a:	3901      	subs	r1, #1
 801267c:	1c58      	adds	r0, r3, #1
 801267e:	42b3      	cmp	r3, r6
 8012680:	bfa8      	it	ge
 8012682:	2100      	movge	r1, #0
 8012684:	1843      	adds	r3, r0, r1
 8012686:	e7e0      	b.n	801264a <__sccl+0x32>

08012688 <strncmp>:
 8012688:	b510      	push	{r4, lr}
 801268a:	b17a      	cbz	r2, 80126ac <strncmp+0x24>
 801268c:	4603      	mov	r3, r0
 801268e:	3901      	subs	r1, #1
 8012690:	1884      	adds	r4, r0, r2
 8012692:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012696:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801269a:	4290      	cmp	r0, r2
 801269c:	d101      	bne.n	80126a2 <strncmp+0x1a>
 801269e:	42a3      	cmp	r3, r4
 80126a0:	d101      	bne.n	80126a6 <strncmp+0x1e>
 80126a2:	1a80      	subs	r0, r0, r2
 80126a4:	bd10      	pop	{r4, pc}
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d1f3      	bne.n	8012692 <strncmp+0xa>
 80126aa:	e7fa      	b.n	80126a2 <strncmp+0x1a>
 80126ac:	4610      	mov	r0, r2
 80126ae:	e7f9      	b.n	80126a4 <strncmp+0x1c>

080126b0 <_strtoul_l.constprop.0>:
 80126b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126b4:	4f36      	ldr	r7, [pc, #216]	; (8012790 <_strtoul_l.constprop.0+0xe0>)
 80126b6:	4686      	mov	lr, r0
 80126b8:	460d      	mov	r5, r1
 80126ba:	4628      	mov	r0, r5
 80126bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126c0:	5de6      	ldrb	r6, [r4, r7]
 80126c2:	f016 0608 	ands.w	r6, r6, #8
 80126c6:	d1f8      	bne.n	80126ba <_strtoul_l.constprop.0+0xa>
 80126c8:	2c2d      	cmp	r4, #45	; 0x2d
 80126ca:	d12f      	bne.n	801272c <_strtoul_l.constprop.0+0x7c>
 80126cc:	782c      	ldrb	r4, [r5, #0]
 80126ce:	2601      	movs	r6, #1
 80126d0:	1c85      	adds	r5, r0, #2
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d057      	beq.n	8012786 <_strtoul_l.constprop.0+0xd6>
 80126d6:	2b10      	cmp	r3, #16
 80126d8:	d109      	bne.n	80126ee <_strtoul_l.constprop.0+0x3e>
 80126da:	2c30      	cmp	r4, #48	; 0x30
 80126dc:	d107      	bne.n	80126ee <_strtoul_l.constprop.0+0x3e>
 80126de:	7828      	ldrb	r0, [r5, #0]
 80126e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80126e4:	2858      	cmp	r0, #88	; 0x58
 80126e6:	d149      	bne.n	801277c <_strtoul_l.constprop.0+0xcc>
 80126e8:	786c      	ldrb	r4, [r5, #1]
 80126ea:	2310      	movs	r3, #16
 80126ec:	3502      	adds	r5, #2
 80126ee:	f04f 38ff 	mov.w	r8, #4294967295
 80126f2:	2700      	movs	r7, #0
 80126f4:	fbb8 f8f3 	udiv	r8, r8, r3
 80126f8:	fb03 f908 	mul.w	r9, r3, r8
 80126fc:	ea6f 0909 	mvn.w	r9, r9
 8012700:	4638      	mov	r0, r7
 8012702:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012706:	f1bc 0f09 	cmp.w	ip, #9
 801270a:	d814      	bhi.n	8012736 <_strtoul_l.constprop.0+0x86>
 801270c:	4664      	mov	r4, ip
 801270e:	42a3      	cmp	r3, r4
 8012710:	dd22      	ble.n	8012758 <_strtoul_l.constprop.0+0xa8>
 8012712:	2f00      	cmp	r7, #0
 8012714:	db1d      	blt.n	8012752 <_strtoul_l.constprop.0+0xa2>
 8012716:	4580      	cmp	r8, r0
 8012718:	d31b      	bcc.n	8012752 <_strtoul_l.constprop.0+0xa2>
 801271a:	d101      	bne.n	8012720 <_strtoul_l.constprop.0+0x70>
 801271c:	45a1      	cmp	r9, r4
 801271e:	db18      	blt.n	8012752 <_strtoul_l.constprop.0+0xa2>
 8012720:	fb00 4003 	mla	r0, r0, r3, r4
 8012724:	2701      	movs	r7, #1
 8012726:	f815 4b01 	ldrb.w	r4, [r5], #1
 801272a:	e7ea      	b.n	8012702 <_strtoul_l.constprop.0+0x52>
 801272c:	2c2b      	cmp	r4, #43	; 0x2b
 801272e:	bf04      	itt	eq
 8012730:	782c      	ldrbeq	r4, [r5, #0]
 8012732:	1c85      	addeq	r5, r0, #2
 8012734:	e7cd      	b.n	80126d2 <_strtoul_l.constprop.0+0x22>
 8012736:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801273a:	f1bc 0f19 	cmp.w	ip, #25
 801273e:	d801      	bhi.n	8012744 <_strtoul_l.constprop.0+0x94>
 8012740:	3c37      	subs	r4, #55	; 0x37
 8012742:	e7e4      	b.n	801270e <_strtoul_l.constprop.0+0x5e>
 8012744:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012748:	f1bc 0f19 	cmp.w	ip, #25
 801274c:	d804      	bhi.n	8012758 <_strtoul_l.constprop.0+0xa8>
 801274e:	3c57      	subs	r4, #87	; 0x57
 8012750:	e7dd      	b.n	801270e <_strtoul_l.constprop.0+0x5e>
 8012752:	f04f 37ff 	mov.w	r7, #4294967295
 8012756:	e7e6      	b.n	8012726 <_strtoul_l.constprop.0+0x76>
 8012758:	2f00      	cmp	r7, #0
 801275a:	da07      	bge.n	801276c <_strtoul_l.constprop.0+0xbc>
 801275c:	2322      	movs	r3, #34	; 0x22
 801275e:	f8ce 3000 	str.w	r3, [lr]
 8012762:	f04f 30ff 	mov.w	r0, #4294967295
 8012766:	b932      	cbnz	r2, 8012776 <_strtoul_l.constprop.0+0xc6>
 8012768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801276c:	b106      	cbz	r6, 8012770 <_strtoul_l.constprop.0+0xc0>
 801276e:	4240      	negs	r0, r0
 8012770:	2a00      	cmp	r2, #0
 8012772:	d0f9      	beq.n	8012768 <_strtoul_l.constprop.0+0xb8>
 8012774:	b107      	cbz	r7, 8012778 <_strtoul_l.constprop.0+0xc8>
 8012776:	1e69      	subs	r1, r5, #1
 8012778:	6011      	str	r1, [r2, #0]
 801277a:	e7f5      	b.n	8012768 <_strtoul_l.constprop.0+0xb8>
 801277c:	2430      	movs	r4, #48	; 0x30
 801277e:	2b00      	cmp	r3, #0
 8012780:	d1b5      	bne.n	80126ee <_strtoul_l.constprop.0+0x3e>
 8012782:	2308      	movs	r3, #8
 8012784:	e7b3      	b.n	80126ee <_strtoul_l.constprop.0+0x3e>
 8012786:	2c30      	cmp	r4, #48	; 0x30
 8012788:	d0a9      	beq.n	80126de <_strtoul_l.constprop.0+0x2e>
 801278a:	230a      	movs	r3, #10
 801278c:	e7af      	b.n	80126ee <_strtoul_l.constprop.0+0x3e>
 801278e:	bf00      	nop
 8012790:	080143b1 	.word	0x080143b1

08012794 <_strtoul_r>:
 8012794:	f7ff bf8c 	b.w	80126b0 <_strtoul_l.constprop.0>

08012798 <__submore>:
 8012798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801279c:	460c      	mov	r4, r1
 801279e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80127a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127a4:	4299      	cmp	r1, r3
 80127a6:	d11d      	bne.n	80127e4 <__submore+0x4c>
 80127a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80127ac:	f7ff fa16 	bl	8011bdc <_malloc_r>
 80127b0:	b918      	cbnz	r0, 80127ba <__submore+0x22>
 80127b2:	f04f 30ff 	mov.w	r0, #4294967295
 80127b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127be:	63a3      	str	r3, [r4, #56]	; 0x38
 80127c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80127c4:	6360      	str	r0, [r4, #52]	; 0x34
 80127c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80127ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80127ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80127d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80127d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80127da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80127de:	6020      	str	r0, [r4, #0]
 80127e0:	2000      	movs	r0, #0
 80127e2:	e7e8      	b.n	80127b6 <__submore+0x1e>
 80127e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80127e6:	0077      	lsls	r7, r6, #1
 80127e8:	463a      	mov	r2, r7
 80127ea:	f000 fa2d 	bl	8012c48 <_realloc_r>
 80127ee:	4605      	mov	r5, r0
 80127f0:	2800      	cmp	r0, #0
 80127f2:	d0de      	beq.n	80127b2 <__submore+0x1a>
 80127f4:	eb00 0806 	add.w	r8, r0, r6
 80127f8:	4601      	mov	r1, r0
 80127fa:	4632      	mov	r2, r6
 80127fc:	4640      	mov	r0, r8
 80127fe:	f7fb fd31 	bl	800e264 <memcpy>
 8012802:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012806:	f8c4 8000 	str.w	r8, [r4]
 801280a:	e7e9      	b.n	80127e0 <__submore+0x48>

0801280c <__ascii_wctomb>:
 801280c:	b149      	cbz	r1, 8012822 <__ascii_wctomb+0x16>
 801280e:	2aff      	cmp	r2, #255	; 0xff
 8012810:	bf85      	ittet	hi
 8012812:	238a      	movhi	r3, #138	; 0x8a
 8012814:	6003      	strhi	r3, [r0, #0]
 8012816:	700a      	strbls	r2, [r1, #0]
 8012818:	f04f 30ff 	movhi.w	r0, #4294967295
 801281c:	bf98      	it	ls
 801281e:	2001      	movls	r0, #1
 8012820:	4770      	bx	lr
 8012822:	4608      	mov	r0, r1
 8012824:	4770      	bx	lr
	...

08012828 <__assert_func>:
 8012828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801282a:	4614      	mov	r4, r2
 801282c:	461a      	mov	r2, r3
 801282e:	4b09      	ldr	r3, [pc, #36]	; (8012854 <__assert_func+0x2c>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	4605      	mov	r5, r0
 8012834:	68d8      	ldr	r0, [r3, #12]
 8012836:	b14c      	cbz	r4, 801284c <__assert_func+0x24>
 8012838:	4b07      	ldr	r3, [pc, #28]	; (8012858 <__assert_func+0x30>)
 801283a:	9100      	str	r1, [sp, #0]
 801283c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012840:	4906      	ldr	r1, [pc, #24]	; (801285c <__assert_func+0x34>)
 8012842:	462b      	mov	r3, r5
 8012844:	f000 f9a6 	bl	8012b94 <fiprintf>
 8012848:	f000 fc46 	bl	80130d8 <abort>
 801284c:	4b04      	ldr	r3, [pc, #16]	; (8012860 <__assert_func+0x38>)
 801284e:	461c      	mov	r4, r3
 8012850:	e7f3      	b.n	801283a <__assert_func+0x12>
 8012852:	bf00      	nop
 8012854:	24000024 	.word	0x24000024
 8012858:	08014740 	.word	0x08014740
 801285c:	0801474d 	.word	0x0801474d
 8012860:	0801477b 	.word	0x0801477b

08012864 <__sflush_r>:
 8012864:	898a      	ldrh	r2, [r1, #12]
 8012866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801286a:	4605      	mov	r5, r0
 801286c:	0710      	lsls	r0, r2, #28
 801286e:	460c      	mov	r4, r1
 8012870:	d458      	bmi.n	8012924 <__sflush_r+0xc0>
 8012872:	684b      	ldr	r3, [r1, #4]
 8012874:	2b00      	cmp	r3, #0
 8012876:	dc05      	bgt.n	8012884 <__sflush_r+0x20>
 8012878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801287a:	2b00      	cmp	r3, #0
 801287c:	dc02      	bgt.n	8012884 <__sflush_r+0x20>
 801287e:	2000      	movs	r0, #0
 8012880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012886:	2e00      	cmp	r6, #0
 8012888:	d0f9      	beq.n	801287e <__sflush_r+0x1a>
 801288a:	2300      	movs	r3, #0
 801288c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012890:	682f      	ldr	r7, [r5, #0]
 8012892:	602b      	str	r3, [r5, #0]
 8012894:	d032      	beq.n	80128fc <__sflush_r+0x98>
 8012896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012898:	89a3      	ldrh	r3, [r4, #12]
 801289a:	075a      	lsls	r2, r3, #29
 801289c:	d505      	bpl.n	80128aa <__sflush_r+0x46>
 801289e:	6863      	ldr	r3, [r4, #4]
 80128a0:	1ac0      	subs	r0, r0, r3
 80128a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128a4:	b10b      	cbz	r3, 80128aa <__sflush_r+0x46>
 80128a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128a8:	1ac0      	subs	r0, r0, r3
 80128aa:	2300      	movs	r3, #0
 80128ac:	4602      	mov	r2, r0
 80128ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128b0:	6a21      	ldr	r1, [r4, #32]
 80128b2:	4628      	mov	r0, r5
 80128b4:	47b0      	blx	r6
 80128b6:	1c43      	adds	r3, r0, #1
 80128b8:	89a3      	ldrh	r3, [r4, #12]
 80128ba:	d106      	bne.n	80128ca <__sflush_r+0x66>
 80128bc:	6829      	ldr	r1, [r5, #0]
 80128be:	291d      	cmp	r1, #29
 80128c0:	d82c      	bhi.n	801291c <__sflush_r+0xb8>
 80128c2:	4a2a      	ldr	r2, [pc, #168]	; (801296c <__sflush_r+0x108>)
 80128c4:	40ca      	lsrs	r2, r1
 80128c6:	07d6      	lsls	r6, r2, #31
 80128c8:	d528      	bpl.n	801291c <__sflush_r+0xb8>
 80128ca:	2200      	movs	r2, #0
 80128cc:	6062      	str	r2, [r4, #4]
 80128ce:	04d9      	lsls	r1, r3, #19
 80128d0:	6922      	ldr	r2, [r4, #16]
 80128d2:	6022      	str	r2, [r4, #0]
 80128d4:	d504      	bpl.n	80128e0 <__sflush_r+0x7c>
 80128d6:	1c42      	adds	r2, r0, #1
 80128d8:	d101      	bne.n	80128de <__sflush_r+0x7a>
 80128da:	682b      	ldr	r3, [r5, #0]
 80128dc:	b903      	cbnz	r3, 80128e0 <__sflush_r+0x7c>
 80128de:	6560      	str	r0, [r4, #84]	; 0x54
 80128e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128e2:	602f      	str	r7, [r5, #0]
 80128e4:	2900      	cmp	r1, #0
 80128e6:	d0ca      	beq.n	801287e <__sflush_r+0x1a>
 80128e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128ec:	4299      	cmp	r1, r3
 80128ee:	d002      	beq.n	80128f6 <__sflush_r+0x92>
 80128f0:	4628      	mov	r0, r5
 80128f2:	f7ff f907 	bl	8011b04 <_free_r>
 80128f6:	2000      	movs	r0, #0
 80128f8:	6360      	str	r0, [r4, #52]	; 0x34
 80128fa:	e7c1      	b.n	8012880 <__sflush_r+0x1c>
 80128fc:	6a21      	ldr	r1, [r4, #32]
 80128fe:	2301      	movs	r3, #1
 8012900:	4628      	mov	r0, r5
 8012902:	47b0      	blx	r6
 8012904:	1c41      	adds	r1, r0, #1
 8012906:	d1c7      	bne.n	8012898 <__sflush_r+0x34>
 8012908:	682b      	ldr	r3, [r5, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d0c4      	beq.n	8012898 <__sflush_r+0x34>
 801290e:	2b1d      	cmp	r3, #29
 8012910:	d001      	beq.n	8012916 <__sflush_r+0xb2>
 8012912:	2b16      	cmp	r3, #22
 8012914:	d101      	bne.n	801291a <__sflush_r+0xb6>
 8012916:	602f      	str	r7, [r5, #0]
 8012918:	e7b1      	b.n	801287e <__sflush_r+0x1a>
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012920:	81a3      	strh	r3, [r4, #12]
 8012922:	e7ad      	b.n	8012880 <__sflush_r+0x1c>
 8012924:	690f      	ldr	r7, [r1, #16]
 8012926:	2f00      	cmp	r7, #0
 8012928:	d0a9      	beq.n	801287e <__sflush_r+0x1a>
 801292a:	0793      	lsls	r3, r2, #30
 801292c:	680e      	ldr	r6, [r1, #0]
 801292e:	bf08      	it	eq
 8012930:	694b      	ldreq	r3, [r1, #20]
 8012932:	600f      	str	r7, [r1, #0]
 8012934:	bf18      	it	ne
 8012936:	2300      	movne	r3, #0
 8012938:	eba6 0807 	sub.w	r8, r6, r7
 801293c:	608b      	str	r3, [r1, #8]
 801293e:	f1b8 0f00 	cmp.w	r8, #0
 8012942:	dd9c      	ble.n	801287e <__sflush_r+0x1a>
 8012944:	6a21      	ldr	r1, [r4, #32]
 8012946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012948:	4643      	mov	r3, r8
 801294a:	463a      	mov	r2, r7
 801294c:	4628      	mov	r0, r5
 801294e:	47b0      	blx	r6
 8012950:	2800      	cmp	r0, #0
 8012952:	dc06      	bgt.n	8012962 <__sflush_r+0xfe>
 8012954:	89a3      	ldrh	r3, [r4, #12]
 8012956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801295a:	81a3      	strh	r3, [r4, #12]
 801295c:	f04f 30ff 	mov.w	r0, #4294967295
 8012960:	e78e      	b.n	8012880 <__sflush_r+0x1c>
 8012962:	4407      	add	r7, r0
 8012964:	eba8 0800 	sub.w	r8, r8, r0
 8012968:	e7e9      	b.n	801293e <__sflush_r+0xda>
 801296a:	bf00      	nop
 801296c:	20400001 	.word	0x20400001

08012970 <_fflush_r>:
 8012970:	b538      	push	{r3, r4, r5, lr}
 8012972:	690b      	ldr	r3, [r1, #16]
 8012974:	4605      	mov	r5, r0
 8012976:	460c      	mov	r4, r1
 8012978:	b913      	cbnz	r3, 8012980 <_fflush_r+0x10>
 801297a:	2500      	movs	r5, #0
 801297c:	4628      	mov	r0, r5
 801297e:	bd38      	pop	{r3, r4, r5, pc}
 8012980:	b118      	cbz	r0, 801298a <_fflush_r+0x1a>
 8012982:	6983      	ldr	r3, [r0, #24]
 8012984:	b90b      	cbnz	r3, 801298a <_fflush_r+0x1a>
 8012986:	f000 f887 	bl	8012a98 <__sinit>
 801298a:	4b14      	ldr	r3, [pc, #80]	; (80129dc <_fflush_r+0x6c>)
 801298c:	429c      	cmp	r4, r3
 801298e:	d11b      	bne.n	80129c8 <_fflush_r+0x58>
 8012990:	686c      	ldr	r4, [r5, #4]
 8012992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d0ef      	beq.n	801297a <_fflush_r+0xa>
 801299a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801299c:	07d0      	lsls	r0, r2, #31
 801299e:	d404      	bmi.n	80129aa <_fflush_r+0x3a>
 80129a0:	0599      	lsls	r1, r3, #22
 80129a2:	d402      	bmi.n	80129aa <_fflush_r+0x3a>
 80129a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129a6:	f000 f927 	bl	8012bf8 <__retarget_lock_acquire_recursive>
 80129aa:	4628      	mov	r0, r5
 80129ac:	4621      	mov	r1, r4
 80129ae:	f7ff ff59 	bl	8012864 <__sflush_r>
 80129b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129b4:	07da      	lsls	r2, r3, #31
 80129b6:	4605      	mov	r5, r0
 80129b8:	d4e0      	bmi.n	801297c <_fflush_r+0xc>
 80129ba:	89a3      	ldrh	r3, [r4, #12]
 80129bc:	059b      	lsls	r3, r3, #22
 80129be:	d4dd      	bmi.n	801297c <_fflush_r+0xc>
 80129c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129c2:	f000 f91a 	bl	8012bfa <__retarget_lock_release_recursive>
 80129c6:	e7d9      	b.n	801297c <_fflush_r+0xc>
 80129c8:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <_fflush_r+0x70>)
 80129ca:	429c      	cmp	r4, r3
 80129cc:	d101      	bne.n	80129d2 <_fflush_r+0x62>
 80129ce:	68ac      	ldr	r4, [r5, #8]
 80129d0:	e7df      	b.n	8012992 <_fflush_r+0x22>
 80129d2:	4b04      	ldr	r3, [pc, #16]	; (80129e4 <_fflush_r+0x74>)
 80129d4:	429c      	cmp	r4, r3
 80129d6:	bf08      	it	eq
 80129d8:	68ec      	ldreq	r4, [r5, #12]
 80129da:	e7da      	b.n	8012992 <_fflush_r+0x22>
 80129dc:	0801479c 	.word	0x0801479c
 80129e0:	080147bc 	.word	0x080147bc
 80129e4:	0801477c 	.word	0x0801477c

080129e8 <std>:
 80129e8:	2300      	movs	r3, #0
 80129ea:	b510      	push	{r4, lr}
 80129ec:	4604      	mov	r4, r0
 80129ee:	e9c0 3300 	strd	r3, r3, [r0]
 80129f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80129f6:	6083      	str	r3, [r0, #8]
 80129f8:	8181      	strh	r1, [r0, #12]
 80129fa:	6643      	str	r3, [r0, #100]	; 0x64
 80129fc:	81c2      	strh	r2, [r0, #14]
 80129fe:	6183      	str	r3, [r0, #24]
 8012a00:	4619      	mov	r1, r3
 8012a02:	2208      	movs	r2, #8
 8012a04:	305c      	adds	r0, #92	; 0x5c
 8012a06:	f7fb fc3b 	bl	800e280 <memset>
 8012a0a:	4b05      	ldr	r3, [pc, #20]	; (8012a20 <std+0x38>)
 8012a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8012a0e:	4b05      	ldr	r3, [pc, #20]	; (8012a24 <std+0x3c>)
 8012a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a12:	4b05      	ldr	r3, [pc, #20]	; (8012a28 <std+0x40>)
 8012a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a16:	4b05      	ldr	r3, [pc, #20]	; (8012a2c <std+0x44>)
 8012a18:	6224      	str	r4, [r4, #32]
 8012a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8012a1c:	bd10      	pop	{r4, pc}
 8012a1e:	bf00      	nop
 8012a20:	0800f02d 	.word	0x0800f02d
 8012a24:	0800f053 	.word	0x0800f053
 8012a28:	0800f08b 	.word	0x0800f08b
 8012a2c:	0800f0af 	.word	0x0800f0af

08012a30 <_cleanup_r>:
 8012a30:	4901      	ldr	r1, [pc, #4]	; (8012a38 <_cleanup_r+0x8>)
 8012a32:	f000 b8c1 	b.w	8012bb8 <_fwalk_reent>
 8012a36:	bf00      	nop
 8012a38:	08012971 	.word	0x08012971

08012a3c <__sfmoreglue>:
 8012a3c:	b570      	push	{r4, r5, r6, lr}
 8012a3e:	2268      	movs	r2, #104	; 0x68
 8012a40:	1e4d      	subs	r5, r1, #1
 8012a42:	4355      	muls	r5, r2
 8012a44:	460e      	mov	r6, r1
 8012a46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a4a:	f7ff f8c7 	bl	8011bdc <_malloc_r>
 8012a4e:	4604      	mov	r4, r0
 8012a50:	b140      	cbz	r0, 8012a64 <__sfmoreglue+0x28>
 8012a52:	2100      	movs	r1, #0
 8012a54:	e9c0 1600 	strd	r1, r6, [r0]
 8012a58:	300c      	adds	r0, #12
 8012a5a:	60a0      	str	r0, [r4, #8]
 8012a5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a60:	f7fb fc0e 	bl	800e280 <memset>
 8012a64:	4620      	mov	r0, r4
 8012a66:	bd70      	pop	{r4, r5, r6, pc}

08012a68 <__sfp_lock_acquire>:
 8012a68:	4801      	ldr	r0, [pc, #4]	; (8012a70 <__sfp_lock_acquire+0x8>)
 8012a6a:	f000 b8c5 	b.w	8012bf8 <__retarget_lock_acquire_recursive>
 8012a6e:	bf00      	nop
 8012a70:	240051d5 	.word	0x240051d5

08012a74 <__sfp_lock_release>:
 8012a74:	4801      	ldr	r0, [pc, #4]	; (8012a7c <__sfp_lock_release+0x8>)
 8012a76:	f000 b8c0 	b.w	8012bfa <__retarget_lock_release_recursive>
 8012a7a:	bf00      	nop
 8012a7c:	240051d5 	.word	0x240051d5

08012a80 <__sinit_lock_acquire>:
 8012a80:	4801      	ldr	r0, [pc, #4]	; (8012a88 <__sinit_lock_acquire+0x8>)
 8012a82:	f000 b8b9 	b.w	8012bf8 <__retarget_lock_acquire_recursive>
 8012a86:	bf00      	nop
 8012a88:	240051d6 	.word	0x240051d6

08012a8c <__sinit_lock_release>:
 8012a8c:	4801      	ldr	r0, [pc, #4]	; (8012a94 <__sinit_lock_release+0x8>)
 8012a8e:	f000 b8b4 	b.w	8012bfa <__retarget_lock_release_recursive>
 8012a92:	bf00      	nop
 8012a94:	240051d6 	.word	0x240051d6

08012a98 <__sinit>:
 8012a98:	b510      	push	{r4, lr}
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	f7ff fff0 	bl	8012a80 <__sinit_lock_acquire>
 8012aa0:	69a3      	ldr	r3, [r4, #24]
 8012aa2:	b11b      	cbz	r3, 8012aac <__sinit+0x14>
 8012aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aa8:	f7ff bff0 	b.w	8012a8c <__sinit_lock_release>
 8012aac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8012ab2:	4b13      	ldr	r3, [pc, #76]	; (8012b00 <__sinit+0x68>)
 8012ab4:	4a13      	ldr	r2, [pc, #76]	; (8012b04 <__sinit+0x6c>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	62a2      	str	r2, [r4, #40]	; 0x28
 8012aba:	42a3      	cmp	r3, r4
 8012abc:	bf04      	itt	eq
 8012abe:	2301      	moveq	r3, #1
 8012ac0:	61a3      	streq	r3, [r4, #24]
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	f000 f820 	bl	8012b08 <__sfp>
 8012ac8:	6060      	str	r0, [r4, #4]
 8012aca:	4620      	mov	r0, r4
 8012acc:	f000 f81c 	bl	8012b08 <__sfp>
 8012ad0:	60a0      	str	r0, [r4, #8]
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f000 f818 	bl	8012b08 <__sfp>
 8012ad8:	2200      	movs	r2, #0
 8012ada:	60e0      	str	r0, [r4, #12]
 8012adc:	2104      	movs	r1, #4
 8012ade:	6860      	ldr	r0, [r4, #4]
 8012ae0:	f7ff ff82 	bl	80129e8 <std>
 8012ae4:	68a0      	ldr	r0, [r4, #8]
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	2109      	movs	r1, #9
 8012aea:	f7ff ff7d 	bl	80129e8 <std>
 8012aee:	68e0      	ldr	r0, [r4, #12]
 8012af0:	2202      	movs	r2, #2
 8012af2:	2112      	movs	r1, #18
 8012af4:	f7ff ff78 	bl	80129e8 <std>
 8012af8:	2301      	movs	r3, #1
 8012afa:	61a3      	str	r3, [r4, #24]
 8012afc:	e7d2      	b.n	8012aa4 <__sinit+0xc>
 8012afe:	bf00      	nop
 8012b00:	08014324 	.word	0x08014324
 8012b04:	08012a31 	.word	0x08012a31

08012b08 <__sfp>:
 8012b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b0a:	4607      	mov	r7, r0
 8012b0c:	f7ff ffac 	bl	8012a68 <__sfp_lock_acquire>
 8012b10:	4b1e      	ldr	r3, [pc, #120]	; (8012b8c <__sfp+0x84>)
 8012b12:	681e      	ldr	r6, [r3, #0]
 8012b14:	69b3      	ldr	r3, [r6, #24]
 8012b16:	b913      	cbnz	r3, 8012b1e <__sfp+0x16>
 8012b18:	4630      	mov	r0, r6
 8012b1a:	f7ff ffbd 	bl	8012a98 <__sinit>
 8012b1e:	3648      	adds	r6, #72	; 0x48
 8012b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	d503      	bpl.n	8012b30 <__sfp+0x28>
 8012b28:	6833      	ldr	r3, [r6, #0]
 8012b2a:	b30b      	cbz	r3, 8012b70 <__sfp+0x68>
 8012b2c:	6836      	ldr	r6, [r6, #0]
 8012b2e:	e7f7      	b.n	8012b20 <__sfp+0x18>
 8012b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b34:	b9d5      	cbnz	r5, 8012b6c <__sfp+0x64>
 8012b36:	4b16      	ldr	r3, [pc, #88]	; (8012b90 <__sfp+0x88>)
 8012b38:	60e3      	str	r3, [r4, #12]
 8012b3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012b3e:	6665      	str	r5, [r4, #100]	; 0x64
 8012b40:	f000 f859 	bl	8012bf6 <__retarget_lock_init_recursive>
 8012b44:	f7ff ff96 	bl	8012a74 <__sfp_lock_release>
 8012b48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012b4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012b50:	6025      	str	r5, [r4, #0]
 8012b52:	61a5      	str	r5, [r4, #24]
 8012b54:	2208      	movs	r2, #8
 8012b56:	4629      	mov	r1, r5
 8012b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b5c:	f7fb fb90 	bl	800e280 <memset>
 8012b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b68:	4620      	mov	r0, r4
 8012b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b6c:	3468      	adds	r4, #104	; 0x68
 8012b6e:	e7d9      	b.n	8012b24 <__sfp+0x1c>
 8012b70:	2104      	movs	r1, #4
 8012b72:	4638      	mov	r0, r7
 8012b74:	f7ff ff62 	bl	8012a3c <__sfmoreglue>
 8012b78:	4604      	mov	r4, r0
 8012b7a:	6030      	str	r0, [r6, #0]
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	d1d5      	bne.n	8012b2c <__sfp+0x24>
 8012b80:	f7ff ff78 	bl	8012a74 <__sfp_lock_release>
 8012b84:	230c      	movs	r3, #12
 8012b86:	603b      	str	r3, [r7, #0]
 8012b88:	e7ee      	b.n	8012b68 <__sfp+0x60>
 8012b8a:	bf00      	nop
 8012b8c:	08014324 	.word	0x08014324
 8012b90:	ffff0001 	.word	0xffff0001

08012b94 <fiprintf>:
 8012b94:	b40e      	push	{r1, r2, r3}
 8012b96:	b503      	push	{r0, r1, lr}
 8012b98:	4601      	mov	r1, r0
 8012b9a:	ab03      	add	r3, sp, #12
 8012b9c:	4805      	ldr	r0, [pc, #20]	; (8012bb4 <fiprintf+0x20>)
 8012b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ba2:	6800      	ldr	r0, [r0, #0]
 8012ba4:	9301      	str	r3, [sp, #4]
 8012ba6:	f000 f8a7 	bl	8012cf8 <_vfiprintf_r>
 8012baa:	b002      	add	sp, #8
 8012bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bb0:	b003      	add	sp, #12
 8012bb2:	4770      	bx	lr
 8012bb4:	24000024 	.word	0x24000024

08012bb8 <_fwalk_reent>:
 8012bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bbc:	4606      	mov	r6, r0
 8012bbe:	4688      	mov	r8, r1
 8012bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012bc4:	2700      	movs	r7, #0
 8012bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012bca:	f1b9 0901 	subs.w	r9, r9, #1
 8012bce:	d505      	bpl.n	8012bdc <_fwalk_reent+0x24>
 8012bd0:	6824      	ldr	r4, [r4, #0]
 8012bd2:	2c00      	cmp	r4, #0
 8012bd4:	d1f7      	bne.n	8012bc6 <_fwalk_reent+0xe>
 8012bd6:	4638      	mov	r0, r7
 8012bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bdc:	89ab      	ldrh	r3, [r5, #12]
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	d907      	bls.n	8012bf2 <_fwalk_reent+0x3a>
 8012be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012be6:	3301      	adds	r3, #1
 8012be8:	d003      	beq.n	8012bf2 <_fwalk_reent+0x3a>
 8012bea:	4629      	mov	r1, r5
 8012bec:	4630      	mov	r0, r6
 8012bee:	47c0      	blx	r8
 8012bf0:	4307      	orrs	r7, r0
 8012bf2:	3568      	adds	r5, #104	; 0x68
 8012bf4:	e7e9      	b.n	8012bca <_fwalk_reent+0x12>

08012bf6 <__retarget_lock_init_recursive>:
 8012bf6:	4770      	bx	lr

08012bf8 <__retarget_lock_acquire_recursive>:
 8012bf8:	4770      	bx	lr

08012bfa <__retarget_lock_release_recursive>:
 8012bfa:	4770      	bx	lr

08012bfc <memmove>:
 8012bfc:	4288      	cmp	r0, r1
 8012bfe:	b510      	push	{r4, lr}
 8012c00:	eb01 0402 	add.w	r4, r1, r2
 8012c04:	d902      	bls.n	8012c0c <memmove+0x10>
 8012c06:	4284      	cmp	r4, r0
 8012c08:	4623      	mov	r3, r4
 8012c0a:	d807      	bhi.n	8012c1c <memmove+0x20>
 8012c0c:	1e43      	subs	r3, r0, #1
 8012c0e:	42a1      	cmp	r1, r4
 8012c10:	d008      	beq.n	8012c24 <memmove+0x28>
 8012c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c1a:	e7f8      	b.n	8012c0e <memmove+0x12>
 8012c1c:	4402      	add	r2, r0
 8012c1e:	4601      	mov	r1, r0
 8012c20:	428a      	cmp	r2, r1
 8012c22:	d100      	bne.n	8012c26 <memmove+0x2a>
 8012c24:	bd10      	pop	{r4, pc}
 8012c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c2e:	e7f7      	b.n	8012c20 <memmove+0x24>

08012c30 <__malloc_lock>:
 8012c30:	4801      	ldr	r0, [pc, #4]	; (8012c38 <__malloc_lock+0x8>)
 8012c32:	f7ff bfe1 	b.w	8012bf8 <__retarget_lock_acquire_recursive>
 8012c36:	bf00      	nop
 8012c38:	240051d4 	.word	0x240051d4

08012c3c <__malloc_unlock>:
 8012c3c:	4801      	ldr	r0, [pc, #4]	; (8012c44 <__malloc_unlock+0x8>)
 8012c3e:	f7ff bfdc 	b.w	8012bfa <__retarget_lock_release_recursive>
 8012c42:	bf00      	nop
 8012c44:	240051d4 	.word	0x240051d4

08012c48 <_realloc_r>:
 8012c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c4c:	4680      	mov	r8, r0
 8012c4e:	4614      	mov	r4, r2
 8012c50:	460e      	mov	r6, r1
 8012c52:	b921      	cbnz	r1, 8012c5e <_realloc_r+0x16>
 8012c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c58:	4611      	mov	r1, r2
 8012c5a:	f7fe bfbf 	b.w	8011bdc <_malloc_r>
 8012c5e:	b92a      	cbnz	r2, 8012c6c <_realloc_r+0x24>
 8012c60:	f7fe ff50 	bl	8011b04 <_free_r>
 8012c64:	4625      	mov	r5, r4
 8012c66:	4628      	mov	r0, r5
 8012c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c6c:	f000 faa0 	bl	80131b0 <_malloc_usable_size_r>
 8012c70:	4284      	cmp	r4, r0
 8012c72:	4607      	mov	r7, r0
 8012c74:	d802      	bhi.n	8012c7c <_realloc_r+0x34>
 8012c76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012c7a:	d812      	bhi.n	8012ca2 <_realloc_r+0x5a>
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	4640      	mov	r0, r8
 8012c80:	f7fe ffac 	bl	8011bdc <_malloc_r>
 8012c84:	4605      	mov	r5, r0
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d0ed      	beq.n	8012c66 <_realloc_r+0x1e>
 8012c8a:	42bc      	cmp	r4, r7
 8012c8c:	4622      	mov	r2, r4
 8012c8e:	4631      	mov	r1, r6
 8012c90:	bf28      	it	cs
 8012c92:	463a      	movcs	r2, r7
 8012c94:	f7fb fae6 	bl	800e264 <memcpy>
 8012c98:	4631      	mov	r1, r6
 8012c9a:	4640      	mov	r0, r8
 8012c9c:	f7fe ff32 	bl	8011b04 <_free_r>
 8012ca0:	e7e1      	b.n	8012c66 <_realloc_r+0x1e>
 8012ca2:	4635      	mov	r5, r6
 8012ca4:	e7df      	b.n	8012c66 <_realloc_r+0x1e>

08012ca6 <__sfputc_r>:
 8012ca6:	6893      	ldr	r3, [r2, #8]
 8012ca8:	3b01      	subs	r3, #1
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	b410      	push	{r4}
 8012cae:	6093      	str	r3, [r2, #8]
 8012cb0:	da08      	bge.n	8012cc4 <__sfputc_r+0x1e>
 8012cb2:	6994      	ldr	r4, [r2, #24]
 8012cb4:	42a3      	cmp	r3, r4
 8012cb6:	db01      	blt.n	8012cbc <__sfputc_r+0x16>
 8012cb8:	290a      	cmp	r1, #10
 8012cba:	d103      	bne.n	8012cc4 <__sfputc_r+0x1e>
 8012cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cc0:	f000 b94a 	b.w	8012f58 <__swbuf_r>
 8012cc4:	6813      	ldr	r3, [r2, #0]
 8012cc6:	1c58      	adds	r0, r3, #1
 8012cc8:	6010      	str	r0, [r2, #0]
 8012cca:	7019      	strb	r1, [r3, #0]
 8012ccc:	4608      	mov	r0, r1
 8012cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <__sfputs_r>:
 8012cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd6:	4606      	mov	r6, r0
 8012cd8:	460f      	mov	r7, r1
 8012cda:	4614      	mov	r4, r2
 8012cdc:	18d5      	adds	r5, r2, r3
 8012cde:	42ac      	cmp	r4, r5
 8012ce0:	d101      	bne.n	8012ce6 <__sfputs_r+0x12>
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	e007      	b.n	8012cf6 <__sfputs_r+0x22>
 8012ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cea:	463a      	mov	r2, r7
 8012cec:	4630      	mov	r0, r6
 8012cee:	f7ff ffda 	bl	8012ca6 <__sfputc_r>
 8012cf2:	1c43      	adds	r3, r0, #1
 8012cf4:	d1f3      	bne.n	8012cde <__sfputs_r+0xa>
 8012cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012cf8 <_vfiprintf_r>:
 8012cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cfc:	460d      	mov	r5, r1
 8012cfe:	b09d      	sub	sp, #116	; 0x74
 8012d00:	4614      	mov	r4, r2
 8012d02:	4698      	mov	r8, r3
 8012d04:	4606      	mov	r6, r0
 8012d06:	b118      	cbz	r0, 8012d10 <_vfiprintf_r+0x18>
 8012d08:	6983      	ldr	r3, [r0, #24]
 8012d0a:	b90b      	cbnz	r3, 8012d10 <_vfiprintf_r+0x18>
 8012d0c:	f7ff fec4 	bl	8012a98 <__sinit>
 8012d10:	4b89      	ldr	r3, [pc, #548]	; (8012f38 <_vfiprintf_r+0x240>)
 8012d12:	429d      	cmp	r5, r3
 8012d14:	d11b      	bne.n	8012d4e <_vfiprintf_r+0x56>
 8012d16:	6875      	ldr	r5, [r6, #4]
 8012d18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d1a:	07d9      	lsls	r1, r3, #31
 8012d1c:	d405      	bmi.n	8012d2a <_vfiprintf_r+0x32>
 8012d1e:	89ab      	ldrh	r3, [r5, #12]
 8012d20:	059a      	lsls	r2, r3, #22
 8012d22:	d402      	bmi.n	8012d2a <_vfiprintf_r+0x32>
 8012d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d26:	f7ff ff67 	bl	8012bf8 <__retarget_lock_acquire_recursive>
 8012d2a:	89ab      	ldrh	r3, [r5, #12]
 8012d2c:	071b      	lsls	r3, r3, #28
 8012d2e:	d501      	bpl.n	8012d34 <_vfiprintf_r+0x3c>
 8012d30:	692b      	ldr	r3, [r5, #16]
 8012d32:	b9eb      	cbnz	r3, 8012d70 <_vfiprintf_r+0x78>
 8012d34:	4629      	mov	r1, r5
 8012d36:	4630      	mov	r0, r6
 8012d38:	f000 f960 	bl	8012ffc <__swsetup_r>
 8012d3c:	b1c0      	cbz	r0, 8012d70 <_vfiprintf_r+0x78>
 8012d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d40:	07dc      	lsls	r4, r3, #31
 8012d42:	d50e      	bpl.n	8012d62 <_vfiprintf_r+0x6a>
 8012d44:	f04f 30ff 	mov.w	r0, #4294967295
 8012d48:	b01d      	add	sp, #116	; 0x74
 8012d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d4e:	4b7b      	ldr	r3, [pc, #492]	; (8012f3c <_vfiprintf_r+0x244>)
 8012d50:	429d      	cmp	r5, r3
 8012d52:	d101      	bne.n	8012d58 <_vfiprintf_r+0x60>
 8012d54:	68b5      	ldr	r5, [r6, #8]
 8012d56:	e7df      	b.n	8012d18 <_vfiprintf_r+0x20>
 8012d58:	4b79      	ldr	r3, [pc, #484]	; (8012f40 <_vfiprintf_r+0x248>)
 8012d5a:	429d      	cmp	r5, r3
 8012d5c:	bf08      	it	eq
 8012d5e:	68f5      	ldreq	r5, [r6, #12]
 8012d60:	e7da      	b.n	8012d18 <_vfiprintf_r+0x20>
 8012d62:	89ab      	ldrh	r3, [r5, #12]
 8012d64:	0598      	lsls	r0, r3, #22
 8012d66:	d4ed      	bmi.n	8012d44 <_vfiprintf_r+0x4c>
 8012d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d6a:	f7ff ff46 	bl	8012bfa <__retarget_lock_release_recursive>
 8012d6e:	e7e9      	b.n	8012d44 <_vfiprintf_r+0x4c>
 8012d70:	2300      	movs	r3, #0
 8012d72:	9309      	str	r3, [sp, #36]	; 0x24
 8012d74:	2320      	movs	r3, #32
 8012d76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d7e:	2330      	movs	r3, #48	; 0x30
 8012d80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012f44 <_vfiprintf_r+0x24c>
 8012d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d88:	f04f 0901 	mov.w	r9, #1
 8012d8c:	4623      	mov	r3, r4
 8012d8e:	469a      	mov	sl, r3
 8012d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d94:	b10a      	cbz	r2, 8012d9a <_vfiprintf_r+0xa2>
 8012d96:	2a25      	cmp	r2, #37	; 0x25
 8012d98:	d1f9      	bne.n	8012d8e <_vfiprintf_r+0x96>
 8012d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8012d9e:	d00b      	beq.n	8012db8 <_vfiprintf_r+0xc0>
 8012da0:	465b      	mov	r3, fp
 8012da2:	4622      	mov	r2, r4
 8012da4:	4629      	mov	r1, r5
 8012da6:	4630      	mov	r0, r6
 8012da8:	f7ff ff94 	bl	8012cd4 <__sfputs_r>
 8012dac:	3001      	adds	r0, #1
 8012dae:	f000 80aa 	beq.w	8012f06 <_vfiprintf_r+0x20e>
 8012db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012db4:	445a      	add	r2, fp
 8012db6:	9209      	str	r2, [sp, #36]	; 0x24
 8012db8:	f89a 3000 	ldrb.w	r3, [sl]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	f000 80a2 	beq.w	8012f06 <_vfiprintf_r+0x20e>
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012dcc:	f10a 0a01 	add.w	sl, sl, #1
 8012dd0:	9304      	str	r3, [sp, #16]
 8012dd2:	9307      	str	r3, [sp, #28]
 8012dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8012dda:	4654      	mov	r4, sl
 8012ddc:	2205      	movs	r2, #5
 8012dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012de2:	4858      	ldr	r0, [pc, #352]	; (8012f44 <_vfiprintf_r+0x24c>)
 8012de4:	f7ed fa84 	bl	80002f0 <memchr>
 8012de8:	9a04      	ldr	r2, [sp, #16]
 8012dea:	b9d8      	cbnz	r0, 8012e24 <_vfiprintf_r+0x12c>
 8012dec:	06d1      	lsls	r1, r2, #27
 8012dee:	bf44      	itt	mi
 8012df0:	2320      	movmi	r3, #32
 8012df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012df6:	0713      	lsls	r3, r2, #28
 8012df8:	bf44      	itt	mi
 8012dfa:	232b      	movmi	r3, #43	; 0x2b
 8012dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e00:	f89a 3000 	ldrb.w	r3, [sl]
 8012e04:	2b2a      	cmp	r3, #42	; 0x2a
 8012e06:	d015      	beq.n	8012e34 <_vfiprintf_r+0x13c>
 8012e08:	9a07      	ldr	r2, [sp, #28]
 8012e0a:	4654      	mov	r4, sl
 8012e0c:	2000      	movs	r0, #0
 8012e0e:	f04f 0c0a 	mov.w	ip, #10
 8012e12:	4621      	mov	r1, r4
 8012e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e18:	3b30      	subs	r3, #48	; 0x30
 8012e1a:	2b09      	cmp	r3, #9
 8012e1c:	d94e      	bls.n	8012ebc <_vfiprintf_r+0x1c4>
 8012e1e:	b1b0      	cbz	r0, 8012e4e <_vfiprintf_r+0x156>
 8012e20:	9207      	str	r2, [sp, #28]
 8012e22:	e014      	b.n	8012e4e <_vfiprintf_r+0x156>
 8012e24:	eba0 0308 	sub.w	r3, r0, r8
 8012e28:	fa09 f303 	lsl.w	r3, r9, r3
 8012e2c:	4313      	orrs	r3, r2
 8012e2e:	9304      	str	r3, [sp, #16]
 8012e30:	46a2      	mov	sl, r4
 8012e32:	e7d2      	b.n	8012dda <_vfiprintf_r+0xe2>
 8012e34:	9b03      	ldr	r3, [sp, #12]
 8012e36:	1d19      	adds	r1, r3, #4
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	9103      	str	r1, [sp, #12]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	bfbb      	ittet	lt
 8012e40:	425b      	neglt	r3, r3
 8012e42:	f042 0202 	orrlt.w	r2, r2, #2
 8012e46:	9307      	strge	r3, [sp, #28]
 8012e48:	9307      	strlt	r3, [sp, #28]
 8012e4a:	bfb8      	it	lt
 8012e4c:	9204      	strlt	r2, [sp, #16]
 8012e4e:	7823      	ldrb	r3, [r4, #0]
 8012e50:	2b2e      	cmp	r3, #46	; 0x2e
 8012e52:	d10c      	bne.n	8012e6e <_vfiprintf_r+0x176>
 8012e54:	7863      	ldrb	r3, [r4, #1]
 8012e56:	2b2a      	cmp	r3, #42	; 0x2a
 8012e58:	d135      	bne.n	8012ec6 <_vfiprintf_r+0x1ce>
 8012e5a:	9b03      	ldr	r3, [sp, #12]
 8012e5c:	1d1a      	adds	r2, r3, #4
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	9203      	str	r2, [sp, #12]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	bfb8      	it	lt
 8012e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e6a:	3402      	adds	r4, #2
 8012e6c:	9305      	str	r3, [sp, #20]
 8012e6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012f54 <_vfiprintf_r+0x25c>
 8012e72:	7821      	ldrb	r1, [r4, #0]
 8012e74:	2203      	movs	r2, #3
 8012e76:	4650      	mov	r0, sl
 8012e78:	f7ed fa3a 	bl	80002f0 <memchr>
 8012e7c:	b140      	cbz	r0, 8012e90 <_vfiprintf_r+0x198>
 8012e7e:	2340      	movs	r3, #64	; 0x40
 8012e80:	eba0 000a 	sub.w	r0, r0, sl
 8012e84:	fa03 f000 	lsl.w	r0, r3, r0
 8012e88:	9b04      	ldr	r3, [sp, #16]
 8012e8a:	4303      	orrs	r3, r0
 8012e8c:	3401      	adds	r4, #1
 8012e8e:	9304      	str	r3, [sp, #16]
 8012e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e94:	482c      	ldr	r0, [pc, #176]	; (8012f48 <_vfiprintf_r+0x250>)
 8012e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e9a:	2206      	movs	r2, #6
 8012e9c:	f7ed fa28 	bl	80002f0 <memchr>
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d03f      	beq.n	8012f24 <_vfiprintf_r+0x22c>
 8012ea4:	4b29      	ldr	r3, [pc, #164]	; (8012f4c <_vfiprintf_r+0x254>)
 8012ea6:	bb1b      	cbnz	r3, 8012ef0 <_vfiprintf_r+0x1f8>
 8012ea8:	9b03      	ldr	r3, [sp, #12]
 8012eaa:	3307      	adds	r3, #7
 8012eac:	f023 0307 	bic.w	r3, r3, #7
 8012eb0:	3308      	adds	r3, #8
 8012eb2:	9303      	str	r3, [sp, #12]
 8012eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eb6:	443b      	add	r3, r7
 8012eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8012eba:	e767      	b.n	8012d8c <_vfiprintf_r+0x94>
 8012ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ec0:	460c      	mov	r4, r1
 8012ec2:	2001      	movs	r0, #1
 8012ec4:	e7a5      	b.n	8012e12 <_vfiprintf_r+0x11a>
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	3401      	adds	r4, #1
 8012eca:	9305      	str	r3, [sp, #20]
 8012ecc:	4619      	mov	r1, r3
 8012ece:	f04f 0c0a 	mov.w	ip, #10
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ed8:	3a30      	subs	r2, #48	; 0x30
 8012eda:	2a09      	cmp	r2, #9
 8012edc:	d903      	bls.n	8012ee6 <_vfiprintf_r+0x1ee>
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d0c5      	beq.n	8012e6e <_vfiprintf_r+0x176>
 8012ee2:	9105      	str	r1, [sp, #20]
 8012ee4:	e7c3      	b.n	8012e6e <_vfiprintf_r+0x176>
 8012ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012eea:	4604      	mov	r4, r0
 8012eec:	2301      	movs	r3, #1
 8012eee:	e7f0      	b.n	8012ed2 <_vfiprintf_r+0x1da>
 8012ef0:	ab03      	add	r3, sp, #12
 8012ef2:	9300      	str	r3, [sp, #0]
 8012ef4:	462a      	mov	r2, r5
 8012ef6:	4b16      	ldr	r3, [pc, #88]	; (8012f50 <_vfiprintf_r+0x258>)
 8012ef8:	a904      	add	r1, sp, #16
 8012efa:	4630      	mov	r0, r6
 8012efc:	f7fb fa58 	bl	800e3b0 <_printf_float>
 8012f00:	4607      	mov	r7, r0
 8012f02:	1c78      	adds	r0, r7, #1
 8012f04:	d1d6      	bne.n	8012eb4 <_vfiprintf_r+0x1bc>
 8012f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f08:	07d9      	lsls	r1, r3, #31
 8012f0a:	d405      	bmi.n	8012f18 <_vfiprintf_r+0x220>
 8012f0c:	89ab      	ldrh	r3, [r5, #12]
 8012f0e:	059a      	lsls	r2, r3, #22
 8012f10:	d402      	bmi.n	8012f18 <_vfiprintf_r+0x220>
 8012f12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f14:	f7ff fe71 	bl	8012bfa <__retarget_lock_release_recursive>
 8012f18:	89ab      	ldrh	r3, [r5, #12]
 8012f1a:	065b      	lsls	r3, r3, #25
 8012f1c:	f53f af12 	bmi.w	8012d44 <_vfiprintf_r+0x4c>
 8012f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f22:	e711      	b.n	8012d48 <_vfiprintf_r+0x50>
 8012f24:	ab03      	add	r3, sp, #12
 8012f26:	9300      	str	r3, [sp, #0]
 8012f28:	462a      	mov	r2, r5
 8012f2a:	4b09      	ldr	r3, [pc, #36]	; (8012f50 <_vfiprintf_r+0x258>)
 8012f2c:	a904      	add	r1, sp, #16
 8012f2e:	4630      	mov	r0, r6
 8012f30:	f7fb fcca 	bl	800e8c8 <_printf_i>
 8012f34:	e7e4      	b.n	8012f00 <_vfiprintf_r+0x208>
 8012f36:	bf00      	nop
 8012f38:	0801479c 	.word	0x0801479c
 8012f3c:	080147bc 	.word	0x080147bc
 8012f40:	0801477c 	.word	0x0801477c
 8012f44:	08014714 	.word	0x08014714
 8012f48:	0801471e 	.word	0x0801471e
 8012f4c:	0800e3b1 	.word	0x0800e3b1
 8012f50:	08012cd5 	.word	0x08012cd5
 8012f54:	0801471a 	.word	0x0801471a

08012f58 <__swbuf_r>:
 8012f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f5a:	460e      	mov	r6, r1
 8012f5c:	4614      	mov	r4, r2
 8012f5e:	4605      	mov	r5, r0
 8012f60:	b118      	cbz	r0, 8012f6a <__swbuf_r+0x12>
 8012f62:	6983      	ldr	r3, [r0, #24]
 8012f64:	b90b      	cbnz	r3, 8012f6a <__swbuf_r+0x12>
 8012f66:	f7ff fd97 	bl	8012a98 <__sinit>
 8012f6a:	4b21      	ldr	r3, [pc, #132]	; (8012ff0 <__swbuf_r+0x98>)
 8012f6c:	429c      	cmp	r4, r3
 8012f6e:	d12b      	bne.n	8012fc8 <__swbuf_r+0x70>
 8012f70:	686c      	ldr	r4, [r5, #4]
 8012f72:	69a3      	ldr	r3, [r4, #24]
 8012f74:	60a3      	str	r3, [r4, #8]
 8012f76:	89a3      	ldrh	r3, [r4, #12]
 8012f78:	071a      	lsls	r2, r3, #28
 8012f7a:	d52f      	bpl.n	8012fdc <__swbuf_r+0x84>
 8012f7c:	6923      	ldr	r3, [r4, #16]
 8012f7e:	b36b      	cbz	r3, 8012fdc <__swbuf_r+0x84>
 8012f80:	6923      	ldr	r3, [r4, #16]
 8012f82:	6820      	ldr	r0, [r4, #0]
 8012f84:	1ac0      	subs	r0, r0, r3
 8012f86:	6963      	ldr	r3, [r4, #20]
 8012f88:	b2f6      	uxtb	r6, r6
 8012f8a:	4283      	cmp	r3, r0
 8012f8c:	4637      	mov	r7, r6
 8012f8e:	dc04      	bgt.n	8012f9a <__swbuf_r+0x42>
 8012f90:	4621      	mov	r1, r4
 8012f92:	4628      	mov	r0, r5
 8012f94:	f7ff fcec 	bl	8012970 <_fflush_r>
 8012f98:	bb30      	cbnz	r0, 8012fe8 <__swbuf_r+0x90>
 8012f9a:	68a3      	ldr	r3, [r4, #8]
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	60a3      	str	r3, [r4, #8]
 8012fa0:	6823      	ldr	r3, [r4, #0]
 8012fa2:	1c5a      	adds	r2, r3, #1
 8012fa4:	6022      	str	r2, [r4, #0]
 8012fa6:	701e      	strb	r6, [r3, #0]
 8012fa8:	6963      	ldr	r3, [r4, #20]
 8012faa:	3001      	adds	r0, #1
 8012fac:	4283      	cmp	r3, r0
 8012fae:	d004      	beq.n	8012fba <__swbuf_r+0x62>
 8012fb0:	89a3      	ldrh	r3, [r4, #12]
 8012fb2:	07db      	lsls	r3, r3, #31
 8012fb4:	d506      	bpl.n	8012fc4 <__swbuf_r+0x6c>
 8012fb6:	2e0a      	cmp	r6, #10
 8012fb8:	d104      	bne.n	8012fc4 <__swbuf_r+0x6c>
 8012fba:	4621      	mov	r1, r4
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	f7ff fcd7 	bl	8012970 <_fflush_r>
 8012fc2:	b988      	cbnz	r0, 8012fe8 <__swbuf_r+0x90>
 8012fc4:	4638      	mov	r0, r7
 8012fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc8:	4b0a      	ldr	r3, [pc, #40]	; (8012ff4 <__swbuf_r+0x9c>)
 8012fca:	429c      	cmp	r4, r3
 8012fcc:	d101      	bne.n	8012fd2 <__swbuf_r+0x7a>
 8012fce:	68ac      	ldr	r4, [r5, #8]
 8012fd0:	e7cf      	b.n	8012f72 <__swbuf_r+0x1a>
 8012fd2:	4b09      	ldr	r3, [pc, #36]	; (8012ff8 <__swbuf_r+0xa0>)
 8012fd4:	429c      	cmp	r4, r3
 8012fd6:	bf08      	it	eq
 8012fd8:	68ec      	ldreq	r4, [r5, #12]
 8012fda:	e7ca      	b.n	8012f72 <__swbuf_r+0x1a>
 8012fdc:	4621      	mov	r1, r4
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f000 f80c 	bl	8012ffc <__swsetup_r>
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	d0cb      	beq.n	8012f80 <__swbuf_r+0x28>
 8012fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8012fec:	e7ea      	b.n	8012fc4 <__swbuf_r+0x6c>
 8012fee:	bf00      	nop
 8012ff0:	0801479c 	.word	0x0801479c
 8012ff4:	080147bc 	.word	0x080147bc
 8012ff8:	0801477c 	.word	0x0801477c

08012ffc <__swsetup_r>:
 8012ffc:	4b32      	ldr	r3, [pc, #200]	; (80130c8 <__swsetup_r+0xcc>)
 8012ffe:	b570      	push	{r4, r5, r6, lr}
 8013000:	681d      	ldr	r5, [r3, #0]
 8013002:	4606      	mov	r6, r0
 8013004:	460c      	mov	r4, r1
 8013006:	b125      	cbz	r5, 8013012 <__swsetup_r+0x16>
 8013008:	69ab      	ldr	r3, [r5, #24]
 801300a:	b913      	cbnz	r3, 8013012 <__swsetup_r+0x16>
 801300c:	4628      	mov	r0, r5
 801300e:	f7ff fd43 	bl	8012a98 <__sinit>
 8013012:	4b2e      	ldr	r3, [pc, #184]	; (80130cc <__swsetup_r+0xd0>)
 8013014:	429c      	cmp	r4, r3
 8013016:	d10f      	bne.n	8013038 <__swsetup_r+0x3c>
 8013018:	686c      	ldr	r4, [r5, #4]
 801301a:	89a3      	ldrh	r3, [r4, #12]
 801301c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013020:	0719      	lsls	r1, r3, #28
 8013022:	d42c      	bmi.n	801307e <__swsetup_r+0x82>
 8013024:	06dd      	lsls	r5, r3, #27
 8013026:	d411      	bmi.n	801304c <__swsetup_r+0x50>
 8013028:	2309      	movs	r3, #9
 801302a:	6033      	str	r3, [r6, #0]
 801302c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013030:	81a3      	strh	r3, [r4, #12]
 8013032:	f04f 30ff 	mov.w	r0, #4294967295
 8013036:	e03e      	b.n	80130b6 <__swsetup_r+0xba>
 8013038:	4b25      	ldr	r3, [pc, #148]	; (80130d0 <__swsetup_r+0xd4>)
 801303a:	429c      	cmp	r4, r3
 801303c:	d101      	bne.n	8013042 <__swsetup_r+0x46>
 801303e:	68ac      	ldr	r4, [r5, #8]
 8013040:	e7eb      	b.n	801301a <__swsetup_r+0x1e>
 8013042:	4b24      	ldr	r3, [pc, #144]	; (80130d4 <__swsetup_r+0xd8>)
 8013044:	429c      	cmp	r4, r3
 8013046:	bf08      	it	eq
 8013048:	68ec      	ldreq	r4, [r5, #12]
 801304a:	e7e6      	b.n	801301a <__swsetup_r+0x1e>
 801304c:	0758      	lsls	r0, r3, #29
 801304e:	d512      	bpl.n	8013076 <__swsetup_r+0x7a>
 8013050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013052:	b141      	cbz	r1, 8013066 <__swsetup_r+0x6a>
 8013054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013058:	4299      	cmp	r1, r3
 801305a:	d002      	beq.n	8013062 <__swsetup_r+0x66>
 801305c:	4630      	mov	r0, r6
 801305e:	f7fe fd51 	bl	8011b04 <_free_r>
 8013062:	2300      	movs	r3, #0
 8013064:	6363      	str	r3, [r4, #52]	; 0x34
 8013066:	89a3      	ldrh	r3, [r4, #12]
 8013068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801306c:	81a3      	strh	r3, [r4, #12]
 801306e:	2300      	movs	r3, #0
 8013070:	6063      	str	r3, [r4, #4]
 8013072:	6923      	ldr	r3, [r4, #16]
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	89a3      	ldrh	r3, [r4, #12]
 8013078:	f043 0308 	orr.w	r3, r3, #8
 801307c:	81a3      	strh	r3, [r4, #12]
 801307e:	6923      	ldr	r3, [r4, #16]
 8013080:	b94b      	cbnz	r3, 8013096 <__swsetup_r+0x9a>
 8013082:	89a3      	ldrh	r3, [r4, #12]
 8013084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801308c:	d003      	beq.n	8013096 <__swsetup_r+0x9a>
 801308e:	4621      	mov	r1, r4
 8013090:	4630      	mov	r0, r6
 8013092:	f000 f84d 	bl	8013130 <__smakebuf_r>
 8013096:	89a0      	ldrh	r0, [r4, #12]
 8013098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801309c:	f010 0301 	ands.w	r3, r0, #1
 80130a0:	d00a      	beq.n	80130b8 <__swsetup_r+0xbc>
 80130a2:	2300      	movs	r3, #0
 80130a4:	60a3      	str	r3, [r4, #8]
 80130a6:	6963      	ldr	r3, [r4, #20]
 80130a8:	425b      	negs	r3, r3
 80130aa:	61a3      	str	r3, [r4, #24]
 80130ac:	6923      	ldr	r3, [r4, #16]
 80130ae:	b943      	cbnz	r3, 80130c2 <__swsetup_r+0xc6>
 80130b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80130b4:	d1ba      	bne.n	801302c <__swsetup_r+0x30>
 80130b6:	bd70      	pop	{r4, r5, r6, pc}
 80130b8:	0781      	lsls	r1, r0, #30
 80130ba:	bf58      	it	pl
 80130bc:	6963      	ldrpl	r3, [r4, #20]
 80130be:	60a3      	str	r3, [r4, #8]
 80130c0:	e7f4      	b.n	80130ac <__swsetup_r+0xb0>
 80130c2:	2000      	movs	r0, #0
 80130c4:	e7f7      	b.n	80130b6 <__swsetup_r+0xba>
 80130c6:	bf00      	nop
 80130c8:	24000024 	.word	0x24000024
 80130cc:	0801479c 	.word	0x0801479c
 80130d0:	080147bc 	.word	0x080147bc
 80130d4:	0801477c 	.word	0x0801477c

080130d8 <abort>:
 80130d8:	b508      	push	{r3, lr}
 80130da:	2006      	movs	r0, #6
 80130dc:	f000 f898 	bl	8013210 <raise>
 80130e0:	2001      	movs	r0, #1
 80130e2:	f7ef f9c7 	bl	8002474 <_exit>

080130e6 <__swhatbuf_r>:
 80130e6:	b570      	push	{r4, r5, r6, lr}
 80130e8:	460e      	mov	r6, r1
 80130ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130ee:	2900      	cmp	r1, #0
 80130f0:	b096      	sub	sp, #88	; 0x58
 80130f2:	4614      	mov	r4, r2
 80130f4:	461d      	mov	r5, r3
 80130f6:	da08      	bge.n	801310a <__swhatbuf_r+0x24>
 80130f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80130fc:	2200      	movs	r2, #0
 80130fe:	602a      	str	r2, [r5, #0]
 8013100:	061a      	lsls	r2, r3, #24
 8013102:	d410      	bmi.n	8013126 <__swhatbuf_r+0x40>
 8013104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013108:	e00e      	b.n	8013128 <__swhatbuf_r+0x42>
 801310a:	466a      	mov	r2, sp
 801310c:	f000 f89c 	bl	8013248 <_fstat_r>
 8013110:	2800      	cmp	r0, #0
 8013112:	dbf1      	blt.n	80130f8 <__swhatbuf_r+0x12>
 8013114:	9a01      	ldr	r2, [sp, #4]
 8013116:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801311a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801311e:	425a      	negs	r2, r3
 8013120:	415a      	adcs	r2, r3
 8013122:	602a      	str	r2, [r5, #0]
 8013124:	e7ee      	b.n	8013104 <__swhatbuf_r+0x1e>
 8013126:	2340      	movs	r3, #64	; 0x40
 8013128:	2000      	movs	r0, #0
 801312a:	6023      	str	r3, [r4, #0]
 801312c:	b016      	add	sp, #88	; 0x58
 801312e:	bd70      	pop	{r4, r5, r6, pc}

08013130 <__smakebuf_r>:
 8013130:	898b      	ldrh	r3, [r1, #12]
 8013132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013134:	079d      	lsls	r5, r3, #30
 8013136:	4606      	mov	r6, r0
 8013138:	460c      	mov	r4, r1
 801313a:	d507      	bpl.n	801314c <__smakebuf_r+0x1c>
 801313c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013140:	6023      	str	r3, [r4, #0]
 8013142:	6123      	str	r3, [r4, #16]
 8013144:	2301      	movs	r3, #1
 8013146:	6163      	str	r3, [r4, #20]
 8013148:	b002      	add	sp, #8
 801314a:	bd70      	pop	{r4, r5, r6, pc}
 801314c:	ab01      	add	r3, sp, #4
 801314e:	466a      	mov	r2, sp
 8013150:	f7ff ffc9 	bl	80130e6 <__swhatbuf_r>
 8013154:	9900      	ldr	r1, [sp, #0]
 8013156:	4605      	mov	r5, r0
 8013158:	4630      	mov	r0, r6
 801315a:	f7fe fd3f 	bl	8011bdc <_malloc_r>
 801315e:	b948      	cbnz	r0, 8013174 <__smakebuf_r+0x44>
 8013160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013164:	059a      	lsls	r2, r3, #22
 8013166:	d4ef      	bmi.n	8013148 <__smakebuf_r+0x18>
 8013168:	f023 0303 	bic.w	r3, r3, #3
 801316c:	f043 0302 	orr.w	r3, r3, #2
 8013170:	81a3      	strh	r3, [r4, #12]
 8013172:	e7e3      	b.n	801313c <__smakebuf_r+0xc>
 8013174:	4b0d      	ldr	r3, [pc, #52]	; (80131ac <__smakebuf_r+0x7c>)
 8013176:	62b3      	str	r3, [r6, #40]	; 0x28
 8013178:	89a3      	ldrh	r3, [r4, #12]
 801317a:	6020      	str	r0, [r4, #0]
 801317c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013180:	81a3      	strh	r3, [r4, #12]
 8013182:	9b00      	ldr	r3, [sp, #0]
 8013184:	6163      	str	r3, [r4, #20]
 8013186:	9b01      	ldr	r3, [sp, #4]
 8013188:	6120      	str	r0, [r4, #16]
 801318a:	b15b      	cbz	r3, 80131a4 <__smakebuf_r+0x74>
 801318c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013190:	4630      	mov	r0, r6
 8013192:	f000 f86b 	bl	801326c <_isatty_r>
 8013196:	b128      	cbz	r0, 80131a4 <__smakebuf_r+0x74>
 8013198:	89a3      	ldrh	r3, [r4, #12]
 801319a:	f023 0303 	bic.w	r3, r3, #3
 801319e:	f043 0301 	orr.w	r3, r3, #1
 80131a2:	81a3      	strh	r3, [r4, #12]
 80131a4:	89a0      	ldrh	r0, [r4, #12]
 80131a6:	4305      	orrs	r5, r0
 80131a8:	81a5      	strh	r5, [r4, #12]
 80131aa:	e7cd      	b.n	8013148 <__smakebuf_r+0x18>
 80131ac:	08012a31 	.word	0x08012a31

080131b0 <_malloc_usable_size_r>:
 80131b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131b4:	1f18      	subs	r0, r3, #4
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	bfbc      	itt	lt
 80131ba:	580b      	ldrlt	r3, [r1, r0]
 80131bc:	18c0      	addlt	r0, r0, r3
 80131be:	4770      	bx	lr

080131c0 <_raise_r>:
 80131c0:	291f      	cmp	r1, #31
 80131c2:	b538      	push	{r3, r4, r5, lr}
 80131c4:	4604      	mov	r4, r0
 80131c6:	460d      	mov	r5, r1
 80131c8:	d904      	bls.n	80131d4 <_raise_r+0x14>
 80131ca:	2316      	movs	r3, #22
 80131cc:	6003      	str	r3, [r0, #0]
 80131ce:	f04f 30ff 	mov.w	r0, #4294967295
 80131d2:	bd38      	pop	{r3, r4, r5, pc}
 80131d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80131d6:	b112      	cbz	r2, 80131de <_raise_r+0x1e>
 80131d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80131dc:	b94b      	cbnz	r3, 80131f2 <_raise_r+0x32>
 80131de:	4620      	mov	r0, r4
 80131e0:	f000 f830 	bl	8013244 <_getpid_r>
 80131e4:	462a      	mov	r2, r5
 80131e6:	4601      	mov	r1, r0
 80131e8:	4620      	mov	r0, r4
 80131ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ee:	f000 b817 	b.w	8013220 <_kill_r>
 80131f2:	2b01      	cmp	r3, #1
 80131f4:	d00a      	beq.n	801320c <_raise_r+0x4c>
 80131f6:	1c59      	adds	r1, r3, #1
 80131f8:	d103      	bne.n	8013202 <_raise_r+0x42>
 80131fa:	2316      	movs	r3, #22
 80131fc:	6003      	str	r3, [r0, #0]
 80131fe:	2001      	movs	r0, #1
 8013200:	e7e7      	b.n	80131d2 <_raise_r+0x12>
 8013202:	2400      	movs	r4, #0
 8013204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013208:	4628      	mov	r0, r5
 801320a:	4798      	blx	r3
 801320c:	2000      	movs	r0, #0
 801320e:	e7e0      	b.n	80131d2 <_raise_r+0x12>

08013210 <raise>:
 8013210:	4b02      	ldr	r3, [pc, #8]	; (801321c <raise+0xc>)
 8013212:	4601      	mov	r1, r0
 8013214:	6818      	ldr	r0, [r3, #0]
 8013216:	f7ff bfd3 	b.w	80131c0 <_raise_r>
 801321a:	bf00      	nop
 801321c:	24000024 	.word	0x24000024

08013220 <_kill_r>:
 8013220:	b538      	push	{r3, r4, r5, lr}
 8013222:	4d07      	ldr	r5, [pc, #28]	; (8013240 <_kill_r+0x20>)
 8013224:	2300      	movs	r3, #0
 8013226:	4604      	mov	r4, r0
 8013228:	4608      	mov	r0, r1
 801322a:	4611      	mov	r1, r2
 801322c:	602b      	str	r3, [r5, #0]
 801322e:	f7ef f911 	bl	8002454 <_kill>
 8013232:	1c43      	adds	r3, r0, #1
 8013234:	d102      	bne.n	801323c <_kill_r+0x1c>
 8013236:	682b      	ldr	r3, [r5, #0]
 8013238:	b103      	cbz	r3, 801323c <_kill_r+0x1c>
 801323a:	6023      	str	r3, [r4, #0]
 801323c:	bd38      	pop	{r3, r4, r5, pc}
 801323e:	bf00      	nop
 8013240:	240051d0 	.word	0x240051d0

08013244 <_getpid_r>:
 8013244:	f7ef b8fe 	b.w	8002444 <_getpid>

08013248 <_fstat_r>:
 8013248:	b538      	push	{r3, r4, r5, lr}
 801324a:	4d07      	ldr	r5, [pc, #28]	; (8013268 <_fstat_r+0x20>)
 801324c:	2300      	movs	r3, #0
 801324e:	4604      	mov	r4, r0
 8013250:	4608      	mov	r0, r1
 8013252:	4611      	mov	r1, r2
 8013254:	602b      	str	r3, [r5, #0]
 8013256:	f7ef f95c 	bl	8002512 <_fstat>
 801325a:	1c43      	adds	r3, r0, #1
 801325c:	d102      	bne.n	8013264 <_fstat_r+0x1c>
 801325e:	682b      	ldr	r3, [r5, #0]
 8013260:	b103      	cbz	r3, 8013264 <_fstat_r+0x1c>
 8013262:	6023      	str	r3, [r4, #0]
 8013264:	bd38      	pop	{r3, r4, r5, pc}
 8013266:	bf00      	nop
 8013268:	240051d0 	.word	0x240051d0

0801326c <_isatty_r>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	4d06      	ldr	r5, [pc, #24]	; (8013288 <_isatty_r+0x1c>)
 8013270:	2300      	movs	r3, #0
 8013272:	4604      	mov	r4, r0
 8013274:	4608      	mov	r0, r1
 8013276:	602b      	str	r3, [r5, #0]
 8013278:	f7ef f95b 	bl	8002532 <_isatty>
 801327c:	1c43      	adds	r3, r0, #1
 801327e:	d102      	bne.n	8013286 <_isatty_r+0x1a>
 8013280:	682b      	ldr	r3, [r5, #0]
 8013282:	b103      	cbz	r3, 8013286 <_isatty_r+0x1a>
 8013284:	6023      	str	r3, [r4, #0]
 8013286:	bd38      	pop	{r3, r4, r5, pc}
 8013288:	240051d0 	.word	0x240051d0

0801328c <checkint>:
 801328c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013290:	2b7e      	cmp	r3, #126	; 0x7e
 8013292:	dd10      	ble.n	80132b6 <checkint+0x2a>
 8013294:	2b96      	cmp	r3, #150	; 0x96
 8013296:	dc0c      	bgt.n	80132b2 <checkint+0x26>
 8013298:	2201      	movs	r2, #1
 801329a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801329e:	fa02 f303 	lsl.w	r3, r2, r3
 80132a2:	1e5a      	subs	r2, r3, #1
 80132a4:	4202      	tst	r2, r0
 80132a6:	d106      	bne.n	80132b6 <checkint+0x2a>
 80132a8:	4203      	tst	r3, r0
 80132aa:	bf0c      	ite	eq
 80132ac:	2002      	moveq	r0, #2
 80132ae:	2001      	movne	r0, #1
 80132b0:	4770      	bx	lr
 80132b2:	2002      	movs	r0, #2
 80132b4:	4770      	bx	lr
 80132b6:	2000      	movs	r0, #0
 80132b8:	4770      	bx	lr
 80132ba:	0000      	movs	r0, r0
 80132bc:	0000      	movs	r0, r0
	...

080132c0 <powf>:
 80132c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132c2:	ee10 1a10 	vmov	r1, s0
 80132c6:	ee10 4a90 	vmov	r4, s1
 80132ca:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80132ce:	0062      	lsls	r2, r4, #1
 80132d0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80132d4:	eef0 7a40 	vmov.f32	s15, s0
 80132d8:	f102 30ff 	add.w	r0, r2, #4294967295
 80132dc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80132e0:	d252      	bcs.n	8013388 <powf+0xc8>
 80132e2:	4298      	cmp	r0, r3
 80132e4:	d252      	bcs.n	801338c <powf+0xcc>
 80132e6:	2000      	movs	r0, #0
 80132e8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80132ec:	4ca0      	ldr	r4, [pc, #640]	; (8013570 <powf+0x2b0>)
 80132ee:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80132f2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80132f6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80132fa:	0dd2      	lsrs	r2, r2, #23
 80132fc:	05d2      	lsls	r2, r2, #23
 80132fe:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8013302:	1a8b      	subs	r3, r1, r2
 8013304:	ed95 6b00 	vldr	d6, [r5]
 8013308:	ee07 3a90 	vmov	s15, r3
 801330c:	15d2      	asrs	r2, r2, #23
 801330e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013312:	eea6 5b07 	vfma.f64	d5, d6, d7
 8013316:	ed95 6b02 	vldr	d6, [r5, #8]
 801331a:	ee25 2b05 	vmul.f64	d2, d5, d5
 801331e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8013322:	ee07 2a90 	vmov	s15, r2
 8013326:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801332a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801332e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013332:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8013336:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801333a:	eea5 3b06 	vfma.f64	d3, d5, d6
 801333e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8013342:	eea5 6b04 	vfma.f64	d6, d5, d4
 8013346:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801334a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801334e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8013352:	eea2 7b06 	vfma.f64	d7, d2, d6
 8013356:	eea3 7b01 	vfma.f64	d7, d3, d1
 801335a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801335e:	ee10 3a90 	vmov	r3, s1
 8013362:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8013366:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801336a:	429a      	cmp	r2, r3
 801336c:	f0c0 80b1 	bcc.w	80134d2 <powf+0x212>
 8013370:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8013550 <powf+0x290>
 8013374:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337c:	dd79      	ble.n	8013472 <powf+0x1b2>
 801337e:	b003      	add	sp, #12
 8013380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013384:	f000 bddc 	b.w	8013f40 <__math_oflowf>
 8013388:	4298      	cmp	r0, r3
 801338a:	d32d      	bcc.n	80133e8 <powf+0x128>
 801338c:	b952      	cbnz	r2, 80133a4 <powf+0xe4>
 801338e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8013392:	005b      	lsls	r3, r3, #1
 8013394:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8013398:	f240 80c9 	bls.w	801352e <powf+0x26e>
 801339c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80133a0:	b003      	add	sp, #12
 80133a2:	bd30      	pop	{r4, r5, pc}
 80133a4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80133a8:	d105      	bne.n	80133b6 <powf+0xf6>
 80133aa:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80133ae:	0064      	lsls	r4, r4, #1
 80133b0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80133b4:	e7f0      	b.n	8013398 <powf+0xd8>
 80133b6:	004b      	lsls	r3, r1, #1
 80133b8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80133bc:	d8ee      	bhi.n	801339c <powf+0xdc>
 80133be:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80133c2:	d1eb      	bne.n	801339c <powf+0xdc>
 80133c4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80133c8:	f000 80b1 	beq.w	801352e <powf+0x26e>
 80133cc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80133d0:	ea6f 0404 	mvn.w	r4, r4
 80133d4:	bf34      	ite	cc
 80133d6:	2300      	movcc	r3, #0
 80133d8:	2301      	movcs	r3, #1
 80133da:	0fe4      	lsrs	r4, r4, #31
 80133dc:	42a3      	cmp	r3, r4
 80133de:	f040 80a9 	bne.w	8013534 <powf+0x274>
 80133e2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80133e6:	e7db      	b.n	80133a0 <powf+0xe0>
 80133e8:	004d      	lsls	r5, r1, #1
 80133ea:	1e6a      	subs	r2, r5, #1
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d31c      	bcc.n	801342a <powf+0x16a>
 80133f0:	2900      	cmp	r1, #0
 80133f2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80133f6:	da0f      	bge.n	8013418 <powf+0x158>
 80133f8:	ee10 0a90 	vmov	r0, s1
 80133fc:	f7ff ff46 	bl	801328c <checkint>
 8013400:	2801      	cmp	r0, #1
 8013402:	d109      	bne.n	8013418 <powf+0x158>
 8013404:	eeb1 0a40 	vneg.f32	s0, s0
 8013408:	b945      	cbnz	r5, 801341c <powf+0x15c>
 801340a:	2c00      	cmp	r4, #0
 801340c:	dac8      	bge.n	80133a0 <powf+0xe0>
 801340e:	b003      	add	sp, #12
 8013410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013414:	f000 bd9a 	b.w	8013f4c <__math_divzerof>
 8013418:	2000      	movs	r0, #0
 801341a:	e7f5      	b.n	8013408 <powf+0x148>
 801341c:	2c00      	cmp	r4, #0
 801341e:	dabf      	bge.n	80133a0 <powf+0xe0>
 8013420:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013424:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013428:	e7ba      	b.n	80133a0 <powf+0xe0>
 801342a:	2900      	cmp	r1, #0
 801342c:	da1f      	bge.n	801346e <powf+0x1ae>
 801342e:	ee10 0a90 	vmov	r0, s1
 8013432:	f7ff ff2b 	bl	801328c <checkint>
 8013436:	b920      	cbnz	r0, 8013442 <powf+0x182>
 8013438:	b003      	add	sp, #12
 801343a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801343e:	f000 bd95 	b.w	8013f6c <__math_invalidf>
 8013442:	2801      	cmp	r0, #1
 8013444:	bf14      	ite	ne
 8013446:	2000      	movne	r0, #0
 8013448:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801344c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013450:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8013454:	f4bf af48 	bcs.w	80132e8 <powf+0x28>
 8013458:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8013574 <powf+0x2b4>
 801345c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013460:	ee10 3a10 	vmov	r3, s0
 8013464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013468:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801346c:	e73c      	b.n	80132e8 <powf+0x28>
 801346e:	2000      	movs	r0, #0
 8013470:	e7ee      	b.n	8013450 <powf+0x190>
 8013472:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8013558 <powf+0x298>
 8013476:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347e:	dd10      	ble.n	80134a2 <powf+0x1e2>
 8013480:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8013484:	2800      	cmp	r0, #0
 8013486:	d158      	bne.n	801353a <powf+0x27a>
 8013488:	9300      	str	r3, [sp, #0]
 801348a:	eddd 7a00 	vldr	s15, [sp]
 801348e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013496:	eef4 7a47 	vcmp.f32	s15, s14
 801349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349e:	f47f af6e 	bne.w	801337e <powf+0xbe>
 80134a2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013560 <powf+0x2a0>
 80134a6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80134aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ae:	d804      	bhi.n	80134ba <powf+0x1fa>
 80134b0:	b003      	add	sp, #12
 80134b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134b6:	f000 bd37 	b.w	8013f28 <__math_uflowf>
 80134ba:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8013568 <powf+0x2a8>
 80134be:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80134c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c6:	d504      	bpl.n	80134d2 <powf+0x212>
 80134c8:	b003      	add	sp, #12
 80134ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134ce:	f000 bd31 	b.w	8013f34 <__math_may_uflowf>
 80134d2:	4b29      	ldr	r3, [pc, #164]	; (8013578 <powf+0x2b8>)
 80134d4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80134d8:	ee30 6b07 	vadd.f64	d6, d0, d7
 80134dc:	ee16 2a10 	vmov	r2, s12
 80134e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80134e4:	f002 011f 	and.w	r1, r2, #31
 80134e8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80134ec:	ee30 7b47 	vsub.f64	d7, d0, d7
 80134f0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80134f4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80134f8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80134fc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8013500:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8013504:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013508:	686d      	ldr	r5, [r5, #4]
 801350a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801350e:	1882      	adds	r2, r0, r2
 8013510:	2300      	movs	r3, #0
 8013512:	1918      	adds	r0, r3, r4
 8013514:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8013518:	eea7 0b05 	vfma.f64	d0, d7, d5
 801351c:	ec41 0b17 	vmov	d7, r0, r1
 8013520:	eea6 0b04 	vfma.f64	d0, d6, d4
 8013524:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013528:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801352c:	e738      	b.n	80133a0 <powf+0xe0>
 801352e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013532:	e735      	b.n	80133a0 <powf+0xe0>
 8013534:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801357c <powf+0x2bc>
 8013538:	e732      	b.n	80133a0 <powf+0xe0>
 801353a:	9301      	str	r3, [sp, #4]
 801353c:	eddd 7a01 	vldr	s15, [sp, #4]
 8013540:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013548:	e7a5      	b.n	8013496 <powf+0x1d6>
 801354a:	bf00      	nop
 801354c:	f3af 8000 	nop.w
 8013550:	ffd1d571 	.word	0xffd1d571
 8013554:	405fffff 	.word	0x405fffff
 8013558:	ffa3aae2 	.word	0xffa3aae2
 801355c:	405fffff 	.word	0x405fffff
 8013560:	00000000 	.word	0x00000000
 8013564:	c062c000 	.word	0xc062c000
 8013568:	00000000 	.word	0x00000000
 801356c:	c062a000 	.word	0xc062a000
 8013570:	080147e0 	.word	0x080147e0
 8013574:	4b000000 	.word	0x4b000000
 8013578:	08014cd8 	.word	0x08014cd8
 801357c:	00000000 	.word	0x00000000

08013580 <tanf>:
 8013580:	ee10 3a10 	vmov	r3, s0
 8013584:	b507      	push	{r0, r1, r2, lr}
 8013586:	4a12      	ldr	r2, [pc, #72]	; (80135d0 <tanf+0x50>)
 8013588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801358c:	4293      	cmp	r3, r2
 801358e:	dc07      	bgt.n	80135a0 <tanf+0x20>
 8013590:	eddf 0a10 	vldr	s1, [pc, #64]	; 80135d4 <tanf+0x54>
 8013594:	2001      	movs	r0, #1
 8013596:	b003      	add	sp, #12
 8013598:	f85d eb04 	ldr.w	lr, [sp], #4
 801359c:	f000 bbce 	b.w	8013d3c <__kernel_tanf>
 80135a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80135a4:	db04      	blt.n	80135b0 <tanf+0x30>
 80135a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80135aa:	b003      	add	sp, #12
 80135ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80135b0:	4668      	mov	r0, sp
 80135b2:	f000 f811 	bl	80135d8 <__ieee754_rem_pio2f>
 80135b6:	0040      	lsls	r0, r0, #1
 80135b8:	f000 0002 	and.w	r0, r0, #2
 80135bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80135c0:	ed9d 0a00 	vldr	s0, [sp]
 80135c4:	f1c0 0001 	rsb	r0, r0, #1
 80135c8:	f000 fbb8 	bl	8013d3c <__kernel_tanf>
 80135cc:	e7ed      	b.n	80135aa <tanf+0x2a>
 80135ce:	bf00      	nop
 80135d0:	3f490fda 	.word	0x3f490fda
 80135d4:	00000000 	.word	0x00000000

080135d8 <__ieee754_rem_pio2f>:
 80135d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135da:	ee10 6a10 	vmov	r6, s0
 80135de:	4b8e      	ldr	r3, [pc, #568]	; (8013818 <__ieee754_rem_pio2f+0x240>)
 80135e0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80135e4:	429d      	cmp	r5, r3
 80135e6:	b087      	sub	sp, #28
 80135e8:	eef0 7a40 	vmov.f32	s15, s0
 80135ec:	4604      	mov	r4, r0
 80135ee:	dc05      	bgt.n	80135fc <__ieee754_rem_pio2f+0x24>
 80135f0:	2300      	movs	r3, #0
 80135f2:	ed80 0a00 	vstr	s0, [r0]
 80135f6:	6043      	str	r3, [r0, #4]
 80135f8:	2000      	movs	r0, #0
 80135fa:	e01a      	b.n	8013632 <__ieee754_rem_pio2f+0x5a>
 80135fc:	4b87      	ldr	r3, [pc, #540]	; (801381c <__ieee754_rem_pio2f+0x244>)
 80135fe:	429d      	cmp	r5, r3
 8013600:	dc46      	bgt.n	8013690 <__ieee754_rem_pio2f+0xb8>
 8013602:	2e00      	cmp	r6, #0
 8013604:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013820 <__ieee754_rem_pio2f+0x248>
 8013608:	4b86      	ldr	r3, [pc, #536]	; (8013824 <__ieee754_rem_pio2f+0x24c>)
 801360a:	f025 050f 	bic.w	r5, r5, #15
 801360e:	dd1f      	ble.n	8013650 <__ieee754_rem_pio2f+0x78>
 8013610:	429d      	cmp	r5, r3
 8013612:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013616:	d00e      	beq.n	8013636 <__ieee754_rem_pio2f+0x5e>
 8013618:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013828 <__ieee754_rem_pio2f+0x250>
 801361c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013620:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013624:	ed80 0a00 	vstr	s0, [r0]
 8013628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801362c:	2001      	movs	r0, #1
 801362e:	edc4 7a01 	vstr	s15, [r4, #4]
 8013632:	b007      	add	sp, #28
 8013634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013636:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801382c <__ieee754_rem_pio2f+0x254>
 801363a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013830 <__ieee754_rem_pio2f+0x258>
 801363e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013642:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013646:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801364a:	edc0 6a00 	vstr	s13, [r0]
 801364e:	e7eb      	b.n	8013628 <__ieee754_rem_pio2f+0x50>
 8013650:	429d      	cmp	r5, r3
 8013652:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013656:	d00e      	beq.n	8013676 <__ieee754_rem_pio2f+0x9e>
 8013658:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013828 <__ieee754_rem_pio2f+0x250>
 801365c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013660:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013664:	ed80 0a00 	vstr	s0, [r0]
 8013668:	ee77 7a87 	vadd.f32	s15, s15, s14
 801366c:	f04f 30ff 	mov.w	r0, #4294967295
 8013670:	edc4 7a01 	vstr	s15, [r4, #4]
 8013674:	e7dd      	b.n	8013632 <__ieee754_rem_pio2f+0x5a>
 8013676:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801382c <__ieee754_rem_pio2f+0x254>
 801367a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013830 <__ieee754_rem_pio2f+0x258>
 801367e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013682:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013686:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801368a:	edc0 6a00 	vstr	s13, [r0]
 801368e:	e7eb      	b.n	8013668 <__ieee754_rem_pio2f+0x90>
 8013690:	4b68      	ldr	r3, [pc, #416]	; (8013834 <__ieee754_rem_pio2f+0x25c>)
 8013692:	429d      	cmp	r5, r3
 8013694:	dc72      	bgt.n	801377c <__ieee754_rem_pio2f+0x1a4>
 8013696:	f000 fc78 	bl	8013f8a <fabsf>
 801369a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013838 <__ieee754_rem_pio2f+0x260>
 801369e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80136a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80136a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80136ae:	ee17 0a90 	vmov	r0, s15
 80136b2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013820 <__ieee754_rem_pio2f+0x248>
 80136b6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80136ba:	281f      	cmp	r0, #31
 80136bc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013828 <__ieee754_rem_pio2f+0x250>
 80136c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136c4:	eeb1 6a47 	vneg.f32	s12, s14
 80136c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80136cc:	ee16 2a90 	vmov	r2, s13
 80136d0:	dc1c      	bgt.n	801370c <__ieee754_rem_pio2f+0x134>
 80136d2:	495a      	ldr	r1, [pc, #360]	; (801383c <__ieee754_rem_pio2f+0x264>)
 80136d4:	1e47      	subs	r7, r0, #1
 80136d6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80136da:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80136de:	428b      	cmp	r3, r1
 80136e0:	d014      	beq.n	801370c <__ieee754_rem_pio2f+0x134>
 80136e2:	6022      	str	r2, [r4, #0]
 80136e4:	ed94 7a00 	vldr	s14, [r4]
 80136e8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80136ec:	2e00      	cmp	r6, #0
 80136ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80136f2:	ed84 0a01 	vstr	s0, [r4, #4]
 80136f6:	da9c      	bge.n	8013632 <__ieee754_rem_pio2f+0x5a>
 80136f8:	eeb1 7a47 	vneg.f32	s14, s14
 80136fc:	eeb1 0a40 	vneg.f32	s0, s0
 8013700:	ed84 7a00 	vstr	s14, [r4]
 8013704:	ed84 0a01 	vstr	s0, [r4, #4]
 8013708:	4240      	negs	r0, r0
 801370a:	e792      	b.n	8013632 <__ieee754_rem_pio2f+0x5a>
 801370c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013710:	15eb      	asrs	r3, r5, #23
 8013712:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8013716:	2d08      	cmp	r5, #8
 8013718:	dde3      	ble.n	80136e2 <__ieee754_rem_pio2f+0x10a>
 801371a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801382c <__ieee754_rem_pio2f+0x254>
 801371e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013830 <__ieee754_rem_pio2f+0x258>
 8013722:	eef0 6a40 	vmov.f32	s13, s0
 8013726:	eee6 6a27 	vfma.f32	s13, s12, s15
 801372a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801372e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8013732:	eef0 7a40 	vmov.f32	s15, s0
 8013736:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801373a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801373e:	ee15 2a90 	vmov	r2, s11
 8013742:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013746:	1a5b      	subs	r3, r3, r1
 8013748:	2b19      	cmp	r3, #25
 801374a:	dc04      	bgt.n	8013756 <__ieee754_rem_pio2f+0x17e>
 801374c:	edc4 5a00 	vstr	s11, [r4]
 8013750:	eeb0 0a66 	vmov.f32	s0, s13
 8013754:	e7c6      	b.n	80136e4 <__ieee754_rem_pio2f+0x10c>
 8013756:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013840 <__ieee754_rem_pio2f+0x268>
 801375a:	eeb0 0a66 	vmov.f32	s0, s13
 801375e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013762:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013766:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013844 <__ieee754_rem_pio2f+0x26c>
 801376a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801376e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013772:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013776:	ed84 7a00 	vstr	s14, [r4]
 801377a:	e7b3      	b.n	80136e4 <__ieee754_rem_pio2f+0x10c>
 801377c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013780:	db06      	blt.n	8013790 <__ieee754_rem_pio2f+0x1b8>
 8013782:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013786:	edc0 7a01 	vstr	s15, [r0, #4]
 801378a:	edc0 7a00 	vstr	s15, [r0]
 801378e:	e733      	b.n	80135f8 <__ieee754_rem_pio2f+0x20>
 8013790:	15ea      	asrs	r2, r5, #23
 8013792:	3a86      	subs	r2, #134	; 0x86
 8013794:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013798:	ee07 3a90 	vmov	s15, r3
 801379c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80137a0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013848 <__ieee754_rem_pio2f+0x270>
 80137a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80137a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137ac:	ed8d 7a03 	vstr	s14, [sp, #12]
 80137b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80137b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80137b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80137bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137c0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80137c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80137c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80137cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d0:	edcd 7a05 	vstr	s15, [sp, #20]
 80137d4:	d11e      	bne.n	8013814 <__ieee754_rem_pio2f+0x23c>
 80137d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80137da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137de:	bf14      	ite	ne
 80137e0:	2302      	movne	r3, #2
 80137e2:	2301      	moveq	r3, #1
 80137e4:	4919      	ldr	r1, [pc, #100]	; (801384c <__ieee754_rem_pio2f+0x274>)
 80137e6:	9101      	str	r1, [sp, #4]
 80137e8:	2102      	movs	r1, #2
 80137ea:	9100      	str	r1, [sp, #0]
 80137ec:	a803      	add	r0, sp, #12
 80137ee:	4621      	mov	r1, r4
 80137f0:	f000 f82e 	bl	8013850 <__kernel_rem_pio2f>
 80137f4:	2e00      	cmp	r6, #0
 80137f6:	f6bf af1c 	bge.w	8013632 <__ieee754_rem_pio2f+0x5a>
 80137fa:	edd4 7a00 	vldr	s15, [r4]
 80137fe:	eef1 7a67 	vneg.f32	s15, s15
 8013802:	edc4 7a00 	vstr	s15, [r4]
 8013806:	edd4 7a01 	vldr	s15, [r4, #4]
 801380a:	eef1 7a67 	vneg.f32	s15, s15
 801380e:	edc4 7a01 	vstr	s15, [r4, #4]
 8013812:	e779      	b.n	8013708 <__ieee754_rem_pio2f+0x130>
 8013814:	2303      	movs	r3, #3
 8013816:	e7e5      	b.n	80137e4 <__ieee754_rem_pio2f+0x20c>
 8013818:	3f490fd8 	.word	0x3f490fd8
 801381c:	4016cbe3 	.word	0x4016cbe3
 8013820:	3fc90f80 	.word	0x3fc90f80
 8013824:	3fc90fd0 	.word	0x3fc90fd0
 8013828:	37354443 	.word	0x37354443
 801382c:	37354400 	.word	0x37354400
 8013830:	2e85a308 	.word	0x2e85a308
 8013834:	43490f80 	.word	0x43490f80
 8013838:	3f22f984 	.word	0x3f22f984
 801383c:	08014908 	.word	0x08014908
 8013840:	2e85a300 	.word	0x2e85a300
 8013844:	248d3132 	.word	0x248d3132
 8013848:	43800000 	.word	0x43800000
 801384c:	08014988 	.word	0x08014988

08013850 <__kernel_rem_pio2f>:
 8013850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013854:	ed2d 8b04 	vpush	{d8-d9}
 8013858:	b0d9      	sub	sp, #356	; 0x164
 801385a:	4688      	mov	r8, r1
 801385c:	9002      	str	r0, [sp, #8]
 801385e:	49bb      	ldr	r1, [pc, #748]	; (8013b4c <__kernel_rem_pio2f+0x2fc>)
 8013860:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013862:	9301      	str	r3, [sp, #4]
 8013864:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013868:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801386c:	1e59      	subs	r1, r3, #1
 801386e:	1d13      	adds	r3, r2, #4
 8013870:	db27      	blt.n	80138c2 <__kernel_rem_pio2f+0x72>
 8013872:	f1b2 0b03 	subs.w	fp, r2, #3
 8013876:	bf48      	it	mi
 8013878:	f102 0b04 	addmi.w	fp, r2, #4
 801387c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013880:	1c45      	adds	r5, r0, #1
 8013882:	00ec      	lsls	r4, r5, #3
 8013884:	1a47      	subs	r7, r0, r1
 8013886:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8013b5c <__kernel_rem_pio2f+0x30c>
 801388a:	9403      	str	r4, [sp, #12]
 801388c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013890:	eb0a 0c01 	add.w	ip, sl, r1
 8013894:	ae1c      	add	r6, sp, #112	; 0x70
 8013896:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801389a:	2400      	movs	r4, #0
 801389c:	4564      	cmp	r4, ip
 801389e:	dd12      	ble.n	80138c6 <__kernel_rem_pio2f+0x76>
 80138a0:	9b01      	ldr	r3, [sp, #4]
 80138a2:	ac1c      	add	r4, sp, #112	; 0x70
 80138a4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80138a8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80138ac:	f04f 0c00 	mov.w	ip, #0
 80138b0:	45d4      	cmp	ip, sl
 80138b2:	dc27      	bgt.n	8013904 <__kernel_rem_pio2f+0xb4>
 80138b4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80138b8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013b5c <__kernel_rem_pio2f+0x30c>
 80138bc:	4627      	mov	r7, r4
 80138be:	2600      	movs	r6, #0
 80138c0:	e016      	b.n	80138f0 <__kernel_rem_pio2f+0xa0>
 80138c2:	2000      	movs	r0, #0
 80138c4:	e7dc      	b.n	8013880 <__kernel_rem_pio2f+0x30>
 80138c6:	42e7      	cmn	r7, r4
 80138c8:	bf5d      	ittte	pl
 80138ca:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80138ce:	ee07 3a90 	vmovpl	s15, r3
 80138d2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80138d6:	eef0 7a47 	vmovmi.f32	s15, s14
 80138da:	ece6 7a01 	vstmia	r6!, {s15}
 80138de:	3401      	adds	r4, #1
 80138e0:	e7dc      	b.n	801389c <__kernel_rem_pio2f+0x4c>
 80138e2:	ecf9 6a01 	vldmia	r9!, {s13}
 80138e6:	ed97 7a00 	vldr	s14, [r7]
 80138ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80138ee:	3601      	adds	r6, #1
 80138f0:	428e      	cmp	r6, r1
 80138f2:	f1a7 0704 	sub.w	r7, r7, #4
 80138f6:	ddf4      	ble.n	80138e2 <__kernel_rem_pio2f+0x92>
 80138f8:	eceb 7a01 	vstmia	fp!, {s15}
 80138fc:	f10c 0c01 	add.w	ip, ip, #1
 8013900:	3404      	adds	r4, #4
 8013902:	e7d5      	b.n	80138b0 <__kernel_rem_pio2f+0x60>
 8013904:	ab08      	add	r3, sp, #32
 8013906:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801390a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8013b58 <__kernel_rem_pio2f+0x308>
 801390e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013b54 <__kernel_rem_pio2f+0x304>
 8013912:	9304      	str	r3, [sp, #16]
 8013914:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013918:	4656      	mov	r6, sl
 801391a:	00b3      	lsls	r3, r6, #2
 801391c:	9305      	str	r3, [sp, #20]
 801391e:	ab58      	add	r3, sp, #352	; 0x160
 8013920:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013924:	ac08      	add	r4, sp, #32
 8013926:	ab44      	add	r3, sp, #272	; 0x110
 8013928:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801392c:	46a4      	mov	ip, r4
 801392e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013932:	4637      	mov	r7, r6
 8013934:	2f00      	cmp	r7, #0
 8013936:	f1a0 0004 	sub.w	r0, r0, #4
 801393a:	dc4f      	bgt.n	80139dc <__kernel_rem_pio2f+0x18c>
 801393c:	4628      	mov	r0, r5
 801393e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013942:	f000 fb6b 	bl	801401c <scalbnf>
 8013946:	eeb0 8a40 	vmov.f32	s16, s0
 801394a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801394e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013952:	f000 fb21 	bl	8013f98 <floorf>
 8013956:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801395a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801395e:	2d00      	cmp	r5, #0
 8013960:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013964:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013968:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801396c:	ee17 9a90 	vmov	r9, s15
 8013970:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013974:	dd44      	ble.n	8013a00 <__kernel_rem_pio2f+0x1b0>
 8013976:	f106 3cff 	add.w	ip, r6, #4294967295
 801397a:	ab08      	add	r3, sp, #32
 801397c:	f1c5 0e08 	rsb	lr, r5, #8
 8013980:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013984:	fa47 f00e 	asr.w	r0, r7, lr
 8013988:	4481      	add	r9, r0
 801398a:	fa00 f00e 	lsl.w	r0, r0, lr
 801398e:	1a3f      	subs	r7, r7, r0
 8013990:	f1c5 0007 	rsb	r0, r5, #7
 8013994:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8013998:	4107      	asrs	r7, r0
 801399a:	2f00      	cmp	r7, #0
 801399c:	dd3f      	ble.n	8013a1e <__kernel_rem_pio2f+0x1ce>
 801399e:	f04f 0e00 	mov.w	lr, #0
 80139a2:	f109 0901 	add.w	r9, r9, #1
 80139a6:	4673      	mov	r3, lr
 80139a8:	4576      	cmp	r6, lr
 80139aa:	dc6b      	bgt.n	8013a84 <__kernel_rem_pio2f+0x234>
 80139ac:	2d00      	cmp	r5, #0
 80139ae:	dd04      	ble.n	80139ba <__kernel_rem_pio2f+0x16a>
 80139b0:	2d01      	cmp	r5, #1
 80139b2:	d078      	beq.n	8013aa6 <__kernel_rem_pio2f+0x256>
 80139b4:	2d02      	cmp	r5, #2
 80139b6:	f000 8081 	beq.w	8013abc <__kernel_rem_pio2f+0x26c>
 80139ba:	2f02      	cmp	r7, #2
 80139bc:	d12f      	bne.n	8013a1e <__kernel_rem_pio2f+0x1ce>
 80139be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80139c2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80139c6:	b353      	cbz	r3, 8013a1e <__kernel_rem_pio2f+0x1ce>
 80139c8:	4628      	mov	r0, r5
 80139ca:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80139ce:	f000 fb25 	bl	801401c <scalbnf>
 80139d2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80139d6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80139da:	e020      	b.n	8013a1e <__kernel_rem_pio2f+0x1ce>
 80139dc:	ee60 7a28 	vmul.f32	s15, s0, s17
 80139e0:	3f01      	subs	r7, #1
 80139e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139ea:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80139ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80139f2:	ecac 0a01 	vstmia	ip!, {s0}
 80139f6:	ed90 0a00 	vldr	s0, [r0]
 80139fa:	ee37 0a80 	vadd.f32	s0, s15, s0
 80139fe:	e799      	b.n	8013934 <__kernel_rem_pio2f+0xe4>
 8013a00:	d105      	bne.n	8013a0e <__kernel_rem_pio2f+0x1be>
 8013a02:	1e70      	subs	r0, r6, #1
 8013a04:	ab08      	add	r3, sp, #32
 8013a06:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013a0a:	11ff      	asrs	r7, r7, #7
 8013a0c:	e7c5      	b.n	801399a <__kernel_rem_pio2f+0x14a>
 8013a0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013a12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a1a:	da31      	bge.n	8013a80 <__kernel_rem_pio2f+0x230>
 8013a1c:	2700      	movs	r7, #0
 8013a1e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a26:	f040 809b 	bne.w	8013b60 <__kernel_rem_pio2f+0x310>
 8013a2a:	1e74      	subs	r4, r6, #1
 8013a2c:	46a4      	mov	ip, r4
 8013a2e:	2000      	movs	r0, #0
 8013a30:	45d4      	cmp	ip, sl
 8013a32:	da4a      	bge.n	8013aca <__kernel_rem_pio2f+0x27a>
 8013a34:	2800      	cmp	r0, #0
 8013a36:	d07a      	beq.n	8013b2e <__kernel_rem_pio2f+0x2de>
 8013a38:	ab08      	add	r3, sp, #32
 8013a3a:	3d08      	subs	r5, #8
 8013a3c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	f000 8081 	beq.w	8013b48 <__kernel_rem_pio2f+0x2f8>
 8013a46:	4628      	mov	r0, r5
 8013a48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013a4c:	00a5      	lsls	r5, r4, #2
 8013a4e:	f000 fae5 	bl	801401c <scalbnf>
 8013a52:	aa44      	add	r2, sp, #272	; 0x110
 8013a54:	1d2b      	adds	r3, r5, #4
 8013a56:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013b58 <__kernel_rem_pio2f+0x308>
 8013a5a:	18d1      	adds	r1, r2, r3
 8013a5c:	4622      	mov	r2, r4
 8013a5e:	2a00      	cmp	r2, #0
 8013a60:	f280 80ae 	bge.w	8013bc0 <__kernel_rem_pio2f+0x370>
 8013a64:	4622      	mov	r2, r4
 8013a66:	2a00      	cmp	r2, #0
 8013a68:	f2c0 80cc 	blt.w	8013c04 <__kernel_rem_pio2f+0x3b4>
 8013a6c:	a944      	add	r1, sp, #272	; 0x110
 8013a6e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013a72:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013b50 <__kernel_rem_pio2f+0x300>
 8013a76:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013b5c <__kernel_rem_pio2f+0x30c>
 8013a7a:	2000      	movs	r0, #0
 8013a7c:	1aa1      	subs	r1, r4, r2
 8013a7e:	e0b6      	b.n	8013bee <__kernel_rem_pio2f+0x39e>
 8013a80:	2702      	movs	r7, #2
 8013a82:	e78c      	b.n	801399e <__kernel_rem_pio2f+0x14e>
 8013a84:	6820      	ldr	r0, [r4, #0]
 8013a86:	b94b      	cbnz	r3, 8013a9c <__kernel_rem_pio2f+0x24c>
 8013a88:	b118      	cbz	r0, 8013a92 <__kernel_rem_pio2f+0x242>
 8013a8a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013a8e:	6020      	str	r0, [r4, #0]
 8013a90:	2001      	movs	r0, #1
 8013a92:	f10e 0e01 	add.w	lr, lr, #1
 8013a96:	3404      	adds	r4, #4
 8013a98:	4603      	mov	r3, r0
 8013a9a:	e785      	b.n	80139a8 <__kernel_rem_pio2f+0x158>
 8013a9c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013aa0:	6020      	str	r0, [r4, #0]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	e7f5      	b.n	8013a92 <__kernel_rem_pio2f+0x242>
 8013aa6:	1e74      	subs	r4, r6, #1
 8013aa8:	a808      	add	r0, sp, #32
 8013aaa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013aae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013ab2:	f10d 0c20 	add.w	ip, sp, #32
 8013ab6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8013aba:	e77e      	b.n	80139ba <__kernel_rem_pio2f+0x16a>
 8013abc:	1e74      	subs	r4, r6, #1
 8013abe:	a808      	add	r0, sp, #32
 8013ac0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013ac4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8013ac8:	e7f3      	b.n	8013ab2 <__kernel_rem_pio2f+0x262>
 8013aca:	ab08      	add	r3, sp, #32
 8013acc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013ad0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013ad4:	4318      	orrs	r0, r3
 8013ad6:	e7ab      	b.n	8013a30 <__kernel_rem_pio2f+0x1e0>
 8013ad8:	f10c 0c01 	add.w	ip, ip, #1
 8013adc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013ae0:	2c00      	cmp	r4, #0
 8013ae2:	d0f9      	beq.n	8013ad8 <__kernel_rem_pio2f+0x288>
 8013ae4:	9b05      	ldr	r3, [sp, #20]
 8013ae6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013aea:	eb0d 0003 	add.w	r0, sp, r3
 8013aee:	9b01      	ldr	r3, [sp, #4]
 8013af0:	18f4      	adds	r4, r6, r3
 8013af2:	ab1c      	add	r3, sp, #112	; 0x70
 8013af4:	1c77      	adds	r7, r6, #1
 8013af6:	384c      	subs	r0, #76	; 0x4c
 8013af8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013afc:	4466      	add	r6, ip
 8013afe:	42be      	cmp	r6, r7
 8013b00:	f6ff af0b 	blt.w	801391a <__kernel_rem_pio2f+0xca>
 8013b04:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013b08:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013b0c:	ee07 3a90 	vmov	s15, r3
 8013b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b14:	f04f 0c00 	mov.w	ip, #0
 8013b18:	ece4 7a01 	vstmia	r4!, {s15}
 8013b1c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013b5c <__kernel_rem_pio2f+0x30c>
 8013b20:	46a1      	mov	r9, r4
 8013b22:	458c      	cmp	ip, r1
 8013b24:	dd07      	ble.n	8013b36 <__kernel_rem_pio2f+0x2e6>
 8013b26:	ece0 7a01 	vstmia	r0!, {s15}
 8013b2a:	3701      	adds	r7, #1
 8013b2c:	e7e7      	b.n	8013afe <__kernel_rem_pio2f+0x2ae>
 8013b2e:	9804      	ldr	r0, [sp, #16]
 8013b30:	f04f 0c01 	mov.w	ip, #1
 8013b34:	e7d2      	b.n	8013adc <__kernel_rem_pio2f+0x28c>
 8013b36:	ecfe 6a01 	vldmia	lr!, {s13}
 8013b3a:	ed39 7a01 	vldmdb	r9!, {s14}
 8013b3e:	f10c 0c01 	add.w	ip, ip, #1
 8013b42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b46:	e7ec      	b.n	8013b22 <__kernel_rem_pio2f+0x2d2>
 8013b48:	3c01      	subs	r4, #1
 8013b4a:	e775      	b.n	8013a38 <__kernel_rem_pio2f+0x1e8>
 8013b4c:	08014ccc 	.word	0x08014ccc
 8013b50:	08014ca0 	.word	0x08014ca0
 8013b54:	43800000 	.word	0x43800000
 8013b58:	3b800000 	.word	0x3b800000
 8013b5c:	00000000 	.word	0x00000000
 8013b60:	9b03      	ldr	r3, [sp, #12]
 8013b62:	eeb0 0a48 	vmov.f32	s0, s16
 8013b66:	1a98      	subs	r0, r3, r2
 8013b68:	f000 fa58 	bl	801401c <scalbnf>
 8013b6c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013b54 <__kernel_rem_pio2f+0x304>
 8013b70:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b78:	db19      	blt.n	8013bae <__kernel_rem_pio2f+0x35e>
 8013b7a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013b58 <__kernel_rem_pio2f+0x308>
 8013b7e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013b82:	aa08      	add	r2, sp, #32
 8013b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b88:	1c74      	adds	r4, r6, #1
 8013b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b8e:	3508      	adds	r5, #8
 8013b90:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013b9c:	ee10 3a10 	vmov	r3, s0
 8013ba0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013ba4:	ee17 3a90 	vmov	r3, s15
 8013ba8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013bac:	e74b      	b.n	8013a46 <__kernel_rem_pio2f+0x1f6>
 8013bae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013bb2:	aa08      	add	r2, sp, #32
 8013bb4:	ee10 3a10 	vmov	r3, s0
 8013bb8:	4634      	mov	r4, r6
 8013bba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013bbe:	e742      	b.n	8013a46 <__kernel_rem_pio2f+0x1f6>
 8013bc0:	a808      	add	r0, sp, #32
 8013bc2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013bc6:	9001      	str	r0, [sp, #4]
 8013bc8:	ee07 0a90 	vmov	s15, r0
 8013bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bd0:	3a01      	subs	r2, #1
 8013bd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013bd6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013bda:	ed61 7a01 	vstmdb	r1!, {s15}
 8013bde:	e73e      	b.n	8013a5e <__kernel_rem_pio2f+0x20e>
 8013be0:	ecfc 6a01 	vldmia	ip!, {s13}
 8013be4:	ecb6 7a01 	vldmia	r6!, {s14}
 8013be8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013bec:	3001      	adds	r0, #1
 8013bee:	4550      	cmp	r0, sl
 8013bf0:	dc01      	bgt.n	8013bf6 <__kernel_rem_pio2f+0x3a6>
 8013bf2:	4288      	cmp	r0, r1
 8013bf4:	ddf4      	ble.n	8013be0 <__kernel_rem_pio2f+0x390>
 8013bf6:	a858      	add	r0, sp, #352	; 0x160
 8013bf8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013bfc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013c00:	3a01      	subs	r2, #1
 8013c02:	e730      	b.n	8013a66 <__kernel_rem_pio2f+0x216>
 8013c04:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013c06:	2a02      	cmp	r2, #2
 8013c08:	dc09      	bgt.n	8013c1e <__kernel_rem_pio2f+0x3ce>
 8013c0a:	2a00      	cmp	r2, #0
 8013c0c:	dc2a      	bgt.n	8013c64 <__kernel_rem_pio2f+0x414>
 8013c0e:	d043      	beq.n	8013c98 <__kernel_rem_pio2f+0x448>
 8013c10:	f009 0007 	and.w	r0, r9, #7
 8013c14:	b059      	add	sp, #356	; 0x164
 8013c16:	ecbd 8b04 	vpop	{d8-d9}
 8013c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c1e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013c20:	2b03      	cmp	r3, #3
 8013c22:	d1f5      	bne.n	8013c10 <__kernel_rem_pio2f+0x3c0>
 8013c24:	ab30      	add	r3, sp, #192	; 0xc0
 8013c26:	442b      	add	r3, r5
 8013c28:	461a      	mov	r2, r3
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	f1a1 0104 	sub.w	r1, r1, #4
 8013c34:	dc51      	bgt.n	8013cda <__kernel_rem_pio2f+0x48a>
 8013c36:	4621      	mov	r1, r4
 8013c38:	2901      	cmp	r1, #1
 8013c3a:	f1a2 0204 	sub.w	r2, r2, #4
 8013c3e:	dc5c      	bgt.n	8013cfa <__kernel_rem_pio2f+0x4aa>
 8013c40:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013b5c <__kernel_rem_pio2f+0x30c>
 8013c44:	3304      	adds	r3, #4
 8013c46:	2c01      	cmp	r4, #1
 8013c48:	dc67      	bgt.n	8013d1a <__kernel_rem_pio2f+0x4ca>
 8013c4a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013c4e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013c52:	2f00      	cmp	r7, #0
 8013c54:	d167      	bne.n	8013d26 <__kernel_rem_pio2f+0x4d6>
 8013c56:	edc8 6a00 	vstr	s13, [r8]
 8013c5a:	ed88 7a01 	vstr	s14, [r8, #4]
 8013c5e:	edc8 7a02 	vstr	s15, [r8, #8]
 8013c62:	e7d5      	b.n	8013c10 <__kernel_rem_pio2f+0x3c0>
 8013c64:	aa30      	add	r2, sp, #192	; 0xc0
 8013c66:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8013b5c <__kernel_rem_pio2f+0x30c>
 8013c6a:	4413      	add	r3, r2
 8013c6c:	4622      	mov	r2, r4
 8013c6e:	2a00      	cmp	r2, #0
 8013c70:	da24      	bge.n	8013cbc <__kernel_rem_pio2f+0x46c>
 8013c72:	b34f      	cbz	r7, 8013cc8 <__kernel_rem_pio2f+0x478>
 8013c74:	eef1 7a47 	vneg.f32	s15, s14
 8013c78:	edc8 7a00 	vstr	s15, [r8]
 8013c7c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013c80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c84:	aa31      	add	r2, sp, #196	; 0xc4
 8013c86:	2301      	movs	r3, #1
 8013c88:	429c      	cmp	r4, r3
 8013c8a:	da20      	bge.n	8013cce <__kernel_rem_pio2f+0x47e>
 8013c8c:	b10f      	cbz	r7, 8013c92 <__kernel_rem_pio2f+0x442>
 8013c8e:	eef1 7a67 	vneg.f32	s15, s15
 8013c92:	edc8 7a01 	vstr	s15, [r8, #4]
 8013c96:	e7bb      	b.n	8013c10 <__kernel_rem_pio2f+0x3c0>
 8013c98:	aa30      	add	r2, sp, #192	; 0xc0
 8013c9a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8013b5c <__kernel_rem_pio2f+0x30c>
 8013c9e:	4413      	add	r3, r2
 8013ca0:	2c00      	cmp	r4, #0
 8013ca2:	da05      	bge.n	8013cb0 <__kernel_rem_pio2f+0x460>
 8013ca4:	b10f      	cbz	r7, 8013caa <__kernel_rem_pio2f+0x45a>
 8013ca6:	eef1 7a67 	vneg.f32	s15, s15
 8013caa:	edc8 7a00 	vstr	s15, [r8]
 8013cae:	e7af      	b.n	8013c10 <__kernel_rem_pio2f+0x3c0>
 8013cb0:	ed33 7a01 	vldmdb	r3!, {s14}
 8013cb4:	3c01      	subs	r4, #1
 8013cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cba:	e7f1      	b.n	8013ca0 <__kernel_rem_pio2f+0x450>
 8013cbc:	ed73 7a01 	vldmdb	r3!, {s15}
 8013cc0:	3a01      	subs	r2, #1
 8013cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cc6:	e7d2      	b.n	8013c6e <__kernel_rem_pio2f+0x41e>
 8013cc8:	eef0 7a47 	vmov.f32	s15, s14
 8013ccc:	e7d4      	b.n	8013c78 <__kernel_rem_pio2f+0x428>
 8013cce:	ecb2 7a01 	vldmia	r2!, {s14}
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cd8:	e7d6      	b.n	8013c88 <__kernel_rem_pio2f+0x438>
 8013cda:	edd1 7a00 	vldr	s15, [r1]
 8013cde:	edd1 6a01 	vldr	s13, [r1, #4]
 8013ce2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013ce6:	3801      	subs	r0, #1
 8013ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cec:	ed81 7a00 	vstr	s14, [r1]
 8013cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cf4:	edc1 7a01 	vstr	s15, [r1, #4]
 8013cf8:	e799      	b.n	8013c2e <__kernel_rem_pio2f+0x3de>
 8013cfa:	edd2 7a00 	vldr	s15, [r2]
 8013cfe:	edd2 6a01 	vldr	s13, [r2, #4]
 8013d02:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013d06:	3901      	subs	r1, #1
 8013d08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d0c:	ed82 7a00 	vstr	s14, [r2]
 8013d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d14:	edc2 7a01 	vstr	s15, [r2, #4]
 8013d18:	e78e      	b.n	8013c38 <__kernel_rem_pio2f+0x3e8>
 8013d1a:	ed33 7a01 	vldmdb	r3!, {s14}
 8013d1e:	3c01      	subs	r4, #1
 8013d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d24:	e78f      	b.n	8013c46 <__kernel_rem_pio2f+0x3f6>
 8013d26:	eef1 6a66 	vneg.f32	s13, s13
 8013d2a:	eeb1 7a47 	vneg.f32	s14, s14
 8013d2e:	edc8 6a00 	vstr	s13, [r8]
 8013d32:	ed88 7a01 	vstr	s14, [r8, #4]
 8013d36:	eef1 7a67 	vneg.f32	s15, s15
 8013d3a:	e790      	b.n	8013c5e <__kernel_rem_pio2f+0x40e>

08013d3c <__kernel_tanf>:
 8013d3c:	b508      	push	{r3, lr}
 8013d3e:	ee10 3a10 	vmov	r3, s0
 8013d42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013d46:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8013d4a:	eef0 7a40 	vmov.f32	s15, s0
 8013d4e:	da17      	bge.n	8013d80 <__kernel_tanf+0x44>
 8013d50:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013d54:	ee17 1a10 	vmov	r1, s14
 8013d58:	bb41      	cbnz	r1, 8013dac <__kernel_tanf+0x70>
 8013d5a:	1c43      	adds	r3, r0, #1
 8013d5c:	4313      	orrs	r3, r2
 8013d5e:	d108      	bne.n	8013d72 <__kernel_tanf+0x36>
 8013d60:	f000 f913 	bl	8013f8a <fabsf>
 8013d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8013d70:	bd08      	pop	{r3, pc}
 8013d72:	2801      	cmp	r0, #1
 8013d74:	d0fa      	beq.n	8013d6c <__kernel_tanf+0x30>
 8013d76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013d7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013d7e:	e7f5      	b.n	8013d6c <__kernel_tanf+0x30>
 8013d80:	494c      	ldr	r1, [pc, #304]	; (8013eb4 <__kernel_tanf+0x178>)
 8013d82:	428a      	cmp	r2, r1
 8013d84:	db12      	blt.n	8013dac <__kernel_tanf+0x70>
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	bfb8      	it	lt
 8013d8a:	eef1 7a40 	vneglt.f32	s15, s0
 8013d8e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8013eb8 <__kernel_tanf+0x17c>
 8013d92:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013d96:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8013ebc <__kernel_tanf+0x180>
 8013d9a:	bfb8      	it	lt
 8013d9c:	eef1 0a60 	vneglt.f32	s1, s1
 8013da0:	ee70 0a60 	vsub.f32	s1, s0, s1
 8013da4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8013da8:	eddf 0a45 	vldr	s1, [pc, #276]	; 8013ec0 <__kernel_tanf+0x184>
 8013dac:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013ec4 <__kernel_tanf+0x188>
 8013db0:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8013ec8 <__kernel_tanf+0x18c>
 8013db4:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8013ecc <__kernel_tanf+0x190>
 8013db8:	493e      	ldr	r1, [pc, #248]	; (8013eb4 <__kernel_tanf+0x178>)
 8013dba:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013dbe:	428a      	cmp	r2, r1
 8013dc0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013dc4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013dc8:	eddf 5a41 	vldr	s11, [pc, #260]	; 8013ed0 <__kernel_tanf+0x194>
 8013dcc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013dd0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8013ed4 <__kernel_tanf+0x198>
 8013dd4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013dd8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013ed8 <__kernel_tanf+0x19c>
 8013ddc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013de0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8013edc <__kernel_tanf+0x1a0>
 8013de4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013de8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8013ee0 <__kernel_tanf+0x1a4>
 8013dec:	eee7 5a05 	vfma.f32	s11, s14, s10
 8013df0:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013ee4 <__kernel_tanf+0x1a8>
 8013df4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013df8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8013ee8 <__kernel_tanf+0x1ac>
 8013dfc:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013e00:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8013eec <__kernel_tanf+0x1b0>
 8013e04:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013e08:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013ef0 <__kernel_tanf+0x1b4>
 8013e0c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013e10:	eeb0 7a46 	vmov.f32	s14, s12
 8013e14:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013e18:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8013e1c:	eeb0 6a60 	vmov.f32	s12, s1
 8013e20:	eea7 6a05 	vfma.f32	s12, s14, s10
 8013e24:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013ef4 <__kernel_tanf+0x1b8>
 8013e28:	eee6 0a26 	vfma.f32	s1, s12, s13
 8013e2c:	eee5 0a07 	vfma.f32	s1, s10, s14
 8013e30:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013e34:	db1d      	blt.n	8013e72 <__kernel_tanf+0x136>
 8013e36:	ee06 0a90 	vmov	s13, r0
 8013e3a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8013e3e:	ee27 6a07 	vmul.f32	s12, s14, s14
 8013e42:	ee37 7a00 	vadd.f32	s14, s14, s0
 8013e46:	179b      	asrs	r3, r3, #30
 8013e48:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8013e4c:	f003 0302 	and.w	r3, r3, #2
 8013e50:	f1c3 0301 	rsb	r3, r3, #1
 8013e54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013e58:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8013e5c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013e60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013e64:	ee07 3a90 	vmov	s15, r3
 8013e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e6c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013e70:	e77c      	b.n	8013d6c <__kernel_tanf+0x30>
 8013e72:	2801      	cmp	r0, #1
 8013e74:	d01b      	beq.n	8013eae <__kernel_tanf+0x172>
 8013e76:	4b20      	ldr	r3, [pc, #128]	; (8013ef8 <__kernel_tanf+0x1bc>)
 8013e78:	ee17 2a10 	vmov	r2, s14
 8013e7c:	401a      	ands	r2, r3
 8013e7e:	ee06 2a10 	vmov	s12, r2
 8013e82:	ee76 7a67 	vsub.f32	s15, s12, s15
 8013e86:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013e8a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013e8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e96:	ee16 2a90 	vmov	r2, s13
 8013e9a:	4013      	ands	r3, r2
 8013e9c:	ee07 3a90 	vmov	s15, r3
 8013ea0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013ea4:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8013ea8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013eac:	e75e      	b.n	8013d6c <__kernel_tanf+0x30>
 8013eae:	eef0 7a47 	vmov.f32	s15, s14
 8013eb2:	e75b      	b.n	8013d6c <__kernel_tanf+0x30>
 8013eb4:	3f2ca140 	.word	0x3f2ca140
 8013eb8:	3f490fda 	.word	0x3f490fda
 8013ebc:	33222168 	.word	0x33222168
 8013ec0:	00000000 	.word	0x00000000
 8013ec4:	b79bae5f 	.word	0xb79bae5f
 8013ec8:	38a3f445 	.word	0x38a3f445
 8013ecc:	37d95384 	.word	0x37d95384
 8013ed0:	3a1a26c8 	.word	0x3a1a26c8
 8013ed4:	3b6b6916 	.word	0x3b6b6916
 8013ed8:	3cb327a4 	.word	0x3cb327a4
 8013edc:	3e088889 	.word	0x3e088889
 8013ee0:	3895c07a 	.word	0x3895c07a
 8013ee4:	398137b9 	.word	0x398137b9
 8013ee8:	3abede48 	.word	0x3abede48
 8013eec:	3c11371f 	.word	0x3c11371f
 8013ef0:	3d5d0dd1 	.word	0x3d5d0dd1
 8013ef4:	3eaaaaab 	.word	0x3eaaaaab
 8013ef8:	fffff000 	.word	0xfffff000

08013efc <with_errnof>:
 8013efc:	b513      	push	{r0, r1, r4, lr}
 8013efe:	4604      	mov	r4, r0
 8013f00:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013f04:	f7fa f984 	bl	800e210 <__errno>
 8013f08:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013f0c:	6004      	str	r4, [r0, #0]
 8013f0e:	b002      	add	sp, #8
 8013f10:	bd10      	pop	{r4, pc}

08013f12 <xflowf>:
 8013f12:	b130      	cbz	r0, 8013f22 <xflowf+0x10>
 8013f14:	eef1 7a40 	vneg.f32	s15, s0
 8013f18:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013f1c:	2022      	movs	r0, #34	; 0x22
 8013f1e:	f7ff bfed 	b.w	8013efc <with_errnof>
 8013f22:	eef0 7a40 	vmov.f32	s15, s0
 8013f26:	e7f7      	b.n	8013f18 <xflowf+0x6>

08013f28 <__math_uflowf>:
 8013f28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013f30 <__math_uflowf+0x8>
 8013f2c:	f7ff bff1 	b.w	8013f12 <xflowf>
 8013f30:	10000000 	.word	0x10000000

08013f34 <__math_may_uflowf>:
 8013f34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013f3c <__math_may_uflowf+0x8>
 8013f38:	f7ff bfeb 	b.w	8013f12 <xflowf>
 8013f3c:	1a200000 	.word	0x1a200000

08013f40 <__math_oflowf>:
 8013f40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013f48 <__math_oflowf+0x8>
 8013f44:	f7ff bfe5 	b.w	8013f12 <xflowf>
 8013f48:	70000000 	.word	0x70000000

08013f4c <__math_divzerof>:
 8013f4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013f50:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013f54:	2800      	cmp	r0, #0
 8013f56:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8013f5a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013f68 <__math_divzerof+0x1c>
 8013f5e:	2022      	movs	r0, #34	; 0x22
 8013f60:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013f64:	f7ff bfca 	b.w	8013efc <with_errnof>
 8013f68:	00000000 	.word	0x00000000

08013f6c <__math_invalidf>:
 8013f6c:	eef0 7a40 	vmov.f32	s15, s0
 8013f70:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013f74:	eef4 7a67 	vcmp.f32	s15, s15
 8013f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f7c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8013f80:	d602      	bvs.n	8013f88 <__math_invalidf+0x1c>
 8013f82:	2021      	movs	r0, #33	; 0x21
 8013f84:	f7ff bfba 	b.w	8013efc <with_errnof>
 8013f88:	4770      	bx	lr

08013f8a <fabsf>:
 8013f8a:	ee10 3a10 	vmov	r3, s0
 8013f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f92:	ee00 3a10 	vmov	s0, r3
 8013f96:	4770      	bx	lr

08013f98 <floorf>:
 8013f98:	ee10 3a10 	vmov	r3, s0
 8013f9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013fa0:	3a7f      	subs	r2, #127	; 0x7f
 8013fa2:	2a16      	cmp	r2, #22
 8013fa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013fa8:	dc2a      	bgt.n	8014000 <floorf+0x68>
 8013faa:	2a00      	cmp	r2, #0
 8013fac:	da11      	bge.n	8013fd2 <floorf+0x3a>
 8013fae:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014010 <floorf+0x78>
 8013fb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013fb6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fbe:	dd05      	ble.n	8013fcc <floorf+0x34>
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	da23      	bge.n	801400c <floorf+0x74>
 8013fc4:	4a13      	ldr	r2, [pc, #76]	; (8014014 <floorf+0x7c>)
 8013fc6:	2900      	cmp	r1, #0
 8013fc8:	bf18      	it	ne
 8013fca:	4613      	movne	r3, r2
 8013fcc:	ee00 3a10 	vmov	s0, r3
 8013fd0:	4770      	bx	lr
 8013fd2:	4911      	ldr	r1, [pc, #68]	; (8014018 <floorf+0x80>)
 8013fd4:	4111      	asrs	r1, r2
 8013fd6:	420b      	tst	r3, r1
 8013fd8:	d0fa      	beq.n	8013fd0 <floorf+0x38>
 8013fda:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014010 <floorf+0x78>
 8013fde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013fe2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fea:	ddef      	ble.n	8013fcc <floorf+0x34>
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	bfbe      	ittt	lt
 8013ff0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8013ff4:	fa40 f202 	asrlt.w	r2, r0, r2
 8013ff8:	189b      	addlt	r3, r3, r2
 8013ffa:	ea23 0301 	bic.w	r3, r3, r1
 8013ffe:	e7e5      	b.n	8013fcc <floorf+0x34>
 8014000:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014004:	d3e4      	bcc.n	8013fd0 <floorf+0x38>
 8014006:	ee30 0a00 	vadd.f32	s0, s0, s0
 801400a:	4770      	bx	lr
 801400c:	2300      	movs	r3, #0
 801400e:	e7dd      	b.n	8013fcc <floorf+0x34>
 8014010:	7149f2ca 	.word	0x7149f2ca
 8014014:	bf800000 	.word	0xbf800000
 8014018:	007fffff 	.word	0x007fffff

0801401c <scalbnf>:
 801401c:	ee10 3a10 	vmov	r3, s0
 8014020:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014024:	d024      	beq.n	8014070 <scalbnf+0x54>
 8014026:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801402a:	d302      	bcc.n	8014032 <scalbnf+0x16>
 801402c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014030:	4770      	bx	lr
 8014032:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014036:	d121      	bne.n	801407c <scalbnf+0x60>
 8014038:	4b29      	ldr	r3, [pc, #164]	; (80140e0 <scalbnf+0xc4>)
 801403a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80140e4 <scalbnf+0xc8>
 801403e:	4298      	cmp	r0, r3
 8014040:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014044:	db15      	blt.n	8014072 <scalbnf+0x56>
 8014046:	ee10 3a10 	vmov	r3, s0
 801404a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801404e:	3a19      	subs	r2, #25
 8014050:	4402      	add	r2, r0
 8014052:	2afe      	cmp	r2, #254	; 0xfe
 8014054:	dd14      	ble.n	8014080 <scalbnf+0x64>
 8014056:	eddf 7a24 	vldr	s15, [pc, #144]	; 80140e8 <scalbnf+0xcc>
 801405a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80140ec <scalbnf+0xd0>
 801405e:	ee10 3a10 	vmov	r3, s0
 8014062:	eeb0 7a67 	vmov.f32	s14, s15
 8014066:	2b00      	cmp	r3, #0
 8014068:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801406c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014070:	4770      	bx	lr
 8014072:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80140f0 <scalbnf+0xd4>
 8014076:	ee20 0a27 	vmul.f32	s0, s0, s15
 801407a:	4770      	bx	lr
 801407c:	0dd2      	lsrs	r2, r2, #23
 801407e:	e7e7      	b.n	8014050 <scalbnf+0x34>
 8014080:	2a00      	cmp	r2, #0
 8014082:	dd06      	ble.n	8014092 <scalbnf+0x76>
 8014084:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014088:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801408c:	ee00 3a10 	vmov	s0, r3
 8014090:	4770      	bx	lr
 8014092:	f112 0f16 	cmn.w	r2, #22
 8014096:	da19      	bge.n	80140cc <scalbnf+0xb0>
 8014098:	f24c 3350 	movw	r3, #50000	; 0xc350
 801409c:	4298      	cmp	r0, r3
 801409e:	ee10 3a10 	vmov	r3, s0
 80140a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140a6:	dd09      	ble.n	80140bc <scalbnf+0xa0>
 80140a8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80140e8 <scalbnf+0xcc>
 80140ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80140ec <scalbnf+0xd0>
 80140b0:	eef0 7a40 	vmov.f32	s15, s0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	fe00 0a07 	vseleq.f32	s0, s0, s14
 80140ba:	e7dc      	b.n	8014076 <scalbnf+0x5a>
 80140bc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80140f0 <scalbnf+0xd4>
 80140c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80140f4 <scalbnf+0xd8>
 80140c4:	eef0 7a40 	vmov.f32	s15, s0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	e7f4      	b.n	80140b6 <scalbnf+0x9a>
 80140cc:	3219      	adds	r2, #25
 80140ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80140d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80140d6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80140f8 <scalbnf+0xdc>
 80140da:	ee07 3a10 	vmov	s14, r3
 80140de:	e7c5      	b.n	801406c <scalbnf+0x50>
 80140e0:	ffff3cb0 	.word	0xffff3cb0
 80140e4:	4c000000 	.word	0x4c000000
 80140e8:	7149f2ca 	.word	0x7149f2ca
 80140ec:	f149f2ca 	.word	0xf149f2ca
 80140f0:	0da24260 	.word	0x0da24260
 80140f4:	8da24260 	.word	0x8da24260
 80140f8:	33000000 	.word	0x33000000

080140fc <_init>:
 80140fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140fe:	bf00      	nop
 8014100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014102:	bc08      	pop	{r3}
 8014104:	469e      	mov	lr, r3
 8014106:	4770      	bx	lr

08014108 <_fini>:
 8014108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801410a:	bf00      	nop
 801410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801410e:	bc08      	pop	{r3}
 8014110:	469e      	mov	lr, r3
 8014112:	4770      	bx	lr
