
DigiMix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .buffers      00012200  30000000  30000000  00030000  2**5
                  ALLOC
  1 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d4a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004c4  0800d744  0800d744  0001d744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800dc08  0800dc08  0002007c  2**0
                  CONTENTS
  5 .ARM          00000008  0800dc08  0800dc08  0001dc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800dc10  0800dc10  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800dc10  0800dc10  0001dc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800dc14  0800dc14  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000007c  24000000  0800dc18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004bfc  2400007c  0800dc94  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24004c78  0800dc94  00024c78  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024659  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000423c  00000000  00000000  00044703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  00048940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019b8  00000000  00000000  0004a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c3c3  00000000  00000000  0004be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000222c3  00000000  00000000  000881fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00190575  00000000  00000000  000aa4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0023aa33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078d4  00000000  00000000  0023aa84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d72c 	.word	0x0800d72c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800d72c 	.word	0x0800d72c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <IFX_PeakingFilter_Init>:


#include "IFX_PeakingFilter.h"

// Initialize
void IFX_PeakingFilter_Init(IFX_PeakingFilter *filt, float sampleRate_Hz) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	ed87 0a00 	vstr	s0, [r7]

	// Sample time
	filt->sampleTime_s = 1.0f / sampleRate_Hz;
 80007cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007d0:	ed97 7a00 	vldr	s14, [r7]
 80007d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	edc3 7a00 	vstr	s15, [r3]

	// Clear mem
	for(uint8_t n = 0; n < 3; n++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e012      	b.n	800080a <IFX_PeakingFilter_Init+0x4a>
		filt->x[n] = 0.0f;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	3304      	adds	r3, #4
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	3304      	adds	r3, #4
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < 3; n++) {
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	3301      	adds	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d9e9      	bls.n	80007e4 <IFX_PeakingFilter_Init+0x24>
	}

	// Calculate all-pass filter
	IFX_PeakingFilter_SetParameters(filt, 1.0f, 0.0f, 1.0f);
 8000810:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000814:	eddf 0a05 	vldr	s1, [pc, #20]	; 800082c <IFX_PeakingFilter_Init+0x6c>
 8000818:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 f807 	bl	8000830 <IFX_PeakingFilter_SetParameters>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	00000000 	.word	0x00000000

08000830 <IFX_PeakingFilter_SetParameters>:

// Compute filter coefficients. (boostCut_linear > 1.0f = boost | boostCut_linear < 1.0f = cut)
void IFX_PeakingFilter_SetParameters(IFX_PeakingFilter *filt, float centerFrequency_Hz, float bandwidth_Hz, float boostCut_linear) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	ed87 0a02 	vstr	s0, [r7, #8]
 800083c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000840:	ed87 1a00 	vstr	s2, [r7]

	// Convert Hz to rad/s, pre-warp cut off frequency, multiply by sampling time (wc*T = ...)
	float wcT = 2.0f * tanf(M_PI * centerFrequency_Hz * filt->sampleTime_s);
 8000844:	edd7 7a02 	vldr	s15, [r7, #8]
 8000848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80009a8 <IFX_PeakingFilter_SetParameters+0x178>
 8000850:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	edd3 7a00 	vldr	s15, [r3]
 800085a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800085e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000866:	eeb0 0a67 	vmov.f32	s0, s15
 800086a:	f00c f9e7 	bl	800cc3c <tanf>
 800086e:	eef0 7a40 	vmov.f32	s15, s0
 8000872:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000876:	edc7 7a05 	vstr	s15, [r7, #20]

	// Compute quality factor (Q = f(Center) / f(bandwidth))
	float Q = centerFrequency_Hz / bandwidth_Hz;
 800087a:	edd7 6a02 	vldr	s13, [r7, #8]
 800087e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000886:	edc7 7a04 	vstr	s15, [r7, #16]

	// Compute filter coefficients
	filt->a[0] = 4.0f + 2.0f * (boostCut_linear / Q) * wcT * wcT * wcT;
 800088a:	edd7 6a00 	vldr	s13, [r7]
 800088e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000896:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800089a:	edd7 7a05 	vldr	s15, [r7, #20]
 800089e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80008a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80008b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->a[1] = 2.0f * wcT * wcT - 8.0f;
 80008c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80008c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80008c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80008cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80008d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	edc3 7a08 	vstr	s15, [r3, #32]
	filt->a[2] = 4.0f - 2.0f * (boostCut_linear / Q) * wcT * wcT * wcT;
 80008de:	edd7 6a00 	vldr	s13, [r7]
 80008e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80008e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80008ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80008f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000906:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800090a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	filt->b[0] = 1.0f / (4.0f + 2.0f / Q * wcT + wcT * wcT);	// 1 / coefficient
 8000914:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000918:	edd7 7a04 	vldr	s15, [r7, #16]
 800091c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000920:	edd7 7a05 	vldr	s15, [r7, #20]
 8000924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000928:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800092c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000930:	edd7 7a05 	vldr	s15, [r7, #20]
 8000934:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800093c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	filt->b[1] = -(2.0f * wcT * wcT - 8.0f);					// -coefficient
 800094a:	edd7 7a05 	vldr	s15, [r7, #20]
 800094e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000952:	edd7 7a05 	vldr	s15, [r7, #20]
 8000956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800095e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000962:	eef1 7a67 	vneg.f32	s15, s15
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	filt->b[2] = -(4.0f - 2.0f / Q * wcT + wcT * wcT);			// -coefficient
 800096c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000970:	edd7 7a04 	vldr	s15, [r7, #16]
 8000974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000978:	edd7 7a05 	vldr	s15, [r7, #20]
 800097c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000980:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000988:	edd7 7a05 	vldr	s15, [r7, #20]
 800098c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000994:	eef1 7a67 	vneg.f32	s15, s15
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	54442d18 	.word	0x54442d18
 80009ac:	400921fb 	.word	0x400921fb

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009b6:	f000 fb89 	bl	80010cc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009ba:	4b6f      	ldr	r3, [pc, #444]	; (8000b78 <main+0x1c8>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d11b      	bne.n	80009fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009c6:	f3bf 8f4f 	dsb	sy
}
 80009ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009cc:	f3bf 8f6f 	isb	sy
}
 80009d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009d2:	4b69      	ldr	r3, [pc, #420]	; (8000b78 <main+0x1c8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009da:	f3bf 8f4f 	dsb	sy
}
 80009de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e0:	f3bf 8f6f 	isb	sy
}
 80009e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009e6:	4b64      	ldr	r3, [pc, #400]	; (8000b78 <main+0x1c8>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a63      	ldr	r2, [pc, #396]	; (8000b78 <main+0x1c8>)
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
}
 80009f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009f8:	f3bf 8f6f 	isb	sy
}
 80009fc:	e000      	b.n	8000a00 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a00:	4b5d      	ldr	r3, [pc, #372]	; (8000b78 <main+0x1c8>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d138      	bne.n	8000a7e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a0c:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <main+0x1c8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a14:	f3bf 8f4f 	dsb	sy
}
 8000a18:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a1a:	4b57      	ldr	r3, [pc, #348]	; (8000b78 <main+0x1c8>)
 8000a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a20:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	0b5b      	lsrs	r3, r3, #13
 8000a26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a2a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a34:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	015a      	lsls	r2, r3, #5
 8000a3a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a3e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a44:	494c      	ldr	r1, [pc, #304]	; (8000b78 <main+0x1c8>)
 8000a46:	4313      	orrs	r3, r2
 8000a48:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1ef      	bne.n	8000a36 <main+0x86>
    } while(sets-- != 0U);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	60fa      	str	r2, [r7, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1e5      	bne.n	8000a2c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a60:	f3bf 8f4f 	dsb	sy
}
 8000a64:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a66:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <main+0x1c8>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a43      	ldr	r2, [pc, #268]	; (8000b78 <main+0x1c8>)
 8000a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a72:	f3bf 8f4f 	dsb	sy
}
 8000a76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a78:	f3bf 8f6f 	isb	sy
}
 8000a7c:	e000      	b.n	8000a80 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a7e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a84:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000a86:	bf00      	nop
 8000a88:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <main+0x1cc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d004      	beq.n	8000a9e <main+0xee>
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	1e5a      	subs	r2, r3, #1
 8000a98:	617a      	str	r2, [r7, #20]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	dcf4      	bgt.n	8000a88 <main+0xd8>
  if ( timeout < 0 )
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da01      	bge.n	8000aa8 <main+0xf8>
  {
  Error_Handler();
 8000aa4:	f000 fb52 	bl	800114c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa8:	f000 fdde 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aac:	f000 f882 	bl	8000bb4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ab0:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <main+0x1cc>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <main+0x1cc>)
 8000ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <main+0x1cc>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f003 fa12 	bl	8003ef8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f003 fa28 	bl	8003f2c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ae2:	bf00      	nop
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <main+0x1cc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d104      	bne.n	8000afa <main+0x14a>
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	1e5a      	subs	r2, r3, #1
 8000af4:	617a      	str	r2, [r7, #20]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dcf4      	bgt.n	8000ae4 <main+0x134>
if ( timeout < 0 )
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	da01      	bge.n	8000b04 <main+0x154>
{
Error_Handler();
 8000b00:	f000 fb24 	bl	800114c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 f97e 	bl	8000e04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b08:	f000 f954 	bl	8000db4 <MX_DMA_Init>
  MX_I2S3_Init();
 8000b0c:	f000 f8d2 	bl	8000cb4 <MX_I2S3_Init>
  MX_USART3_UART_Init();
 8000b10:	f000 f904 	bl	8000d1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(dacData, 0, sizeof(dacData));
 8000b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4819      	ldr	r0, [pc, #100]	; (8000b80 <main+0x1d0>)
 8000b1c:	f00b fc0c 	bl	800c338 <memset>

  IFX_PeakingFilter_Init(&filt1, SAMPLE_RATE_HZ);
 8000b20:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000b84 <main+0x1d4>
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <main+0x1d8>)
 8000b26:	f7ff fe4b 	bl	80007c0 <IFX_PeakingFilter_Init>
  //  IFX_PeakingFilter_Init(&filt2, SAMPLE_RATE_HZ);
  //  IFX_PeakingFilter_Init(&filt3, SAMPLE_RATE_HZ);
  //  IFX_PeakingFilter_Init(&filt4, SAMPLE_RATE_HZ);
  //  IFX_PeakingFilter_Init(&filt5, SAMPLE_RATE_HZ);

  UART_Printf("Readyy!\r\n");
 8000b2a:	4818      	ldr	r0, [pc, #96]	; (8000b8c <main+0x1dc>)
 8000b2c:	f000 f9a2 	bl	8000e74 <UART_Printf>

  IFX_PeakingFilter_SetParameters(&filt1, 1000.0f, 10000.0f, 0.0f);
 8000b30:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8000b90 <main+0x1e0>
 8000b34:	eddf 0a17 	vldr	s1, [pc, #92]	; 8000b94 <main+0x1e4>
 8000b38:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000b98 <main+0x1e8>
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <main+0x1d8>)
 8000b3e:	f7ff fe77 	bl	8000830 <IFX_PeakingFilter_SetParameters>

  if (HAL_I2SEx_TransmitReceive_DMA(&hi2s3, (uint16_t *) dacData, (uint16_t *) adcData, BUFFER_SIZE) != HAL_OK) {
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <main+0x1ec>)
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <main+0x1d0>)
 8000b48:	4815      	ldr	r0, [pc, #84]	; (8000ba0 <main+0x1f0>)
 8000b4a:	f003 fb25 	bl	8004198 <HAL_I2SEx_TransmitReceive_DMA>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <main+0x1ae>
    UART_Printf("I2S Full-Duplex DMA initialization failed\n");
 8000b54:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <main+0x1f4>)
 8000b56:	f000 f98d 	bl	8000e74 <UART_Printf>
    Error_Handler();
 8000b5a:	f000 faf7 	bl	800114c <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b5e:	f008 fe61 	bl	8009824 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of filterTask */
  filterTaskHandle = osThreadNew(setFilterTask, NULL, &filterTask_attributes);
 8000b62:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <main+0x1f8>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <main+0x1fc>)
 8000b68:	f008 fea6 	bl	80098b8 <osThreadNew>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <main+0x200>)
 8000b70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b72:	f008 fe7b 	bl	800986c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    if (dataReadyFlag) {
 8000b76:	e7fe      	b.n	8000b76 <main+0x1c6>
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	30012000 	.word	0x30012000
 8000b84:	473b8000 	.word	0x473b8000
 8000b88:	2400027c 	.word	0x2400027c
 8000b8c:	0800d750 	.word	0x0800d750
 8000b90:	00000000 	.word	0x00000000
 8000b94:	461c4000 	.word	0x461c4000
 8000b98:	447a0000 	.word	0x447a0000
 8000b9c:	30010000 	.word	0x30010000
 8000ba0:	24000098 	.word	0x24000098
 8000ba4:	0800d75c 	.word	0x0800d75c
 8000ba8:	0800d7b0 	.word	0x0800d7b0
 8000bac:	080010bd 	.word	0x080010bd
 8000bb0:	24000270 	.word	0x24000270

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b09c      	sub	sp, #112	; 0x70
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	224c      	movs	r2, #76	; 0x4c
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00b fbb8 	bl	800c338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2220      	movs	r2, #32
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00b fbb2 	bl	800c338 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bd4:	2004      	movs	r0, #4
 8000bd6:	f003 fc29 	bl	800442c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <SystemClock_Config+0xf8>)
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	4a32      	ldr	r2, [pc, #200]	; (8000cac <SystemClock_Config+0xf8>)
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <SystemClock_Config+0xf8>)
 8000bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <SystemClock_Config+0xfc>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <SystemClock_Config+0xfc>)
 8000bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <SystemClock_Config+0xfc>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c0c:	bf00      	nop
 8000c0e:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <SystemClock_Config+0xfc>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c1a:	d1f8      	bne.n	8000c0e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8000c1c:	2311      	movs	r3, #17
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c36:	2310      	movs	r3, #16
 8000c38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 500;
 8000c3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c3e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fc3f 	bl	80044e0 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000c68:	f000 fa70 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	233f      	movs	r3, #63	; 0x3f
 8000c6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2303      	movs	r3, #3
 8000c72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c8a:	2340      	movs	r3, #64	; 0x40
 8000c8c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2102      	movs	r1, #2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 f87e 	bl	8004d94 <HAL_RCC_ClockConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000c9e:	f000 fa55 	bl	800114c <Error_Handler>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3770      	adds	r7, #112	; 0x70
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	58000400 	.word	0x58000400
 8000cb0:	58024800 	.word	0x58024800

08000cb4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <MX_I2S3_Init+0x64>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cdc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ce0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_I2S3_Init+0x60>)
 8000d02:	f003 f927 	bl	8003f54 <HAL_I2S_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2S3_Init+0x5c>
  {
    Error_Handler();
 8000d0c:	f000 fa1e 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	24000098 	.word	0x24000098
 8000d18:	40003c00 	.word	0x40003c00

08000d1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d22:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <MX_USART3_UART_Init+0x94>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d66:	f007 fbaf 	bl	80084c8 <HAL_UART_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d70:	f000 f9ec 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d78:	f008 fc45 	bl	8009606 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d82:	f000 f9e3 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d8a:	f008 fc7a 	bl	8009682 <HAL_UARTEx_SetRxFifoThreshold>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d94:	f000 f9da 	bl	800114c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_USART3_UART_Init+0x90>)
 8000d9a:	f008 fbfb 	bl	8009594 <HAL_UARTEx_DisableFifoMode>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000da4:	f000 f9d2 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	240001dc 	.word	0x240001dc
 8000db0:	40004800 	.word	0x40004800

08000db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_DMA_Init+0x4c>)
 8000dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc0:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <MX_DMA_Init+0x4c>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_DMA_Init+0x4c>)
 8000dcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2105      	movs	r1, #5
 8000ddc:	200b      	movs	r0, #11
 8000dde:	f000 fd63 	bl	80018a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000de2:	200b      	movs	r0, #11
 8000de4:	f000 fd7a 	bl	80018dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2105      	movs	r1, #5
 8000dec:	200c      	movs	r0, #12
 8000dee:	f000 fd5b 	bl	80018a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000df2:	200c      	movs	r0, #12
 8000df4:	f000 fd72 	bl	80018dc <HAL_NVIC_EnableIRQ>

}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	58024400 	.word	0x58024400

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_GPIO_Init+0x6c>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	58024400 	.word	0x58024400

08000e74 <UART_Printf>:

/* USER CODE BEGIN 4 */
void UART_Printf(const char* fmt, ...) {
 8000e74:	b40f      	push	{r0, r1, r2, r3}
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b0c2      	sub	sp, #264	; 0x108
 8000e7a:	af00      	add	r7, sp, #0
  char buff[256];
  va_list args;
  va_start(args, fmt);
 8000e7c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e88:	601a      	str	r2, [r3, #0]
  vsnprintf(buff, sizeof(buff), fmt, args);
 8000e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e92:	f107 0008 	add.w	r0, r7, #8
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea0:	f00b fa7e 	bl	800c3a0 <vsniprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fa19 	bl	80002e0 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f107 0108 	add.w	r1, r7, #8
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <UART_Printf+0x5c>)
 8000ebc:	f007 fb54 	bl	8008568 <HAL_UART_Transmit>
  va_end(args);
}
 8000ec0:	bf00      	nop
 8000ec2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr
 8000ed0:	240001dc 	.word	0x240001dc

08000ed4 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  inBufPtr = &adcData[0];
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 8000ede:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  outBufPtr = &dacData[0];
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000ee6:	601a      	str	r2, [r3, #0]
  processData();
 8000ee8:	f000 f830 	bl	8000f4c <processData>
  dataReadyFlag = 1;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	24000274 	.word	0x24000274
 8000f00:	30010000 	.word	0x30010000
 8000f04:	24000008 	.word	0x24000008
 8000f08:	30012000 	.word	0x30012000
 8000f0c:	24000278 	.word	0x24000278

08000f10 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  inBufPtr = &adcData[BUFFER_SIZE];
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  outBufPtr = &dacData[BUFFER_SIZE];
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000f22:	601a      	str	r2, [r3, #0]
  processData();
 8000f24:	f000 f812 	bl	8000f4c <processData>
  dataReadyFlag = 1;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000274 	.word	0x24000274
 8000f3c:	30010100 	.word	0x30010100
 8000f40:	24000008 	.word	0x24000008
 8000f44:	30012100 	.word	0x30012100
 8000f48:	24000278 	.word	0x24000278

08000f4c <processData>:

void processData() {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  static float leftIn, leftProcessed, leftOut;
  static float rightIn, rightProcessed, rightOut;

  for (uint8_t n = 0; n < (BUFFER_SIZE) - 1; n+=4) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	e092      	b.n	800107e <processData+0x132>
    // LEFT

	//  CONVERTIR ENTRADA ADC A FLOAT
	leftIn = INT16_TO_FLOAT(inBufPtr[n]);
 8000f58:	4b4f      	ldr	r3, [pc, #316]	; (8001098 <processData+0x14c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f6e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800109c <processData+0x150>
 8000f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f76:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <processData+0x154>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]
	if (leftIn > 1.0f) {
 8000f7c:	4b48      	ldr	r3, [pc, #288]	; (80010a0 <processData+0x154>)
 8000f7e:	edd3 7a00 	vldr	s15, [r3]
 8000f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	dd09      	ble.n	8000fa4 <processData+0x58>
	  leftIn -= 2.0f;
 8000f90:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <processData+0x154>)
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000f9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f9e:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <processData+0x154>)
 8000fa0:	edc3 7a00 	vstr	s15, [r3]
	}

	//leftProcessed = IFX_PeakingFilter_Update(&filt1, leftIn);
	leftProcessed = leftIn;
 8000fa4:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <processData+0x154>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a3e      	ldr	r2, [pc, #248]	; (80010a4 <processData+0x158>)
 8000faa:	6013      	str	r3, [r2, #0]

	// OUTPUT LEFT
	leftOut = leftProcessed;
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <processData+0x158>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a3d      	ldr	r2, [pc, #244]	; (80010a8 <processData+0x15c>)
 8000fb2:	6013      	str	r3, [r2, #0]

	// CONVERTIR SALIDA DAC A SIGNED INT
	outBufPtr[n] = (int16_t) (FLOAT_TO_INT16(leftOut));
 8000fb4:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <processData+0x15c>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800109c <processData+0x150>
 8000fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc6:	ee17 3a90 	vmov	r3, s15
 8000fca:	b219      	sxth	r1, r3
 8000fcc:	4b37      	ldr	r3, [pc, #220]	; (80010ac <processData+0x160>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b28a      	uxth	r2, r1
 8000fd8:	801a      	strh	r2, [r3, #0]
	outBufPtr[n+1] = 0;//(int16_t) (FLOAT_TO_INT16(leftOut));
 8000fda:	4b34      	ldr	r3, [pc, #208]	; (80010ac <processData+0x160>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
	// RIGHT

	//  CONVERTIR ENTRADA ADC A FLOAT
	rightIn = INT16_TO_FLOAT(inBufPtr[n+2]);
 8000fea:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <processData+0x14c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001002:	eddf 6a26 	vldr	s13, [pc, #152]	; 800109c <processData+0x150>
 8001006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <processData+0x164>)
 800100c:	edc3 7a00 	vstr	s15, [r3]
	if (rightIn > 1.0f) {
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <processData+0x164>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800101a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	dd09      	ble.n	8001038 <processData+0xec>
	  rightIn -= 2.0f;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <processData+0x164>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800102e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <processData+0x164>)
 8001034:	edc3 7a00 	vstr	s15, [r3]
	}

	// OUTPUT RIGHT
	rightOut = rightIn;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <processData+0x164>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <processData+0x168>)
 800103e:	6013      	str	r3, [r2, #0]

	// CONVERTIR SALIDA DAC A SIGNED INT
	outBufPtr[n+2] = (int16_t) (FLOAT_TO_INT16(rightOut));
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <processData+0x168>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800109c <processData+0x150>
 800104a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001052:	ee17 3a90 	vmov	r3, s15
 8001056:	b219      	sxth	r1, r3
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <processData+0x160>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3302      	adds	r3, #2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	b28a      	uxth	r2, r1
 8001066:	801a      	strh	r2, [r3, #0]
	outBufPtr[n+3] = 0;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <processData+0x160>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3303      	adds	r3, #3
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 0; n < (BUFFER_SIZE) - 1; n+=4) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	3304      	adds	r3, #4
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b7e      	cmp	r3, #126	; 0x7e
 8001082:	f67f af69 	bls.w	8000f58 <processData+0xc>
  }

	dataReadyFlag = 0;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <processData+0x16c>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	24000274 	.word	0x24000274
 800109c:	46fffe00 	.word	0x46fffe00
 80010a0:	240002b0 	.word	0x240002b0
 80010a4:	240002b4 	.word	0x240002b4
 80010a8:	240002b8 	.word	0x240002b8
 80010ac:	24000008 	.word	0x24000008
 80010b0:	240002bc 	.word	0x240002bc
 80010b4:	240002c0 	.word	0x240002c0
 80010b8:	24000278 	.word	0x24000278

080010bc <setFilterTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_setFilterTask */
void setFilterTask(void *argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//IFX_PeakingFilter_SetParameters(&filt1, 1000.0f, hz, 0.0f);

    osDelay(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f008 fc89 	bl	80099dc <osDelay>
 80010ca:	e7fb      	b.n	80010c4 <setFilterTask+0x8>

080010cc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010de:	f000 fc0b 	bl	80018f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30010000;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MPU_Config+0x58>)
 80010ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80010ee:	230f      	movs	r3, #15
 80010f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010fa:	2303      	movs	r3, #3
 80010fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010fe:	2301      	movs	r3, #1
 8001100:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800110e:	463b      	mov	r3, r7
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fc29 	bl	8001968 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001116:	2004      	movs	r0, #4
 8001118:	f000 fc06 	bl	8001928 <HAL_MPU_Enable>

}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	30010000 	.word	0x30010000

08001128 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800113a:	f000 fad1 	bl	80016e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40010000 	.word	0x40010000

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x8>
	...

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_MspInit+0x38>)
 8001160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_MspInit+0x38>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_MspInit+0x38>)
 8001170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	210f      	movs	r1, #15
 8001180:	f06f 0001 	mvn.w	r0, #1
 8001184:	f000 fb90 	bl	80018a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	58024400 	.word	0x58024400

08001194 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0bc      	sub	sp, #240	; 0xf0
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	22c0      	movs	r2, #192	; 0xc0
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00b f8bf 	bl	800c338 <memset>
  if(hi2s->Instance==SPI3)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a72      	ldr	r2, [pc, #456]	; (8001388 <HAL_I2S_MspInit+0x1f4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	f040 80dd 	bne.w	8001380 <HAL_I2S_MspInit+0x1ec>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80011c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 80011d2:	2310      	movs	r3, #16
 80011d4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80011da:	2308      	movs	r3, #8
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 80011de:	2308      	movs	r3, #8
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 f997 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8001208:	f7ff ffa0 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800120c:	4b5f      	ldr	r3, [pc, #380]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 800120e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001212:	4a5e      	ldr	r2, [pc, #376]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 8001214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800121c:	4b5b      	ldr	r3, [pc, #364]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 800121e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123a:	4b54      	ldr	r3, [pc, #336]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <HAL_I2S_MspInit+0x1f8>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    PC12     ------> I2S3_SDO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001266:	2310      	movs	r3, #16
 8001268:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800127e:	2306      	movs	r3, #6
 8001280:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001288:	4619      	mov	r1, r3
 800128a:	4841      	ldr	r0, [pc, #260]	; (8001390 <HAL_I2S_MspInit+0x1fc>)
 800128c:	f002 fc84 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001290:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8001294:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012aa:	2306      	movs	r3, #6
 80012ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012b4:	4619      	mov	r1, r3
 80012b6:	4837      	ldr	r0, [pc, #220]	; (8001394 <HAL_I2S_MspInit+0x200>)
 80012b8:	f002 fc6e 	bl	8003b98 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012be:	4a37      	ldr	r2, [pc, #220]	; (800139c <HAL_I2S_MspInit+0x208>)
 80012c0:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80012c2:	4b35      	ldr	r3, [pc, #212]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012c4:	223d      	movs	r2, #61	; 0x3d
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c8:	4b33      	ldr	r3, [pc, #204]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012da:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f2:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012fa:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_I2S_MspInit+0x204>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001302:	4825      	ldr	r0, [pc, #148]	; (8001398 <HAL_I2S_MspInit+0x204>)
 8001304:	f000 fb70 	bl	80019e8 <HAL_DMA_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_I2S_MspInit+0x17e>
    {
      Error_Handler();
 800130e:	f7ff ff1d 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <HAL_I2S_MspInit+0x204>)
 8001316:	649a      	str	r2, [r3, #72]	; 0x48
 8001318:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_I2S_MspInit+0x204>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream1;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <HAL_I2S_MspInit+0x210>)
 8001322:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001326:	223e      	movs	r2, #62	; 0x3e
 8001328:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 800132c:	2240      	movs	r2, #64	; 0x40
 800132e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001340:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001344:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001348:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001354:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001358:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800135c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001364:	480e      	ldr	r0, [pc, #56]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001366:	f000 fb3f 	bl	80019e8 <HAL_DMA_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2S_MspInit+0x1e0>
    {
      Error_Handler();
 8001370:	f7ff feec 	bl	800114c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <HAL_I2S_MspInit+0x20c>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	37f0      	adds	r7, #240	; 0xf0
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40003c00 	.word	0x40003c00
 800138c:	58024400 	.word	0x58024400
 8001390:	58020000 	.word	0x58020000
 8001394:	58020800 	.word	0x58020800
 8001398:	240000ec 	.word	0x240000ec
 800139c:	40020010 	.word	0x40020010
 80013a0:	24000164 	.word	0x24000164
 80013a4:	40020028 	.word	0x40020028

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0ba      	sub	sp, #232	; 0xe8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	22c0      	movs	r2, #192	; 0xc0
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00a ffb5 	bl	800c338 <memset>
  if(huart->Instance==USART3)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_UART_MspInit+0xc8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d146      	bne.n	8001466 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d8:	f04f 0202 	mov.w	r2, #2
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 80013e4:	2304      	movs	r3, #4
 80013e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 f89e 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013fa:	f7ff fea7 	bl	800114c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_UART_MspInit+0xcc>)
 8001400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_UART_MspInit+0xcc>)
 8001406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_UART_MspInit+0xcc>)
 8001410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_UART_MspInit+0xcc>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <HAL_UART_MspInit+0xcc>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_UART_MspInit+0xcc>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800143a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800143e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001454:	2307      	movs	r3, #7
 8001456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <HAL_UART_MspInit+0xd0>)
 8001462:	f002 fb99 	bl	8003b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	37e8      	adds	r7, #232	; 0xe8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004800 	.word	0x40004800
 8001474:	58024400 	.word	0x58024400
 8001478:	58020c00 	.word	0x58020c00

0800147c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	d844      	bhi.n	8001514 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800148a:	2200      	movs	r2, #0
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	2019      	movs	r0, #25
 8001490:	f000 fa0a 	bl	80018a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001494:	2019      	movs	r0, #25
 8001496:	f000 fa21 	bl	80018dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800149a:	4a24      	ldr	r2, [pc, #144]	; (800152c <HAL_InitTick+0xb0>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <HAL_InitTick+0xb4>)
 80014a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014a6:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_InitTick+0xb4>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <HAL_InitTick+0xb4>)
 80014b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 ffef 	bl	80054ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80014ce:	f003 ffd7 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 80014d2:	4603      	mov	r3, r0
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <HAL_InitTick+0xb8>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	3b01      	subs	r3, #1
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_InitTick+0xbc>)
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_InitTick+0xc0>)
 80014ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0xbc>)
 80014ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014f4:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_InitTick+0xbc>)
 80014f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_InitTick+0xbc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_InitTick+0xbc>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <HAL_InitTick+0xbc>)
 8001508:	f006 fd10 	bl	8007f2c <HAL_TIM_Base_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <HAL_InitTick+0xa6>
 8001512:	e001      	b.n	8001518 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e005      	b.n	8001524 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <HAL_InitTick+0xbc>)
 800151a:	f006 fd69 	bl	8007ff0 <HAL_TIM_Base_Start_IT>
 800151e:	4603      	mov	r3, r0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3738      	adds	r7, #56	; 0x38
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2400000c 	.word	0x2400000c
 8001530:	58024400 	.word	0x58024400
 8001534:	431bde83 	.word	0x431bde83
 8001538:	240002c4 	.word	0x240002c4
 800153c:	40010000 	.word	0x40010000

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <DMA1_Stream0_IRQHandler+0x10>)
 8001572:	f000 ffff 	bl	8002574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	240000ec 	.word	0x240000ec

08001580 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA1_Stream1_IRQHandler+0x10>)
 8001586:	f000 fff5 	bl	8002574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24000164 	.word	0x24000164

08001594 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM1_UP_IRQHandler+0x10>)
 800159a:	f006 fda1 	bl	80080e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	240002c4 	.word	0x240002c4

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f00a fe76 	bl	800c2c8 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	24080000 	.word	0x24080000
 8001608:	00000400 	.word	0x00000400
 800160c:	24000310 	.word	0x24000310
 8001610:	24004c78 	.word	0x24004c78

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001618:	f7ff f83c 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800161e:	490d      	ldr	r1, [pc, #52]	; (8001654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001634:	4c0a      	ldr	r4, [pc, #40]	; (8001660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001642:	f00a fe47 	bl	800c2d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff f9b3 	bl	80009b0 <main>
  bx  lr
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001650:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001654:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001658:	0800dc18 	.word	0x0800dc18
  ldr r2, =_sbss
 800165c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001660:	24004c78 	.word	0x24004c78

08001664 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC3_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166e:	2003      	movs	r0, #3
 8001670:	f000 f90f 	bl	8001892 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001674:	f003 fd44 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_Init+0x68>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	4913      	ldr	r1, [pc, #76]	; (80016d4 <HAL_Init+0x6c>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_Init+0x68>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_Init+0x6c>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_Init+0x70>)
 80016aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_Init+0x74>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b2:	200f      	movs	r0, #15
 80016b4:	f7ff fee2 	bl	800147c <HAL_InitTick>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e002      	b.n	80016c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016c2:	f7ff fd49 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	58024400 	.word	0x58024400
 80016d4:	0800d7a0 	.word	0x0800d7a0
 80016d8:	24000004 	.word	0x24000004
 80016dc:	24000000 	.word	0x24000000

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	24000010 	.word	0x24000010
 8001704:	24000314 	.word	0x24000314

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	24000314 	.word	0x24000314

08001720 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetREVID+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	0c1b      	lsrs	r3, r3, #16
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	5c001000 	.word	0x5c001000

08001738 <__NVIC_SetPriorityGrouping>:
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <__NVIC_SetPriorityGrouping+0x40>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	4313      	orrs	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x40>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	05fa0000 	.word	0x05fa0000

08001780 <__NVIC_GetPriorityGrouping>:
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <__NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_EnableIRQ>:
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	db0b      	blt.n	80017c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	f003 021f 	and.w	r2, r3, #31
 80017b4:	4907      	ldr	r1, [pc, #28]	; (80017d4 <__NVIC_EnableIRQ+0x38>)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	2001      	movs	r0, #1
 80017be:	fa00 f202 	lsl.w	r2, r0, r2
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <__NVIC_SetPriority>:
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	; (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	; (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ff4c 	bl	8001738 <__NVIC_SetPriorityGrouping>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b6:	f7ff ff63 	bl	8001780 <__NVIC_GetPriorityGrouping>
 80018ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	6978      	ldr	r0, [r7, #20]
 80018c2:	f7ff ffb3 	bl	800182c <NVIC_EncodePriority>
 80018c6:	4602      	mov	r2, r0
 80018c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff82 	bl	80017d8 <__NVIC_SetPriority>
}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff56 	bl	800179c <__NVIC_EnableIRQ>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018fc:	f3bf 8f5f 	dmb	sy
}
 8001900:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_MPU_Disable+0x28>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_MPU_Disable+0x28>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_MPU_Disable+0x2c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	e000ed90 	.word	0xe000ed90

08001928 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_MPU_Enable+0x38>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_MPU_Enable+0x3c>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_MPU_Enable+0x3c>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001946:	f3bf 8f4f 	dsb	sy
}
 800194a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800194c:	f3bf 8f6f 	isb	sy
}
 8001950:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed90 	.word	0xe000ed90
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	785a      	ldrb	r2, [r3, #1]
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001976:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7b1b      	ldrb	r3, [r3, #12]
 8001990:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7adb      	ldrb	r3, [r3, #11]
 8001996:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7a9b      	ldrb	r3, [r3, #10]
 800199e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b5b      	ldrb	r3, [r3, #13]
 80019a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7b9b      	ldrb	r3, [r3, #14]
 80019ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7bdb      	ldrb	r3, [r3, #15]
 80019b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a5b      	ldrb	r3, [r3, #9]
 80019be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7a1b      	ldrb	r3, [r3, #8]
 80019c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	7812      	ldrb	r2, [r2, #0]
 80019ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d4:	6113      	str	r3, [r2, #16]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed90 	.word	0xe000ed90

080019e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff fe8a 	bl	8001708 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e316      	b.n	800202e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a66      	ldr	r2, [pc, #408]	; (8001ba0 <HAL_DMA_Init+0x1b8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d04a      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a65      	ldr	r2, [pc, #404]	; (8001ba4 <HAL_DMA_Init+0x1bc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d045      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a63      	ldr	r2, [pc, #396]	; (8001ba8 <HAL_DMA_Init+0x1c0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d040      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a62      	ldr	r2, [pc, #392]	; (8001bac <HAL_DMA_Init+0x1c4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d03b      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a60      	ldr	r2, [pc, #384]	; (8001bb0 <HAL_DMA_Init+0x1c8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d036      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a5f      	ldr	r2, [pc, #380]	; (8001bb4 <HAL_DMA_Init+0x1cc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d031      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a5d      	ldr	r2, [pc, #372]	; (8001bb8 <HAL_DMA_Init+0x1d0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d02c      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a5c      	ldr	r2, [pc, #368]	; (8001bbc <HAL_DMA_Init+0x1d4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d027      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a5a      	ldr	r2, [pc, #360]	; (8001bc0 <HAL_DMA_Init+0x1d8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a59      	ldr	r2, [pc, #356]	; (8001bc4 <HAL_DMA_Init+0x1dc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d01d      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a57      	ldr	r2, [pc, #348]	; (8001bc8 <HAL_DMA_Init+0x1e0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d018      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <HAL_DMA_Init+0x1e4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a54      	ldr	r2, [pc, #336]	; (8001bd0 <HAL_DMA_Init+0x1e8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a53      	ldr	r2, [pc, #332]	; (8001bd4 <HAL_DMA_Init+0x1ec>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <HAL_DMA_Init+0x1f0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_Init+0xb8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a50      	ldr	r2, [pc, #320]	; (8001bdc <HAL_DMA_Init+0x1f4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_DMA_Init+0xbc>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_DMA_Init+0xbe>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 813b 	beq.w	8001d22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a37      	ldr	r2, [pc, #220]	; (8001ba0 <HAL_DMA_Init+0x1b8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <HAL_DMA_Init+0x1bc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d045      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <HAL_DMA_Init+0x1c0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d040      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a33      	ldr	r2, [pc, #204]	; (8001bac <HAL_DMA_Init+0x1c4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d03b      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <HAL_DMA_Init+0x1c8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <HAL_DMA_Init+0x1cc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d031      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2e      	ldr	r2, [pc, #184]	; (8001bb8 <HAL_DMA_Init+0x1d0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02c      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <HAL_DMA_Init+0x1d4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d027      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2b      	ldr	r2, [pc, #172]	; (8001bc0 <HAL_DMA_Init+0x1d8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_DMA_Init+0x1dc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <HAL_DMA_Init+0x1e0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <HAL_DMA_Init+0x1e4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <HAL_DMA_Init+0x1e8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <HAL_DMA_Init+0x1ec>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <HAL_DMA_Init+0x1f0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Init+0x174>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_DMA_Init+0x1f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d108      	bne.n	8001b6e <HAL_DMA_Init+0x186>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e007      	b.n	8001b7e <HAL_DMA_Init+0x196>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b7e:	e02f      	b.n	8001be0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b80:	f7ff fdc2 	bl	8001708 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d928      	bls.n	8001be0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2220      	movs	r2, #32
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e246      	b.n	800202e <HAL_DMA_Init+0x646>
 8001ba0:	40020010 	.word	0x40020010
 8001ba4:	40020028 	.word	0x40020028
 8001ba8:	40020040 	.word	0x40020040
 8001bac:	40020058 	.word	0x40020058
 8001bb0:	40020070 	.word	0x40020070
 8001bb4:	40020088 	.word	0x40020088
 8001bb8:	400200a0 	.word	0x400200a0
 8001bbc:	400200b8 	.word	0x400200b8
 8001bc0:	40020410 	.word	0x40020410
 8001bc4:	40020428 	.word	0x40020428
 8001bc8:	40020440 	.word	0x40020440
 8001bcc:	40020458 	.word	0x40020458
 8001bd0:	40020470 	.word	0x40020470
 8001bd4:	40020488 	.word	0x40020488
 8001bd8:	400204a0 	.word	0x400204a0
 8001bdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1c8      	bne.n	8001b80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4b83      	ldr	r3, [pc, #524]	; (8001e08 <HAL_DMA_Init+0x420>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d107      	bne.n	8001c44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c44:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <HAL_DMA_Init+0x424>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b71      	ldr	r3, [pc, #452]	; (8001e10 <HAL_DMA_Init+0x428>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c50:	d328      	bcc.n	8001ca4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b28      	cmp	r3, #40	; 0x28
 8001c58:	d903      	bls.n	8001c62 <HAL_DMA_Init+0x27a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c60:	d917      	bls.n	8001c92 <HAL_DMA_Init+0x2aa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b3e      	cmp	r3, #62	; 0x3e
 8001c68:	d903      	bls.n	8001c72 <HAL_DMA_Init+0x28a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b42      	cmp	r3, #66	; 0x42
 8001c70:	d90f      	bls.n	8001c92 <HAL_DMA_Init+0x2aa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b46      	cmp	r3, #70	; 0x46
 8001c78:	d903      	bls.n	8001c82 <HAL_DMA_Init+0x29a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b48      	cmp	r3, #72	; 0x48
 8001c80:	d907      	bls.n	8001c92 <HAL_DMA_Init+0x2aa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b4e      	cmp	r3, #78	; 0x4e
 8001c88:	d905      	bls.n	8001c96 <HAL_DMA_Init+0x2ae>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b52      	cmp	r3, #82	; 0x52
 8001c90:	d801      	bhi.n	8001c96 <HAL_DMA_Init+0x2ae>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_DMA_Init+0x2b0>
 8001c96:	2300      	movs	r3, #0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ca2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f023 0307 	bic.w	r3, r3, #7
 8001cba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d117      	bne.n	8001cfe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00e      	beq.n	8001cfe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f001 fdcf 	bl	8003884 <DMA_CheckFifoParam>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e197      	b.n	800202e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f001 fd0a 	bl	8003720 <DMA_CalcBaseAndBitshift>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	223f      	movs	r2, #63	; 0x3f
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e0cd      	b.n	8001ebe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3b      	ldr	r2, [pc, #236]	; (8001e14 <HAL_DMA_Init+0x42c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <HAL_DMA_Init+0x38a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a39      	ldr	r2, [pc, #228]	; (8001e18 <HAL_DMA_Init+0x430>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01d      	beq.n	8001d72 <HAL_DMA_Init+0x38a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_DMA_Init+0x434>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_Init+0x38a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a36      	ldr	r2, [pc, #216]	; (8001e20 <HAL_DMA_Init+0x438>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_DMA_Init+0x38a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a35      	ldr	r2, [pc, #212]	; (8001e24 <HAL_DMA_Init+0x43c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Init+0x38a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <HAL_DMA_Init+0x440>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <HAL_DMA_Init+0x38a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <HAL_DMA_Init+0x444>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Init+0x38a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a30      	ldr	r2, [pc, #192]	; (8001e30 <HAL_DMA_Init+0x448>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_DMA_Init+0x38e>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_DMA_Init+0x390>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8097 	beq.w	8001eac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_DMA_Init+0x42c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d021      	beq.n	8001dcc <HAL_DMA_Init+0x3e4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_DMA_Init+0x430>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01c      	beq.n	8001dcc <HAL_DMA_Init+0x3e4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <HAL_DMA_Init+0x434>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d017      	beq.n	8001dcc <HAL_DMA_Init+0x3e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <HAL_DMA_Init+0x438>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d012      	beq.n	8001dcc <HAL_DMA_Init+0x3e4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_DMA_Init+0x43c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00d      	beq.n	8001dcc <HAL_DMA_Init+0x3e4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_DMA_Init+0x440>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d008      	beq.n	8001dcc <HAL_DMA_Init+0x3e4>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_DMA_Init+0x444>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <HAL_DMA_Init+0x3e4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_DMA_Init+0x448>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_DMA_Init+0x44c>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d020      	beq.n	8001e38 <HAL_DMA_Init+0x450>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b80      	cmp	r3, #128	; 0x80
 8001dfc:	d102      	bne.n	8001e04 <HAL_DMA_Init+0x41c>
 8001dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e02:	e01a      	b.n	8001e3a <HAL_DMA_Init+0x452>
 8001e04:	2300      	movs	r3, #0
 8001e06:	e018      	b.n	8001e3a <HAL_DMA_Init+0x452>
 8001e08:	fe10803f 	.word	0xfe10803f
 8001e0c:	5c001000 	.word	0x5c001000
 8001e10:	ffff0000 	.word	0xffff0000
 8001e14:	58025408 	.word	0x58025408
 8001e18:	5802541c 	.word	0x5802541c
 8001e1c:	58025430 	.word	0x58025430
 8001e20:	58025444 	.word	0x58025444
 8001e24:	58025458 	.word	0x58025458
 8001e28:	5802546c 	.word	0x5802546c
 8001e2c:	58025480 	.word	0x58025480
 8001e30:	58025494 	.word	0x58025494
 8001e34:	fffe000f 	.word	0xfffe000f
 8001e38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68d2      	ldr	r2, [r2, #12]
 8001e3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b6e      	ldr	r3, [pc, #440]	; (8002038 <HAL_DMA_Init+0x650>)
 8001e80:	4413      	add	r3, r2
 8001e82:	4a6e      	ldr	r2, [pc, #440]	; (800203c <HAL_DMA_Init+0x654>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	009a      	lsls	r2, r3, #2
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 fc45 	bl	8003720 <DMA_CalcBaseAndBitshift>
 8001e96:	4603      	mov	r3, r0
 8001e98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e008      	b.n	8001ebe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0b7      	b.n	800202e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <HAL_DMA_Init+0x658>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d072      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a5d      	ldr	r2, [pc, #372]	; (8002044 <HAL_DMA_Init+0x65c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d06d      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <HAL_DMA_Init+0x660>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d068      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5a      	ldr	r2, [pc, #360]	; (800204c <HAL_DMA_Init+0x664>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d063      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a59      	ldr	r2, [pc, #356]	; (8002050 <HAL_DMA_Init+0x668>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d05e      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a57      	ldr	r2, [pc, #348]	; (8002054 <HAL_DMA_Init+0x66c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d059      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a56      	ldr	r2, [pc, #344]	; (8002058 <HAL_DMA_Init+0x670>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d054      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a54      	ldr	r2, [pc, #336]	; (800205c <HAL_DMA_Init+0x674>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d04f      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a53      	ldr	r2, [pc, #332]	; (8002060 <HAL_DMA_Init+0x678>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d04a      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_DMA_Init+0x67c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d045      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_DMA_Init+0x680>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d040      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a4e      	ldr	r2, [pc, #312]	; (800206c <HAL_DMA_Init+0x684>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d03b      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4d      	ldr	r2, [pc, #308]	; (8002070 <HAL_DMA_Init+0x688>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d036      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <HAL_DMA_Init+0x68c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d031      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_DMA_Init+0x690>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d02c      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <HAL_DMA_Init+0x694>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d027      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a47      	ldr	r2, [pc, #284]	; (8002080 <HAL_DMA_Init+0x698>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a45      	ldr	r2, [pc, #276]	; (8002084 <HAL_DMA_Init+0x69c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01d      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a44      	ldr	r2, [pc, #272]	; (8002088 <HAL_DMA_Init+0x6a0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d018      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a42      	ldr	r2, [pc, #264]	; (800208c <HAL_DMA_Init+0x6a4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a41      	ldr	r2, [pc, #260]	; (8002090 <HAL_DMA_Init+0x6a8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00e      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a3f      	ldr	r2, [pc, #252]	; (8002094 <HAL_DMA_Init+0x6ac>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <HAL_DMA_Init+0x6b0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_DMA_Init+0x5c6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3c      	ldr	r2, [pc, #240]	; (800209c <HAL_DMA_Init+0x6b4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_DMA_Init+0x5ca>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_DMA_Init+0x5cc>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d032      	beq.n	800201e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f001 fcdf 	bl	800397c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b80      	cmp	r3, #128	; 0x80
 8001fc4:	d102      	bne.n	8001fcc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fe0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d010      	beq.n	800200c <HAL_DMA_Init+0x624>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d80c      	bhi.n	800200c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f001 fd5c 	bl	8003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	e008      	b.n	800201e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	a7fdabf8 	.word	0xa7fdabf8
 800203c:	cccccccd 	.word	0xcccccccd
 8002040:	40020010 	.word	0x40020010
 8002044:	40020028 	.word	0x40020028
 8002048:	40020040 	.word	0x40020040
 800204c:	40020058 	.word	0x40020058
 8002050:	40020070 	.word	0x40020070
 8002054:	40020088 	.word	0x40020088
 8002058:	400200a0 	.word	0x400200a0
 800205c:	400200b8 	.word	0x400200b8
 8002060:	40020410 	.word	0x40020410
 8002064:	40020428 	.word	0x40020428
 8002068:	40020440 	.word	0x40020440
 800206c:	40020458 	.word	0x40020458
 8002070:	40020470 	.word	0x40020470
 8002074:	40020488 	.word	0x40020488
 8002078:	400204a0 	.word	0x400204a0
 800207c:	400204b8 	.word	0x400204b8
 8002080:	58025408 	.word	0x58025408
 8002084:	5802541c 	.word	0x5802541c
 8002088:	58025430 	.word	0x58025430
 800208c:	58025444 	.word	0x58025444
 8002090:	58025458 	.word	0x58025458
 8002094:	5802546c 	.word	0x5802546c
 8002098:	58025480 	.word	0x58025480
 800209c:	58025494 	.word	0x58025494

080020a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e226      	b.n	800250a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Start_IT+0x2a>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e21f      	b.n	800250a <HAL_DMA_Start_IT+0x46a>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	f040 820a 	bne.w	80024f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a68      	ldr	r2, [pc, #416]	; (8002294 <HAL_DMA_Start_IT+0x1f4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04a      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a66      	ldr	r2, [pc, #408]	; (8002298 <HAL_DMA_Start_IT+0x1f8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d045      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_DMA_Start_IT+0x1fc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d040      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a63      	ldr	r2, [pc, #396]	; (80022a0 <HAL_DMA_Start_IT+0x200>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d03b      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a62      	ldr	r2, [pc, #392]	; (80022a4 <HAL_DMA_Start_IT+0x204>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d036      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a60      	ldr	r2, [pc, #384]	; (80022a8 <HAL_DMA_Start_IT+0x208>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d031      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5f      	ldr	r2, [pc, #380]	; (80022ac <HAL_DMA_Start_IT+0x20c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d02c      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a5d      	ldr	r2, [pc, #372]	; (80022b0 <HAL_DMA_Start_IT+0x210>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d027      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5c      	ldr	r2, [pc, #368]	; (80022b4 <HAL_DMA_Start_IT+0x214>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_DMA_Start_IT+0x218>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a59      	ldr	r2, [pc, #356]	; (80022bc <HAL_DMA_Start_IT+0x21c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d018      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_DMA_Start_IT+0x220>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a56      	ldr	r2, [pc, #344]	; (80022c4 <HAL_DMA_Start_IT+0x224>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00e      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a54      	ldr	r2, [pc, #336]	; (80022c8 <HAL_DMA_Start_IT+0x228>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a53      	ldr	r2, [pc, #332]	; (80022cc <HAL_DMA_Start_IT+0x22c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_DMA_Start_IT+0xee>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a51      	ldr	r2, [pc, #324]	; (80022d0 <HAL_DMA_Start_IT+0x230>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <HAL_DMA_Start_IT+0x100>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e007      	b.n	80021b0 <HAL_DMA_Start_IT+0x110>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f001 f906 	bl	80033c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a34      	ldr	r2, [pc, #208]	; (8002294 <HAL_DMA_Start_IT+0x1f4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04a      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a33      	ldr	r2, [pc, #204]	; (8002298 <HAL_DMA_Start_IT+0x1f8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d045      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_DMA_Start_IT+0x1fc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d040      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <HAL_DMA_Start_IT+0x200>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d03b      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <HAL_DMA_Start_IT+0x204>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d036      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <HAL_DMA_Start_IT+0x208>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d031      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <HAL_DMA_Start_IT+0x20c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02c      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <HAL_DMA_Start_IT+0x210>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d027      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <HAL_DMA_Start_IT+0x214>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d022      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a27      	ldr	r2, [pc, #156]	; (80022b8 <HAL_DMA_Start_IT+0x218>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d01d      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_DMA_Start_IT+0x21c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d018      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_DMA_Start_IT+0x220>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <HAL_DMA_Start_IT+0x224>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <HAL_DMA_Start_IT+0x228>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_DMA_Start_IT+0x22c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_DMA_Start_IT+0x1bc>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_DMA_Start_IT+0x230>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_DMA_Start_IT+0x1c0>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_DMA_Start_IT+0x1c2>
 8002260:	2300      	movs	r3, #0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d036      	beq.n	80022d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 021e 	bic.w	r2, r3, #30
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0216 	orr.w	r2, r2, #22
 8002278:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d03e      	beq.n	8002300 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0208 	orr.w	r2, r2, #8
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e035      	b.n	8002300 <HAL_DMA_Start_IT+0x260>
 8002294:	40020010 	.word	0x40020010
 8002298:	40020028 	.word	0x40020028
 800229c:	40020040 	.word	0x40020040
 80022a0:	40020058 	.word	0x40020058
 80022a4:	40020070 	.word	0x40020070
 80022a8:	40020088 	.word	0x40020088
 80022ac:	400200a0 	.word	0x400200a0
 80022b0:	400200b8 	.word	0x400200b8
 80022b4:	40020410 	.word	0x40020410
 80022b8:	40020428 	.word	0x40020428
 80022bc:	40020440 	.word	0x40020440
 80022c0:	40020458 	.word	0x40020458
 80022c4:	40020470 	.word	0x40020470
 80022c8:	40020488 	.word	0x40020488
 80022cc:	400204a0 	.word	0x400204a0
 80022d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 020e 	bic.w	r2, r3, #14
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 020a 	orr.w	r2, r2, #10
 80022e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0204 	orr.w	r2, r2, #4
 80022fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a83      	ldr	r2, [pc, #524]	; (8002514 <HAL_DMA_Start_IT+0x474>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d072      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a82      	ldr	r2, [pc, #520]	; (8002518 <HAL_DMA_Start_IT+0x478>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d06d      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a80      	ldr	r2, [pc, #512]	; (800251c <HAL_DMA_Start_IT+0x47c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d068      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7f      	ldr	r2, [pc, #508]	; (8002520 <HAL_DMA_Start_IT+0x480>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d063      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a7d      	ldr	r2, [pc, #500]	; (8002524 <HAL_DMA_Start_IT+0x484>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d05e      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_DMA_Start_IT+0x488>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d059      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a7a      	ldr	r2, [pc, #488]	; (800252c <HAL_DMA_Start_IT+0x48c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d054      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a79      	ldr	r2, [pc, #484]	; (8002530 <HAL_DMA_Start_IT+0x490>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04f      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a77      	ldr	r2, [pc, #476]	; (8002534 <HAL_DMA_Start_IT+0x494>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d04a      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a76      	ldr	r2, [pc, #472]	; (8002538 <HAL_DMA_Start_IT+0x498>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d045      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a74      	ldr	r2, [pc, #464]	; (800253c <HAL_DMA_Start_IT+0x49c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d040      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a73      	ldr	r2, [pc, #460]	; (8002540 <HAL_DMA_Start_IT+0x4a0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d03b      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a71      	ldr	r2, [pc, #452]	; (8002544 <HAL_DMA_Start_IT+0x4a4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d036      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a70      	ldr	r2, [pc, #448]	; (8002548 <HAL_DMA_Start_IT+0x4a8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d031      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6e      	ldr	r2, [pc, #440]	; (800254c <HAL_DMA_Start_IT+0x4ac>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d02c      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6d      	ldr	r2, [pc, #436]	; (8002550 <HAL_DMA_Start_IT+0x4b0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d027      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6b      	ldr	r2, [pc, #428]	; (8002554 <HAL_DMA_Start_IT+0x4b4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d022      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6a      	ldr	r2, [pc, #424]	; (8002558 <HAL_DMA_Start_IT+0x4b8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d01d      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a68      	ldr	r2, [pc, #416]	; (800255c <HAL_DMA_Start_IT+0x4bc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d018      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a67      	ldr	r2, [pc, #412]	; (8002560 <HAL_DMA_Start_IT+0x4c0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a65      	ldr	r2, [pc, #404]	; (8002564 <HAL_DMA_Start_IT+0x4c4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00e      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a64      	ldr	r2, [pc, #400]	; (8002568 <HAL_DMA_Start_IT+0x4c8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a62      	ldr	r2, [pc, #392]	; (800256c <HAL_DMA_Start_IT+0x4cc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_DMA_Start_IT+0x350>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a61      	ldr	r2, [pc, #388]	; (8002570 <HAL_DMA_Start_IT+0x4d0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_DMA_Start_IT+0x354>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_DMA_Start_IT+0x356>
 80023f4:	2300      	movs	r3, #0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01a      	beq.n	8002430 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002416:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a37      	ldr	r2, [pc, #220]	; (8002514 <HAL_DMA_Start_IT+0x474>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d04a      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a36      	ldr	r2, [pc, #216]	; (8002518 <HAL_DMA_Start_IT+0x478>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d045      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_DMA_Start_IT+0x47c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d040      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_DMA_Start_IT+0x480>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d03b      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a31      	ldr	r2, [pc, #196]	; (8002524 <HAL_DMA_Start_IT+0x484>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d036      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a30      	ldr	r2, [pc, #192]	; (8002528 <HAL_DMA_Start_IT+0x488>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d031      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <HAL_DMA_Start_IT+0x48c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02c      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_DMA_Start_IT+0x490>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d027      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <HAL_DMA_Start_IT+0x494>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d022      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_DMA_Start_IT+0x498>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d01d      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <HAL_DMA_Start_IT+0x49c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d018      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a27      	ldr	r2, [pc, #156]	; (8002540 <HAL_DMA_Start_IT+0x4a0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a25      	ldr	r2, [pc, #148]	; (8002544 <HAL_DMA_Start_IT+0x4a4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a24      	ldr	r2, [pc, #144]	; (8002548 <HAL_DMA_Start_IT+0x4a8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a22      	ldr	r2, [pc, #136]	; (800254c <HAL_DMA_Start_IT+0x4ac>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA_Start_IT+0x430>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a21      	ldr	r2, [pc, #132]	; (8002550 <HAL_DMA_Start_IT+0x4b0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d108      	bne.n	80024e2 <HAL_DMA_Start_IT+0x442>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e012      	b.n	8002508 <HAL_DMA_Start_IT+0x468>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e009      	b.n	8002508 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002508:	7dfb      	ldrb	r3, [r7, #23]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40020010 	.word	0x40020010
 8002518:	40020028 	.word	0x40020028
 800251c:	40020040 	.word	0x40020040
 8002520:	40020058 	.word	0x40020058
 8002524:	40020070 	.word	0x40020070
 8002528:	40020088 	.word	0x40020088
 800252c:	400200a0 	.word	0x400200a0
 8002530:	400200b8 	.word	0x400200b8
 8002534:	40020410 	.word	0x40020410
 8002538:	40020428 	.word	0x40020428
 800253c:	40020440 	.word	0x40020440
 8002540:	40020458 	.word	0x40020458
 8002544:	40020470 	.word	0x40020470
 8002548:	40020488 	.word	0x40020488
 800254c:	400204a0 	.word	0x400204a0
 8002550:	400204b8 	.word	0x400204b8
 8002554:	58025408 	.word	0x58025408
 8002558:	5802541c 	.word	0x5802541c
 800255c:	58025430 	.word	0x58025430
 8002560:	58025444 	.word	0x58025444
 8002564:	58025458 	.word	0x58025458
 8002568:	5802546c 	.word	0x5802546c
 800256c:	58025480 	.word	0x58025480
 8002570:	58025494 	.word	0x58025494

08002574 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002580:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_DMA_IRQHandler+0x1ac>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a67      	ldr	r2, [pc, #412]	; (8002724 <HAL_DMA_IRQHandler+0x1b0>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a9b      	lsrs	r3, r3, #10
 800258c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a5f      	ldr	r2, [pc, #380]	; (8002728 <HAL_DMA_IRQHandler+0x1b4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d04a      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5d      	ldr	r2, [pc, #372]	; (800272c <HAL_DMA_IRQHandler+0x1b8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d045      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a5c      	ldr	r2, [pc, #368]	; (8002730 <HAL_DMA_IRQHandler+0x1bc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d040      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a5a      	ldr	r2, [pc, #360]	; (8002734 <HAL_DMA_IRQHandler+0x1c0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d03b      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a59      	ldr	r2, [pc, #356]	; (8002738 <HAL_DMA_IRQHandler+0x1c4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d036      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a57      	ldr	r2, [pc, #348]	; (800273c <HAL_DMA_IRQHandler+0x1c8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d031      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a56      	ldr	r2, [pc, #344]	; (8002740 <HAL_DMA_IRQHandler+0x1cc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d02c      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a54      	ldr	r2, [pc, #336]	; (8002744 <HAL_DMA_IRQHandler+0x1d0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d027      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a53      	ldr	r2, [pc, #332]	; (8002748 <HAL_DMA_IRQHandler+0x1d4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d022      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a51      	ldr	r2, [pc, #324]	; (800274c <HAL_DMA_IRQHandler+0x1d8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01d      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a50      	ldr	r2, [pc, #320]	; (8002750 <HAL_DMA_IRQHandler+0x1dc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d018      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a4e      	ldr	r2, [pc, #312]	; (8002754 <HAL_DMA_IRQHandler+0x1e0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <HAL_DMA_IRQHandler+0x1e4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a4b      	ldr	r2, [pc, #300]	; (800275c <HAL_DMA_IRQHandler+0x1e8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a4a      	ldr	r2, [pc, #296]	; (8002760 <HAL_DMA_IRQHandler+0x1ec>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_DMA_IRQHandler+0xd2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a48      	ldr	r2, [pc, #288]	; (8002764 <HAL_DMA_IRQHandler+0x1f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_DMA_IRQHandler+0xd6>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_DMA_IRQHandler+0xd8>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 842b 	beq.w	8002ea8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2208      	movs	r2, #8
 800265c:	409a      	lsls	r2, r3
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80a2 	beq.w	80027ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2e      	ldr	r2, [pc, #184]	; (8002728 <HAL_DMA_IRQHandler+0x1b4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2d      	ldr	r2, [pc, #180]	; (800272c <HAL_DMA_IRQHandler+0x1b8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d045      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2b      	ldr	r2, [pc, #172]	; (8002730 <HAL_DMA_IRQHandler+0x1bc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d040      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2a      	ldr	r2, [pc, #168]	; (8002734 <HAL_DMA_IRQHandler+0x1c0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d03b      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a28      	ldr	r2, [pc, #160]	; (8002738 <HAL_DMA_IRQHandler+0x1c4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d036      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a27      	ldr	r2, [pc, #156]	; (800273c <HAL_DMA_IRQHandler+0x1c8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d031      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a25      	ldr	r2, [pc, #148]	; (8002740 <HAL_DMA_IRQHandler+0x1cc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02c      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a24      	ldr	r2, [pc, #144]	; (8002744 <HAL_DMA_IRQHandler+0x1d0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d027      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_DMA_IRQHandler+0x1d4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d022      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a21      	ldr	r2, [pc, #132]	; (800274c <HAL_DMA_IRQHandler+0x1d8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <HAL_DMA_IRQHandler+0x1dc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_DMA_IRQHandler+0x1e0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_DMA_IRQHandler+0x1e4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1b      	ldr	r2, [pc, #108]	; (800275c <HAL_DMA_IRQHandler+0x1e8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_DMA_IRQHandler+0x1ec>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_DMA_IRQHandler+0x194>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_DMA_IRQHandler+0x1f0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d12f      	bne.n	8002768 <HAL_DMA_IRQHandler+0x1f4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf14      	ite	ne
 8002716:	2301      	movne	r3, #1
 8002718:	2300      	moveq	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	e02e      	b.n	800277c <HAL_DMA_IRQHandler+0x208>
 800271e:	bf00      	nop
 8002720:	24000000 	.word	0x24000000
 8002724:	1b4e81b5 	.word	0x1b4e81b5
 8002728:	40020010 	.word	0x40020010
 800272c:	40020028 	.word	0x40020028
 8002730:	40020040 	.word	0x40020040
 8002734:	40020058 	.word	0x40020058
 8002738:	40020070 	.word	0x40020070
 800273c:	40020088 	.word	0x40020088
 8002740:	400200a0 	.word	0x400200a0
 8002744:	400200b8 	.word	0x400200b8
 8002748:	40020410 	.word	0x40020410
 800274c:	40020428 	.word	0x40020428
 8002750:	40020440 	.word	0x40020440
 8002754:	40020458 	.word	0x40020458
 8002758:	40020470 	.word	0x40020470
 800275c:	40020488 	.word	0x40020488
 8002760:	400204a0 	.word	0x400204a0
 8002764:	400204b8 	.word	0x400204b8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0204 	bic.w	r2, r2, #4
 800278e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2208      	movs	r2, #8
 800279a:	409a      	lsls	r2, r3
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d06e      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a69      	ldr	r2, [pc, #420]	; (800296c <HAL_DMA_IRQHandler+0x3f8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d04a      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a67      	ldr	r2, [pc, #412]	; (8002970 <HAL_DMA_IRQHandler+0x3fc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d045      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a66      	ldr	r2, [pc, #408]	; (8002974 <HAL_DMA_IRQHandler+0x400>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d040      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a64      	ldr	r2, [pc, #400]	; (8002978 <HAL_DMA_IRQHandler+0x404>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d03b      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a63      	ldr	r2, [pc, #396]	; (800297c <HAL_DMA_IRQHandler+0x408>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d036      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a61      	ldr	r2, [pc, #388]	; (8002980 <HAL_DMA_IRQHandler+0x40c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d031      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a60      	ldr	r2, [pc, #384]	; (8002984 <HAL_DMA_IRQHandler+0x410>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d02c      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_DMA_IRQHandler+0x414>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d027      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5d      	ldr	r2, [pc, #372]	; (800298c <HAL_DMA_IRQHandler+0x418>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5b      	ldr	r2, [pc, #364]	; (8002990 <HAL_DMA_IRQHandler+0x41c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01d      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_DMA_IRQHandler+0x420>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a58      	ldr	r2, [pc, #352]	; (8002998 <HAL_DMA_IRQHandler+0x424>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a57      	ldr	r2, [pc, #348]	; (800299c <HAL_DMA_IRQHandler+0x428>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a55      	ldr	r2, [pc, #340]	; (80029a0 <HAL_DMA_IRQHandler+0x42c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a54      	ldr	r2, [pc, #336]	; (80029a4 <HAL_DMA_IRQHandler+0x430>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_DMA_IRQHandler+0x2ee>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_DMA_IRQHandler+0x434>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10a      	bne.n	8002878 <HAL_DMA_IRQHandler+0x304>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e003      	b.n	8002880 <HAL_DMA_IRQHandler+0x30c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2300      	movs	r3, #0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2201      	movs	r2, #1
 800288e:	409a      	lsls	r2, r3
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f043 0202 	orr.w	r2, r3, #2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2204      	movs	r2, #4
 80028aa:	409a      	lsls	r2, r3
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 808f 	beq.w	80029d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2c      	ldr	r2, [pc, #176]	; (800296c <HAL_DMA_IRQHandler+0x3f8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04a      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_DMA_IRQHandler+0x3fc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d045      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a29      	ldr	r2, [pc, #164]	; (8002974 <HAL_DMA_IRQHandler+0x400>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d040      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_DMA_IRQHandler+0x404>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d03b      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a26      	ldr	r2, [pc, #152]	; (800297c <HAL_DMA_IRQHandler+0x408>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d036      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a24      	ldr	r2, [pc, #144]	; (8002980 <HAL_DMA_IRQHandler+0x40c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d031      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a23      	ldr	r2, [pc, #140]	; (8002984 <HAL_DMA_IRQHandler+0x410>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02c      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a21      	ldr	r2, [pc, #132]	; (8002988 <HAL_DMA_IRQHandler+0x414>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d027      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a20      	ldr	r2, [pc, #128]	; (800298c <HAL_DMA_IRQHandler+0x418>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_DMA_IRQHandler+0x41c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01d      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_DMA_IRQHandler+0x420>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d018      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_DMA_IRQHandler+0x424>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_DMA_IRQHandler+0x428>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00e      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <HAL_DMA_IRQHandler+0x42c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <HAL_DMA_IRQHandler+0x430>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_IRQHandler+0x3e2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <HAL_DMA_IRQHandler+0x434>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d12a      	bne.n	80029ac <HAL_DMA_IRQHandler+0x438>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e023      	b.n	80029b4 <HAL_DMA_IRQHandler+0x440>
 800296c:	40020010 	.word	0x40020010
 8002970:	40020028 	.word	0x40020028
 8002974:	40020040 	.word	0x40020040
 8002978:	40020058 	.word	0x40020058
 800297c:	40020070 	.word	0x40020070
 8002980:	40020088 	.word	0x40020088
 8002984:	400200a0 	.word	0x400200a0
 8002988:	400200b8 	.word	0x400200b8
 800298c:	40020410 	.word	0x40020410
 8002990:	40020428 	.word	0x40020428
 8002994:	40020440 	.word	0x40020440
 8002998:	40020458 	.word	0x40020458
 800299c:	40020470 	.word	0x40020470
 80029a0:	40020488 	.word	0x40020488
 80029a4:	400204a0 	.word	0x400204a0
 80029a8:	400204b8 	.word	0x400204b8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2204      	movs	r2, #4
 80029c2:	409a      	lsls	r2, r3
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f043 0204 	orr.w	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2210      	movs	r2, #16
 80029de:	409a      	lsls	r2, r3
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a6 	beq.w	8002b36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a85      	ldr	r2, [pc, #532]	; (8002c04 <HAL_DMA_IRQHandler+0x690>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d04a      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a83      	ldr	r2, [pc, #524]	; (8002c08 <HAL_DMA_IRQHandler+0x694>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d045      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a82      	ldr	r2, [pc, #520]	; (8002c0c <HAL_DMA_IRQHandler+0x698>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d040      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a80      	ldr	r2, [pc, #512]	; (8002c10 <HAL_DMA_IRQHandler+0x69c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d03b      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7f      	ldr	r2, [pc, #508]	; (8002c14 <HAL_DMA_IRQHandler+0x6a0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d036      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a7d      	ldr	r2, [pc, #500]	; (8002c18 <HAL_DMA_IRQHandler+0x6a4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7c      	ldr	r2, [pc, #496]	; (8002c1c <HAL_DMA_IRQHandler+0x6a8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02c      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a7a      	ldr	r2, [pc, #488]	; (8002c20 <HAL_DMA_IRQHandler+0x6ac>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d027      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a79      	ldr	r2, [pc, #484]	; (8002c24 <HAL_DMA_IRQHandler+0x6b0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a77      	ldr	r2, [pc, #476]	; (8002c28 <HAL_DMA_IRQHandler+0x6b4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01d      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a76      	ldr	r2, [pc, #472]	; (8002c2c <HAL_DMA_IRQHandler+0x6b8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d018      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a74      	ldr	r2, [pc, #464]	; (8002c30 <HAL_DMA_IRQHandler+0x6bc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a73      	ldr	r2, [pc, #460]	; (8002c34 <HAL_DMA_IRQHandler+0x6c0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a71      	ldr	r2, [pc, #452]	; (8002c38 <HAL_DMA_IRQHandler+0x6c4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a70      	ldr	r2, [pc, #448]	; (8002c3c <HAL_DMA_IRQHandler+0x6c8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x516>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_DMA_IRQHandler+0x6cc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10a      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x52c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e009      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x540>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d03e      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d108      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d024      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
 8002af4:	e01f      	b.n	8002b36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01b      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
 8002b06:	e016      	b.n	8002b36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d107      	bne.n	8002b26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0208 	bic.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2220      	movs	r2, #32
 8002b40:	409a      	lsls	r2, r3
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8110 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2c      	ldr	r2, [pc, #176]	; (8002c04 <HAL_DMA_IRQHandler+0x690>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04a      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2b      	ldr	r2, [pc, #172]	; (8002c08 <HAL_DMA_IRQHandler+0x694>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d045      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <HAL_DMA_IRQHandler+0x698>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a28      	ldr	r2, [pc, #160]	; (8002c10 <HAL_DMA_IRQHandler+0x69c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d03b      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <HAL_DMA_IRQHandler+0x6a0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d036      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <HAL_DMA_IRQHandler+0x6a4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d031      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_DMA_IRQHandler+0x6a8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d02c      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_DMA_IRQHandler+0x6ac>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d027      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <HAL_DMA_IRQHandler+0x6b0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d022      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <HAL_DMA_IRQHandler+0x6b4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d01d      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <HAL_DMA_IRQHandler+0x6b8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d018      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <HAL_DMA_IRQHandler+0x6bc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <HAL_DMA_IRQHandler+0x6c0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00e      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <HAL_DMA_IRQHandler+0x6c4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_DMA_IRQHandler+0x6c8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_IRQHandler+0x678>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_DMA_IRQHandler+0x6cc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d12b      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x6d0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	e02a      	b.n	8002c58 <HAL_DMA_IRQHandler+0x6e4>
 8002c02:	bf00      	nop
 8002c04:	40020010 	.word	0x40020010
 8002c08:	40020028 	.word	0x40020028
 8002c0c:	40020040 	.word	0x40020040
 8002c10:	40020058 	.word	0x40020058
 8002c14:	40020070 	.word	0x40020070
 8002c18:	40020088 	.word	0x40020088
 8002c1c:	400200a0 	.word	0x400200a0
 8002c20:	400200b8 	.word	0x400200b8
 8002c24:	40020410 	.word	0x40020410
 8002c28:	40020428 	.word	0x40020428
 8002c2c:	40020440 	.word	0x40020440
 8002c30:	40020458 	.word	0x40020458
 8002c34:	40020470 	.word	0x40020470
 8002c38:	40020488 	.word	0x40020488
 8002c3c:	400204a0 	.word	0x400204a0
 8002c40:	400204b8 	.word	0x400204b8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8087 	beq.w	8002d6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2220      	movs	r2, #32
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d139      	bne.n	8002cee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0216 	bic.w	r2, r2, #22
 8002c88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_DMA_IRQHandler+0x736>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0208 	bic.w	r2, r2, #8
 8002cb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	223f      	movs	r2, #63	; 0x3f
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 834a 	beq.w	8003378 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
          }
          return;
 8002cec:	e344      	b.n	8003378 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d018      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d108      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02c      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
 8002d1a:	e027      	b.n	8002d6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
 8002d2c:	e01e      	b.n	8002d6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0210 	bic.w	r2, r2, #16
 8002d4a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8306 	beq.w	8003382 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8088 	beq.w	8002e94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a7a      	ldr	r2, [pc, #488]	; (8002f7c <HAL_DMA_IRQHandler+0xa08>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d04a      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a79      	ldr	r2, [pc, #484]	; (8002f80 <HAL_DMA_IRQHandler+0xa0c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d045      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a77      	ldr	r2, [pc, #476]	; (8002f84 <HAL_DMA_IRQHandler+0xa10>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d040      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a76      	ldr	r2, [pc, #472]	; (8002f88 <HAL_DMA_IRQHandler+0xa14>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d03b      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a74      	ldr	r2, [pc, #464]	; (8002f8c <HAL_DMA_IRQHandler+0xa18>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d036      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a73      	ldr	r2, [pc, #460]	; (8002f90 <HAL_DMA_IRQHandler+0xa1c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d031      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a71      	ldr	r2, [pc, #452]	; (8002f94 <HAL_DMA_IRQHandler+0xa20>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02c      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a70      	ldr	r2, [pc, #448]	; (8002f98 <HAL_DMA_IRQHandler+0xa24>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d027      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6e      	ldr	r2, [pc, #440]	; (8002f9c <HAL_DMA_IRQHandler+0xa28>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d022      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6d      	ldr	r2, [pc, #436]	; (8002fa0 <HAL_DMA_IRQHandler+0xa2c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d01d      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6b      	ldr	r2, [pc, #428]	; (8002fa4 <HAL_DMA_IRQHandler+0xa30>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d018      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6a      	ldr	r2, [pc, #424]	; (8002fa8 <HAL_DMA_IRQHandler+0xa34>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a68      	ldr	r2, [pc, #416]	; (8002fac <HAL_DMA_IRQHandler+0xa38>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00e      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a67      	ldr	r2, [pc, #412]	; (8002fb0 <HAL_DMA_IRQHandler+0xa3c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a65      	ldr	r2, [pc, #404]	; (8002fb4 <HAL_DMA_IRQHandler+0xa40>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x8b8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a64      	ldr	r2, [pc, #400]	; (8002fb8 <HAL_DMA_IRQHandler+0xa44>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d108      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x8ca>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e007      	b.n	8002e4e <HAL_DMA_IRQHandler+0x8da>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d307      	bcc.n	8002e6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f2      	bne.n	8002e4e <HAL_DMA_IRQHandler+0x8da>
 8002e68:	e000      	b.n	8002e6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e82:	e003      	b.n	8002e8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8272 	beq.w	8003382 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
 8002ea6:	e26c      	b.n	8003382 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a43      	ldr	r2, [pc, #268]	; (8002fbc <HAL_DMA_IRQHandler+0xa48>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d022      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x984>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a42      	ldr	r2, [pc, #264]	; (8002fc0 <HAL_DMA_IRQHandler+0xa4c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d01d      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x984>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a40      	ldr	r2, [pc, #256]	; (8002fc4 <HAL_DMA_IRQHandler+0xa50>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d018      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x984>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3f      	ldr	r2, [pc, #252]	; (8002fc8 <HAL_DMA_IRQHandler+0xa54>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x984>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a3d      	ldr	r2, [pc, #244]	; (8002fcc <HAL_DMA_IRQHandler+0xa58>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00e      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x984>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a3c      	ldr	r2, [pc, #240]	; (8002fd0 <HAL_DMA_IRQHandler+0xa5c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x984>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a3a      	ldr	r2, [pc, #232]	; (8002fd4 <HAL_DMA_IRQHandler+0xa60>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x984>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a39      	ldr	r2, [pc, #228]	; (8002fd8 <HAL_DMA_IRQHandler+0xa64>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <HAL_DMA_IRQHandler+0x988>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_DMA_IRQHandler+0x98a>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 823f 	beq.w	8003382 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2204      	movs	r2, #4
 8002f16:	409a      	lsls	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80cd 	beq.w	80030bc <HAL_DMA_IRQHandler+0xb48>
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80c7 	beq.w	80030bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2204      	movs	r2, #4
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d049      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8210 	beq.w	800337c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f64:	e20a      	b.n	800337c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8206 	beq.w	800337c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f78:	e200      	b.n	800337c <HAL_DMA_IRQHandler+0xe08>
 8002f7a:	bf00      	nop
 8002f7c:	40020010 	.word	0x40020010
 8002f80:	40020028 	.word	0x40020028
 8002f84:	40020040 	.word	0x40020040
 8002f88:	40020058 	.word	0x40020058
 8002f8c:	40020070 	.word	0x40020070
 8002f90:	40020088 	.word	0x40020088
 8002f94:	400200a0 	.word	0x400200a0
 8002f98:	400200b8 	.word	0x400200b8
 8002f9c:	40020410 	.word	0x40020410
 8002fa0:	40020428 	.word	0x40020428
 8002fa4:	40020440 	.word	0x40020440
 8002fa8:	40020458 	.word	0x40020458
 8002fac:	40020470 	.word	0x40020470
 8002fb0:	40020488 	.word	0x40020488
 8002fb4:	400204a0 	.word	0x400204a0
 8002fb8:	400204b8 	.word	0x400204b8
 8002fbc:	58025408 	.word	0x58025408
 8002fc0:	5802541c 	.word	0x5802541c
 8002fc4:	58025430 	.word	0x58025430
 8002fc8:	58025444 	.word	0x58025444
 8002fcc:	58025458 	.word	0x58025458
 8002fd0:	5802546c 	.word	0x5802546c
 8002fd4:	58025480 	.word	0x58025480
 8002fd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d160      	bne.n	80030a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a7f      	ldr	r2, [pc, #508]	; (80031e8 <HAL_DMA_IRQHandler+0xc74>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d04a      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a7d      	ldr	r2, [pc, #500]	; (80031ec <HAL_DMA_IRQHandler+0xc78>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d045      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a7c      	ldr	r2, [pc, #496]	; (80031f0 <HAL_DMA_IRQHandler+0xc7c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d040      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7a      	ldr	r2, [pc, #488]	; (80031f4 <HAL_DMA_IRQHandler+0xc80>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d03b      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a79      	ldr	r2, [pc, #484]	; (80031f8 <HAL_DMA_IRQHandler+0xc84>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d036      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a77      	ldr	r2, [pc, #476]	; (80031fc <HAL_DMA_IRQHandler+0xc88>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d031      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a76      	ldr	r2, [pc, #472]	; (8003200 <HAL_DMA_IRQHandler+0xc8c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d02c      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a74      	ldr	r2, [pc, #464]	; (8003204 <HAL_DMA_IRQHandler+0xc90>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d027      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a73      	ldr	r2, [pc, #460]	; (8003208 <HAL_DMA_IRQHandler+0xc94>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a71      	ldr	r2, [pc, #452]	; (800320c <HAL_DMA_IRQHandler+0xc98>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01d      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a70      	ldr	r2, [pc, #448]	; (8003210 <HAL_DMA_IRQHandler+0xc9c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d018      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <HAL_DMA_IRQHandler+0xca0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6d      	ldr	r2, [pc, #436]	; (8003218 <HAL_DMA_IRQHandler+0xca4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00e      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6b      	ldr	r2, [pc, #428]	; (800321c <HAL_DMA_IRQHandler+0xca8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6a      	ldr	r2, [pc, #424]	; (8003220 <HAL_DMA_IRQHandler+0xcac>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_DMA_IRQHandler+0xb12>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a68      	ldr	r2, [pc, #416]	; (8003224 <HAL_DMA_IRQHandler+0xcb0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <HAL_DMA_IRQHandler+0xb24>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0208 	bic.w	r2, r2, #8
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e007      	b.n	80030a8 <HAL_DMA_IRQHandler+0xb34>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0204 	bic.w	r2, r2, #4
 80030a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8165 	beq.w	800337c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030ba:	e15f      	b.n	800337c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2202      	movs	r2, #2
 80030c6:	409a      	lsls	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80c5 	beq.w	800325c <HAL_DMA_IRQHandler+0xce8>
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80bf 	beq.w	800325c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2202      	movs	r2, #2
 80030e8:	409a      	lsls	r2, r3
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d018      	beq.n	800312a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 813a 	beq.w	8003380 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003114:	e134      	b.n	8003380 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8130 	beq.w	8003380 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003128:	e12a      	b.n	8003380 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 8089 	bne.w	8003248 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <HAL_DMA_IRQHandler+0xc74>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d04a      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_DMA_IRQHandler+0xc78>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d045      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <HAL_DMA_IRQHandler+0xc7c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d040      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_DMA_IRQHandler+0xc80>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d03b      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <HAL_DMA_IRQHandler+0xc84>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d036      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a23      	ldr	r2, [pc, #140]	; (80031fc <HAL_DMA_IRQHandler+0xc88>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d031      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_DMA_IRQHandler+0xc8c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d02c      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a20      	ldr	r2, [pc, #128]	; (8003204 <HAL_DMA_IRQHandler+0xc90>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d027      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_DMA_IRQHandler+0xc94>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d022      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <HAL_DMA_IRQHandler+0xc98>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_DMA_IRQHandler+0xc9c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <HAL_DMA_IRQHandler+0xca0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_DMA_IRQHandler+0xca4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <HAL_DMA_IRQHandler+0xca8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_DMA_IRQHandler+0xcac>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xc62>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <HAL_DMA_IRQHandler+0xcb0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d128      	bne.n	8003228 <HAL_DMA_IRQHandler+0xcb4>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0214 	bic.w	r2, r2, #20
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e027      	b.n	8003238 <HAL_DMA_IRQHandler+0xcc4>
 80031e8:	40020010 	.word	0x40020010
 80031ec:	40020028 	.word	0x40020028
 80031f0:	40020040 	.word	0x40020040
 80031f4:	40020058 	.word	0x40020058
 80031f8:	40020070 	.word	0x40020070
 80031fc:	40020088 	.word	0x40020088
 8003200:	400200a0 	.word	0x400200a0
 8003204:	400200b8 	.word	0x400200b8
 8003208:	40020410 	.word	0x40020410
 800320c:	40020428 	.word	0x40020428
 8003210:	40020440 	.word	0x40020440
 8003214:	40020458 	.word	0x40020458
 8003218:	40020470 	.word	0x40020470
 800321c:	40020488 	.word	0x40020488
 8003220:	400204a0 	.word	0x400204a0
 8003224:	400204b8 	.word	0x400204b8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 020a 	bic.w	r2, r2, #10
 8003236:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8097 	beq.w	8003380 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800325a:	e091      	b.n	8003380 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	2208      	movs	r2, #8
 8003266:	409a      	lsls	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8088 	beq.w	8003382 <HAL_DMA_IRQHandler+0xe0e>
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8082 	beq.w	8003382 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a41      	ldr	r2, [pc, #260]	; (8003388 <HAL_DMA_IRQHandler+0xe14>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d04a      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3f      	ldr	r2, [pc, #252]	; (800338c <HAL_DMA_IRQHandler+0xe18>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d045      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3e      	ldr	r2, [pc, #248]	; (8003390 <HAL_DMA_IRQHandler+0xe1c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d040      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_DMA_IRQHandler+0xe20>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d03b      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <HAL_DMA_IRQHandler+0xe24>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d036      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a39      	ldr	r2, [pc, #228]	; (800339c <HAL_DMA_IRQHandler+0xe28>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a38      	ldr	r2, [pc, #224]	; (80033a0 <HAL_DMA_IRQHandler+0xe2c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d02c      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <HAL_DMA_IRQHandler+0xe30>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d027      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <HAL_DMA_IRQHandler+0xe34>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a33      	ldr	r2, [pc, #204]	; (80033ac <HAL_DMA_IRQHandler+0xe38>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01d      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <HAL_DMA_IRQHandler+0xe3c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <HAL_DMA_IRQHandler+0xe40>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <HAL_DMA_IRQHandler+0xe44>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <HAL_DMA_IRQHandler+0xe48>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_DMA_IRQHandler+0xe4c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_DMA_IRQHandler+0xdaa>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <HAL_DMA_IRQHandler+0xe50>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <HAL_DMA_IRQHandler+0xdbc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 021c 	bic.w	r2, r2, #28
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e007      	b.n	8003340 <HAL_DMA_IRQHandler+0xdcc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 020e 	bic.w	r2, r2, #14
 800333e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2201      	movs	r2, #1
 800334a:	409a      	lsls	r2, r3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
 8003376:	e004      	b.n	8003382 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003378:	bf00      	nop
 800337a:	e002      	b.n	8003382 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800337c:	bf00      	nop
 800337e:	e000      	b.n	8003382 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003380:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003382:	3728      	adds	r7, #40	; 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40020010 	.word	0x40020010
 800338c:	40020028 	.word	0x40020028
 8003390:	40020040 	.word	0x40020040
 8003394:	40020058 	.word	0x40020058
 8003398:	40020070 	.word	0x40020070
 800339c:	40020088 	.word	0x40020088
 80033a0:	400200a0 	.word	0x400200a0
 80033a4:	400200b8 	.word	0x400200b8
 80033a8:	40020410 	.word	0x40020410
 80033ac:	40020428 	.word	0x40020428
 80033b0:	40020440 	.word	0x40020440
 80033b4:	40020458 	.word	0x40020458
 80033b8:	40020470 	.word	0x40020470
 80033bc:	40020488 	.word	0x40020488
 80033c0:	400204a0 	.word	0x400204a0
 80033c4:	400204b8 	.word	0x400204b8

080033c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7f      	ldr	r2, [pc, #508]	; (80035e4 <DMA_SetConfig+0x21c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d072      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a7d      	ldr	r2, [pc, #500]	; (80035e8 <DMA_SetConfig+0x220>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d06d      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7c      	ldr	r2, [pc, #496]	; (80035ec <DMA_SetConfig+0x224>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d068      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a7a      	ldr	r2, [pc, #488]	; (80035f0 <DMA_SetConfig+0x228>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d063      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a79      	ldr	r2, [pc, #484]	; (80035f4 <DMA_SetConfig+0x22c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d05e      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a77      	ldr	r2, [pc, #476]	; (80035f8 <DMA_SetConfig+0x230>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d059      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a76      	ldr	r2, [pc, #472]	; (80035fc <DMA_SetConfig+0x234>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d054      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a74      	ldr	r2, [pc, #464]	; (8003600 <DMA_SetConfig+0x238>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d04f      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a73      	ldr	r2, [pc, #460]	; (8003604 <DMA_SetConfig+0x23c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04a      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a71      	ldr	r2, [pc, #452]	; (8003608 <DMA_SetConfig+0x240>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d045      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a70      	ldr	r2, [pc, #448]	; (800360c <DMA_SetConfig+0x244>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d040      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a6e      	ldr	r2, [pc, #440]	; (8003610 <DMA_SetConfig+0x248>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d03b      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6d      	ldr	r2, [pc, #436]	; (8003614 <DMA_SetConfig+0x24c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d036      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a6b      	ldr	r2, [pc, #428]	; (8003618 <DMA_SetConfig+0x250>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6a      	ldr	r2, [pc, #424]	; (800361c <DMA_SetConfig+0x254>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d02c      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a68      	ldr	r2, [pc, #416]	; (8003620 <DMA_SetConfig+0x258>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d027      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a67      	ldr	r2, [pc, #412]	; (8003624 <DMA_SetConfig+0x25c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d022      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a65      	ldr	r2, [pc, #404]	; (8003628 <DMA_SetConfig+0x260>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01d      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a64      	ldr	r2, [pc, #400]	; (800362c <DMA_SetConfig+0x264>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a62      	ldr	r2, [pc, #392]	; (8003630 <DMA_SetConfig+0x268>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a61      	ldr	r2, [pc, #388]	; (8003634 <DMA_SetConfig+0x26c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a5f      	ldr	r2, [pc, #380]	; (8003638 <DMA_SetConfig+0x270>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a5e      	ldr	r2, [pc, #376]	; (800363c <DMA_SetConfig+0x274>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <DMA_SetConfig+0x10a>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a5c      	ldr	r2, [pc, #368]	; (8003640 <DMA_SetConfig+0x278>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <DMA_SetConfig+0x10e>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <DMA_SetConfig+0x110>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a39      	ldr	r2, [pc, #228]	; (80035e4 <DMA_SetConfig+0x21c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d04a      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <DMA_SetConfig+0x220>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d045      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a36      	ldr	r2, [pc, #216]	; (80035ec <DMA_SetConfig+0x224>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d040      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <DMA_SetConfig+0x228>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d03b      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <DMA_SetConfig+0x22c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d036      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a32      	ldr	r2, [pc, #200]	; (80035f8 <DMA_SetConfig+0x230>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d031      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a30      	ldr	r2, [pc, #192]	; (80035fc <DMA_SetConfig+0x234>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02c      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <DMA_SetConfig+0x238>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d027      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <DMA_SetConfig+0x23c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d022      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <DMA_SetConfig+0x240>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01d      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2a      	ldr	r2, [pc, #168]	; (800360c <DMA_SetConfig+0x244>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d018      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <DMA_SetConfig+0x248>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <DMA_SetConfig+0x24c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a26      	ldr	r2, [pc, #152]	; (8003618 <DMA_SetConfig+0x250>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a24      	ldr	r2, [pc, #144]	; (800361c <DMA_SetConfig+0x254>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <DMA_SetConfig+0x1d0>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a23      	ldr	r2, [pc, #140]	; (8003620 <DMA_SetConfig+0x258>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <DMA_SetConfig+0x1d4>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <DMA_SetConfig+0x1d6>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d059      	beq.n	8003656 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	223f      	movs	r2, #63	; 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d138      	bne.n	8003644 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035e2:	e086      	b.n	80036f2 <DMA_SetConfig+0x32a>
 80035e4:	40020010 	.word	0x40020010
 80035e8:	40020028 	.word	0x40020028
 80035ec:	40020040 	.word	0x40020040
 80035f0:	40020058 	.word	0x40020058
 80035f4:	40020070 	.word	0x40020070
 80035f8:	40020088 	.word	0x40020088
 80035fc:	400200a0 	.word	0x400200a0
 8003600:	400200b8 	.word	0x400200b8
 8003604:	40020410 	.word	0x40020410
 8003608:	40020428 	.word	0x40020428
 800360c:	40020440 	.word	0x40020440
 8003610:	40020458 	.word	0x40020458
 8003614:	40020470 	.word	0x40020470
 8003618:	40020488 	.word	0x40020488
 800361c:	400204a0 	.word	0x400204a0
 8003620:	400204b8 	.word	0x400204b8
 8003624:	58025408 	.word	0x58025408
 8003628:	5802541c 	.word	0x5802541c
 800362c:	58025430 	.word	0x58025430
 8003630:	58025444 	.word	0x58025444
 8003634:	58025458 	.word	0x58025458
 8003638:	5802546c 	.word	0x5802546c
 800363c:	58025480 	.word	0x58025480
 8003640:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
}
 8003654:	e04d      	b.n	80036f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a29      	ldr	r2, [pc, #164]	; (8003700 <DMA_SetConfig+0x338>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <DMA_SetConfig+0x33c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a26      	ldr	r2, [pc, #152]	; (8003708 <DMA_SetConfig+0x340>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a24      	ldr	r2, [pc, #144]	; (800370c <DMA_SetConfig+0x344>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a23      	ldr	r2, [pc, #140]	; (8003710 <DMA_SetConfig+0x348>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a21      	ldr	r2, [pc, #132]	; (8003714 <DMA_SetConfig+0x34c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a20      	ldr	r2, [pc, #128]	; (8003718 <DMA_SetConfig+0x350>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <DMA_SetConfig+0x2de>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <DMA_SetConfig+0x354>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <DMA_SetConfig+0x2e2>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <DMA_SetConfig+0x2e4>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d108      	bne.n	80036e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	60da      	str	r2, [r3, #12]
}
 80036e0:	e007      	b.n	80036f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	58025408 	.word	0x58025408
 8003704:	5802541c 	.word	0x5802541c
 8003708:	58025430 	.word	0x58025430
 800370c:	58025444 	.word	0x58025444
 8003710:	58025458 	.word	0x58025458
 8003714:	5802546c 	.word	0x5802546c
 8003718:	58025480 	.word	0x58025480
 800371c:	58025494 	.word	0x58025494

08003720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a42      	ldr	r2, [pc, #264]	; (8003838 <DMA_CalcBaseAndBitshift+0x118>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04a      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a41      	ldr	r2, [pc, #260]	; (800383c <DMA_CalcBaseAndBitshift+0x11c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d045      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a3f      	ldr	r2, [pc, #252]	; (8003840 <DMA_CalcBaseAndBitshift+0x120>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d040      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3e      	ldr	r2, [pc, #248]	; (8003844 <DMA_CalcBaseAndBitshift+0x124>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03b      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <DMA_CalcBaseAndBitshift+0x128>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d036      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3b      	ldr	r2, [pc, #236]	; (800384c <DMA_CalcBaseAndBitshift+0x12c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d031      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a39      	ldr	r2, [pc, #228]	; (8003850 <DMA_CalcBaseAndBitshift+0x130>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02c      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a38      	ldr	r2, [pc, #224]	; (8003854 <DMA_CalcBaseAndBitshift+0x134>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d027      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a36      	ldr	r2, [pc, #216]	; (8003858 <DMA_CalcBaseAndBitshift+0x138>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a35      	ldr	r2, [pc, #212]	; (800385c <DMA_CalcBaseAndBitshift+0x13c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d01d      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a33      	ldr	r2, [pc, #204]	; (8003860 <DMA_CalcBaseAndBitshift+0x140>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a32      	ldr	r2, [pc, #200]	; (8003864 <DMA_CalcBaseAndBitshift+0x144>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a30      	ldr	r2, [pc, #192]	; (8003868 <DMA_CalcBaseAndBitshift+0x148>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2f      	ldr	r2, [pc, #188]	; (800386c <DMA_CalcBaseAndBitshift+0x14c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <DMA_CalcBaseAndBitshift+0x150>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <DMA_CalcBaseAndBitshift+0xa8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	; (8003874 <DMA_CalcBaseAndBitshift+0x154>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <DMA_CalcBaseAndBitshift+0xac>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <DMA_CalcBaseAndBitshift+0xae>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d024      	beq.n	800381c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3b10      	subs	r3, #16
 80037da:	4a27      	ldr	r2, [pc, #156]	; (8003878 <DMA_CalcBaseAndBitshift+0x158>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	4a24      	ldr	r2, [pc, #144]	; (800387c <DMA_CalcBaseAndBitshift+0x15c>)
 80037ec:	5cd3      	ldrb	r3, [r2, r3]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d908      	bls.n	800380c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <DMA_CalcBaseAndBitshift+0x160>)
 8003802:	4013      	ands	r3, r2
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	659a      	str	r2, [r3, #88]	; 0x58
 800380a:	e00d      	b.n	8003828 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <DMA_CalcBaseAndBitshift+0x160>)
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6593      	str	r3, [r2, #88]	; 0x58
 800381a:	e005      	b.n	8003828 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	aaaaaaab 	.word	0xaaaaaaab
 800387c:	0800d7d4 	.word	0x0800d7d4
 8003880:	fffffc00 	.word	0xfffffc00

08003884 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d120      	bne.n	80038da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	2b03      	cmp	r3, #3
 800389e:	d858      	bhi.n	8003952 <DMA_CheckFifoParam+0xce>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <DMA_CheckFifoParam+0x24>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038cb 	.word	0x080038cb
 80038b0:	080038b9 	.word	0x080038b9
 80038b4:	08003953 	.word	0x08003953
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d048      	beq.n	8003956 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038c8:	e045      	b.n	8003956 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038d2:	d142      	bne.n	800395a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038d8:	e03f      	b.n	800395a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e2:	d123      	bne.n	800392c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d838      	bhi.n	800395e <DMA_CheckFifoParam+0xda>
 80038ec:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <DMA_CheckFifoParam+0x70>)
 80038ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f2:	bf00      	nop
 80038f4:	08003905 	.word	0x08003905
 80038f8:	0800390b 	.word	0x0800390b
 80038fc:	08003905 	.word	0x08003905
 8003900:	0800391d 	.word	0x0800391d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
        break;
 8003908:	e030      	b.n	800396c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d025      	beq.n	8003962 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800391a:	e022      	b.n	8003962 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003924:	d11f      	bne.n	8003966 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800392a:	e01c      	b.n	8003966 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	2b02      	cmp	r3, #2
 8003932:	d902      	bls.n	800393a <DMA_CheckFifoParam+0xb6>
 8003934:	2b03      	cmp	r3, #3
 8003936:	d003      	beq.n	8003940 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003938:	e018      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
        break;
 800393e:	e015      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
    break;
 8003950:	e00b      	b.n	800396a <DMA_CheckFifoParam+0xe6>
        break;
 8003952:	bf00      	nop
 8003954:	e00a      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 8003956:	bf00      	nop
 8003958:	e008      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 800395a:	bf00      	nop
 800395c:	e006      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 800395e:	bf00      	nop
 8003960:	e004      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 8003962:	bf00      	nop
 8003964:	e002      	b.n	800396c <DMA_CheckFifoParam+0xe8>
        break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <DMA_CheckFifoParam+0xe8>
    break;
 800396a:	bf00      	nop
    }
  }

  return status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop

0800397c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a38      	ldr	r2, [pc, #224]	; (8003a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d022      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a36      	ldr	r2, [pc, #216]	; (8003a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01d      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d018      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00e      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a30      	ldr	r2, [pc, #192]	; (8003a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d009      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d004      	beq.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01a      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	3b08      	subs	r3, #8
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	461a      	mov	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a18:	e024      	b.n	8003a64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	3b10      	subs	r3, #16
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d806      	bhi.n	8003a42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d902      	bls.n	8003a42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	58025408 	.word	0x58025408
 8003a74:	5802541c 	.word	0x5802541c
 8003a78:	58025430 	.word	0x58025430
 8003a7c:	58025444 	.word	0x58025444
 8003a80:	58025458 	.word	0x58025458
 8003a84:	5802546c 	.word	0x5802546c
 8003a88:	58025480 	.word	0x58025480
 8003a8c:	58025494 	.word	0x58025494
 8003a90:	cccccccd 	.word	0xcccccccd
 8003a94:	16009600 	.word	0x16009600
 8003a98:	58025880 	.word	0x58025880
 8003a9c:	aaaaaaab 	.word	0xaaaaaaab
 8003aa0:	400204b8 	.word	0x400204b8
 8003aa4:	4002040f 	.word	0x4002040f
 8003aa8:	10008200 	.word	0x10008200
 8003aac:	40020880 	.word	0x40020880

08003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04a      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d847      	bhi.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d022      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d01d      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d018      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a21      	ldr	r2, [pc, #132]	; (8003b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b38:	671a      	str	r2, [r3, #112]	; 0x70
 8003b3a:	e009      	b.n	8003b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	461a      	mov	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	2201      	movs	r2, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	58025408 	.word	0x58025408
 8003b6c:	5802541c 	.word	0x5802541c
 8003b70:	58025430 	.word	0x58025430
 8003b74:	58025444 	.word	0x58025444
 8003b78:	58025458 	.word	0x58025458
 8003b7c:	5802546c 	.word	0x5802546c
 8003b80:	58025480 	.word	0x58025480
 8003b84:	58025494 	.word	0x58025494
 8003b88:	1600963f 	.word	0x1600963f
 8003b8c:	58025940 	.word	0x58025940
 8003b90:	1000823f 	.word	0x1000823f
 8003b94:	40020940 	.word	0x40020940

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ba6:	4b89      	ldr	r3, [pc, #548]	; (8003dcc <HAL_GPIO_Init+0x234>)
 8003ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003baa:	e194      	b.n	8003ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8186 	beq.w	8003ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d005      	beq.n	8003bdc <HAL_GPIO_Init+0x44>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d017      	beq.n	8003c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d123      	bne.n	8003cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	08da      	lsrs	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3208      	adds	r2, #8
 8003c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0203 	and.w	r2, r3, #3
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80e0 	beq.w	8003ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d10:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_GPIO_Init+0x238>)
 8003d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d16:	4a2e      	ldr	r2, [pc, #184]	; (8003dd0 <HAL_GPIO_Init+0x238>)
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_GPIO_Init+0x238>)
 8003d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d2e:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <HAL_GPIO_Init+0x23c>)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	3302      	adds	r3, #2
 8003d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <HAL_GPIO_Init+0x240>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d052      	beq.n	8003e00 <HAL_GPIO_Init+0x268>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <HAL_GPIO_Init+0x244>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_GPIO_Init+0x22e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_GPIO_Init+0x248>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02b      	beq.n	8003dc2 <HAL_GPIO_Init+0x22a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <HAL_GPIO_Init+0x24c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d025      	beq.n	8003dbe <HAL_GPIO_Init+0x226>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <HAL_GPIO_Init+0x250>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <HAL_GPIO_Init+0x222>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <HAL_GPIO_Init+0x254>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <HAL_GPIO_Init+0x21e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <HAL_GPIO_Init+0x258>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x21a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_GPIO_Init+0x25c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x216>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_GPIO_Init+0x260>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x212>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <HAL_GPIO_Init+0x264>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x20e>
 8003da2:	2309      	movs	r3, #9
 8003da4:	e02d      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003da6:	230a      	movs	r3, #10
 8003da8:	e02b      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003daa:	2308      	movs	r3, #8
 8003dac:	e029      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dae:	2307      	movs	r3, #7
 8003db0:	e027      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003db2:	2306      	movs	r3, #6
 8003db4:	e025      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003db6:	2305      	movs	r3, #5
 8003db8:	e023      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	e021      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e01f      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e01d      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e01b      	b.n	8003e02 <HAL_GPIO_Init+0x26a>
 8003dca:	bf00      	nop
 8003dcc:	58000080 	.word	0x58000080
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58000400 	.word	0x58000400
 8003dd8:	58020000 	.word	0x58020000
 8003ddc:	58020400 	.word	0x58020400
 8003de0:	58020800 	.word	0x58020800
 8003de4:	58020c00 	.word	0x58020c00
 8003de8:	58021000 	.word	0x58021000
 8003dec:	58021400 	.word	0x58021400
 8003df0:	58021800 	.word	0x58021800
 8003df4:	58021c00 	.word	0x58021c00
 8003df8:	58022000 	.word	0x58022000
 8003dfc:	58022400 	.word	0x58022400
 8003e00:	2300      	movs	r3, #0
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	f002 0203 	and.w	r2, r2, #3
 8003e08:	0092      	lsls	r2, r2, #2
 8003e0a:	4093      	lsls	r3, r2
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e12:	4938      	ldr	r1, [pc, #224]	; (8003ef4 <HAL_GPIO_Init+0x35c>)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	3302      	adds	r3, #2
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f47f ae63 	bne.w	8003bac <HAL_GPIO_Init+0x14>
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	3724      	adds	r7, #36	; 0x24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	58000400 	.word	0x58000400

08003ef8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003f00:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <HAL_HSEM_FastTake+0x2c>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3320      	adds	r3, #32
 8003f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_HSEM_FastTake+0x30>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	58026400 	.word	0x58026400
 8003f28:	80000300 	.word	0x80000300

08003f2c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003f36:	4906      	ldr	r1, [pc, #24]	; (8003f50 <HAL_HSEM_Release+0x24>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	58026400 	.word	0x58026400

08003f54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e10d      	b.n	8004182 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd f90a 	bl	8001194 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2200      	movs	r2, #0
 8003fac:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d008      	beq.n	8003fc8 <HAL_I2S_Init+0x74>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d004      	beq.n	8003fc8 <HAL_I2S_Init+0x74>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b0a      	cmp	r3, #10
 8003fc4:	f040 8087 	bne.w	80040d6 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d05a      	beq.n	8004086 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e001      	b.n	8003fe2 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b30      	cmp	r3, #48	; 0x30
 8003fe8:	d003      	beq.n	8003ff2 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003fee:	2bb0      	cmp	r3, #176	; 0xb0
 8003ff0:	d102      	bne.n	8003ff8 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e001      	b.n	8003ffc <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003ffc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004000:	f04f 0100 	mov.w	r1, #0
 8004004:	f002 fc9e 	bl	8006944 <HAL_RCCEx_GetPeriphCLKFreq>
 8004008:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004012:	d113      	bne.n	800403c <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	fbb2 f2f3 	udiv	r2, r2, r3
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	fbb2 f3f3 	udiv	r3, r2, r3
 8004036:	3305      	adds	r3, #5
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e014      	b.n	8004066 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800403c:	2220      	movs	r2, #32
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	3305      	adds	r3, #5
 8004064:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4a48      	ldr	r2, [pc, #288]	; (800418c <HAL_I2S_Init+0x238>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	08db      	lsrs	r3, r3, #3
 8004070:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e003      	b.n	800408e <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8004086:	2302      	movs	r3, #2
 8004088:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HAL_I2S_Init+0x146>
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d002      	beq.n	80040a0 <HAL_I2S_Init+0x14c>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2bff      	cmp	r3, #255	; 0xff
 800409e:	d907      	bls.n	80040b0 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a4:	f043 0210 	orr.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e068      	b.n	8004182 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040c0:	4b33      	ldr	r3, [pc, #204]	; (8004190 <HAL_I2S_Init+0x23c>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	0411      	lsls	r1, r2, #16
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	0612      	lsls	r2, r2, #24
 80040cc:	4311      	orrs	r1, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	430b      	orrs	r3, r1
 80040d4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_I2S_Init+0x240>)
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6851      	ldr	r1, [r2, #4]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6892      	ldr	r2, [r2, #8]
 80040e8:	4311      	orrs	r1, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68d2      	ldr	r2, [r2, #12]
 80040ee:	4311      	orrs	r1, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6992      	ldr	r2, [r2, #24]
 80040f4:	4311      	orrs	r1, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6a12      	ldr	r2, [r2, #32]
 80040fa:	4311      	orrs	r1, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004100:	4311      	orrs	r1, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6912      	ldr	r2, [r2, #16]
 8004106:	430a      	orrs	r2, r1
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f640 72f8 	movw	r2, #4088	; 0xff8
 800411c:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800412c:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d007      	beq.n	800415c <HAL_I2S_Init+0x208>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d003      	beq.n	800415c <HAL_I2S_Init+0x208>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b0a      	cmp	r3, #10
 800415a:	d10a      	bne.n	8004172 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	cccccccd 	.word	0xcccccccd
 8004190:	fe00ffff 	.word	0xfe00ffff
 8004194:	fdff9040 	.word	0xfdff9040

08004198 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]


  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_I2SEx_TransmitReceive_DMA+0x24>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_I2SEx_TransmitReceive_DMA+0x24>
 80041b6:	887b      	ldrh	r3, [r7, #2]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_I2SEx_TransmitReceive_DMA+0x28>
  {
    return  HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0c0      	b.n	8004342 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_I2SEx_TransmitReceive_DMA+0x38>
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
 80041ce:	e0b8      	b.n	8004342 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_I2SEx_TransmitReceive_DMA+0x48>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0b0      	b.n	8004342 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  hi2s->pTxBuffPtr = (const uint16_t *)pTxData;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->pRxBuffPtr = pRxData;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	635a      	str	r2, [r3, #52]	; 0x34

  hi2s->TxXferSize  = Size;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	887a      	ldrh	r2, [r7, #2]
 80041f8:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	887a      	ldrh	r2, [r7, #2]
 80041fe:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	887a      	ldrh	r2, [r7, #2]
 800420a:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State       = HAL_I2S_STATE_BUSY_TX_RX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2205      	movs	r2, #5
 8004216:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004228:	609a      	str	r2, [r3, #8]

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_DMATxRxHalfCplt;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	4a47      	ldr	r2, [pc, #284]	; (800434c <HAL_I2SEx_TransmitReceive_DMA+0x1b4>)
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_DMATxRxCplt;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	4a46      	ldr	r2, [pc, #280]	; (8004350 <HAL_I2SEx_TransmitReceive_DMA+0x1b8>)
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423e:	4a45      	ldr	r2, [pc, #276]	; (8004354 <HAL_I2SEx_TransmitReceive_DMA+0x1bc>)
 8004240:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	4619      	mov	r1, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3320      	adds	r3, #32
 8004252:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004258:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 800425a:	f7fd ff21 	bl	80020a0 <HAL_DMA_Start_IT>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d011      	beq.n	8004288 <HAL_I2SEx_TransmitReceive_DMA+0xf0>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	f043 0208 	orr.w	r2, r3, #8
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	e05c      	b.n	8004342 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <HAL_I2SEx_TransmitReceive_DMA+0x10e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3330      	adds	r3, #48	; 0x30
 80042b0:	4619      	mov	r1, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80042be:	f7fd feef 	bl	80020a0 <HAL_DMA_Start_IT>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d011      	beq.n	80042ec <HAL_I2SEx_TransmitReceive_DMA+0x154>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	f043 0208 	orr.w	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	e02a      	b.n	8004342 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d107      	bne.n	800430a <HAL_I2SEx_TransmitReceive_DMA+0x172>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004308:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <HAL_I2SEx_TransmitReceive_DMA+0x190>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004336:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	080043c5 	.word	0x080043c5
 8004350:	0800436d 	.word	0x0800436d
 8004354:	080043e1 	.word	0x080043e1

08004358 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <I2SEx_DMATxRxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxCplt(DMA_HandleTypeDef *hdma)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d119      	bne.n	80043b6 <I2SEx_DMATxRxCplt+0x4a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004390:	609a      	str	r2, [r3, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043a6:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	875a      	strh	r2, [r3, #58]	; 0x3a

    /* Updated HAL State */
    hi2s->State = HAL_I2S_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7fc fdaa 	bl	8000f10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2SEx_DMATxRxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7fc fd7e 	bl	8000ed4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80043fc:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	f043 0208 	orr.w	r2, r3, #8
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff ff9a 	bl	8004358 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	2b06      	cmp	r3, #6
 800443e:	d00a      	beq.n	8004456 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e040      	b.n	80044d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e03e      	b.n	80044d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800445e:	491f      	ldr	r1, [pc, #124]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4313      	orrs	r3, r2
 8004464:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004466:	f7fd f94f 	bl	8001708 <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800446c:	e009      	b.n	8004482 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800446e:	f7fd f94b 	bl	8001708 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447c:	d901      	bls.n	8004482 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e028      	b.n	80044d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800448a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448e:	d1ee      	bne.n	800446e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b1e      	cmp	r3, #30
 8004494:	d008      	beq.n	80044a8 <HAL_PWREx_ConfigSupply+0x7c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b2e      	cmp	r3, #46	; 0x2e
 800449a:	d005      	beq.n	80044a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b1d      	cmp	r3, #29
 80044a0:	d002      	beq.n	80044a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b2d      	cmp	r3, #45	; 0x2d
 80044a6:	d114      	bne.n	80044d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80044a8:	f7fd f92e 	bl	8001708 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044ae:	e009      	b.n	80044c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044b0:	f7fd f92a 	bl	8001708 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044be:	d901      	bls.n	80044c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e007      	b.n	80044d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_PWREx_ConfigSupply+0xb0>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d1ee      	bne.n	80044b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	58024800 	.word	0x58024800

080044e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08c      	sub	sp, #48	; 0x30
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f000 bc48 	b.w	8004d84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8088 	beq.w	8004612 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004502:	4b99      	ldr	r3, [pc, #612]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800450c:	4b96      	ldr	r3, [pc, #600]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	2b10      	cmp	r3, #16
 8004516:	d007      	beq.n	8004528 <HAL_RCC_OscConfig+0x48>
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	2b18      	cmp	r3, #24
 800451c:	d111      	bne.n	8004542 <HAL_RCC_OscConfig+0x62>
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004528:	4b8f      	ldr	r3, [pc, #572]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d06d      	beq.n	8004610 <HAL_RCC_OscConfig+0x130>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d169      	bne.n	8004610 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f000 bc21 	b.w	8004d84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454a:	d106      	bne.n	800455a <HAL_RCC_OscConfig+0x7a>
 800454c:	4b86      	ldr	r3, [pc, #536]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a85      	ldr	r2, [pc, #532]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e02e      	b.n	80045b8 <HAL_RCC_OscConfig+0xd8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0x9c>
 8004562:	4b81      	ldr	r3, [pc, #516]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a80      	ldr	r2, [pc, #512]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a7d      	ldr	r2, [pc, #500]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e01d      	b.n	80045b8 <HAL_RCC_OscConfig+0xd8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0xc0>
 8004586:	4b78      	ldr	r3, [pc, #480]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a77      	ldr	r2, [pc, #476]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 800458c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b75      	ldr	r3, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a74      	ldr	r2, [pc, #464]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_OscConfig+0xd8>
 80045a0:	4b71      	ldr	r3, [pc, #452]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a70      	ldr	r2, [pc, #448]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80045a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045aa:	6013      	str	r3, [r2, #0]
 80045ac:	4b6e      	ldr	r3, [pc, #440]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a6d      	ldr	r2, [pc, #436]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80045b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d013      	beq.n	80045e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd f8a2 	bl	8001708 <HAL_GetTick>
 80045c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fd f89e 	bl	8001708 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e3d4      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0xe8>
 80045e6:	e014      	b.n	8004612 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd f88e 	bl	8001708 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f0:	f7fd f88a 	bl	8001708 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b64      	cmp	r3, #100	; 0x64
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e3c0      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004602:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x110>
 800460e:	e000      	b.n	8004612 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80ca 	beq.w	80047b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004620:	4b51      	ldr	r3, [pc, #324]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004628:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800462a:	4b4f      	ldr	r3, [pc, #316]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_RCC_OscConfig+0x166>
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	2b18      	cmp	r3, #24
 800463a:	d156      	bne.n	80046ea <HAL_RCC_OscConfig+0x20a>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d151      	bne.n	80046ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004646:	4b48      	ldr	r3, [pc, #288]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RCC_OscConfig+0x17e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e392      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800465e:	4b42      	ldr	r3, [pc, #264]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 0219 	bic.w	r2, r3, #25
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	493f      	ldr	r1, [pc, #252]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd f84a 	bl	8001708 <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fd f846 	bl	8001708 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e37c      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800468a:	4b37      	ldr	r3, [pc, #220]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	f7fd f843 	bl	8001720 <HAL_GetREVID>
 800469a:	4603      	mov	r3, r0
 800469c:	f241 0203 	movw	r2, #4099	; 0x1003
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d817      	bhi.n	80046d4 <HAL_RCC_OscConfig+0x1f4>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d108      	bne.n	80046be <HAL_RCC_OscConfig+0x1de>
 80046ac:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046b4:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80046b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046bc:	e07a      	b.n	80047b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046be:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	031b      	lsls	r3, r3, #12
 80046cc:	4926      	ldr	r1, [pc, #152]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d2:	e06f      	b.n	80047b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	4921      	ldr	r1, [pc, #132]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e8:	e064      	b.n	80047b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d047      	beq.n	8004782 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 0219 	bic.w	r2, r3, #25
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	491a      	ldr	r1, [pc, #104]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004700:	4313      	orrs	r3, r2
 8004702:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd f800 	bl	8001708 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470c:	f7fc fffc 	bl	8001708 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e332      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472a:	f7fc fff9 	bl	8001720 <HAL_GetREVID>
 800472e:	4603      	mov	r3, r0
 8004730:	f241 0203 	movw	r2, #4099	; 0x1003
 8004734:	4293      	cmp	r3, r2
 8004736:	d819      	bhi.n	800476c <HAL_RCC_OscConfig+0x28c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d108      	bne.n	8004752 <HAL_RCC_OscConfig+0x272>
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004748:	4a07      	ldr	r2, [pc, #28]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 800474a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474e:	6053      	str	r3, [r2, #4]
 8004750:	e030      	b.n	80047b4 <HAL_RCC_OscConfig+0x2d4>
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	031b      	lsls	r3, r3, #12
 8004760:	4901      	ldr	r1, [pc, #4]	; (8004768 <HAL_RCC_OscConfig+0x288>)
 8004762:	4313      	orrs	r3, r2
 8004764:	604b      	str	r3, [r1, #4]
 8004766:	e025      	b.n	80047b4 <HAL_RCC_OscConfig+0x2d4>
 8004768:	58024400 	.word	0x58024400
 800476c:	4b9a      	ldr	r3, [pc, #616]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	4997      	ldr	r1, [pc, #604]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	604b      	str	r3, [r1, #4]
 8004780:	e018      	b.n	80047b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b95      	ldr	r3, [pc, #596]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a94      	ldr	r2, [pc, #592]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fc ffbb 	bl	8001708 <HAL_GetTick>
 8004792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004796:	f7fc ffb7 	bl	8001708 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e2ed      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047a8:	4b8b      	ldr	r3, [pc, #556]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80a9 	beq.w	8004914 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c2:	4b85      	ldr	r3, [pc, #532]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047cc:	4b82      	ldr	r3, [pc, #520]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d007      	beq.n	80047e8 <HAL_RCC_OscConfig+0x308>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b18      	cmp	r3, #24
 80047dc:	d13a      	bne.n	8004854 <HAL_RCC_OscConfig+0x374>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d135      	bne.n	8004854 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047e8:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_OscConfig+0x320>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e2c1      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004800:	f7fc ff8e 	bl	8001720 <HAL_GetREVID>
 8004804:	4603      	mov	r3, r0
 8004806:	f241 0203 	movw	r2, #4099	; 0x1003
 800480a:	4293      	cmp	r3, r2
 800480c:	d817      	bhi.n	800483e <HAL_RCC_OscConfig+0x35e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	2b20      	cmp	r3, #32
 8004814:	d108      	bne.n	8004828 <HAL_RCC_OscConfig+0x348>
 8004816:	4b70      	ldr	r3, [pc, #448]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800481e:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004824:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004826:	e075      	b.n	8004914 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004828:	4b6b      	ldr	r3, [pc, #428]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	069b      	lsls	r3, r3, #26
 8004836:	4968      	ldr	r1, [pc, #416]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800483c:	e06a      	b.n	8004914 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800483e:	4b66      	ldr	r3, [pc, #408]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	4962      	ldr	r1, [pc, #392]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004852:	e05f      	b.n	8004914 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d042      	beq.n	80048e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800485c:	4b5e      	ldr	r3, [pc, #376]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5d      	ldr	r2, [pc, #372]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fc ff4e 	bl	8001708 <HAL_GetTick>
 800486c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004870:	f7fc ff4a 	bl	8001708 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e280      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004882:	4b55      	ldr	r3, [pc, #340]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800488e:	f7fc ff47 	bl	8001720 <HAL_GetREVID>
 8004892:	4603      	mov	r3, r0
 8004894:	f241 0203 	movw	r2, #4099	; 0x1003
 8004898:	4293      	cmp	r3, r2
 800489a:	d817      	bhi.n	80048cc <HAL_RCC_OscConfig+0x3ec>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d108      	bne.n	80048b6 <HAL_RCC_OscConfig+0x3d6>
 80048a4:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048ac:	4a4a      	ldr	r2, [pc, #296]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80048ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b2:	6053      	str	r3, [r2, #4]
 80048b4:	e02e      	b.n	8004914 <HAL_RCC_OscConfig+0x434>
 80048b6:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	069b      	lsls	r3, r3, #26
 80048c4:	4944      	ldr	r1, [pc, #272]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
 80048ca:	e023      	b.n	8004914 <HAL_RCC_OscConfig+0x434>
 80048cc:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	493f      	ldr	r1, [pc, #252]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	60cb      	str	r3, [r1, #12]
 80048e0:	e018      	b.n	8004914 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a3c      	ldr	r2, [pc, #240]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80048e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fc ff0b 	bl	8001708 <HAL_GetTick>
 80048f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048f6:	f7fc ff07 	bl	8001708 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e23d      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004908:	4b33      	ldr	r3, [pc, #204]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d036      	beq.n	800498e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d019      	beq.n	800495c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492c:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fc fee8 	bl	8001708 <HAL_GetTick>
 8004938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800493c:	f7fc fee4 	bl	8001708 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e21a      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800494e:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x45c>
 800495a:	e018      	b.n	800498e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800495c:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 800495e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004960:	4a1d      	ldr	r2, [pc, #116]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004968:	f7fc fece 	bl	8001708 <HAL_GetTick>
 800496c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004970:	f7fc feca 	bl	8001708 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e200      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 8004984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d039      	beq.n	8004a0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d01c      	beq.n	80049dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a0c      	ldr	r2, [pc, #48]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80049a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049ae:	f7fc feab 	bl	8001708 <HAL_GetTick>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b6:	f7fc fea7 	bl	8001708 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e1dd      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049c8:	4b03      	ldr	r3, [pc, #12]	; (80049d8 <HAL_RCC_OscConfig+0x4f8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x4d6>
 80049d4:	e01b      	b.n	8004a0e <HAL_RCC_OscConfig+0x52e>
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049dc:	4b9b      	ldr	r3, [pc, #620]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a9a      	ldr	r2, [pc, #616]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 80049e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049e8:	f7fc fe8e 	bl	8001708 <HAL_GetTick>
 80049ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f0:	f7fc fe8a 	bl	8001708 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1c0      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a02:	4b92      	ldr	r3, [pc, #584]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8081 	beq.w	8004b1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a1c:	4b8c      	ldr	r3, [pc, #560]	; (8004c50 <HAL_RCC_OscConfig+0x770>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a8b      	ldr	r2, [pc, #556]	; (8004c50 <HAL_RCC_OscConfig+0x770>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a28:	f7fc fe6e 	bl	8001708 <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fc fe6a 	bl	8001708 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e1a0      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a42:	4b83      	ldr	r3, [pc, #524]	; (8004c50 <HAL_RCC_OscConfig+0x770>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d106      	bne.n	8004a64 <HAL_RCC_OscConfig+0x584>
 8004a56:	4b7d      	ldr	r3, [pc, #500]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a7c      	ldr	r2, [pc, #496]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70
 8004a62:	e02d      	b.n	8004ac0 <HAL_RCC_OscConfig+0x5e0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCC_OscConfig+0x5a6>
 8004a6c:	4b77      	ldr	r3, [pc, #476]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a76      	ldr	r2, [pc, #472]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	4b74      	ldr	r3, [pc, #464]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a73      	ldr	r2, [pc, #460]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a7e:	f023 0304 	bic.w	r3, r3, #4
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
 8004a84:	e01c      	b.n	8004ac0 <HAL_RCC_OscConfig+0x5e0>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x5c8>
 8004a8e:	4b6f      	ldr	r3, [pc, #444]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a6e      	ldr	r2, [pc, #440]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9a:	4b6c      	ldr	r3, [pc, #432]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a6b      	ldr	r2, [pc, #428]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0x5e0>
 8004aa8:	4b68      	ldr	r3, [pc, #416]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a67      	ldr	r2, [pc, #412]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab4:	4b65      	ldr	r3, [pc, #404]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a64      	ldr	r2, [pc, #400]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004aba:	f023 0304 	bic.w	r3, r3, #4
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fc fe1e 	bl	8001708 <HAL_GetTick>
 8004acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad0:	f7fc fe1a 	bl	8001708 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e14e      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ae6:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0ee      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x5f0>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fc fe08 	bl	8001708 <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fc fe04 	bl	8001708 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e138      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b12:	4b4e      	ldr	r3, [pc, #312]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ee      	bne.n	8004afc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 812d 	beq.w	8004d82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b30:	2b18      	cmp	r3, #24
 8004b32:	f000 80bd 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	f040 809e 	bne.w	8004c7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b40:	4b42      	ldr	r3, [pc, #264]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a41      	ldr	r2, [pc, #260]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fddc 	bl	8001708 <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fc fdd8 	bl	8001708 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e10e      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b66:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b72:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b76:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <HAL_RCC_OscConfig+0x774>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b82:	0112      	lsls	r2, r2, #4
 8004b84:	430a      	orrs	r2, r1
 8004b86:	4931      	ldr	r1, [pc, #196]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	3b01      	subs	r3, #1
 8004b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	025b      	lsls	r3, r3, #9
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	061b      	lsls	r3, r3, #24
 8004bb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bbc:	4923      	ldr	r1, [pc, #140]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a21      	ldr	r2, [pc, #132]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bce:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd2:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <HAL_RCC_OscConfig+0x778>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004bda:	00d2      	lsls	r2, r2, #3
 8004bdc:	491b      	ldr	r1, [pc, #108]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004be2:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f023 020c 	bic.w	r2, r3, #12
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	4917      	ldr	r1, [pc, #92]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004bf4:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f023 0202 	bic.w	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	4912      	ldr	r1, [pc, #72]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c12:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c2a:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fc fd61 	bl	8001708 <HAL_GetTick>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c48:	e011      	b.n	8004c6e <HAL_RCC_OscConfig+0x78e>
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	58024800 	.word	0x58024800
 8004c54:	fffffc0c 	.word	0xfffffc0c
 8004c58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fc fd54 	bl	8001708 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e08a      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x77c>
 8004c7a:	e082      	b.n	8004d82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7c:	4b43      	ldr	r3, [pc, #268]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a42      	ldr	r2, [pc, #264]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fc fd3e 	bl	8001708 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fc fd3a 	bl	8001708 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e070      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x7b0>
 8004cae:	e068      	b.n	8004d82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cb0:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cb6:	4b35      	ldr	r3, [pc, #212]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d031      	beq.n	8004d28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f003 0203 	and.w	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d12a      	bne.n	8004d28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d122      	bne.n	8004d28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d11a      	bne.n	8004d28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	0a5b      	lsrs	r3, r3, #9
 8004cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d111      	bne.n	8004d28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d108      	bne.n	8004d28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	0e1b      	lsrs	r3, r3, #24
 8004d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e02b      	b.n	8004d84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d2c:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d30:	08db      	lsrs	r3, r3, #3
 8004d32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d01f      	beq.n	8004d82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d4e:	f7fc fcdb 	bl	8001708 <HAL_GetTick>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d54:	bf00      	nop
 8004d56:	f7fc fcd7 	bl	8001708 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d0f9      	beq.n	8004d56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d66:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <HAL_RCC_OscConfig+0x8b0>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d6e:	00d2      	lsls	r2, r2, #3
 8004d70:	4906      	ldr	r1, [pc, #24]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <HAL_RCC_OscConfig+0x8ac>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3730      	adds	r7, #48	; 0x30
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	ffff0007 	.word	0xffff0007

08004d94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e19c      	b.n	80050e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da8:	4b8a      	ldr	r3, [pc, #552]	; (8004fd4 <HAL_RCC_ClockConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d910      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b87      	ldr	r3, [pc, #540]	; (8004fd4 <HAL_RCC_ClockConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 020f 	bic.w	r2, r3, #15
 8004dbe:	4985      	ldr	r1, [pc, #532]	; (8004fd4 <HAL_RCC_ClockConfig+0x240>)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b83      	ldr	r3, [pc, #524]	; (8004fd4 <HAL_RCC_ClockConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e184      	b.n	80050e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d010      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	4b7b      	ldr	r3, [pc, #492]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d908      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004df4:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	4975      	ldr	r1, [pc, #468]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d908      	bls.n	8004e34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e22:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	496a      	ldr	r1, [pc, #424]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d010      	beq.n	8004e62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	4b64      	ldr	r3, [pc, #400]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d908      	bls.n	8004e62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e50:	4b61      	ldr	r3, [pc, #388]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	495e      	ldr	r1, [pc, #376]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d010      	beq.n	8004e90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d908      	bls.n	8004e90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e7e:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	4953      	ldr	r1, [pc, #332]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d010      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	4b4d      	ldr	r3, [pc, #308]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d908      	bls.n	8004ebe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eac:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f023 020f 	bic.w	r2, r3, #15
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4947      	ldr	r1, [pc, #284]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d055      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004eca:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4940      	ldr	r1, [pc, #256]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ee4:	4b3c      	ldr	r3, [pc, #240]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d121      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0f6      	b.n	80050e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d115      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0ea      	b.n	80050e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f14:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0de      	b.n	80050e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f24:	4b2c      	ldr	r3, [pc, #176]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0d6      	b.n	80050e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f34:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f023 0207 	bic.w	r2, r3, #7
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4925      	ldr	r1, [pc, #148]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f46:	f7fc fbdf 	bl	8001708 <HAL_GetTick>
 8004f4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4e:	f7fc fbdb 	bl	8001708 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0be      	b.n	80050e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f64:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d1eb      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d010      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d208      	bcs.n	8004fa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f92:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f023 020f 	bic.w	r2, r3, #15
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	490e      	ldr	r1, [pc, #56]	; (8004fd8 <HAL_RCC_ClockConfig+0x244>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_ClockConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d214      	bcs.n	8004fdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <HAL_RCC_ClockConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 020f 	bic.w	r2, r3, #15
 8004fba:	4906      	ldr	r1, [pc, #24]	; (8004fd4 <HAL_RCC_ClockConfig+0x240>)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc2:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <HAL_RCC_ClockConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e086      	b.n	80050e2 <HAL_RCC_ClockConfig+0x34e>
 8004fd4:	52002000 	.word	0x52002000
 8004fd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d010      	beq.n	800500a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d208      	bcs.n	800500a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ff8:	4b3c      	ldr	r3, [pc, #240]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	4939      	ldr	r1, [pc, #228]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8005006:	4313      	orrs	r3, r2
 8005008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695a      	ldr	r2, [r3, #20]
 800501a:	4b34      	ldr	r3, [pc, #208]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005022:	429a      	cmp	r2, r3
 8005024:	d208      	bcs.n	8005038 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005026:	4b31      	ldr	r3, [pc, #196]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	492e      	ldr	r1, [pc, #184]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8005034:	4313      	orrs	r3, r2
 8005036:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d010      	beq.n	8005066 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699a      	ldr	r2, [r3, #24]
 8005048:	4b28      	ldr	r3, [pc, #160]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005050:	429a      	cmp	r2, r3
 8005052:	d208      	bcs.n	8005066 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4922      	ldr	r1, [pc, #136]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8005062:	4313      	orrs	r3, r2
 8005064:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d010      	beq.n	8005094 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800507e:	429a      	cmp	r2, r3
 8005080:	d208      	bcs.n	8005094 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005082:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4917      	ldr	r1, [pc, #92]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 8005090:	4313      	orrs	r3, r2
 8005092:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005094:	f000 f834 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8005098:	4602      	mov	r2, r0
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	4912      	ldr	r1, [pc, #72]	; (80050f0 <HAL_RCC_ClockConfig+0x35c>)
 80050a6:	5ccb      	ldrb	r3, [r1, r3]
 80050a8:	f003 031f 	and.w	r3, r3, #31
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050b2:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x358>)
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <HAL_RCC_ClockConfig+0x35c>)
 80050bc:	5cd3      	ldrb	r3, [r2, r3]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <HAL_RCC_ClockConfig+0x360>)
 80050ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050cc:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <HAL_RCC_ClockConfig+0x364>)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_RCC_ClockConfig+0x368>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fc f9d0 	bl	800147c <HAL_InitTick>
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	58024400 	.word	0x58024400
 80050f0:	0800d7a0 	.word	0x0800d7a0
 80050f4:	24000004 	.word	0x24000004
 80050f8:	24000000 	.word	0x24000000
 80050fc:	2400000c 	.word	0x2400000c

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005106:	4bb3      	ldr	r3, [pc, #716]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510e:	2b18      	cmp	r3, #24
 8005110:	f200 8155 	bhi.w	80053be <HAL_RCC_GetSysClockFreq+0x2be>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005181 	.word	0x08005181
 8005120:	080053bf 	.word	0x080053bf
 8005124:	080053bf 	.word	0x080053bf
 8005128:	080053bf 	.word	0x080053bf
 800512c:	080053bf 	.word	0x080053bf
 8005130:	080053bf 	.word	0x080053bf
 8005134:	080053bf 	.word	0x080053bf
 8005138:	080053bf 	.word	0x080053bf
 800513c:	080051a7 	.word	0x080051a7
 8005140:	080053bf 	.word	0x080053bf
 8005144:	080053bf 	.word	0x080053bf
 8005148:	080053bf 	.word	0x080053bf
 800514c:	080053bf 	.word	0x080053bf
 8005150:	080053bf 	.word	0x080053bf
 8005154:	080053bf 	.word	0x080053bf
 8005158:	080053bf 	.word	0x080053bf
 800515c:	080051ad 	.word	0x080051ad
 8005160:	080053bf 	.word	0x080053bf
 8005164:	080053bf 	.word	0x080053bf
 8005168:	080053bf 	.word	0x080053bf
 800516c:	080053bf 	.word	0x080053bf
 8005170:	080053bf 	.word	0x080053bf
 8005174:	080053bf 	.word	0x080053bf
 8005178:	080053bf 	.word	0x080053bf
 800517c:	080051b3 	.word	0x080051b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005180:	4b94      	ldr	r3, [pc, #592]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800518c:	4b91      	ldr	r3, [pc, #580]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	4a90      	ldr	r2, [pc, #576]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
 800519c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800519e:	e111      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051a0:	4b8d      	ldr	r3, [pc, #564]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051a2:	61bb      	str	r3, [r7, #24]
      break;
 80051a4:	e10e      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051a6:	4b8d      	ldr	r3, [pc, #564]	; (80053dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051a8:	61bb      	str	r3, [r7, #24]
      break;
 80051aa:	e10b      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051ac:	4b8c      	ldr	r3, [pc, #560]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051ae:	61bb      	str	r3, [r7, #24]
      break;
 80051b0:	e108      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051b2:	4b88      	ldr	r3, [pc, #544]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051bc:	4b85      	ldr	r3, [pc, #532]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051c8:	4b82      	ldr	r3, [pc, #520]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051d2:	4b80      	ldr	r3, [pc, #512]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	08db      	lsrs	r3, r3, #3
 80051d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80e1 	beq.w	80053b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	f000 8083 	beq.w	8005304 <HAL_RCC_GetSysClockFreq+0x204>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b02      	cmp	r3, #2
 8005202:	f200 80a1 	bhi.w	8005348 <HAL_RCC_GetSysClockFreq+0x248>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x114>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d056      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005212:	e099      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005214:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d02d      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005220:	4b6c      	ldr	r3, [pc, #432]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	08db      	lsrs	r3, r3, #3
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	4a6b      	ldr	r2, [pc, #428]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	ee07 3a90 	vmov	s15, r3
 8005238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524a:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525a:	ed97 6a02 	vldr	s12, [r7, #8]
 800525e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80053e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800526e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005276:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800527a:	e087      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	eddf 6a58 	vldr	s13, [pc, #352]	; 80053e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800528a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528e:	4b51      	ldr	r3, [pc, #324]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529e:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80053e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052be:	e065      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80053ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80052ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d2:	4b40      	ldr	r3, [pc, #256]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80053e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005302:	e043      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80053f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005326:	ed97 6a02 	vldr	s12, [r7, #8]
 800532a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80053e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800532e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800533a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005342:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005346:	e021      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	eddf 6a26 	vldr	s13, [pc, #152]	; 80053ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8005356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535a:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536a:	ed97 6a02 	vldr	s12, [r7, #8]
 800536e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80053e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800537e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005386:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800538a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	0a5b      	lsrs	r3, r3, #9
 8005392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005396:	3301      	adds	r3, #1
 8005398:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b0:	ee17 3a90 	vmov	r3, s15
 80053b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053b6:	e005      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]
      break;
 80053bc:	e002      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053c0:	61bb      	str	r3, [r7, #24]
      break;
 80053c2:	bf00      	nop
  }

  return sysclockfreq;
 80053c4:	69bb      	ldr	r3, [r7, #24]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	58024400 	.word	0x58024400
 80053d8:	03d09000 	.word	0x03d09000
 80053dc:	003d0900 	.word	0x003d0900
 80053e0:	01770000 	.word	0x01770000
 80053e4:	46000000 	.word	0x46000000
 80053e8:	4c742400 	.word	0x4c742400
 80053ec:	4a742400 	.word	0x4a742400
 80053f0:	4bbb8000 	.word	0x4bbb8000

080053f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053fa:	f7ff fe81 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80053fe:	4602      	mov	r2, r0
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <HAL_RCC_GetHCLKFreq+0x50>)
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	490f      	ldr	r1, [pc, #60]	; (8005448 <HAL_RCC_GetHCLKFreq+0x54>)
 800540c:	5ccb      	ldrb	r3, [r1, r3]
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HAL_RCC_GetHCLKFreq+0x50>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	4a09      	ldr	r2, [pc, #36]	; (8005448 <HAL_RCC_GetHCLKFreq+0x54>)
 8005422:	5cd3      	ldrb	r3, [r2, r3]
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	fa22 f303 	lsr.w	r3, r2, r3
 800542e:	4a07      	ldr	r2, [pc, #28]	; (800544c <HAL_RCC_GetHCLKFreq+0x58>)
 8005430:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005432:	4a07      	ldr	r2, [pc, #28]	; (8005450 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <HAL_RCC_GetHCLKFreq+0x58>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	58024400 	.word	0x58024400
 8005448:	0800d7a0 	.word	0x0800d7a0
 800544c:	24000004 	.word	0x24000004
 8005450:	24000000 	.word	0x24000000

08005454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005458:	f7ff ffcc 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b06      	ldr	r3, [pc, #24]	; (8005478 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	091b      	lsrs	r3, r3, #4
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4904      	ldr	r1, [pc, #16]	; (800547c <HAL_RCC_GetPCLK1Freq+0x28>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	58024400 	.word	0x58024400
 800547c:	0800d7a0 	.word	0x0800d7a0

08005480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005484:	f7ff ffb6 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4904      	ldr	r1, [pc, #16]	; (80054a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	58024400 	.word	0x58024400
 80054a8:	0800d7a0 	.word	0x0800d7a0

080054ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	223f      	movs	r2, #63	; 0x3f
 80054ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <HAL_RCC_GetClockConfig+0x7c>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0207 	and.w	r2, r3, #7
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <HAL_RCC_GetClockConfig+0x7c>)
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <HAL_RCC_GetClockConfig+0x7c>)
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 020f 	and.w	r2, r3, #15
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80054e0:	4b11      	ldr	r3, [pc, #68]	; (8005528 <HAL_RCC_GetClockConfig+0x7c>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80054ec:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <HAL_RCC_GetClockConfig+0x7c>)
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCC_GetClockConfig+0x7c>)
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <HAL_RCC_GetClockConfig+0x7c>)
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <HAL_RCC_GetClockConfig+0x80>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 020f 	and.w	r2, r3, #15
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	601a      	str	r2, [r3, #0]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	58024400 	.word	0x58024400
 800552c:	52002000 	.word	0x52002000

08005530 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005534:	b0ca      	sub	sp, #296	; 0x128
 8005536:	af00      	add	r7, sp, #0
 8005538:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800553c:	2300      	movs	r3, #0
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005554:	2500      	movs	r5, #0
 8005556:	ea54 0305 	orrs.w	r3, r4, r5
 800555a:	d049      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005566:	d02f      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005568:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800556c:	d828      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800556e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005572:	d01a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005578:	d822      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800557e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005582:	d007      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005584:	e01c      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005586:	4bb8      	ldr	r3, [pc, #736]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	4ab7      	ldr	r2, [pc, #732]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800558c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005590:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005592:	e01a      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005598:	3308      	adds	r3, #8
 800559a:	2102      	movs	r1, #2
 800559c:	4618      	mov	r0, r3
 800559e:	f002 fb61 	bl	8007c64 <RCCEx_PLL2_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055a8:	e00f      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ae:	3328      	adds	r3, #40	; 0x28
 80055b0:	2102      	movs	r1, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f002 fc08 	bl	8007dc8 <RCCEx_PLL3_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055be:	e004      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055c6:	e000      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80055c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055d2:	4ba5      	ldr	r3, [pc, #660]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e0:	4aa1      	ldr	r2, [pc, #644]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055e2:	430b      	orrs	r3, r1
 80055e4:	6513      	str	r3, [r2, #80]	; 0x50
 80055e6:	e003      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80055fc:	f04f 0900 	mov.w	r9, #0
 8005600:	ea58 0309 	orrs.w	r3, r8, r9
 8005604:	d047      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	2b04      	cmp	r3, #4
 800560e:	d82a      	bhi.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	0800562d 	.word	0x0800562d
 800561c:	0800563b 	.word	0x0800563b
 8005620:	08005651 	.word	0x08005651
 8005624:	0800566f 	.word	0x0800566f
 8005628:	0800566f 	.word	0x0800566f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b8e      	ldr	r3, [pc, #568]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4a8d      	ldr	r2, [pc, #564]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005638:	e01a      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	3308      	adds	r3, #8
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f002 fb0e 	bl	8007c64 <RCCEx_PLL2_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800564e:	e00f      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005654:	3328      	adds	r3, #40	; 0x28
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f002 fbb5 	bl	8007dc8 <RCCEx_PLL3_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005664:	e004      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800566c:	e000      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800566e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005678:	4b7b      	ldr	r3, [pc, #492]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	f023 0107 	bic.w	r1, r3, #7
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005686:	4a78      	ldr	r2, [pc, #480]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005688:	430b      	orrs	r3, r1
 800568a:	6513      	str	r3, [r2, #80]	; 0x50
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80056a2:	f04f 0b00 	mov.w	fp, #0
 80056a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80056aa:	d04c      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b6:	d030      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80056b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056bc:	d829      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056be:	2bc0      	cmp	r3, #192	; 0xc0
 80056c0:	d02d      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056c2:	2bc0      	cmp	r3, #192	; 0xc0
 80056c4:	d825      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056c6:	2b80      	cmp	r3, #128	; 0x80
 80056c8:	d018      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d821      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d007      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80056d6:	e01c      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d8:	4b63      	ldr	r3, [pc, #396]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a62      	ldr	r2, [pc, #392]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056e4:	e01c      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ea:	3308      	adds	r3, #8
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f002 fab8 	bl	8007c64 <RCCEx_PLL2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056fa:	e011      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005700:	3328      	adds	r3, #40	; 0x28
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f002 fb5f 	bl	8007dc8 <RCCEx_PLL3_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005728:	4b4f      	ldr	r3, [pc, #316]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800572a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	4a4c      	ldr	r2, [pc, #304]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005738:	430b      	orrs	r3, r1
 800573a:	6513      	str	r3, [r2, #80]	; 0x50
 800573c:	e003      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005752:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005756:	2300      	movs	r3, #0
 8005758:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800575c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005760:	460b      	mov	r3, r1
 8005762:	4313      	orrs	r3, r2
 8005764:	d053      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800576e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005772:	d035      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005778:	d82e      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800577a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800577e:	d031      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005780:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005784:	d828      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800578a:	d01a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800578c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005790:	d822      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800579a:	d007      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800579c:	e01c      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579e:	4b32      	ldr	r3, [pc, #200]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a31      	ldr	r2, [pc, #196]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057aa:	e01c      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b0:	3308      	adds	r3, #8
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 fa55 	bl	8007c64 <RCCEx_PLL2_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057c0:	e011      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c6:	3328      	adds	r3, #40	; 0x28
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f002 fafc 	bl	8007dc8 <RCCEx_PLL3_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057d6:	e006      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057de:	e002      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80057e0:	bf00      	nop
 80057e2:	e000      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80057e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057fe:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005800:	430b      	orrs	r3, r1
 8005802:	6593      	str	r3, [r2, #88]	; 0x58
 8005804:	e003      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800580a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800581a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800581e:	2300      	movs	r3, #0
 8005820:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005824:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d056      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800583a:	d038      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800583c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005840:	d831      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005842:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005846:	d034      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005848:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800584c:	d82b      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800584e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005852:	d01d      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005858:	d825      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d006      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800585e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005864:	e01f      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005866:	bf00      	nop
 8005868:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586c:	4ba2      	ldr	r3, [pc, #648]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	4aa1      	ldr	r2, [pc, #644]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005878:	e01c      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587e:	3308      	adds	r3, #8
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f002 f9ee 	bl	8007c64 <RCCEx_PLL2_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800588e:	e011      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005894:	3328      	adds	r3, #40	; 0x28
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f002 fa95 	bl	8007dc8 <RCCEx_PLL3_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058bc:	4b8e      	ldr	r3, [pc, #568]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058cc:	4a8a      	ldr	r2, [pc, #552]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6593      	str	r3, [r2, #88]	; 0x58
 80058d2:	e003      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80058e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058ec:	2300      	movs	r3, #0
 80058ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80058f6:	460b      	mov	r3, r1
 80058f8:	4313      	orrs	r3, r2
 80058fa:	d03a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005902:	2b30      	cmp	r3, #48	; 0x30
 8005904:	d01f      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005906:	2b30      	cmp	r3, #48	; 0x30
 8005908:	d819      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800590a:	2b20      	cmp	r3, #32
 800590c:	d00c      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800590e:	2b20      	cmp	r3, #32
 8005910:	d815      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d019      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005916:	2b10      	cmp	r3, #16
 8005918:	d111      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591a:	4b77      	ldr	r3, [pc, #476]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	4a76      	ldr	r2, [pc, #472]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005926:	e011      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592c:	3308      	adds	r3, #8
 800592e:	2102      	movs	r1, #2
 8005930:	4618      	mov	r0, r3
 8005932:	f002 f997 	bl	8007c64 <RCCEx_PLL2_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800593c:	e006      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005944:	e002      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800594a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005954:	4b68      	ldr	r3, [pc, #416]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005958:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	4a65      	ldr	r2, [pc, #404]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005964:	430b      	orrs	r3, r1
 8005966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800597e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005988:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d051      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800599c:	d035      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800599e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a2:	d82e      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059a8:	d031      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80059aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059ae:	d828      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b4:	d01a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80059b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ba:	d822      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80059c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c4:	d007      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80059c6:	e01c      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4b4b      	ldr	r3, [pc, #300]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a4a      	ldr	r2, [pc, #296]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059d4:	e01c      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059da:	3308      	adds	r3, #8
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 f940 	bl	8007c64 <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059ea:	e011      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f0:	3328      	adds	r3, #40	; 0x28
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f002 f9e7 	bl	8007dc8 <RCCEx_PLL3_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a18:	4b37      	ldr	r3, [pc, #220]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	4a34      	ldr	r2, [pc, #208]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6513      	str	r3, [r2, #80]	; 0x50
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a46:	2300      	movs	r3, #0
 8005a48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d056      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a60:	d033      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005a62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a66:	d82c      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a6c:	d02f      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005a6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a72:	d826      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a78:	d02b      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005a7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a7e:	d820      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a84:	d012      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a8a:	d81a      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d022      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a94:	d115      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f002 f8e0 	bl	8007c64 <RCCEx_PLL2_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005aaa:	e015      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab0:	3328      	adds	r3, #40	; 0x28
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f002 f987 	bl	8007dc8 <RCCEx_PLL3_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ac8:	e006      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005aca:	bf00      	nop
 8005acc:	e004      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e002      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10d      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aee:	4a02      	ldr	r2, [pc, #8]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6513      	str	r3, [r2, #80]	; 0x50
 8005af4:	e006      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005af6:	bf00      	nop
 8005af8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	d055      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b30:	d033      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b36:	d82c      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d02f      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d826      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b48:	d02b      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b4e:	d820      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b54:	d012      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b5a:	d81a      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d022      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b64:	d115      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 f878 	bl	8007c64 <RCCEx_PLL2_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b7a:	e015      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b80:	3328      	adds	r3, #40	; 0x28
 8005b82:	2101      	movs	r1, #1
 8005b84:	4618      	mov	r0, r3
 8005b86:	f002 f91f 	bl	8007dc8 <RCCEx_PLL3_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b98:	e006      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e004      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10b      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005bb0:	4ba3      	ldr	r3, [pc, #652]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bc0:	4a9f      	ldr	r2, [pc, #636]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d037      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfa:	d00e      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c00:	d816      	bhi.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c0a:	d111      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4b8c      	ldr	r3, [pc, #560]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a8b      	ldr	r2, [pc, #556]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c18:	e00f      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1e:	3308      	adds	r3, #8
 8005c20:	2101      	movs	r1, #1
 8005c22:	4618      	mov	r0, r3
 8005c24:	f002 f81e 	bl	8007c64 <RCCEx_PLL2_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c2e:	e004      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c36:	e000      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c42:	4b7f      	ldr	r3, [pc, #508]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	4a7b      	ldr	r2, [pc, #492]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c52:	430b      	orrs	r3, r1
 8005c54:	6513      	str	r3, [r2, #80]	; 0x50
 8005c56:	e003      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c70:	2300      	movs	r3, #0
 8005c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d039      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d81c      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005ccd 	.word	0x08005ccd
 8005c94:	08005ca1 	.word	0x08005ca1
 8005c98:	08005caf 	.word	0x08005caf
 8005c9c:	08005ccd 	.word	0x08005ccd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca0:	4b67      	ldr	r3, [pc, #412]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	4a66      	ldr	r2, [pc, #408]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cac:	e00f      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 ffd4 	bl	8007c64 <RCCEx_PLL2_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cc2:	e004      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cca:	e000      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cd6:	4b5a      	ldr	r3, [pc, #360]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	f023 0103 	bic.w	r1, r3, #3
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce4:	4a56      	ldr	r2, [pc, #344]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cea:	e003      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f000 809f 	beq.w	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d16:	4b4b      	ldr	r3, [pc, #300]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4a      	ldr	r2, [pc, #296]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d22:	f7fb fcf1 	bl	8001708 <HAL_GetTick>
 8005d26:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2c:	f7fb fcec 	bl	8001708 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b64      	cmp	r3, #100	; 0x64
 8005d3a:	d903      	bls.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d42:	e005      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d44:	4b3f      	ldr	r3, [pc, #252]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ed      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d179      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d58:	4b39      	ldr	r3, [pc, #228]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d64:	4053      	eors	r3, r2
 8005d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d015      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d6e:	4b34      	ldr	r3, [pc, #208]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d7a:	4b31      	ldr	r3, [pc, #196]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	4a30      	ldr	r2, [pc, #192]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d84:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d86:	4b2e      	ldr	r3, [pc, #184]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	4a2d      	ldr	r2, [pc, #180]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d90:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d92:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da6:	d118      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fb fcae 	bl	8001708 <HAL_GetTick>
 8005dac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db0:	e00d      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7fb fca9 	bl	8001708 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005dbc:	1ad2      	subs	r2, r2, r3
 8005dbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d903      	bls.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005dcc:	e005      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dce:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0eb      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d129      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df2:	d10e      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005df4:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e04:	091a      	lsrs	r2, r3, #4
 8005e06:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	4a0d      	ldr	r2, [pc, #52]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6113      	str	r3, [r2, #16]
 8005e10:	e005      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e1c:	6113      	str	r3, [r2, #16]
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2e:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6713      	str	r3, [r2, #112]	; 0x70
 8005e34:	e00e      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005e3e:	e009      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005e40:	58024400 	.word	0x58024400
 8005e44:	58024800 	.word	0x58024800
 8005e48:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f002 0301 	and.w	r3, r2, #1
 8005e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f000 8089 	beq.w	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e7c:	2b28      	cmp	r3, #40	; 0x28
 8005e7e:	d86b      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005e80:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005f61 	.word	0x08005f61
 8005e8c:	08005f59 	.word	0x08005f59
 8005e90:	08005f59 	.word	0x08005f59
 8005e94:	08005f59 	.word	0x08005f59
 8005e98:	08005f59 	.word	0x08005f59
 8005e9c:	08005f59 	.word	0x08005f59
 8005ea0:	08005f59 	.word	0x08005f59
 8005ea4:	08005f59 	.word	0x08005f59
 8005ea8:	08005f2d 	.word	0x08005f2d
 8005eac:	08005f59 	.word	0x08005f59
 8005eb0:	08005f59 	.word	0x08005f59
 8005eb4:	08005f59 	.word	0x08005f59
 8005eb8:	08005f59 	.word	0x08005f59
 8005ebc:	08005f59 	.word	0x08005f59
 8005ec0:	08005f59 	.word	0x08005f59
 8005ec4:	08005f59 	.word	0x08005f59
 8005ec8:	08005f43 	.word	0x08005f43
 8005ecc:	08005f59 	.word	0x08005f59
 8005ed0:	08005f59 	.word	0x08005f59
 8005ed4:	08005f59 	.word	0x08005f59
 8005ed8:	08005f59 	.word	0x08005f59
 8005edc:	08005f59 	.word	0x08005f59
 8005ee0:	08005f59 	.word	0x08005f59
 8005ee4:	08005f59 	.word	0x08005f59
 8005ee8:	08005f61 	.word	0x08005f61
 8005eec:	08005f59 	.word	0x08005f59
 8005ef0:	08005f59 	.word	0x08005f59
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	08005f59 	.word	0x08005f59
 8005efc:	08005f59 	.word	0x08005f59
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f59 	.word	0x08005f59
 8005f08:	08005f61 	.word	0x08005f61
 8005f0c:	08005f59 	.word	0x08005f59
 8005f10:	08005f59 	.word	0x08005f59
 8005f14:	08005f59 	.word	0x08005f59
 8005f18:	08005f59 	.word	0x08005f59
 8005f1c:	08005f59 	.word	0x08005f59
 8005f20:	08005f59 	.word	0x08005f59
 8005f24:	08005f59 	.word	0x08005f59
 8005f28:	08005f61 	.word	0x08005f61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f30:	3308      	adds	r3, #8
 8005f32:	2101      	movs	r1, #1
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 fe95 	bl	8007c64 <RCCEx_PLL2_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f40:	e00f      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f46:	3328      	adds	r3, #40	; 0x28
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 ff3c 	bl	8007dc8 <RCCEx_PLL3_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f56:	e004      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f5e:	e000      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f6a:	4bbf      	ldr	r3, [pc, #764]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f78:	4abb      	ldr	r2, [pc, #748]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	6553      	str	r3, [r2, #84]	; 0x54
 8005f7e:	e003      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f002 0302 	and.w	r3, r2, #2
 8005f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	d041      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d824      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08006005 	.word	0x08006005
 8005fbc:	08005fd1 	.word	0x08005fd1
 8005fc0:	08005fe7 	.word	0x08005fe7
 8005fc4:	08006005 	.word	0x08006005
 8005fc8:	08006005 	.word	0x08006005
 8005fcc:	08006005 	.word	0x08006005
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 fe43 	bl	8007c64 <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fe4:	e00f      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fea:	3328      	adds	r3, #40	; 0x28
 8005fec:	2101      	movs	r1, #1
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 feea 	bl	8007dc8 <RCCEx_PLL3_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ffa:	e004      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006002:	e000      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800600e:	4b96      	ldr	r3, [pc, #600]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	f023 0107 	bic.w	r1, r3, #7
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601c:	4a92      	ldr	r2, [pc, #584]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800601e:	430b      	orrs	r3, r1
 8006020:	6553      	str	r3, [r2, #84]	; 0x54
 8006022:	e003      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f002 0304 	and.w	r3, r2, #4
 8006038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800603c:	2300      	movs	r3, #0
 800603e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006042:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006046:	460b      	mov	r3, r1
 8006048:	4313      	orrs	r3, r2
 800604a:	d044      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006054:	2b05      	cmp	r3, #5
 8006056:	d825      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	080060ad 	.word	0x080060ad
 8006064:	08006079 	.word	0x08006079
 8006068:	0800608f 	.word	0x0800608f
 800606c:	080060ad 	.word	0x080060ad
 8006070:	080060ad 	.word	0x080060ad
 8006074:	080060ad 	.word	0x080060ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800607c:	3308      	adds	r3, #8
 800607e:	2101      	movs	r1, #1
 8006080:	4618      	mov	r0, r3
 8006082:	f001 fdef 	bl	8007c64 <RCCEx_PLL2_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800608c:	e00f      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006092:	3328      	adds	r3, #40	; 0x28
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fe96 	bl	8007dc8 <RCCEx_PLL3_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060a2:	e004      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060aa:	e000      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80060ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10b      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060b6:	4b6c      	ldr	r3, [pc, #432]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	f023 0107 	bic.w	r1, r3, #7
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c6:	4a68      	ldr	r2, [pc, #416]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6593      	str	r3, [r2, #88]	; 0x58
 80060cc:	e003      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f002 0320 	and.w	r3, r2, #32
 80060e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d055      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006102:	d033      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006108:	d82c      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d02f      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006114:	d826      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800611a:	d02b      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800611c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006120:	d820      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006126:	d012      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800612c:	d81a      	bhi.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d022      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006136:	d115      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613c:	3308      	adds	r3, #8
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f001 fd8f 	bl	8007c64 <RCCEx_PLL2_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800614c:	e015      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006152:	3328      	adds	r3, #40	; 0x28
 8006154:	2102      	movs	r1, #2
 8006156:	4618      	mov	r0, r3
 8006158:	f001 fe36 	bl	8007dc8 <RCCEx_PLL3_Config>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006162:	e00a      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800616a:	e006      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800616c:	bf00      	nop
 800616e:	e004      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006182:	4b39      	ldr	r3, [pc, #228]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	4a35      	ldr	r2, [pc, #212]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006194:	430b      	orrs	r3, r1
 8006196:	6553      	str	r3, [r2, #84]	; 0x54
 8006198:	e003      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800619e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80061ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80061bc:	460b      	mov	r3, r1
 80061be:	4313      	orrs	r3, r2
 80061c0:	d058      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061ce:	d033      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80061d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061d4:	d82c      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061da:	d02f      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80061dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e0:	d826      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061e6:	d02b      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80061e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ec:	d820      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f2:	d012      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80061f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f8:	d81a      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d022      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006202:	d115      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006208:	3308      	adds	r3, #8
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fd29 	bl	8007c64 <RCCEx_PLL2_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006218:	e015      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621e:	3328      	adds	r3, #40	; 0x28
 8006220:	2102      	movs	r1, #2
 8006222:	4618      	mov	r0, r3
 8006224:	f001 fdd0 	bl	8007dc8 <RCCEx_PLL3_Config>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800622e:	e00a      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006236:	e006      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006238:	bf00      	nop
 800623a:	e004      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800623c:	bf00      	nop
 800623e:	e002      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006240:	bf00      	nop
 8006242:	e000      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10e      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006252:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800625e:	4a02      	ldr	r2, [pc, #8]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006260:	430b      	orrs	r3, r1
 8006262:	6593      	str	r3, [r2, #88]	; 0x58
 8006264:	e006      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006266:	bf00      	nop
 8006268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800628a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	d055      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800629c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062a0:	d033      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80062a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062a6:	d82c      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ac:	d02f      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80062ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b2:	d826      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062b8:	d02b      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80062ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062be:	d820      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c4:	d012      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80062c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062ca:	d81a      	bhi.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d022      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80062d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d4:	d115      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062da:	3308      	adds	r3, #8
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 fcc0 	bl	8007c64 <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062ea:	e015      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f0:	3328      	adds	r3, #40	; 0x28
 80062f2:	2102      	movs	r1, #2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fd67 	bl	8007dc8 <RCCEx_PLL3_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006300:	e00a      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006308:	e006      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800630a:	bf00      	nop
 800630c:	e004      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800630e:	bf00      	nop
 8006310:	e002      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006320:	4ba1      	ldr	r3, [pc, #644]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006324:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006330:	4a9d      	ldr	r2, [pc, #628]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006332:	430b      	orrs	r3, r1
 8006334:	6593      	str	r3, [r2, #88]	; 0x58
 8006336:	e003      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800633c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	f002 0308 	and.w	r3, r2, #8
 800634c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006356:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800635a:	460b      	mov	r3, r1
 800635c:	4313      	orrs	r3, r2
 800635e:	d01e      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636c:	d10c      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800636e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006372:	3328      	adds	r3, #40	; 0x28
 8006374:	2102      	movs	r1, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fd26 	bl	8007dc8 <RCCEx_PLL3_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006388:	4b87      	ldr	r3, [pc, #540]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800638a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006398:	4a83      	ldr	r2, [pc, #524]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800639a:	430b      	orrs	r3, r1
 800639c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f002 0310 	and.w	r3, r2, #16
 80063aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80063b8:	460b      	mov	r3, r1
 80063ba:	4313      	orrs	r3, r2
 80063bc:	d01e      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ca:	d10c      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d0:	3328      	adds	r3, #40	; 0x28
 80063d2:	2102      	movs	r1, #2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 fcf7 	bl	8007dc8 <RCCEx_PLL3_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063e6:	4b70      	ldr	r3, [pc, #448]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063f6:	4a6c      	ldr	r2, [pc, #432]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006412:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d03e      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006428:	d022      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800642a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800642e:	d81b      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006438:	d00b      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800643a:	e015      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	3308      	adds	r3, #8
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f001 fc0d 	bl	8007c64 <RCCEx_PLL2_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006450:	e00f      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006456:	3328      	adds	r3, #40	; 0x28
 8006458:	2102      	movs	r1, #2
 800645a:	4618      	mov	r0, r3
 800645c:	f001 fcb4 	bl	8007dc8 <RCCEx_PLL3_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800647a:	4b4b      	ldr	r3, [pc, #300]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006486:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800648a:	4a47      	ldr	r2, [pc, #284]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6593      	str	r3, [r2, #88]	; 0x58
 8006490:	e003      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80064a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80064a8:	2300      	movs	r3, #0
 80064aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80064b0:	460b      	mov	r3, r1
 80064b2:	4313      	orrs	r3, r2
 80064b4:	d03b      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064c2:	d01f      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80064c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064c8:	d818      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80064ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80064d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064d4:	d007      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80064d6:	e011      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d8:	4b33      	ldr	r3, [pc, #204]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	4a32      	ldr	r2, [pc, #200]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064e4:	e00f      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ea:	3328      	adds	r3, #40	; 0x28
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 fc6a 	bl	8007dc8 <RCCEx_PLL3_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80064fa:	e004      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006502:	e000      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800650e:	4b26      	ldr	r3, [pc, #152]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651e:	4a22      	ldr	r2, [pc, #136]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6553      	str	r3, [r2, #84]	; 0x54
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800652a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800653a:	673b      	str	r3, [r7, #112]	; 0x70
 800653c:	2300      	movs	r3, #0
 800653e:	677b      	str	r3, [r7, #116]	; 0x74
 8006540:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d034      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006558:	d007      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800655a:	e011      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655c:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006568:	e00e      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656e:	3308      	adds	r3, #8
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f001 fb76 	bl	8007c64 <RCCEx_PLL2_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800657e:	e003      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	4a02      	ldr	r2, [pc, #8]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065a4:	e006      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80065c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80065c2:	2300      	movs	r3, #0
 80065c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d00c      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d4:	3328      	adds	r3, #40	; 0x28
 80065d6:	2102      	movs	r1, #2
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fbf5 	bl	8007dc8 <RCCEx_PLL3_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80065f6:	663b      	str	r3, [r7, #96]	; 0x60
 80065f8:	2300      	movs	r3, #0
 80065fa:	667b      	str	r3, [r7, #100]	; 0x64
 80065fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006600:	460b      	mov	r3, r1
 8006602:	4313      	orrs	r3, r2
 8006604:	d038      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006612:	d018      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006618:	d811      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800661a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661e:	d014      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006624:	d80b      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d106      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006630:	4bc3      	ldr	r3, [pc, #780]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4ac2      	ldr	r2, [pc, #776]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800663c:	e008      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006644:	e004      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800664e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006658:	4bb9      	ldr	r3, [pc, #740]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800665a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006668:	4ab5      	ldr	r2, [pc, #724]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800666a:	430b      	orrs	r3, r1
 800666c:	6553      	str	r3, [r2, #84]	; 0x54
 800666e:	e003      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006684:	65bb      	str	r3, [r7, #88]	; 0x58
 8006686:	2300      	movs	r3, #0
 8006688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800668a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d009      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006694:	4baa      	ldr	r3, [pc, #680]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a2:	4aa7      	ldr	r2, [pc, #668]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80066b4:	653b      	str	r3, [r7, #80]	; 0x50
 80066b6:	2300      	movs	r3, #0
 80066b8:	657b      	str	r3, [r7, #84]	; 0x54
 80066ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d00a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80066c4:	4b9e      	ldr	r3, [pc, #632]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066d4:	4a9a      	ldr	r2, [pc, #616]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d6:	430b      	orrs	r3, r1
 80066d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80066e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e8:	2300      	movs	r3, #0
 80066ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80066f0:	460b      	mov	r3, r1
 80066f2:	4313      	orrs	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066f6:	4b92      	ldr	r3, [pc, #584]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006704:	4a8e      	ldr	r2, [pc, #568]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006706:	430b      	orrs	r3, r1
 8006708:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006716:	643b      	str	r3, [r7, #64]	; 0x40
 8006718:	2300      	movs	r3, #0
 800671a:	647b      	str	r3, [r7, #68]	; 0x44
 800671c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006720:	460b      	mov	r3, r1
 8006722:	4313      	orrs	r3, r2
 8006724:	d00e      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006726:	4b86      	ldr	r3, [pc, #536]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	4a85      	ldr	r2, [pc, #532]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800672c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006730:	6113      	str	r3, [r2, #16]
 8006732:	4b83      	ldr	r3, [pc, #524]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006734:	6919      	ldr	r1, [r3, #16]
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800673e:	4a80      	ldr	r2, [pc, #512]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
 8006752:	2300      	movs	r3, #0
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006756:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800675a:	460b      	mov	r3, r1
 800675c:	4313      	orrs	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006760:	4b77      	ldr	r3, [pc, #476]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006764:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	4a74      	ldr	r2, [pc, #464]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006770:	430b      	orrs	r3, r1
 8006772:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006780:	633b      	str	r3, [r7, #48]	; 0x30
 8006782:	2300      	movs	r3, #0
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
 8006786:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	d00a      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006790:	4b6b      	ldr	r3, [pc, #428]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a0:	4a67      	ldr	r2, [pc, #412]	; (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067a2:	430b      	orrs	r3, r1
 80067a4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	2100      	movs	r1, #0
 80067b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80067bc:	460b      	mov	r3, r1
 80067be:	4313      	orrs	r3, r2
 80067c0:	d011      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	3308      	adds	r3, #8
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fa4a 	bl	8007c64 <RCCEx_PLL2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80067d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	2100      	movs	r1, #0
 80067f0:	6239      	str	r1, [r7, #32]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
 80067f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067fc:	460b      	mov	r3, r1
 80067fe:	4313      	orrs	r3, r2
 8006800:	d011      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006806:	3308      	adds	r3, #8
 8006808:	2101      	movs	r1, #1
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fa2a 	bl	8007c64 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	2100      	movs	r1, #0
 8006830:	61b9      	str	r1, [r7, #24]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800683c:	460b      	mov	r3, r1
 800683e:	4313      	orrs	r3, r2
 8006840:	d011      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006846:	3308      	adds	r3, #8
 8006848:	2102      	movs	r1, #2
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fa0a 	bl	8007c64 <RCCEx_PLL2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	2100      	movs	r1, #0
 8006870:	6139      	str	r1, [r7, #16]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d011      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006886:	3328      	adds	r3, #40	; 0x28
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fa9c 	bl	8007dc8 <RCCEx_PLL3_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	2100      	movs	r1, #0
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d011      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c6:	3328      	adds	r3, #40	; 0x28
 80068c8:	2101      	movs	r1, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fa7c 	bl	8007dc8 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80068d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	2100      	movs	r1, #0
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	607b      	str	r3, [r7, #4]
 80068f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068fc:	460b      	mov	r3, r1
 80068fe:	4313      	orrs	r3, r2
 8006900:	d011      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006906:	3328      	adds	r3, #40	; 0x28
 8006908:	2102      	movs	r1, #2
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fa5c 	bl	8007dc8 <RCCEx_PLL3_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006926:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
}
 8006934:	4618      	mov	r0, r3
 8006936:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800693a:	46bd      	mov	sp, r7
 800693c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006940:	58024400 	.word	0x58024400

08006944 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b090      	sub	sp, #64	; 0x40
 8006948:	af00      	add	r7, sp, #0
 800694a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800694e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006952:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006956:	430b      	orrs	r3, r1
 8006958:	f040 8094 	bne.w	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800695c:	4b9e      	ldr	r3, [pc, #632]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800695e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2b04      	cmp	r3, #4
 800696a:	f200 8087 	bhi.w	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	08006989 	.word	0x08006989
 8006978:	080069b1 	.word	0x080069b1
 800697c:	080069d9 	.word	0x080069d9
 8006980:	08006a75 	.word	0x08006a75
 8006984:	08006a01 	.word	0x08006a01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006988:	4b93      	ldr	r3, [pc, #588]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006994:	d108      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800699a:	4618      	mov	r0, r3
 800699c:	f001 f810 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a4:	f000 bd45 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ac:	f000 bd41 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b0:	4b89      	ldr	r3, [pc, #548]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d108      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069be:	f107 0318 	add.w	r3, r7, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fd54 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069cc:	f000 bd31 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d4:	f000 bd2d 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069d8:	4b7f      	ldr	r3, [pc, #508]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e4:	d108      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e6:	f107 030c 	add.w	r3, r7, #12
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fe94 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f4:	f000 bd1d 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fc:	f000 bd19 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a00:	4b75      	ldr	r3, [pc, #468]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a0a:	4b73      	ldr	r3, [pc, #460]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d10c      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d109      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a1c:	4b6e      	ldr	r3, [pc, #440]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	08db      	lsrs	r3, r3, #3
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	4a6d      	ldr	r2, [pc, #436]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2e:	e01f      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a30:	4b69      	ldr	r3, [pc, #420]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3c:	d106      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a44:	d102      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a46:	4b66      	ldr	r3, [pc, #408]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4a:	e011      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a4c:	4b62      	ldr	r3, [pc, #392]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a58:	d106      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a60:	d102      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a62:	4b60      	ldr	r3, [pc, #384]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a66:	e003      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a6c:	f000 bce1 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a70:	f000 bcdf 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a74:	4b5c      	ldr	r3, [pc, #368]	; (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a78:	f000 bcdb 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a80:	f000 bcd7 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a88:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	f040 80ad 	bne.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006a92:	4b51      	ldr	r3, [pc, #324]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa2:	d056      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aaa:	f200 8090 	bhi.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab2:	f000 8088 	beq.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	2bc0      	cmp	r3, #192	; 0xc0
 8006aba:	f200 8088 	bhi.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	d032      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2b80      	cmp	r3, #128	; 0x80
 8006ac8:	f200 8081 	bhi.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d014      	beq.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006ad8:	e079      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ada:	4b3f      	ldr	r3, [pc, #252]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ae6:	d108      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 ff67 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af6:	f000 bc9c 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006afe:	f000 bc98 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b02:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0e:	d108      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b10:	f107 0318 	add.w	r3, r7, #24
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fcab 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b1e:	f000 bc88 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b26:	f000 bc84 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b2a:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b36:	d108      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b38:	f107 030c 	add.w	r3, r7, #12
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fdeb 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b46:	f000 bc74 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b4e:	f000 bc70 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b52:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b5c:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	08db      	lsrs	r3, r3, #3
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	4a18      	ldr	r2, [pc, #96]	; (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b80:	e01f      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8e:	d106      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b96:	d102      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b98:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9c:	e011      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006baa:	d106      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb2:	d102      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb8:	e003      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bbe:	f000 bc38 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bc2:	f000 bc36 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bc6:	4b08      	ldr	r3, [pc, #32]	; (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bca:	f000 bc32 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd2:	f000 bc2e 	b.w	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bd6:	bf00      	nop
 8006bd8:	58024400 	.word	0x58024400
 8006bdc:	03d09000 	.word	0x03d09000
 8006be0:	003d0900 	.word	0x003d0900
 8006be4:	01770000 	.word	0x01770000
 8006be8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	f040 809c 	bne.w	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006bfa:	4b9e      	ldr	r3, [pc, #632]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006c02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c0a:	d054      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c12:	f200 808b 	bhi.w	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c1c:	f000 8083 	beq.w	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c26:	f200 8081 	bhi.w	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c30:	d02f      	beq.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c38:	d878      	bhi.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c46:	d012      	beq.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006c48:	e070      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c4a:	4b8a      	ldr	r3, [pc, #552]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c56:	d107      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 feaf 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c66:	e3e4      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c6c:	e3e1      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c6e:	4b81      	ldr	r3, [pc, #516]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7c:	f107 0318 	add.w	r3, r7, #24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fbf5 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c8a:	e3d2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c90:	e3cf      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c92:	4b78      	ldr	r3, [pc, #480]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca0:	f107 030c 	add.w	r3, r7, #12
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fd37 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cae:	e3c0      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb4:	e3bd      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cb6:	4b6f      	ldr	r3, [pc, #444]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cc0:	4b6c      	ldr	r3, [pc, #432]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d10c      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cd2:	4b68      	ldr	r3, [pc, #416]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	4a66      	ldr	r2, [pc, #408]	; (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	e01e      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ce6:	4b63      	ldr	r3, [pc, #396]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf2:	d106      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cfa:	d102      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cfc:	4b5f      	ldr	r3, [pc, #380]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d00:	e010      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d02:	4b5c      	ldr	r3, [pc, #368]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d16:	d102      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d18:	4b59      	ldr	r3, [pc, #356]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d1c:	e002      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d22:	e386      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d24:	e385      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d26:	4b57      	ldr	r3, [pc, #348]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2a:	e382      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d30:	e37f      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d36:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	f040 80a7 	bne.w	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006d40:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d44:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d50:	d055      	beq.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d58:	f200 8096 	bhi.w	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d62:	f000 8084 	beq.w	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d6c:	f200 808c 	bhi.w	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d76:	d030      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d7e:	f200 8083 	bhi.w	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d8e:	d012      	beq.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006d90:	e07a      	b.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d92:	4b38      	ldr	r3, [pc, #224]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d9e:	d107      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fe0b 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dae:	e340      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db4:	e33d      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dc2:	d107      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc4:	f107 0318 	add.w	r3, r7, #24
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fb51 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd2:	e32e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd8:	e32b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dda:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de6:	d107      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de8:	f107 030c 	add.w	r3, r7, #12
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fc93 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df6:	e31c      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dfc:	e319      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dfe:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d10c      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e1a:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	08db      	lsrs	r3, r3, #3
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	e01e      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d106      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e42:	d102      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e44:	4b0d      	ldr	r3, [pc, #52]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e48:	e010      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e56:	d106      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5e:	d102      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e6a:	e2e2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e6c:	e2e1      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e72:	e2de      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e74:	58024400 	.word	0x58024400
 8006e78:	03d09000 	.word	0x03d09000
 8006e7c:	003d0900 	.word	0x003d0900
 8006e80:	01770000 	.word	0x01770000
 8006e84:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8c:	e2d1      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e92:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006e96:	430b      	orrs	r3, r1
 8006e98:	f040 809c 	bne.w	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e9c:	4b93      	ldr	r3, [pc, #588]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eac:	d054      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb4:	f200 808b 	bhi.w	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ebe:	f000 8083 	beq.w	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ec8:	f200 8081 	bhi.w	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed2:	d02f      	beq.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eda:	d878      	bhi.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee8:	d012      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006eea:	e070      	b.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006eec:	4b7f      	ldr	r3, [pc, #508]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fd5e 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f08:	e293      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f0e:	e290      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f10:	4b76      	ldr	r3, [pc, #472]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f1e:	f107 0318 	add.w	r3, r7, #24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 faa4 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2c:	e281      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f32:	e27e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f34:	4b6d      	ldr	r3, [pc, #436]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f40:	d107      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f42:	f107 030c 	add.w	r3, r7, #12
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fbe6 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f50:	e26f      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f56:	e26c      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f58:	4b64      	ldr	r3, [pc, #400]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f62:	4b62      	ldr	r3, [pc, #392]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f74:	4b5d      	ldr	r3, [pc, #372]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	08db      	lsrs	r3, r3, #3
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	4a5c      	ldr	r2, [pc, #368]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f86:	e01e      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f88:	4b58      	ldr	r3, [pc, #352]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f9c:	d102      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f9e:	4b55      	ldr	r3, [pc, #340]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa2:	e010      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fa4:	4b51      	ldr	r3, [pc, #324]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb8:	d102      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fba:	4b4f      	ldr	r3, [pc, #316]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fbe:	e002      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006fc4:	e235      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fc6:	e234      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fc8:	4b4c      	ldr	r3, [pc, #304]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fcc:	e231      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fd2:	e22e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	f040 808f 	bne.w	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006fe2:	4b42      	ldr	r3, [pc, #264]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006fea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ff2:	d06b      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ffa:	d874      	bhi.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007002:	d056      	beq.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800700a:	d86c      	bhi.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007012:	d03b      	beq.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800701a:	d864      	bhi.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007022:	d021      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800702a:	d85c      	bhi.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007038:	d004      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800703a:	e054      	b.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800703c:	f7fe fa0a 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 8007040:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007042:	e1f6      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007044:	4b29      	ldr	r3, [pc, #164]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800704c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007050:	d107      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007052:	f107 0318 	add.w	r3, r7, #24
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fa0a 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007060:	e1e7      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007066:	e1e4      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007068:	4b20      	ldr	r3, [pc, #128]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007074:	d107      	bne.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007076:	f107 030c 	add.w	r3, r7, #12
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fb4c 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007084:	e1d5      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708a:	e1d2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800708c:	4b17      	ldr	r3, [pc, #92]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b04      	cmp	r3, #4
 8007096:	d109      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007098:	4b14      	ldr	r3, [pc, #80]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	08db      	lsrs	r3, r3, #3
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	4a13      	ldr	r2, [pc, #76]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070aa:	e1c2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070b0:	e1bf      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070b2:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d102      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80070c0:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c4:	e1b5      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ca:	e1b2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070d8:	d102      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80070da:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070de:	e1a8      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070e4:	e1a5      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ea:	e1a2      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070ec:	58024400 	.word	0x58024400
 80070f0:	03d09000 	.word	0x03d09000
 80070f4:	003d0900 	.word	0x003d0900
 80070f8:	01770000 	.word	0x01770000
 80070fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007104:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007108:	430b      	orrs	r3, r1
 800710a:	d173      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800710c:	4b9c      	ldr	r3, [pc, #624]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800710e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007114:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800711c:	d02f      	beq.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007124:	d863      	bhi.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007132:	d012      	beq.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007134:	e05b      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007136:	4b92      	ldr	r3, [pc, #584]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800713e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007142:	d107      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007144:	f107 0318 	add.w	r3, r7, #24
 8007148:	4618      	mov	r0, r3
 800714a:	f000 f991 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007152:	e16e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007158:	e16b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800715a:	4b89      	ldr	r3, [pc, #548]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007166:	d107      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007168:	f107 030c 	add.w	r3, r7, #12
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fad3 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007176:	e15c      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800717c:	e159      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800717e:	4b80      	ldr	r3, [pc, #512]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007186:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007188:	4b7d      	ldr	r3, [pc, #500]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b04      	cmp	r3, #4
 8007192:	d10c      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800719a:	4b79      	ldr	r3, [pc, #484]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	08db      	lsrs	r3, r3, #3
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	4a77      	ldr	r2, [pc, #476]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071a6:	fa22 f303 	lsr.w	r3, r2, r3
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ac:	e01e      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071ae:	4b74      	ldr	r3, [pc, #464]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ba:	d106      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071c2:	d102      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071c4:	4b70      	ldr	r3, [pc, #448]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c8:	e010      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071ca:	4b6d      	ldr	r3, [pc, #436]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071d6:	d106      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071de:	d102      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071e0:	4b6a      	ldr	r3, [pc, #424]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80071ea:	e122      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071ec:	e121      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f2:	e11e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80071f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80071fc:	430b      	orrs	r3, r1
 80071fe:	d133      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007200:	4b5f      	ldr	r3, [pc, #380]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007208:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007216:	d012      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007218:	e023      	b.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800721a:	4b59      	ldr	r3, [pc, #356]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007226:	d107      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fbc7 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007236:	e0fc      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800723c:	e0f9      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800723e:	4b50      	ldr	r3, [pc, #320]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800724a:	d107      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800724c:	f107 0318 	add.w	r3, r7, #24
 8007250:	4618      	mov	r0, r3
 8007252:	f000 f90d 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725a:	e0ea      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007260:	e0e7      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007266:	e0e4      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007270:	430b      	orrs	r3, r1
 8007272:	f040 808d 	bne.w	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007276:	4b42      	ldr	r3, [pc, #264]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800727e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007286:	d06b      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800728e:	d874      	bhi.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007296:	d056      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729e:	d86c      	bhi.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072a6:	d03b      	beq.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072ae:	d864      	bhi.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b6:	d021      	beq.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072be:	d85c      	bhi.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072cc:	d004      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80072ce:	e054      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80072d0:	f000 f8b8 	bl	8007444 <HAL_RCCEx_GetD3PCLK1Freq>
 80072d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80072d6:	e0ac      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072d8:	4b29      	ldr	r3, [pc, #164]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072e4:	d107      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e6:	f107 0318 	add.w	r3, r7, #24
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f8c0 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072f4:	e09d      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072fa:	e09a      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072fc:	4b20      	ldr	r3, [pc, #128]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007308:	d107      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800730a:	f107 030c 	add.w	r3, r7, #12
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fa02 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007318:	e08b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800731e:	e088      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007320:	4b17      	ldr	r3, [pc, #92]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b04      	cmp	r3, #4
 800732a:	d109      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800732c:	4b14      	ldr	r3, [pc, #80]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	08db      	lsrs	r3, r3, #3
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	4a13      	ldr	r2, [pc, #76]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800733e:	e078      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007344:	e075      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007346:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007352:	d102      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007358:	e06b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800735e:	e068      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800736c:	d102      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007372:	e05e      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007378:	e05b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800737e:	e058      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007380:	58024400 	.word	0x58024400
 8007384:	03d09000 	.word	0x03d09000
 8007388:	003d0900 	.word	0x003d0900
 800738c:	01770000 	.word	0x01770000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007394:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007398:	430b      	orrs	r3, r1
 800739a:	d148      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800739c:	4b27      	ldr	r3, [pc, #156]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800739e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ac:	d02a      	beq.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b4:	d838      	bhi.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c2:	d00d      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80073c4:	e030      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073c6:	4b1d      	ldr	r3, [pc, #116]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073d2:	d102      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80073d4:	4b1a      	ldr	r3, [pc, #104]	; (8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073d8:	e02b      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073de:	e028      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073e0:	4b16      	ldr	r3, [pc, #88]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ec:	d107      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fae4 	bl	80079c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073fc:	e019      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007402:	e016      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007404:	4b0d      	ldr	r3, [pc, #52]	; (800743c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800740c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007410:	d107      	bne.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007412:	f107 0318 	add.w	r3, r7, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f82a 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007420:	e007      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007426:	e004      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800742c:	e001      	b.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007434:	4618      	mov	r0, r3
 8007436:	3740      	adds	r7, #64	; 0x40
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	58024400 	.word	0x58024400
 8007440:	01770000 	.word	0x01770000

08007444 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007448:	f7fd ffd4 	bl	80053f4 <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4904      	ldr	r1, [pc, #16]	; (800746c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	58024400 	.word	0x58024400
 800746c:	0800d7a0 	.word	0x0800d7a0

08007470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007470:	b480      	push	{r7}
 8007472:	b089      	sub	sp, #36	; 0x24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007478:	4ba1      	ldr	r3, [pc, #644]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007482:	4b9f      	ldr	r3, [pc, #636]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	0b1b      	lsrs	r3, r3, #12
 8007488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800748c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800748e:	4b9c      	ldr	r3, [pc, #624]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	091b      	lsrs	r3, r3, #4
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800749a:	4b99      	ldr	r3, [pc, #612]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8111 	beq.w	80076e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	f000 8083 	beq.w	80075cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	f200 80a1 	bhi.w	8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d056      	beq.n	8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80074da:	e099      	b.n	8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074dc:	4b88      	ldr	r3, [pc, #544]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02d      	beq.n	8007544 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e8:	4b85      	ldr	r3, [pc, #532]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	08db      	lsrs	r3, r3, #3
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	4a84      	ldr	r2, [pc, #528]	; (8007704 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
 80074f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b7b      	ldr	r3, [pc, #492]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a03 	vldr	s12, [r7, #12]
 8007526:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007542:	e087      	b.n	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800770c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b6a      	ldr	r3, [pc, #424]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a03 	vldr	s12, [r7, #12]
 800756a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007586:	e065      	b.n	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b59      	ldr	r3, [pc, #356]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ca:	e043      	b.n	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b48      	ldr	r3, [pc, #288]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760e:	e021      	b.n	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b37      	ldr	r3, [pc, #220]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a03 	vldr	s12, [r7, #12]
 8007636:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007652:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007654:	4b2a      	ldr	r3, [pc, #168]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	0a5b      	lsrs	r3, r3, #9
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800766a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800766e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767a:	ee17 2a90 	vmov	r2, s15
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007682:	4b1f      	ldr	r3, [pc, #124]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	0c1b      	lsrs	r3, r3, #16
 8007688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800768c:	ee07 3a90 	vmov	s15, r3
 8007690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800769c:	edd7 6a07 	vldr	s13, [r7, #28]
 80076a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a8:	ee17 2a90 	vmov	r2, s15
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80076b0:	4b13      	ldr	r3, [pc, #76]	; (8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d6:	ee17 2a90 	vmov	r2, s15
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80076de:	e008      	b.n	80076f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	609a      	str	r2, [r3, #8]
}
 80076f2:	bf00      	nop
 80076f4:	3724      	adds	r7, #36	; 0x24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400
 8007704:	03d09000 	.word	0x03d09000
 8007708:	46000000 	.word	0x46000000
 800770c:	4c742400 	.word	0x4c742400
 8007710:	4a742400 	.word	0x4a742400
 8007714:	4bbb8000 	.word	0x4bbb8000

08007718 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007718:	b480      	push	{r7}
 800771a:	b089      	sub	sp, #36	; 0x24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007720:	4ba1      	ldr	r3, [pc, #644]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	f003 0303 	and.w	r3, r3, #3
 8007728:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800772a:	4b9f      	ldr	r3, [pc, #636]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	0d1b      	lsrs	r3, r3, #20
 8007730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007734:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007736:	4b9c      	ldr	r3, [pc, #624]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007742:	4b99      	ldr	r3, [pc, #612]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007746:	08db      	lsrs	r3, r3, #3
 8007748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	fb02 f303 	mul.w	r3, r2, r3
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8111 	beq.w	8007988 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b02      	cmp	r3, #2
 800776a:	f000 8083 	beq.w	8007874 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b02      	cmp	r3, #2
 8007772:	f200 80a1 	bhi.w	80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d056      	beq.n	8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007782:	e099      	b.n	80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007784:	4b88      	ldr	r3, [pc, #544]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d02d      	beq.n	80077ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007790:	4b85      	ldr	r3, [pc, #532]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	08db      	lsrs	r3, r3, #3
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	4a84      	ldr	r2, [pc, #528]	; (80079ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800779c:	fa22 f303 	lsr.w	r3, r2, r3
 80077a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ba:	4b7b      	ldr	r3, [pc, #492]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80077ea:	e087      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80077fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fe:	4b6a      	ldr	r3, [pc, #424]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007812:	eddf 5a67 	vldr	s11, [pc, #412]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800782e:	e065      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800783e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007842:	4b59      	ldr	r3, [pc, #356]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007852:	ed97 6a03 	vldr	s12, [r7, #12]
 8007856:	eddf 5a56 	vldr	s11, [pc, #344]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800785a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007872:	e043      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007886:	4b48      	ldr	r3, [pc, #288]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007896:	ed97 6a03 	vldr	s12, [r7, #12]
 800789a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800789e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b6:	e021      	b.n	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ca:	4b37      	ldr	r3, [pc, #220]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078da:	ed97 6a03 	vldr	s12, [r7, #12]
 80078de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80078fc:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	0a5b      	lsrs	r3, r3, #9
 8007902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007916:	edd7 6a07 	vldr	s13, [r7, #28]
 800791a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007922:	ee17 2a90 	vmov	r2, s15
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800792a:	4b1f      	ldr	r3, [pc, #124]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	ee07 3a90 	vmov	s15, r3
 8007938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007944:	edd7 6a07 	vldr	s13, [r7, #28]
 8007948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800794c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007950:	ee17 2a90 	vmov	r2, s15
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007958:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	0e1b      	lsrs	r3, r3, #24
 800795e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800796e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007972:	edd7 6a07 	vldr	s13, [r7, #28]
 8007976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797e:	ee17 2a90 	vmov	r2, s15
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007986:	e008      	b.n	800799a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	609a      	str	r2, [r3, #8]
}
 800799a:	bf00      	nop
 800799c:	3724      	adds	r7, #36	; 0x24
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	58024400 	.word	0x58024400
 80079ac:	03d09000 	.word	0x03d09000
 80079b0:	46000000 	.word	0x46000000
 80079b4:	4c742400 	.word	0x4c742400
 80079b8:	4a742400 	.word	0x4a742400
 80079bc:	4bbb8000 	.word	0x4bbb8000

080079c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b089      	sub	sp, #36	; 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079c8:	4ba0      	ldr	r3, [pc, #640]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80079d2:	4b9e      	ldr	r3, [pc, #632]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80079de:	4b9b      	ldr	r3, [pc, #620]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079e8:	4b98      	ldr	r3, [pc, #608]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ec:	08db      	lsrs	r3, r3, #3
 80079ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	fb02 f303 	mul.w	r3, r2, r3
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8111 	beq.w	8007c2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	f000 8083 	beq.w	8007b1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	f200 80a1 	bhi.w	8007b5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d056      	beq.n	8007ad6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007a28:	e099      	b.n	8007b5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a2a:	4b88      	ldr	r3, [pc, #544]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02d      	beq.n	8007a92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a36:	4b85      	ldr	r3, [pc, #532]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	08db      	lsrs	r3, r3, #3
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	4a83      	ldr	r2, [pc, #524]	; (8007c50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007a42:	fa22 f303 	lsr.w	r3, r2, r3
 8007a46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	ee07 3a90 	vmov	s15, r3
 8007a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a60:	4b7a      	ldr	r3, [pc, #488]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a74:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a90:	e087      	b.n	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa4:	4b69      	ldr	r3, [pc, #420]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad4:	e065      	b.n	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae8:	4b58      	ldr	r3, [pc, #352]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af0:	ee07 3a90 	vmov	s15, r3
 8007af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b18:	e043      	b.n	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2c:	4b47      	ldr	r3, [pc, #284]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b34:	ee07 3a90 	vmov	s15, r3
 8007b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b40:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b5c:	e021      	b.n	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b68:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007c58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b70:	4b36      	ldr	r3, [pc, #216]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b78:	ee07 3a90 	vmov	s15, r3
 8007b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b80:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b84:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ba0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007ba2:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	0a5b      	lsrs	r3, r3, #9
 8007ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc8:	ee17 2a90 	vmov	r2, s15
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007bd0:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	0c1b      	lsrs	r3, r3, #16
 8007bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf6:	ee17 2a90 	vmov	r2, s15
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007bfe:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	0e1b      	lsrs	r3, r3, #24
 8007c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c24:	ee17 2a90 	vmov	r2, s15
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007c2c:	e008      	b.n	8007c40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	609a      	str	r2, [r3, #8]
}
 8007c40:	bf00      	nop
 8007c42:	3724      	adds	r7, #36	; 0x24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	03d09000 	.word	0x03d09000
 8007c54:	46000000 	.word	0x46000000
 8007c58:	4c742400 	.word	0x4c742400
 8007c5c:	4a742400 	.word	0x4a742400
 8007c60:	4bbb8000 	.word	0x4bbb8000

08007c64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c72:	4b53      	ldr	r3, [pc, #332]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d101      	bne.n	8007c82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e099      	b.n	8007db6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c82:	4b4f      	ldr	r3, [pc, #316]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a4e      	ldr	r2, [pc, #312]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c8e:	f7f9 fd3b 	bl	8001708 <HAL_GetTick>
 8007c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c94:	e008      	b.n	8007ca8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c96:	f7f9 fd37 	bl	8001708 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e086      	b.n	8007db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ca8:	4b45      	ldr	r3, [pc, #276]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f0      	bne.n	8007c96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007cb4:	4b42      	ldr	r3, [pc, #264]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	031b      	lsls	r3, r3, #12
 8007cc2:	493f      	ldr	r1, [pc, #252]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	628b      	str	r3, [r1, #40]	; 0x28
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	025b      	lsls	r3, r3, #9
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	041b      	lsls	r3, r3, #16
 8007ce6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	061b      	lsls	r3, r3, #24
 8007cf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cf8:	4931      	ldr	r1, [pc, #196]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007cfe:	4b30      	ldr	r3, [pc, #192]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	492d      	ldr	r1, [pc, #180]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d10:	4b2b      	ldr	r3, [pc, #172]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	f023 0220 	bic.w	r2, r3, #32
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	4928      	ldr	r1, [pc, #160]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d22:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d28:	f023 0310 	bic.w	r3, r3, #16
 8007d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d2e:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <RCCEx_PLL2_Config+0x160>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	69d2      	ldr	r2, [r2, #28]
 8007d3a:	00d2      	lsls	r2, r2, #3
 8007d3c:	4920      	ldr	r1, [pc, #128]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d42:	4b1f      	ldr	r3, [pc, #124]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d48:	f043 0310 	orr.w	r3, r3, #16
 8007d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d54:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a19      	ldr	r2, [pc, #100]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d60:	e00f      	b.n	8007d82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d106      	bne.n	8007d76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d74:	e005      	b.n	8007d82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d82:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a0e      	ldr	r2, [pc, #56]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d8e:	f7f9 fcbb 	bl	8001708 <HAL_GetTick>
 8007d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d94:	e008      	b.n	8007da8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d96:	f7f9 fcb7 	bl	8001708 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e006      	b.n	8007db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <RCCEx_PLL2_Config+0x15c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	58024400 	.word	0x58024400
 8007dc4:	ffff0007 	.word	0xffff0007

08007dc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007dd6:	4b53      	ldr	r3, [pc, #332]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d101      	bne.n	8007de6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e099      	b.n	8007f1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007de6:	4b4f      	ldr	r3, [pc, #316]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a4e      	ldr	r2, [pc, #312]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df2:	f7f9 fc89 	bl	8001708 <HAL_GetTick>
 8007df6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007df8:	e008      	b.n	8007e0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dfa:	f7f9 fc85 	bl	8001708 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e086      	b.n	8007f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e0c:	4b45      	ldr	r3, [pc, #276]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f0      	bne.n	8007dfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e18:	4b42      	ldr	r3, [pc, #264]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	051b      	lsls	r3, r3, #20
 8007e26:	493f      	ldr	r1, [pc, #252]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	628b      	str	r3, [r1, #40]	; 0x28
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	025b      	lsls	r3, r3, #9
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	431a      	orrs	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	061b      	lsls	r3, r3, #24
 8007e58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e5c:	4931      	ldr	r1, [pc, #196]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e62:	4b30      	ldr	r3, [pc, #192]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	492d      	ldr	r1, [pc, #180]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e74:	4b2b      	ldr	r3, [pc, #172]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	4928      	ldr	r1, [pc, #160]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e86:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	4a26      	ldr	r2, [pc, #152]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e92:	4b24      	ldr	r3, [pc, #144]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e96:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <RCCEx_PLL3_Config+0x160>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	69d2      	ldr	r2, [r2, #28]
 8007e9e:	00d2      	lsls	r2, r2, #3
 8007ea0:	4920      	ldr	r1, [pc, #128]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ea6:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	4a1e      	ldr	r2, [pc, #120]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d106      	bne.n	8007ec6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007eb8:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	4a19      	ldr	r2, [pc, #100]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ebe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ec4:	e00f      	b.n	8007ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d106      	bne.n	8007eda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ecc:	4b15      	ldr	r3, [pc, #84]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ed2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ed8:	e005      	b.n	8007ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007eda:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	4a11      	ldr	r2, [pc, #68]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ee6:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a0e      	ldr	r2, [pc, #56]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef2:	f7f9 fc09 	bl	8001708 <HAL_GetTick>
 8007ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ef8:	e008      	b.n	8007f0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007efa:	f7f9 fc05 	bl	8001708 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d901      	bls.n	8007f0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e006      	b.n	8007f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <RCCEx_PLL3_Config+0x15c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0f0      	beq.n	8007efa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	58024400 	.word	0x58024400
 8007f28:	ffff0007 	.word	0xffff0007

08007f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e049      	b.n	8007fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f841 	bl	8007fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f000 f9e8 	bl	8008340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
	...

08007ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b01      	cmp	r3, #1
 8008002:	d001      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e054      	b.n	80080b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0201 	orr.w	r2, r2, #1
 800801e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a26      	ldr	r2, [pc, #152]	; (80080c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d022      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008032:	d01d      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a22      	ldr	r2, [pc, #136]	; (80080c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d018      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a21      	ldr	r2, [pc, #132]	; (80080c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d013      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a1f      	ldr	r2, [pc, #124]	; (80080cc <HAL_TIM_Base_Start_IT+0xdc>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00e      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a1e      	ldr	r2, [pc, #120]	; (80080d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d009      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1c      	ldr	r2, [pc, #112]	; (80080d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0x80>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1b      	ldr	r2, [pc, #108]	; (80080d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d115      	bne.n	800809c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	4b19      	ldr	r3, [pc, #100]	; (80080dc <HAL_TIM_Base_Start_IT+0xec>)
 8008078:	4013      	ands	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b06      	cmp	r3, #6
 8008080:	d015      	beq.n	80080ae <HAL_TIM_Base_Start_IT+0xbe>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008088:	d011      	beq.n	80080ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 0201 	orr.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809a:	e008      	b.n	80080ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	e000      	b.n	80080b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40010400 	.word	0x40010400
 80080d4:	40001800 	.word	0x40001800
 80080d8:	40014000 	.word	0x40014000
 80080dc:	00010007 	.word	0x00010007

080080e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d020      	beq.n	8008144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01b      	beq.n	8008144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0202 	mvn.w	r2, #2
 8008114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f8e9 	bl	8008302 <HAL_TIM_IC_CaptureCallback>
 8008130:	e005      	b.n	800813e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f8db 	bl	80082ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f8ec 	bl	8008316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	2b00      	cmp	r3, #0
 800814c:	d020      	beq.n	8008190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01b      	beq.n	8008190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0204 	mvn.w	r2, #4
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8c3 	bl	8008302 <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f8b5 	bl	80082ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f8c6 	bl	8008316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 0308 	and.w	r3, r3, #8
 8008196:	2b00      	cmp	r3, #0
 8008198:	d020      	beq.n	80081dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d01b      	beq.n	80081dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0208 	mvn.w	r2, #8
 80081ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2204      	movs	r2, #4
 80081b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f89d 	bl	8008302 <HAL_TIM_IC_CaptureCallback>
 80081c8:	e005      	b.n	80081d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f88f 	bl	80082ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f8a0 	bl	8008316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f003 0310 	and.w	r3, r3, #16
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d020      	beq.n	8008228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f003 0310 	and.w	r3, r3, #16
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01b      	beq.n	8008228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0210 	mvn.w	r2, #16
 80081f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2208      	movs	r2, #8
 80081fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f877 	bl	8008302 <HAL_TIM_IC_CaptureCallback>
 8008214:	e005      	b.n	8008222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f869 	bl	80082ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f87a 	bl	8008316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00c      	beq.n	800824c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0201 	mvn.w	r2, #1
 8008244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7f8 ff6e 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008252:	2b00      	cmp	r3, #0
 8008254:	d104      	bne.n	8008260 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00c      	beq.n	800827a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f913 	bl	80084a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00c      	beq.n	800829e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828a:	2b00      	cmp	r3, #0
 800828c:	d007      	beq.n	800829e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f90b 	bl	80084b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00c      	beq.n	80082c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f834 	bl	800832a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00c      	beq.n	80082e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d007      	beq.n	80082e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f06f 0220 	mvn.w	r2, #32
 80082de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f8d3 	bl	800848c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
	...

08008340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a46      	ldr	r2, [pc, #280]	; (800846c <TIM_Base_SetConfig+0x12c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d013      	beq.n	8008380 <TIM_Base_SetConfig+0x40>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835e:	d00f      	beq.n	8008380 <TIM_Base_SetConfig+0x40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a43      	ldr	r2, [pc, #268]	; (8008470 <TIM_Base_SetConfig+0x130>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d00b      	beq.n	8008380 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a42      	ldr	r2, [pc, #264]	; (8008474 <TIM_Base_SetConfig+0x134>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d007      	beq.n	8008380 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a41      	ldr	r2, [pc, #260]	; (8008478 <TIM_Base_SetConfig+0x138>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a40      	ldr	r2, [pc, #256]	; (800847c <TIM_Base_SetConfig+0x13c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d108      	bne.n	8008392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a35      	ldr	r2, [pc, #212]	; (800846c <TIM_Base_SetConfig+0x12c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d01f      	beq.n	80083da <TIM_Base_SetConfig+0x9a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a0:	d01b      	beq.n	80083da <TIM_Base_SetConfig+0x9a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a32      	ldr	r2, [pc, #200]	; (8008470 <TIM_Base_SetConfig+0x130>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d017      	beq.n	80083da <TIM_Base_SetConfig+0x9a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a31      	ldr	r2, [pc, #196]	; (8008474 <TIM_Base_SetConfig+0x134>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d013      	beq.n	80083da <TIM_Base_SetConfig+0x9a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a30      	ldr	r2, [pc, #192]	; (8008478 <TIM_Base_SetConfig+0x138>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d00f      	beq.n	80083da <TIM_Base_SetConfig+0x9a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2f      	ldr	r2, [pc, #188]	; (800847c <TIM_Base_SetConfig+0x13c>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d00b      	beq.n	80083da <TIM_Base_SetConfig+0x9a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a2e      	ldr	r2, [pc, #184]	; (8008480 <TIM_Base_SetConfig+0x140>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d007      	beq.n	80083da <TIM_Base_SetConfig+0x9a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2d      	ldr	r2, [pc, #180]	; (8008484 <TIM_Base_SetConfig+0x144>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d003      	beq.n	80083da <TIM_Base_SetConfig+0x9a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2c      	ldr	r2, [pc, #176]	; (8008488 <TIM_Base_SetConfig+0x148>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d108      	bne.n	80083ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a16      	ldr	r2, [pc, #88]	; (800846c <TIM_Base_SetConfig+0x12c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00f      	beq.n	8008438 <TIM_Base_SetConfig+0xf8>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a18      	ldr	r2, [pc, #96]	; (800847c <TIM_Base_SetConfig+0x13c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00b      	beq.n	8008438 <TIM_Base_SetConfig+0xf8>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a17      	ldr	r2, [pc, #92]	; (8008480 <TIM_Base_SetConfig+0x140>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d007      	beq.n	8008438 <TIM_Base_SetConfig+0xf8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a16      	ldr	r2, [pc, #88]	; (8008484 <TIM_Base_SetConfig+0x144>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d003      	beq.n	8008438 <TIM_Base_SetConfig+0xf8>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a15      	ldr	r2, [pc, #84]	; (8008488 <TIM_Base_SetConfig+0x148>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d103      	bne.n	8008440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	691a      	ldr	r2, [r3, #16]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b01      	cmp	r3, #1
 8008450:	d105      	bne.n	800845e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	f023 0201 	bic.w	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	611a      	str	r2, [r3, #16]
  }
}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	40010000 	.word	0x40010000
 8008470:	40000400 	.word	0x40000400
 8008474:	40000800 	.word	0x40000800
 8008478:	40000c00 	.word	0x40000c00
 800847c:	40010400 	.word	0x40010400
 8008480:	40014000 	.word	0x40014000
 8008484:	40014400 	.word	0x40014400
 8008488:	40014800 	.word	0x40014800

0800848c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e042      	b.n	8008560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d106      	bne.n	80084f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7f8 ff5b 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2224      	movs	r2, #36	; 0x24
 80084f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0201 	bic.w	r2, r2, #1
 8008508:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fe1e 	bl	8009154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f8b3 	bl	8008684 <UART_SetConfig>
 800851e:	4603      	mov	r3, r0
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e01b      	b.n	8008560 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fe9d 	bl	8009298 <UART_CheckIdleState>
 800855e:	4603      	mov	r3, r0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08a      	sub	sp, #40	; 0x28
 800856c:	af02      	add	r7, sp, #8
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	4613      	mov	r3, r2
 8008576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857e:	2b20      	cmp	r3, #32
 8008580:	d17b      	bne.n	800867a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <HAL_UART_Transmit+0x26>
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e074      	b.n	800867c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2221      	movs	r2, #33	; 0x21
 800859e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085a2:	f7f9 f8b1 	bl	8001708 <HAL_GetTick>
 80085a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	88fa      	ldrh	r2, [r7, #6]
 80085ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	88fa      	ldrh	r2, [r7, #6]
 80085b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c0:	d108      	bne.n	80085d4 <HAL_UART_Transmit+0x6c>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d104      	bne.n	80085d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	e003      	b.n	80085dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085dc:	e030      	b.n	8008640 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2200      	movs	r2, #0
 80085e6:	2180      	movs	r1, #128	; 0x80
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 feff 	bl	80093ec <UART_WaitOnFlagUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e03d      	b.n	800867c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10b      	bne.n	800861e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	3302      	adds	r3, #2
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	e007      	b.n	800862e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	3301      	adds	r3, #1
 800862c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1c8      	bne.n	80085de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2200      	movs	r2, #0
 8008654:	2140      	movs	r1, #64	; 0x40
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fec8 	bl	80093ec <UART_WaitOnFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e006      	b.n	800867c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	e000      	b.n	800867c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800867a:	2302      	movs	r3, #2
  }
}
 800867c:	4618      	mov	r0, r3
 800867e:	3720      	adds	r7, #32
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008688:	b092      	sub	sp, #72	; 0x48
 800868a:	af00      	add	r7, sp, #0
 800868c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	431a      	orrs	r2, r3
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4bbe      	ldr	r3, [pc, #760]	; (80089ac <UART_SetConfig+0x328>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086bc:	430b      	orrs	r3, r1
 80086be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4ab3      	ldr	r2, [pc, #716]	; (80089b0 <UART_SetConfig+0x32c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d004      	beq.n	80086f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ec:	4313      	orrs	r3, r2
 80086ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	4baf      	ldr	r3, [pc, #700]	; (80089b4 <UART_SetConfig+0x330>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	6812      	ldr	r2, [r2, #0]
 80086fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008700:	430b      	orrs	r3, r1
 8008702:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	f023 010f 	bic.w	r1, r3, #15
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4aa6      	ldr	r2, [pc, #664]	; (80089b8 <UART_SetConfig+0x334>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d177      	bne.n	8008814 <UART_SetConfig+0x190>
 8008724:	4ba5      	ldr	r3, [pc, #660]	; (80089bc <UART_SetConfig+0x338>)
 8008726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800872c:	2b28      	cmp	r3, #40	; 0x28
 800872e:	d86d      	bhi.n	800880c <UART_SetConfig+0x188>
 8008730:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <UART_SetConfig+0xb4>)
 8008732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008736:	bf00      	nop
 8008738:	080087dd 	.word	0x080087dd
 800873c:	0800880d 	.word	0x0800880d
 8008740:	0800880d 	.word	0x0800880d
 8008744:	0800880d 	.word	0x0800880d
 8008748:	0800880d 	.word	0x0800880d
 800874c:	0800880d 	.word	0x0800880d
 8008750:	0800880d 	.word	0x0800880d
 8008754:	0800880d 	.word	0x0800880d
 8008758:	080087e5 	.word	0x080087e5
 800875c:	0800880d 	.word	0x0800880d
 8008760:	0800880d 	.word	0x0800880d
 8008764:	0800880d 	.word	0x0800880d
 8008768:	0800880d 	.word	0x0800880d
 800876c:	0800880d 	.word	0x0800880d
 8008770:	0800880d 	.word	0x0800880d
 8008774:	0800880d 	.word	0x0800880d
 8008778:	080087ed 	.word	0x080087ed
 800877c:	0800880d 	.word	0x0800880d
 8008780:	0800880d 	.word	0x0800880d
 8008784:	0800880d 	.word	0x0800880d
 8008788:	0800880d 	.word	0x0800880d
 800878c:	0800880d 	.word	0x0800880d
 8008790:	0800880d 	.word	0x0800880d
 8008794:	0800880d 	.word	0x0800880d
 8008798:	080087f5 	.word	0x080087f5
 800879c:	0800880d 	.word	0x0800880d
 80087a0:	0800880d 	.word	0x0800880d
 80087a4:	0800880d 	.word	0x0800880d
 80087a8:	0800880d 	.word	0x0800880d
 80087ac:	0800880d 	.word	0x0800880d
 80087b0:	0800880d 	.word	0x0800880d
 80087b4:	0800880d 	.word	0x0800880d
 80087b8:	080087fd 	.word	0x080087fd
 80087bc:	0800880d 	.word	0x0800880d
 80087c0:	0800880d 	.word	0x0800880d
 80087c4:	0800880d 	.word	0x0800880d
 80087c8:	0800880d 	.word	0x0800880d
 80087cc:	0800880d 	.word	0x0800880d
 80087d0:	0800880d 	.word	0x0800880d
 80087d4:	0800880d 	.word	0x0800880d
 80087d8:	08008805 	.word	0x08008805
 80087dc:	2301      	movs	r3, #1
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e2:	e222      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80087e4:	2304      	movs	r3, #4
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ea:	e21e      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80087ec:	2308      	movs	r3, #8
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e21a      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80087f4:	2310      	movs	r3, #16
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e216      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80087fc:	2320      	movs	r3, #32
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e212      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008804:	2340      	movs	r3, #64	; 0x40
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e20e      	b.n	8008c2a <UART_SetConfig+0x5a6>
 800880c:	2380      	movs	r3, #128	; 0x80
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e20a      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a69      	ldr	r2, [pc, #420]	; (80089c0 <UART_SetConfig+0x33c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d130      	bne.n	8008880 <UART_SetConfig+0x1fc>
 800881e:	4b67      	ldr	r3, [pc, #412]	; (80089bc <UART_SetConfig+0x338>)
 8008820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	2b05      	cmp	r3, #5
 8008828:	d826      	bhi.n	8008878 <UART_SetConfig+0x1f4>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0x1ac>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008849 	.word	0x08008849
 8008834:	08008851 	.word	0x08008851
 8008838:	08008859 	.word	0x08008859
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	2300      	movs	r3, #0
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884e:	e1ec      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008856:	e1e8      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885e:	e1e4      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008866:	e1e0      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008868:	2320      	movs	r3, #32
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886e:	e1dc      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008870:	2340      	movs	r3, #64	; 0x40
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008876:	e1d8      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008878:	2380      	movs	r3, #128	; 0x80
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887e:	e1d4      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a4f      	ldr	r2, [pc, #316]	; (80089c4 <UART_SetConfig+0x340>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d130      	bne.n	80088ec <UART_SetConfig+0x268>
 800888a:	4b4c      	ldr	r3, [pc, #304]	; (80089bc <UART_SetConfig+0x338>)
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	f003 0307 	and.w	r3, r3, #7
 8008892:	2b05      	cmp	r3, #5
 8008894:	d826      	bhi.n	80088e4 <UART_SetConfig+0x260>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <UART_SetConfig+0x218>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088b5 	.word	0x080088b5
 80088a0:	080088bd 	.word	0x080088bd
 80088a4:	080088c5 	.word	0x080088c5
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088d5 	.word	0x080088d5
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ba:	e1b6      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80088bc:	2304      	movs	r3, #4
 80088be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c2:	e1b2      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80088c4:	2308      	movs	r3, #8
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ca:	e1ae      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80088cc:	2310      	movs	r3, #16
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d2:	e1aa      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80088d4:	2320      	movs	r3, #32
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088da:	e1a6      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80088dc:	2340      	movs	r3, #64	; 0x40
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e2:	e1a2      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80088e4:	2380      	movs	r3, #128	; 0x80
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ea:	e19e      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a35      	ldr	r2, [pc, #212]	; (80089c8 <UART_SetConfig+0x344>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d130      	bne.n	8008958 <UART_SetConfig+0x2d4>
 80088f6:	4b31      	ldr	r3, [pc, #196]	; (80089bc <UART_SetConfig+0x338>)
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d826      	bhi.n	8008950 <UART_SetConfig+0x2cc>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <UART_SetConfig+0x284>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008921 	.word	0x08008921
 800890c:	08008929 	.word	0x08008929
 8008910:	08008931 	.word	0x08008931
 8008914:	08008939 	.word	0x08008939
 8008918:	08008941 	.word	0x08008941
 800891c:	08008949 	.word	0x08008949
 8008920:	2300      	movs	r3, #0
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e180      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008928:	2304      	movs	r3, #4
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892e:	e17c      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008930:	2308      	movs	r3, #8
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008936:	e178      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893e:	e174      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008940:	2320      	movs	r3, #32
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008946:	e170      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008948:	2340      	movs	r3, #64	; 0x40
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894e:	e16c      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008950:	2380      	movs	r3, #128	; 0x80
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008956:	e168      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a1b      	ldr	r2, [pc, #108]	; (80089cc <UART_SetConfig+0x348>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d142      	bne.n	80089e8 <UART_SetConfig+0x364>
 8008962:	4b16      	ldr	r3, [pc, #88]	; (80089bc <UART_SetConfig+0x338>)
 8008964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b05      	cmp	r3, #5
 800896c:	d838      	bhi.n	80089e0 <UART_SetConfig+0x35c>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <UART_SetConfig+0x2f0>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	0800898d 	.word	0x0800898d
 8008978:	08008995 	.word	0x08008995
 800897c:	0800899d 	.word	0x0800899d
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089d1 	.word	0x080089d1
 8008988:	080089d9 	.word	0x080089d9
 800898c:	2300      	movs	r3, #0
 800898e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008992:	e14a      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008994:	2304      	movs	r3, #4
 8008996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899a:	e146      	b.n	8008c2a <UART_SetConfig+0x5a6>
 800899c:	2308      	movs	r3, #8
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a2:	e142      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089aa:	e13e      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80089ac:	cfff69f3 	.word	0xcfff69f3
 80089b0:	58000c00 	.word	0x58000c00
 80089b4:	11fff4ff 	.word	0x11fff4ff
 80089b8:	40011000 	.word	0x40011000
 80089bc:	58024400 	.word	0x58024400
 80089c0:	40004400 	.word	0x40004400
 80089c4:	40004800 	.word	0x40004800
 80089c8:	40004c00 	.word	0x40004c00
 80089cc:	40005000 	.word	0x40005000
 80089d0:	2320      	movs	r3, #32
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e128      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80089d8:	2340      	movs	r3, #64	; 0x40
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e124      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80089e0:	2380      	movs	r3, #128	; 0x80
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e6:	e120      	b.n	8008c2a <UART_SetConfig+0x5a6>
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4acb      	ldr	r2, [pc, #812]	; (8008d1c <UART_SetConfig+0x698>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d176      	bne.n	8008ae0 <UART_SetConfig+0x45c>
 80089f2:	4bcb      	ldr	r3, [pc, #812]	; (8008d20 <UART_SetConfig+0x69c>)
 80089f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089fa:	2b28      	cmp	r3, #40	; 0x28
 80089fc:	d86c      	bhi.n	8008ad8 <UART_SetConfig+0x454>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0x380>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008aa9 	.word	0x08008aa9
 8008a08:	08008ad9 	.word	0x08008ad9
 8008a0c:	08008ad9 	.word	0x08008ad9
 8008a10:	08008ad9 	.word	0x08008ad9
 8008a14:	08008ad9 	.word	0x08008ad9
 8008a18:	08008ad9 	.word	0x08008ad9
 8008a1c:	08008ad9 	.word	0x08008ad9
 8008a20:	08008ad9 	.word	0x08008ad9
 8008a24:	08008ab1 	.word	0x08008ab1
 8008a28:	08008ad9 	.word	0x08008ad9
 8008a2c:	08008ad9 	.word	0x08008ad9
 8008a30:	08008ad9 	.word	0x08008ad9
 8008a34:	08008ad9 	.word	0x08008ad9
 8008a38:	08008ad9 	.word	0x08008ad9
 8008a3c:	08008ad9 	.word	0x08008ad9
 8008a40:	08008ad9 	.word	0x08008ad9
 8008a44:	08008ab9 	.word	0x08008ab9
 8008a48:	08008ad9 	.word	0x08008ad9
 8008a4c:	08008ad9 	.word	0x08008ad9
 8008a50:	08008ad9 	.word	0x08008ad9
 8008a54:	08008ad9 	.word	0x08008ad9
 8008a58:	08008ad9 	.word	0x08008ad9
 8008a5c:	08008ad9 	.word	0x08008ad9
 8008a60:	08008ad9 	.word	0x08008ad9
 8008a64:	08008ac1 	.word	0x08008ac1
 8008a68:	08008ad9 	.word	0x08008ad9
 8008a6c:	08008ad9 	.word	0x08008ad9
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008ad9 	.word	0x08008ad9
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	08008ad9 	.word	0x08008ad9
 8008a80:	08008ad9 	.word	0x08008ad9
 8008a84:	08008ac9 	.word	0x08008ac9
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008ad9 	.word	0x08008ad9
 8008a90:	08008ad9 	.word	0x08008ad9
 8008a94:	08008ad9 	.word	0x08008ad9
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008ad9 	.word	0x08008ad9
 8008aa0:	08008ad9 	.word	0x08008ad9
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e0bc      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e0b8      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ab8:	2308      	movs	r3, #8
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e0b4      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e0b0      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ac8:	2320      	movs	r3, #32
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e0ac      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e0a8      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e0a4      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a8f      	ldr	r2, [pc, #572]	; (8008d24 <UART_SetConfig+0x6a0>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d130      	bne.n	8008b4c <UART_SetConfig+0x4c8>
 8008aea:	4b8d      	ldr	r3, [pc, #564]	; (8008d20 <UART_SetConfig+0x69c>)
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d826      	bhi.n	8008b44 <UART_SetConfig+0x4c0>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <UART_SetConfig+0x478>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b15 	.word	0x08008b15
 8008b00:	08008b1d 	.word	0x08008b1d
 8008b04:	08008b25 	.word	0x08008b25
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b3d 	.word	0x08008b3d
 8008b14:	2300      	movs	r3, #0
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e086      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e082      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b24:	2308      	movs	r3, #8
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e07e      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e07a      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b34:	2320      	movs	r3, #32
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e076      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b3c:	2340      	movs	r3, #64	; 0x40
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e072      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b44:	2380      	movs	r3, #128	; 0x80
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e06e      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a75      	ldr	r2, [pc, #468]	; (8008d28 <UART_SetConfig+0x6a4>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d130      	bne.n	8008bb8 <UART_SetConfig+0x534>
 8008b56:	4b72      	ldr	r3, [pc, #456]	; (8008d20 <UART_SetConfig+0x69c>)
 8008b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d826      	bhi.n	8008bb0 <UART_SetConfig+0x52c>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <UART_SetConfig+0x4e4>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b81 	.word	0x08008b81
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	08008b91 	.word	0x08008b91
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	2300      	movs	r3, #0
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e050      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e04c      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b90:	2308      	movs	r3, #8
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e048      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e044      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e040      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e03c      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008bb0:	2380      	movs	r3, #128	; 0x80
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e038      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a5b      	ldr	r2, [pc, #364]	; (8008d2c <UART_SetConfig+0x6a8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d130      	bne.n	8008c24 <UART_SetConfig+0x5a0>
 8008bc2:	4b57      	ldr	r3, [pc, #348]	; (8008d20 <UART_SetConfig+0x69c>)
 8008bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d826      	bhi.n	8008c1c <UART_SetConfig+0x598>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <UART_SetConfig+0x550>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	2302      	movs	r3, #2
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e01a      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e016      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e012      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e00e      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c12:	e00a      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e006      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c22:	e002      	b.n	8008c2a <UART_SetConfig+0x5a6>
 8008c24:	2380      	movs	r3, #128	; 0x80
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3f      	ldr	r2, [pc, #252]	; (8008d2c <UART_SetConfig+0x6a8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	f040 80f8 	bne.w	8008e26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	dc46      	bgt.n	8008ccc <UART_SetConfig+0x648>
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	f2c0 8082 	blt.w	8008d48 <UART_SetConfig+0x6c4>
 8008c44:	3b02      	subs	r3, #2
 8008c46:	2b1e      	cmp	r3, #30
 8008c48:	d87e      	bhi.n	8008d48 <UART_SetConfig+0x6c4>
 8008c4a:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <UART_SetConfig+0x5cc>)
 8008c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c50:	08008cd3 	.word	0x08008cd3
 8008c54:	08008d49 	.word	0x08008d49
 8008c58:	08008cdb 	.word	0x08008cdb
 8008c5c:	08008d49 	.word	0x08008d49
 8008c60:	08008d49 	.word	0x08008d49
 8008c64:	08008d49 	.word	0x08008d49
 8008c68:	08008ceb 	.word	0x08008ceb
 8008c6c:	08008d49 	.word	0x08008d49
 8008c70:	08008d49 	.word	0x08008d49
 8008c74:	08008d49 	.word	0x08008d49
 8008c78:	08008d49 	.word	0x08008d49
 8008c7c:	08008d49 	.word	0x08008d49
 8008c80:	08008d49 	.word	0x08008d49
 8008c84:	08008d49 	.word	0x08008d49
 8008c88:	08008cfb 	.word	0x08008cfb
 8008c8c:	08008d49 	.word	0x08008d49
 8008c90:	08008d49 	.word	0x08008d49
 8008c94:	08008d49 	.word	0x08008d49
 8008c98:	08008d49 	.word	0x08008d49
 8008c9c:	08008d49 	.word	0x08008d49
 8008ca0:	08008d49 	.word	0x08008d49
 8008ca4:	08008d49 	.word	0x08008d49
 8008ca8:	08008d49 	.word	0x08008d49
 8008cac:	08008d49 	.word	0x08008d49
 8008cb0:	08008d49 	.word	0x08008d49
 8008cb4:	08008d49 	.word	0x08008d49
 8008cb8:	08008d49 	.word	0x08008d49
 8008cbc:	08008d49 	.word	0x08008d49
 8008cc0:	08008d49 	.word	0x08008d49
 8008cc4:	08008d49 	.word	0x08008d49
 8008cc8:	08008d3b 	.word	0x08008d3b
 8008ccc:	2b40      	cmp	r3, #64	; 0x40
 8008cce:	d037      	beq.n	8008d40 <UART_SetConfig+0x6bc>
 8008cd0:	e03a      	b.n	8008d48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008cd2:	f7fe fbb7 	bl	8007444 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008cd8:	e03c      	b.n	8008d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fbc6 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce8:	e034      	b.n	8008d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cea:	f107 0318 	add.w	r3, r7, #24
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fd12 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cf8:	e02c      	b.n	8008d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cfa:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <UART_SetConfig+0x69c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d016      	beq.n	8008d34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d06:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <UART_SetConfig+0x69c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	08db      	lsrs	r3, r3, #3
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	4a07      	ldr	r2, [pc, #28]	; (8008d30 <UART_SetConfig+0x6ac>)
 8008d12:	fa22 f303 	lsr.w	r3, r2, r3
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d18:	e01c      	b.n	8008d54 <UART_SetConfig+0x6d0>
 8008d1a:	bf00      	nop
 8008d1c:	40011400 	.word	0x40011400
 8008d20:	58024400 	.word	0x58024400
 8008d24:	40007800 	.word	0x40007800
 8008d28:	40007c00 	.word	0x40007c00
 8008d2c:	58000c00 	.word	0x58000c00
 8008d30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008d34:	4b9d      	ldr	r3, [pc, #628]	; (8008fac <UART_SetConfig+0x928>)
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d38:	e00c      	b.n	8008d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d3a:	4b9d      	ldr	r3, [pc, #628]	; (8008fb0 <UART_SetConfig+0x92c>)
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d3e:	e009      	b.n	8008d54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d46:	e005      	b.n	8008d54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 81de 	beq.w	8009118 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	4a94      	ldr	r2, [pc, #592]	; (8008fb4 <UART_SetConfig+0x930>)
 8008d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d66:	461a      	mov	r2, r3
 8008d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d6e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	4613      	mov	r3, r2
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	4413      	add	r3, r2
 8008d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d305      	bcc.n	8008d8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d903      	bls.n	8008d94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d92:	e1c1      	b.n	8009118 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	2200      	movs	r2, #0
 8008d98:	60bb      	str	r3, [r7, #8]
 8008d9a:	60fa      	str	r2, [r7, #12]
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	4a84      	ldr	r2, [pc, #528]	; (8008fb4 <UART_SetConfig+0x930>)
 8008da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	2200      	movs	r2, #0
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	607a      	str	r2, [r7, #4]
 8008dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008db6:	f7f7 faeb 	bl	8000390 <__aeabi_uldivmod>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	020b      	lsls	r3, r1, #8
 8008dcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dd0:	0202      	lsls	r2, r0, #8
 8008dd2:	6979      	ldr	r1, [r7, #20]
 8008dd4:	6849      	ldr	r1, [r1, #4]
 8008dd6:	0849      	lsrs	r1, r1, #1
 8008dd8:	2000      	movs	r0, #0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	4605      	mov	r5, r0
 8008dde:	eb12 0804 	adds.w	r8, r2, r4
 8008de2:	eb43 0905 	adc.w	r9, r3, r5
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	469a      	mov	sl, r3
 8008dee:	4693      	mov	fp, r2
 8008df0:	4652      	mov	r2, sl
 8008df2:	465b      	mov	r3, fp
 8008df4:	4640      	mov	r0, r8
 8008df6:	4649      	mov	r1, r9
 8008df8:	f7f7 faca 	bl	8000390 <__aeabi_uldivmod>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4613      	mov	r3, r2
 8008e02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e0a:	d308      	bcc.n	8008e1e <UART_SetConfig+0x79a>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e12:	d204      	bcs.n	8008e1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e1a:	60da      	str	r2, [r3, #12]
 8008e1c:	e17c      	b.n	8009118 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e24:	e178      	b.n	8009118 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2e:	f040 80c5 	bne.w	8008fbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008e32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	dc48      	bgt.n	8008ecc <UART_SetConfig+0x848>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	db7b      	blt.n	8008f36 <UART_SetConfig+0x8b2>
 8008e3e:	2b20      	cmp	r3, #32
 8008e40:	d879      	bhi.n	8008f36 <UART_SetConfig+0x8b2>
 8008e42:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <UART_SetConfig+0x7c4>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008ed3 	.word	0x08008ed3
 8008e4c:	08008edb 	.word	0x08008edb
 8008e50:	08008f37 	.word	0x08008f37
 8008e54:	08008f37 	.word	0x08008f37
 8008e58:	08008ee3 	.word	0x08008ee3
 8008e5c:	08008f37 	.word	0x08008f37
 8008e60:	08008f37 	.word	0x08008f37
 8008e64:	08008f37 	.word	0x08008f37
 8008e68:	08008ef3 	.word	0x08008ef3
 8008e6c:	08008f37 	.word	0x08008f37
 8008e70:	08008f37 	.word	0x08008f37
 8008e74:	08008f37 	.word	0x08008f37
 8008e78:	08008f37 	.word	0x08008f37
 8008e7c:	08008f37 	.word	0x08008f37
 8008e80:	08008f37 	.word	0x08008f37
 8008e84:	08008f37 	.word	0x08008f37
 8008e88:	08008f03 	.word	0x08008f03
 8008e8c:	08008f37 	.word	0x08008f37
 8008e90:	08008f37 	.word	0x08008f37
 8008e94:	08008f37 	.word	0x08008f37
 8008e98:	08008f37 	.word	0x08008f37
 8008e9c:	08008f37 	.word	0x08008f37
 8008ea0:	08008f37 	.word	0x08008f37
 8008ea4:	08008f37 	.word	0x08008f37
 8008ea8:	08008f37 	.word	0x08008f37
 8008eac:	08008f37 	.word	0x08008f37
 8008eb0:	08008f37 	.word	0x08008f37
 8008eb4:	08008f37 	.word	0x08008f37
 8008eb8:	08008f37 	.word	0x08008f37
 8008ebc:	08008f37 	.word	0x08008f37
 8008ec0:	08008f37 	.word	0x08008f37
 8008ec4:	08008f37 	.word	0x08008f37
 8008ec8:	08008f29 	.word	0x08008f29
 8008ecc:	2b40      	cmp	r3, #64	; 0x40
 8008ece:	d02e      	beq.n	8008f2e <UART_SetConfig+0x8aa>
 8008ed0:	e031      	b.n	8008f36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed2:	f7fc fabf 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 8008ed6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ed8:	e033      	b.n	8008f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eda:	f7fc fad1 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 8008ede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ee0:	e02f      	b.n	8008f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe fac2 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef0:	e027      	b.n	8008f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ef2:	f107 0318 	add.w	r3, r7, #24
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe fc0e 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f00:	e01f      	b.n	8008f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f02:	4b2d      	ldr	r3, [pc, #180]	; (8008fb8 <UART_SetConfig+0x934>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f0e:	4b2a      	ldr	r3, [pc, #168]	; (8008fb8 <UART_SetConfig+0x934>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	08db      	lsrs	r3, r3, #3
 8008f14:	f003 0303 	and.w	r3, r3, #3
 8008f18:	4a24      	ldr	r2, [pc, #144]	; (8008fac <UART_SetConfig+0x928>)
 8008f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f20:	e00f      	b.n	8008f42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f22:	4b22      	ldr	r3, [pc, #136]	; (8008fac <UART_SetConfig+0x928>)
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f26:	e00c      	b.n	8008f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f28:	4b21      	ldr	r3, [pc, #132]	; (8008fb0 <UART_SetConfig+0x92c>)
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f2c:	e009      	b.n	8008f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f34:	e005      	b.n	8008f42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80e7 	beq.w	8009118 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <UART_SetConfig+0x930>)
 8008f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f5c:	005a      	lsls	r2, r3, #1
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	085b      	lsrs	r3, r3, #1
 8008f64:	441a      	add	r2, r3
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	2b0f      	cmp	r3, #15
 8008f74:	d916      	bls.n	8008fa4 <UART_SetConfig+0x920>
 8008f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f7c:	d212      	bcs.n	8008fa4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f023 030f 	bic.w	r3, r3, #15
 8008f86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	085b      	lsrs	r3, r3, #1
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f003 0307 	and.w	r3, r3, #7
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f96:	4313      	orrs	r3, r2
 8008f98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008fa0:	60da      	str	r2, [r3, #12]
 8008fa2:	e0b9      	b.n	8009118 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008faa:	e0b5      	b.n	8009118 <UART_SetConfig+0xa94>
 8008fac:	03d09000 	.word	0x03d09000
 8008fb0:	003d0900 	.word	0x003d0900
 8008fb4:	0800d7dc 	.word	0x0800d7dc
 8008fb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	dc49      	bgt.n	8009058 <UART_SetConfig+0x9d4>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	db7c      	blt.n	80090c2 <UART_SetConfig+0xa3e>
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d87a      	bhi.n	80090c2 <UART_SetConfig+0xa3e>
 8008fcc:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <UART_SetConfig+0x950>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	0800905f 	.word	0x0800905f
 8008fd8:	08009067 	.word	0x08009067
 8008fdc:	080090c3 	.word	0x080090c3
 8008fe0:	080090c3 	.word	0x080090c3
 8008fe4:	0800906f 	.word	0x0800906f
 8008fe8:	080090c3 	.word	0x080090c3
 8008fec:	080090c3 	.word	0x080090c3
 8008ff0:	080090c3 	.word	0x080090c3
 8008ff4:	0800907f 	.word	0x0800907f
 8008ff8:	080090c3 	.word	0x080090c3
 8008ffc:	080090c3 	.word	0x080090c3
 8009000:	080090c3 	.word	0x080090c3
 8009004:	080090c3 	.word	0x080090c3
 8009008:	080090c3 	.word	0x080090c3
 800900c:	080090c3 	.word	0x080090c3
 8009010:	080090c3 	.word	0x080090c3
 8009014:	0800908f 	.word	0x0800908f
 8009018:	080090c3 	.word	0x080090c3
 800901c:	080090c3 	.word	0x080090c3
 8009020:	080090c3 	.word	0x080090c3
 8009024:	080090c3 	.word	0x080090c3
 8009028:	080090c3 	.word	0x080090c3
 800902c:	080090c3 	.word	0x080090c3
 8009030:	080090c3 	.word	0x080090c3
 8009034:	080090c3 	.word	0x080090c3
 8009038:	080090c3 	.word	0x080090c3
 800903c:	080090c3 	.word	0x080090c3
 8009040:	080090c3 	.word	0x080090c3
 8009044:	080090c3 	.word	0x080090c3
 8009048:	080090c3 	.word	0x080090c3
 800904c:	080090c3 	.word	0x080090c3
 8009050:	080090c3 	.word	0x080090c3
 8009054:	080090b5 	.word	0x080090b5
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	d02e      	beq.n	80090ba <UART_SetConfig+0xa36>
 800905c:	e031      	b.n	80090c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800905e:	f7fc f9f9 	bl	8005454 <HAL_RCC_GetPCLK1Freq>
 8009062:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009064:	e033      	b.n	80090ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009066:	f7fc fa0b 	bl	8005480 <HAL_RCC_GetPCLK2Freq>
 800906a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800906c:	e02f      	b.n	80090ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe f9fc 	bl	8007470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800907c:	e027      	b.n	80090ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907e:	f107 0318 	add.w	r3, r7, #24
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fb48 	bl	8007718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800908c:	e01f      	b.n	80090ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800908e:	4b2d      	ldr	r3, [pc, #180]	; (8009144 <UART_SetConfig+0xac0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b00      	cmp	r3, #0
 8009098:	d009      	beq.n	80090ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800909a:	4b2a      	ldr	r3, [pc, #168]	; (8009144 <UART_SetConfig+0xac0>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	08db      	lsrs	r3, r3, #3
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	4a28      	ldr	r2, [pc, #160]	; (8009148 <UART_SetConfig+0xac4>)
 80090a6:	fa22 f303 	lsr.w	r3, r2, r3
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090ac:	e00f      	b.n	80090ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80090ae:	4b26      	ldr	r3, [pc, #152]	; (8009148 <UART_SetConfig+0xac4>)
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b2:	e00c      	b.n	80090ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090b4:	4b25      	ldr	r3, [pc, #148]	; (800914c <UART_SetConfig+0xac8>)
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b8:	e009      	b.n	80090ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c0:	e005      	b.n	80090ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80090cc:	bf00      	nop
    }

    if (pclk != 0U)
 80090ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d021      	beq.n	8009118 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	4a1d      	ldr	r2, [pc, #116]	; (8009150 <UART_SetConfig+0xacc>)
 80090da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090de:	461a      	mov	r2, r3
 80090e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	085b      	lsrs	r3, r3, #1
 80090ec:	441a      	add	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	2b0f      	cmp	r3, #15
 80090fc:	d909      	bls.n	8009112 <UART_SetConfig+0xa8e>
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009104:	d205      	bcs.n	8009112 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	b29a      	uxth	r2, r3
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60da      	str	r2, [r3, #12]
 8009110:	e002      	b.n	8009118 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2201      	movs	r2, #1
 800911c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2201      	movs	r2, #1
 8009124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2200      	movs	r2, #0
 800912c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2200      	movs	r2, #0
 8009132:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009134:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009138:	4618      	mov	r0, r3
 800913a:	3748      	adds	r7, #72	; 0x48
 800913c:	46bd      	mov	sp, r7
 800913e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009142:	bf00      	nop
 8009144:	58024400 	.word	0x58024400
 8009148:	03d09000 	.word	0x03d09000
 800914c:	003d0900 	.word	0x003d0900
 8009150:	0800d7dc 	.word	0x0800d7dc

08009154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	f003 0308 	and.w	r3, r3, #8
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00a      	beq.n	80091c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c6:	f003 0304 	and.w	r3, r3, #4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920a:	f003 0320 	and.w	r3, r3, #32
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01a      	beq.n	800926a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009252:	d10a      	bne.n	800926a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	605a      	str	r2, [r3, #4]
  }
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b098      	sub	sp, #96	; 0x60
 800929c:	af02      	add	r7, sp, #8
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092a8:	f7f8 fa2e 	bl	8001708 <HAL_GetTick>
 80092ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0308 	and.w	r3, r3, #8
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d12f      	bne.n	800931c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c4:	2200      	movs	r2, #0
 80092c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f88e 	bl	80093ec <UART_WaitOnFlagUntilTimeout>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d022      	beq.n	800931c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	e853 3f00 	ldrex	r3, [r3]
 80092e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ea:	653b      	str	r3, [r7, #80]	; 0x50
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f4:	647b      	str	r3, [r7, #68]	; 0x44
 80092f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e6      	bne.n	80092d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2220      	movs	r2, #32
 800930c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e063      	b.n	80093e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0304 	and.w	r3, r3, #4
 8009326:	2b04      	cmp	r3, #4
 8009328:	d149      	bne.n	80093be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800932a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009332:	2200      	movs	r2, #0
 8009334:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f857 	bl	80093ec <UART_WaitOnFlagUntilTimeout>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d03c      	beq.n	80093be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	623b      	str	r3, [r7, #32]
   return(result);
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009362:	633b      	str	r3, [r7, #48]	; 0x30
 8009364:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e6      	bne.n	8009344 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3308      	adds	r3, #8
 800937c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	60fb      	str	r3, [r7, #12]
   return(result);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f023 0301 	bic.w	r3, r3, #1
 800938c:	64bb      	str	r3, [r7, #72]	; 0x48
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009396:	61fa      	str	r2, [r7, #28]
 8009398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	69b9      	ldr	r1, [r7, #24]
 800939c:	69fa      	ldr	r2, [r7, #28]
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	617b      	str	r3, [r7, #20]
   return(result);
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e5      	bne.n	8009376 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2220      	movs	r2, #32
 80093ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e012      	b.n	80093e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2220      	movs	r2, #32
 80093ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3758      	adds	r7, #88	; 0x58
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	603b      	str	r3, [r7, #0]
 80093f8:	4613      	mov	r3, r2
 80093fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093fc:	e04f      	b.n	800949e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d04b      	beq.n	800949e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009406:	f7f8 f97f 	bl	8001708 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	429a      	cmp	r2, r3
 8009414:	d302      	bcc.n	800941c <UART_WaitOnFlagUntilTimeout+0x30>
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e04e      	b.n	80094be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0304 	and.w	r3, r3, #4
 800942a:	2b00      	cmp	r3, #0
 800942c:	d037      	beq.n	800949e <UART_WaitOnFlagUntilTimeout+0xb2>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2b80      	cmp	r3, #128	; 0x80
 8009432:	d034      	beq.n	800949e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b40      	cmp	r3, #64	; 0x40
 8009438:	d031      	beq.n	800949e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b08      	cmp	r3, #8
 8009446:	d110      	bne.n	800946a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2208      	movs	r2, #8
 800944e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 f839 	bl	80094c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2208      	movs	r2, #8
 800945a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e029      	b.n	80094be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009478:	d111      	bne.n	800949e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 f81f 	bl	80094c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e00f      	b.n	80094be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69da      	ldr	r2, [r3, #28]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	4013      	ands	r3, r2
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	bf0c      	ite	eq
 80094ae:	2301      	moveq	r3, #1
 80094b0:	2300      	movne	r3, #0
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	461a      	mov	r2, r3
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d0a0      	beq.n	80093fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b095      	sub	sp, #84	; 0x54
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ee:	643b      	str	r3, [r7, #64]	; 0x40
 80094f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e6      	bne.n	80094d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	61fb      	str	r3, [r7, #28]
   return(result);
 8009512:	69fa      	ldr	r2, [r7, #28]
 8009514:	4b1e      	ldr	r3, [pc, #120]	; (8009590 <UART_EndRxTransfer+0xc8>)
 8009516:	4013      	ands	r3, r2
 8009518:	64bb      	str	r3, [r7, #72]	; 0x48
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e5      	bne.n	8009502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800953a:	2b01      	cmp	r3, #1
 800953c:	d118      	bne.n	8009570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	60bb      	str	r3, [r7, #8]
   return(result);
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f023 0310 	bic.w	r3, r3, #16
 8009552:	647b      	str	r3, [r7, #68]	; 0x44
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	6979      	ldr	r1, [r7, #20]
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	613b      	str	r3, [r7, #16]
   return(result);
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e6      	bne.n	800953e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009584:	bf00      	nop
 8009586:	3754      	adds	r7, #84	; 0x54
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	effffffe 	.word	0xeffffffe

08009594 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <HAL_UARTEx_DisableFifoMode+0x16>
 80095a6:	2302      	movs	r3, #2
 80095a8:	e027      	b.n	80095fa <HAL_UARTEx_DisableFifoMode+0x66>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2224      	movs	r2, #36	; 0x24
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0201 	bic.w	r2, r2, #1
 80095d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2220      	movs	r2, #32
 80095ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800961a:	2302      	movs	r3, #2
 800961c:	e02d      	b.n	800967a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2224      	movs	r2, #36	; 0x24
 800962a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0201 	bic.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f850 	bl	8009700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009692:	2b01      	cmp	r3, #1
 8009694:	d101      	bne.n	800969a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009696:	2302      	movs	r3, #2
 8009698:	e02d      	b.n	80096f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2224      	movs	r2, #36	; 0x24
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0201 	bic.w	r2, r2, #1
 80096c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f812 	bl	8009700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800970c:	2b00      	cmp	r3, #0
 800970e:	d108      	bne.n	8009722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009720:	e031      	b.n	8009786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009722:	2310      	movs	r3, #16
 8009724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009726:	2310      	movs	r3, #16
 8009728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	0e5b      	lsrs	r3, r3, #25
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0307 	and.w	r3, r3, #7
 8009738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	0f5b      	lsrs	r3, r3, #29
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f003 0307 	and.w	r3, r3, #7
 8009748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	7b3a      	ldrb	r2, [r7, #12]
 800974e:	4911      	ldr	r1, [pc, #68]	; (8009794 <UARTEx_SetNbDataToProcess+0x94>)
 8009750:	5c8a      	ldrb	r2, [r1, r2]
 8009752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009756:	7b3a      	ldrb	r2, [r7, #12]
 8009758:	490f      	ldr	r1, [pc, #60]	; (8009798 <UARTEx_SetNbDataToProcess+0x98>)
 800975a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800975c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009760:	b29a      	uxth	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	7b7a      	ldrb	r2, [r7, #13]
 800976c:	4909      	ldr	r1, [pc, #36]	; (8009794 <UARTEx_SetNbDataToProcess+0x94>)
 800976e:	5c8a      	ldrb	r2, [r1, r2]
 8009770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009774:	7b7a      	ldrb	r2, [r7, #13]
 8009776:	4908      	ldr	r1, [pc, #32]	; (8009798 <UARTEx_SetNbDataToProcess+0x98>)
 8009778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800977a:	fb93 f3f2 	sdiv	r3, r3, r2
 800977e:	b29a      	uxth	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	0800d7f4 	.word	0x0800d7f4
 8009798:	0800d7fc 	.word	0x0800d7fc

0800979c <__NVIC_SetPriority>:
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80097a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	db0a      	blt.n	80097c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	490c      	ldr	r1, [pc, #48]	; (80097e8 <__NVIC_SetPriority+0x4c>)
 80097b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ba:	0112      	lsls	r2, r2, #4
 80097bc:	b2d2      	uxtb	r2, r2
 80097be:	440b      	add	r3, r1
 80097c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80097c4:	e00a      	b.n	80097dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	4908      	ldr	r1, [pc, #32]	; (80097ec <__NVIC_SetPriority+0x50>)
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	3b04      	subs	r3, #4
 80097d4:	0112      	lsls	r2, r2, #4
 80097d6:	b2d2      	uxtb	r2, r2
 80097d8:	440b      	add	r3, r1
 80097da:	761a      	strb	r2, [r3, #24]
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	e000e100 	.word	0xe000e100
 80097ec:	e000ed00 	.word	0xe000ed00

080097f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <SysTick_Handler+0x1c>)
 80097f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80097f8:	f002 f938 	bl	800ba6c <xTaskGetSchedulerState>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d001      	beq.n	8009806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009802:	f000 fd99 	bl	800a338 <xPortSysTickHandler>
  }
}
 8009806:	bf00      	nop
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	e000e010 	.word	0xe000e010

08009810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009814:	2100      	movs	r1, #0
 8009816:	f06f 0004 	mvn.w	r0, #4
 800981a:	f7ff ffbf 	bl	800979c <__NVIC_SetPriority>
#endif
}
 800981e:	bf00      	nop
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800982a:	f3ef 8305 	mrs	r3, IPSR
 800982e:	603b      	str	r3, [r7, #0]
  return(result);
 8009830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009836:	f06f 0305 	mvn.w	r3, #5
 800983a:	607b      	str	r3, [r7, #4]
 800983c:	e00c      	b.n	8009858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800983e:	4b0a      	ldr	r3, [pc, #40]	; (8009868 <osKernelInitialize+0x44>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d105      	bne.n	8009852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009846:	4b08      	ldr	r3, [pc, #32]	; (8009868 <osKernelInitialize+0x44>)
 8009848:	2201      	movs	r2, #1
 800984a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800984c:	2300      	movs	r3, #0
 800984e:	607b      	str	r3, [r7, #4]
 8009850:	e002      	b.n	8009858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009852:	f04f 33ff 	mov.w	r3, #4294967295
 8009856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009858:	687b      	ldr	r3, [r7, #4]
}
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	24000318 	.word	0x24000318

0800986c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009872:	f3ef 8305 	mrs	r3, IPSR
 8009876:	603b      	str	r3, [r7, #0]
  return(result);
 8009878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800987e:	f06f 0305 	mvn.w	r3, #5
 8009882:	607b      	str	r3, [r7, #4]
 8009884:	e010      	b.n	80098a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009886:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <osKernelStart+0x48>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d109      	bne.n	80098a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800988e:	f7ff ffbf 	bl	8009810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009892:	4b08      	ldr	r3, [pc, #32]	; (80098b4 <osKernelStart+0x48>)
 8009894:	2202      	movs	r2, #2
 8009896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009898:	f001 fca0 	bl	800b1dc <vTaskStartScheduler>
      stat = osOK;
 800989c:	2300      	movs	r3, #0
 800989e:	607b      	str	r3, [r7, #4]
 80098a0:	e002      	b.n	80098a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295
 80098a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098a8:	687b      	ldr	r3, [r7, #4]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	24000318 	.word	0x24000318

080098b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08e      	sub	sp, #56	; 0x38
 80098bc:	af04      	add	r7, sp, #16
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098c4:	2300      	movs	r3, #0
 80098c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098c8:	f3ef 8305 	mrs	r3, IPSR
 80098cc:	617b      	str	r3, [r7, #20]
  return(result);
 80098ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d17e      	bne.n	80099d2 <osThreadNew+0x11a>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d07b      	beq.n	80099d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098da:	2380      	movs	r3, #128	; 0x80
 80098dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098de:	2318      	movs	r3, #24
 80098e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80098e6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d045      	beq.n	800997e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <osThreadNew+0x48>
        name = attr->name;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d008      	beq.n	8009926 <osThreadNew+0x6e>
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	2b38      	cmp	r3, #56	; 0x38
 8009918:	d805      	bhi.n	8009926 <osThreadNew+0x6e>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <osThreadNew+0x72>
        return (NULL);
 8009926:	2300      	movs	r3, #0
 8009928:	e054      	b.n	80099d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	089b      	lsrs	r3, r3, #2
 8009938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00e      	beq.n	8009960 <osThreadNew+0xa8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	2b5b      	cmp	r3, #91	; 0x5b
 8009948:	d90a      	bls.n	8009960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d002      	beq.n	8009960 <osThreadNew+0xa8>
        mem = 1;
 800995a:	2301      	movs	r3, #1
 800995c:	61bb      	str	r3, [r7, #24]
 800995e:	e010      	b.n	8009982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10c      	bne.n	8009982 <osThreadNew+0xca>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d108      	bne.n	8009982 <osThreadNew+0xca>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d104      	bne.n	8009982 <osThreadNew+0xca>
          mem = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	61bb      	str	r3, [r7, #24]
 800997c:	e001      	b.n	8009982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d110      	bne.n	80099aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	6a3a      	ldr	r2, [r7, #32]
 800999c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f001 fa46 	bl	800ae30 <xTaskCreateStatic>
 80099a4:	4603      	mov	r3, r0
 80099a6:	613b      	str	r3, [r7, #16]
 80099a8:	e013      	b.n	80099d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d110      	bne.n	80099d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	f107 0310 	add.w	r3, r7, #16
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f001 fa91 	bl	800aeea <xTaskCreate>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d001      	beq.n	80099d2 <osThreadNew+0x11a>
            hTask = NULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099d2:	693b      	ldr	r3, [r7, #16]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3728      	adds	r7, #40	; 0x28
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e4:	f3ef 8305 	mrs	r3, IPSR
 80099e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80099ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <osDelay+0x1c>
    stat = osErrorISR;
 80099f0:	f06f 0305 	mvn.w	r3, #5
 80099f4:	60fb      	str	r3, [r7, #12]
 80099f6:	e007      	b.n	8009a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 fbb6 	bl	800b174 <vTaskDelay>
    }
  }

  return (stat);
 8009a08:	68fb      	ldr	r3, [r7, #12]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a07      	ldr	r2, [pc, #28]	; (8009a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	4a06      	ldr	r2, [pc, #24]	; (8009a44 <vApplicationGetIdleTaskMemory+0x30>)
 8009a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2280      	movs	r2, #128	; 0x80
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	2400031c 	.word	0x2400031c
 8009a44:	24000378 	.word	0x24000378

08009a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4a07      	ldr	r2, [pc, #28]	; (8009a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4a06      	ldr	r2, [pc, #24]	; (8009a78 <vApplicationGetTimerTaskMemory+0x30>)
 8009a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a66:	601a      	str	r2, [r3, #0]
}
 8009a68:	bf00      	nop
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	24000578 	.word	0x24000578
 8009a78:	240005d4 	.word	0x240005d4

08009a7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	; 0x28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a84:	2300      	movs	r3, #0
 8009a86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a88:	f001 fc0e 	bl	800b2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a8c:	4b5b      	ldr	r3, [pc, #364]	; (8009bfc <pvPortMalloc+0x180>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a94:	f000 f920 	bl	8009cd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a98:	4b59      	ldr	r3, [pc, #356]	; (8009c00 <pvPortMalloc+0x184>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f040 8093 	bne.w	8009bcc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01d      	beq.n	8009ae8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009aac:	2208      	movs	r2, #8
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d014      	beq.n	8009ae8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f023 0307 	bic.w	r3, r3, #7
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f003 0307 	and.w	r3, r3, #7
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d06e      	beq.n	8009bcc <pvPortMalloc+0x150>
 8009aee:	4b45      	ldr	r3, [pc, #276]	; (8009c04 <pvPortMalloc+0x188>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d869      	bhi.n	8009bcc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009af8:	4b43      	ldr	r3, [pc, #268]	; (8009c08 <pvPortMalloc+0x18c>)
 8009afa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009afc:	4b42      	ldr	r3, [pc, #264]	; (8009c08 <pvPortMalloc+0x18c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b02:	e004      	b.n	8009b0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d903      	bls.n	8009b20 <pvPortMalloc+0xa4>
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1f1      	bne.n	8009b04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b20:	4b36      	ldr	r3, [pc, #216]	; (8009bfc <pvPortMalloc+0x180>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d050      	beq.n	8009bcc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2208      	movs	r2, #8
 8009b30:	4413      	add	r3, r2
 8009b32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	1ad2      	subs	r2, r2, r3
 8009b44:	2308      	movs	r3, #8
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d91f      	bls.n	8009b8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4413      	add	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	f003 0307 	and.w	r3, r3, #7
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <pvPortMalloc+0xf8>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	613b      	str	r3, [r7, #16]
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1ad2      	subs	r2, r2, r3
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b86:	69b8      	ldr	r0, [r7, #24]
 8009b88:	f000 f908 	bl	8009d9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b8c:	4b1d      	ldr	r3, [pc, #116]	; (8009c04 <pvPortMalloc+0x188>)
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	4a1b      	ldr	r2, [pc, #108]	; (8009c04 <pvPortMalloc+0x188>)
 8009b98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b9a:	4b1a      	ldr	r3, [pc, #104]	; (8009c04 <pvPortMalloc+0x188>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <pvPortMalloc+0x190>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d203      	bcs.n	8009bae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ba6:	4b17      	ldr	r3, [pc, #92]	; (8009c04 <pvPortMalloc+0x188>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a18      	ldr	r2, [pc, #96]	; (8009c0c <pvPortMalloc+0x190>)
 8009bac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	4b13      	ldr	r3, [pc, #76]	; (8009c00 <pvPortMalloc+0x184>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bc2:	4b13      	ldr	r3, [pc, #76]	; (8009c10 <pvPortMalloc+0x194>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	4a11      	ldr	r2, [pc, #68]	; (8009c10 <pvPortMalloc+0x194>)
 8009bca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bcc:	f001 fb7a 	bl	800b2c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <pvPortMalloc+0x174>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	60fb      	str	r3, [r7, #12]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <pvPortMalloc+0x172>
	return pvReturn;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3728      	adds	r7, #40	; 0x28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	240045dc 	.word	0x240045dc
 8009c00:	240045f0 	.word	0x240045f0
 8009c04:	240045e0 	.word	0x240045e0
 8009c08:	240045d4 	.word	0x240045d4
 8009c0c:	240045e4 	.word	0x240045e4
 8009c10:	240045e8 	.word	0x240045e8

08009c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d04d      	beq.n	8009cc2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c26:	2308      	movs	r3, #8
 8009c28:	425b      	negs	r3, r3
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	4b24      	ldr	r3, [pc, #144]	; (8009ccc <vPortFree+0xb8>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10a      	bne.n	8009c58 <vPortFree+0x44>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	60fb      	str	r3, [r7, #12]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00a      	beq.n	8009c76 <vPortFree+0x62>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60bb      	str	r3, [r7, #8]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	4b14      	ldr	r3, [pc, #80]	; (8009ccc <vPortFree+0xb8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01e      	beq.n	8009cc2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d11a      	bne.n	8009cc2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	4b0e      	ldr	r3, [pc, #56]	; (8009ccc <vPortFree+0xb8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	43db      	mvns	r3, r3
 8009c96:	401a      	ands	r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c9c:	f001 fb04 	bl	800b2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <vPortFree+0xbc>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4413      	add	r3, r2
 8009caa:	4a09      	ldr	r2, [pc, #36]	; (8009cd0 <vPortFree+0xbc>)
 8009cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cae:	6938      	ldr	r0, [r7, #16]
 8009cb0:	f000 f874 	bl	8009d9c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cb4:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <vPortFree+0xc0>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	4a06      	ldr	r2, [pc, #24]	; (8009cd4 <vPortFree+0xc0>)
 8009cbc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cbe:	f001 fb01 	bl	800b2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cc2:	bf00      	nop
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	240045f0 	.word	0x240045f0
 8009cd0:	240045e0 	.word	0x240045e0
 8009cd4:	240045ec 	.word	0x240045ec

08009cd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cde:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ce2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ce4:	4b27      	ldr	r3, [pc, #156]	; (8009d84 <prvHeapInit+0xac>)
 8009ce6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f003 0307 	and.w	r3, r3, #7
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3307      	adds	r3, #7
 8009cf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0307 	bic.w	r3, r3, #7
 8009cfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	4a1f      	ldr	r2, [pc, #124]	; (8009d84 <prvHeapInit+0xac>)
 8009d08:	4413      	add	r3, r2
 8009d0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d10:	4a1d      	ldr	r2, [pc, #116]	; (8009d88 <prvHeapInit+0xb0>)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d16:	4b1c      	ldr	r3, [pc, #112]	; (8009d88 <prvHeapInit+0xb0>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	4413      	add	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d24:	2208      	movs	r2, #8
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	1a9b      	subs	r3, r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0307 	bic.w	r3, r3, #7
 8009d32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4a15      	ldr	r2, [pc, #84]	; (8009d8c <prvHeapInit+0xb4>)
 8009d38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d3a:	4b14      	ldr	r3, [pc, #80]	; (8009d8c <prvHeapInit+0xb4>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d42:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <prvHeapInit+0xb4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	1ad2      	subs	r2, r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d58:	4b0c      	ldr	r3, [pc, #48]	; (8009d8c <prvHeapInit+0xb4>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	4a0a      	ldr	r2, [pc, #40]	; (8009d90 <prvHeapInit+0xb8>)
 8009d66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	4a09      	ldr	r2, [pc, #36]	; (8009d94 <prvHeapInit+0xbc>)
 8009d6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d70:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <prvHeapInit+0xc0>)
 8009d72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d76:	601a      	str	r2, [r3, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	240009d4 	.word	0x240009d4
 8009d88:	240045d4 	.word	0x240045d4
 8009d8c:	240045dc 	.word	0x240045dc
 8009d90:	240045e4 	.word	0x240045e4
 8009d94:	240045e0 	.word	0x240045e0
 8009d98:	240045f0 	.word	0x240045f0

08009d9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009da4:	4b28      	ldr	r3, [pc, #160]	; (8009e48 <prvInsertBlockIntoFreeList+0xac>)
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e002      	b.n	8009db0 <prvInsertBlockIntoFreeList+0x14>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d8f7      	bhi.n	8009daa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d108      	bne.n	8009dde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	441a      	add	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d118      	bne.n	8009e24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	4b15      	ldr	r3, [pc, #84]	; (8009e4c <prvInsertBlockIntoFreeList+0xb0>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d00d      	beq.n	8009e1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	441a      	add	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	e008      	b.n	8009e2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <prvInsertBlockIntoFreeList+0xb0>)
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	601a      	str	r2, [r3, #0]
 8009e22:	e003      	b.n	8009e2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d002      	beq.n	8009e3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e3a:	bf00      	nop
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	240045d4 	.word	0x240045d4
 8009e4c:	240045dc 	.word	0x240045dc

08009e50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f103 0208 	add.w	r2, r3, #8
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295
 8009e68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f103 0208 	add.w	r2, r3, #8
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f103 0208 	add.w	r2, r3, #8
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b085      	sub	sp, #20
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	601a      	str	r2, [r3, #0]
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b085      	sub	sp, #20
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f08:	d103      	bne.n	8009f12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	e00c      	b.n	8009f2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3308      	adds	r3, #8
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	e002      	b.n	8009f20 <vListInsert+0x2e>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d2f6      	bcs.n	8009f1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	601a      	str	r2, [r3, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6892      	ldr	r2, [r2, #8]
 8009f7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	6852      	ldr	r2, [r2, #4]
 8009f84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d103      	bne.n	8009f98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	1e5a      	subs	r2, r3, #1
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3b04      	subs	r3, #4
 8009fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3b04      	subs	r3, #4
 8009fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f023 0201 	bic.w	r2, r3, #1
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3b04      	subs	r3, #4
 8009fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fe8:	4a0c      	ldr	r2, [pc, #48]	; (800a01c <pxPortInitialiseStack+0x64>)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3b14      	subs	r3, #20
 8009ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3b04      	subs	r3, #4
 8009ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f06f 0202 	mvn.w	r2, #2
 800a006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3b20      	subs	r3, #32
 800a00c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a00e:	68fb      	ldr	r3, [r7, #12]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	0800a021 	.word	0x0800a021

0800a020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a02a:	4b12      	ldr	r3, [pc, #72]	; (800a074 <prvTaskExitError+0x54>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a032:	d00a      	beq.n	800a04a <prvTaskExitError+0x2a>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60fb      	str	r3, [r7, #12]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <prvTaskExitError+0x28>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	60bb      	str	r3, [r7, #8]
}
 800a05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a05e:	bf00      	nop
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0fc      	beq.n	800a060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a066:	bf00      	nop
 800a068:	bf00      	nop
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	24000014 	.word	0x24000014
	...

0800a080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <pxCurrentTCBConst2>)
 800a082:	6819      	ldr	r1, [r3, #0]
 800a084:	6808      	ldr	r0, [r1, #0]
 800a086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	f380 8809 	msr	PSP, r0
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f380 8811 	msr	BASEPRI, r0
 800a09a:	4770      	bx	lr
 800a09c:	f3af 8000 	nop.w

0800a0a0 <pxCurrentTCBConst2>:
 800a0a0:	2400463c 	.word	0x2400463c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop

0800a0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0a8:	4808      	ldr	r0, [pc, #32]	; (800a0cc <prvPortStartFirstTask+0x24>)
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	6800      	ldr	r0, [r0, #0]
 800a0ae:	f380 8808 	msr	MSP, r0
 800a0b2:	f04f 0000 	mov.w	r0, #0
 800a0b6:	f380 8814 	msr	CONTROL, r0
 800a0ba:	b662      	cpsie	i
 800a0bc:	b661      	cpsie	f
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	df00      	svc	0
 800a0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0ca:	bf00      	nop
 800a0cc:	e000ed08 	.word	0xe000ed08

0800a0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0d6:	4b46      	ldr	r3, [pc, #280]	; (800a1f0 <xPortStartScheduler+0x120>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a46      	ldr	r2, [pc, #280]	; (800a1f4 <xPortStartScheduler+0x124>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d10a      	bne.n	800a0f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	613b      	str	r3, [r7, #16]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0f6:	4b3e      	ldr	r3, [pc, #248]	; (800a1f0 <xPortStartScheduler+0x120>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a3f      	ldr	r2, [pc, #252]	; (800a1f8 <xPortStartScheduler+0x128>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d10a      	bne.n	800a116 <xPortStartScheduler+0x46>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	60fb      	str	r3, [r7, #12]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a116:	4b39      	ldr	r3, [pc, #228]	; (800a1fc <xPortStartScheduler+0x12c>)
 800a118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	22ff      	movs	r2, #255	; 0xff
 800a126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	4b31      	ldr	r3, [pc, #196]	; (800a200 <xPortStartScheduler+0x130>)
 800a13c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a13e:	4b31      	ldr	r3, [pc, #196]	; (800a204 <xPortStartScheduler+0x134>)
 800a140:	2207      	movs	r2, #7
 800a142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a144:	e009      	b.n	800a15a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a146:	4b2f      	ldr	r3, [pc, #188]	; (800a204 <xPortStartScheduler+0x134>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	4a2d      	ldr	r2, [pc, #180]	; (800a204 <xPortStartScheduler+0x134>)
 800a14e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	b2db      	uxtb	r3, r3
 800a158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a162:	2b80      	cmp	r3, #128	; 0x80
 800a164:	d0ef      	beq.n	800a146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a166:	4b27      	ldr	r3, [pc, #156]	; (800a204 <xPortStartScheduler+0x134>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f1c3 0307 	rsb	r3, r3, #7
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d00a      	beq.n	800a188 <xPortStartScheduler+0xb8>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	60bb      	str	r3, [r7, #8]
}
 800a184:	bf00      	nop
 800a186:	e7fe      	b.n	800a186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a188:	4b1e      	ldr	r3, [pc, #120]	; (800a204 <xPortStartScheduler+0x134>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	021b      	lsls	r3, r3, #8
 800a18e:	4a1d      	ldr	r2, [pc, #116]	; (800a204 <xPortStartScheduler+0x134>)
 800a190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a192:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <xPortStartScheduler+0x134>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a19a:	4a1a      	ldr	r2, [pc, #104]	; (800a204 <xPortStartScheduler+0x134>)
 800a19c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1a6:	4b18      	ldr	r3, [pc, #96]	; (800a208 <xPortStartScheduler+0x138>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a17      	ldr	r2, [pc, #92]	; (800a208 <xPortStartScheduler+0x138>)
 800a1ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1b2:	4b15      	ldr	r3, [pc, #84]	; (800a208 <xPortStartScheduler+0x138>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a14      	ldr	r2, [pc, #80]	; (800a208 <xPortStartScheduler+0x138>)
 800a1b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1be:	f000 f8dd 	bl	800a37c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1c2:	4b12      	ldr	r3, [pc, #72]	; (800a20c <xPortStartScheduler+0x13c>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1c8:	f000 f8fc 	bl	800a3c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1cc:	4b10      	ldr	r3, [pc, #64]	; (800a210 <xPortStartScheduler+0x140>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a0f      	ldr	r2, [pc, #60]	; (800a210 <xPortStartScheduler+0x140>)
 800a1d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1d8:	f7ff ff66 	bl	800a0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1dc:	f001 f9da 	bl	800b594 <vTaskSwitchContext>
	prvTaskExitError();
 800a1e0:	f7ff ff1e 	bl	800a020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	e000ed00 	.word	0xe000ed00
 800a1f4:	410fc271 	.word	0x410fc271
 800a1f8:	410fc270 	.word	0x410fc270
 800a1fc:	e000e400 	.word	0xe000e400
 800a200:	240045f4 	.word	0x240045f4
 800a204:	240045f8 	.word	0x240045f8
 800a208:	e000ed20 	.word	0xe000ed20
 800a20c:	24000014 	.word	0x24000014
 800a210:	e000ef34 	.word	0xe000ef34

0800a214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	607b      	str	r3, [r7, #4]
}
 800a22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a22e:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <vPortEnterCritical+0x58>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	4a0d      	ldr	r2, [pc, #52]	; (800a26c <vPortEnterCritical+0x58>)
 800a236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <vPortEnterCritical+0x58>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d10f      	bne.n	800a260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <vPortEnterCritical+0x5c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <vPortEnterCritical+0x4c>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	603b      	str	r3, [r7, #0]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <vPortEnterCritical+0x4a>
	}
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	24000014 	.word	0x24000014
 800a270:	e000ed04 	.word	0xe000ed04

0800a274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a27a:	4b12      	ldr	r3, [pc, #72]	; (800a2c4 <vPortExitCritical+0x50>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10a      	bne.n	800a298 <vPortExitCritical+0x24>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	607b      	str	r3, [r7, #4]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a298:	4b0a      	ldr	r3, [pc, #40]	; (800a2c4 <vPortExitCritical+0x50>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	4a09      	ldr	r2, [pc, #36]	; (800a2c4 <vPortExitCritical+0x50>)
 800a2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2a2:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <vPortExitCritical+0x50>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d105      	bne.n	800a2b6 <vPortExitCritical+0x42>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	24000014 	.word	0x24000014
	...

0800a2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2d0:	f3ef 8009 	mrs	r0, PSP
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	4b15      	ldr	r3, [pc, #84]	; (800a330 <pxCurrentTCBConst>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	f01e 0f10 	tst.w	lr, #16
 800a2e0:	bf08      	it	eq
 800a2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ea:	6010      	str	r0, [r2, #0]
 800a2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2f4:	f380 8811 	msr	BASEPRI, r0
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f001 f948 	bl	800b594 <vTaskSwitchContext>
 800a304:	f04f 0000 	mov.w	r0, #0
 800a308:	f380 8811 	msr	BASEPRI, r0
 800a30c:	bc09      	pop	{r0, r3}
 800a30e:	6819      	ldr	r1, [r3, #0]
 800a310:	6808      	ldr	r0, [r1, #0]
 800a312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a316:	f01e 0f10 	tst.w	lr, #16
 800a31a:	bf08      	it	eq
 800a31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a320:	f380 8809 	msr	PSP, r0
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w

0800a330 <pxCurrentTCBConst>:
 800a330:	2400463c 	.word	0x2400463c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop

0800a338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	607b      	str	r3, [r7, #4]
}
 800a350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a352:	f001 f865 	bl	800b420 <xTaskIncrementTick>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a35c:	4b06      	ldr	r3, [pc, #24]	; (800a378 <xPortSysTickHandler+0x40>)
 800a35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	2300      	movs	r3, #0
 800a366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	f383 8811 	msr	BASEPRI, r3
}
 800a36e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a380:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <vPortSetupTimerInterrupt+0x34>)
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a386:	4b0b      	ldr	r3, [pc, #44]	; (800a3b4 <vPortSetupTimerInterrupt+0x38>)
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <vPortSetupTimerInterrupt+0x3c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <vPortSetupTimerInterrupt+0x40>)
 800a392:	fba2 2303 	umull	r2, r3, r2, r3
 800a396:	099b      	lsrs	r3, r3, #6
 800a398:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <vPortSetupTimerInterrupt+0x44>)
 800a39a:	3b01      	subs	r3, #1
 800a39c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a39e:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <vPortSetupTimerInterrupt+0x34>)
 800a3a0:	2207      	movs	r2, #7
 800a3a2:	601a      	str	r2, [r3, #0]
}
 800a3a4:	bf00      	nop
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	e000e010 	.word	0xe000e010
 800a3b4:	e000e018 	.word	0xe000e018
 800a3b8:	24000000 	.word	0x24000000
 800a3bc:	10624dd3 	.word	0x10624dd3
 800a3c0:	e000e014 	.word	0xe000e014

0800a3c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3d4 <vPortEnableVFP+0x10>
 800a3c8:	6801      	ldr	r1, [r0, #0]
 800a3ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3ce:	6001      	str	r1, [r0, #0]
 800a3d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3d2:	bf00      	nop
 800a3d4:	e000ed88 	.word	0xe000ed88

0800a3d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3de:	f3ef 8305 	mrs	r3, IPSR
 800a3e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b0f      	cmp	r3, #15
 800a3e8:	d914      	bls.n	800a414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3ea:	4a17      	ldr	r2, [pc, #92]	; (800a448 <vPortValidateInterruptPriority+0x70>)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3f4:	4b15      	ldr	r3, [pc, #84]	; (800a44c <vPortValidateInterruptPriority+0x74>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	7afa      	ldrb	r2, [r7, #11]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d20a      	bcs.n	800a414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
 800a412:	e7fe      	b.n	800a412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a414:	4b0e      	ldr	r3, [pc, #56]	; (800a450 <vPortValidateInterruptPriority+0x78>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <vPortValidateInterruptPriority+0x7c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	429a      	cmp	r2, r3
 800a422:	d90a      	bls.n	800a43a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	603b      	str	r3, [r7, #0]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <vPortValidateInterruptPriority+0x60>
	}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	e000e3f0 	.word	0xe000e3f0
 800a44c:	240045f4 	.word	0x240045f4
 800a450:	e000ed0c 	.word	0xe000ed0c
 800a454:	240045f8 	.word	0x240045f8

0800a458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <xQueueGenericReset+0x2a>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	60bb      	str	r3, [r7, #8]
}
 800a47e:	bf00      	nop
 800a480:	e7fe      	b.n	800a480 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a482:	f7ff fec7 	bl	800a214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	68f9      	ldr	r1, [r7, #12]
 800a490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a492:	fb01 f303 	mul.w	r3, r1, r3
 800a496:	441a      	add	r2, r3
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	68f9      	ldr	r1, [r7, #12]
 800a4b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4b8:	fb01 f303 	mul.w	r3, r1, r3
 800a4bc:	441a      	add	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	22ff      	movs	r2, #255	; 0xff
 800a4c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	22ff      	movs	r2, #255	; 0xff
 800a4ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d114      	bne.n	800a502 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01a      	beq.n	800a516 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3310      	adds	r3, #16
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f001 f903 	bl	800b6f0 <xTaskRemoveFromEventList>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d012      	beq.n	800a516 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <xQueueGenericReset+0xcc>)
 800a4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	e009      	b.n	800a516 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3310      	adds	r3, #16
 800a506:	4618      	mov	r0, r3
 800a508:	f7ff fca2 	bl	8009e50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3324      	adds	r3, #36	; 0x24
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff fc9d 	bl	8009e50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a516:	f7ff fead 	bl	800a274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a51a:	2301      	movs	r3, #1
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	e000ed04 	.word	0xe000ed04

0800a528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08e      	sub	sp, #56	; 0x38
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10a      	bne.n	800a56e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a56a:	bf00      	nop
 800a56c:	e7fe      	b.n	800a56c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <xQueueGenericCreateStatic+0x52>
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <xQueueGenericCreateStatic+0x56>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <xQueueGenericCreateStatic+0x58>
 800a57e:	2300      	movs	r3, #0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	623b      	str	r3, [r7, #32]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d102      	bne.n	800a5a6 <xQueueGenericCreateStatic+0x7e>
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <xQueueGenericCreateStatic+0x82>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e000      	b.n	800a5ac <xQueueGenericCreateStatic+0x84>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10a      	bne.n	800a5c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	61fb      	str	r3, [r7, #28]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5c6:	2350      	movs	r3, #80	; 0x50
 800a5c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b50      	cmp	r3, #80	; 0x50
 800a5ce:	d00a      	beq.n	800a5e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	61bb      	str	r3, [r7, #24]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00d      	beq.n	800a60e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4613      	mov	r3, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f805 	bl	800a618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a610:	4618      	mov	r0, r3
 800a612:	3730      	adds	r7, #48	; 0x30
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d103      	bne.n	800a634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	e002      	b.n	800a63a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a646:	2101      	movs	r1, #1
 800a648:	69b8      	ldr	r0, [r7, #24]
 800a64a:	f7ff ff05 	bl	800a458 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	78fa      	ldrb	r2, [r7, #3]
 800a652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	; 0x38
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a66e:	2300      	movs	r3, #0
 800a670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <xQueueGenericSend+0x32>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d103      	bne.n	800a6a0 <xQueueGenericSend+0x40>
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <xQueueGenericSend+0x44>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e000      	b.n	800a6a6 <xQueueGenericSend+0x46>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10a      	bne.n	800a6c0 <xQueueGenericSend+0x60>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d103      	bne.n	800a6ce <xQueueGenericSend+0x6e>
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d101      	bne.n	800a6d2 <xQueueGenericSend+0x72>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e000      	b.n	800a6d4 <xQueueGenericSend+0x74>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xQueueGenericSend+0x8e>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	623b      	str	r3, [r7, #32]
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6ee:	f001 f9bd 	bl	800ba6c <xTaskGetSchedulerState>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <xQueueGenericSend+0x9e>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <xQueueGenericSend+0xa2>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <xQueueGenericSend+0xa4>
 800a702:	2300      	movs	r3, #0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <xQueueGenericSend+0xbe>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	61fb      	str	r3, [r7, #28]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a71e:	f7ff fd79 	bl	800a214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d302      	bcc.n	800a734 <xQueueGenericSend+0xd4>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d129      	bne.n	800a788 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	68b9      	ldr	r1, [r7, #8]
 800a738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a73a:	f000 fa0b 	bl	800ab54 <prvCopyDataToQueue>
 800a73e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b00      	cmp	r3, #0
 800a746:	d010      	beq.n	800a76a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74a:	3324      	adds	r3, #36	; 0x24
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 ffcf 	bl	800b6f0 <xTaskRemoveFromEventList>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d013      	beq.n	800a780 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a758:	4b3f      	ldr	r3, [pc, #252]	; (800a858 <xQueueGenericSend+0x1f8>)
 800a75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	e00a      	b.n	800a780 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d007      	beq.n	800a780 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a770:	4b39      	ldr	r3, [pc, #228]	; (800a858 <xQueueGenericSend+0x1f8>)
 800a772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a780:	f7ff fd78 	bl	800a274 <vPortExitCritical>
				return pdPASS;
 800a784:	2301      	movs	r3, #1
 800a786:	e063      	b.n	800a850 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d103      	bne.n	800a796 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a78e:	f7ff fd71 	bl	800a274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a792:	2300      	movs	r3, #0
 800a794:	e05c      	b.n	800a850 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a79c:	f107 0314 	add.w	r3, r7, #20
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f001 f809 	bl	800b7b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7aa:	f7ff fd63 	bl	800a274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7ae:	f000 fd7b 	bl	800b2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7b2:	f7ff fd2f 	bl	800a214 <vPortEnterCritical>
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7bc:	b25b      	sxtb	r3, r3
 800a7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c2:	d103      	bne.n	800a7cc <xQueueGenericSend+0x16c>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7d2:	b25b      	sxtb	r3, r3
 800a7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d8:	d103      	bne.n	800a7e2 <xQueueGenericSend+0x182>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7e2:	f7ff fd47 	bl	800a274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7e6:	1d3a      	adds	r2, r7, #4
 800a7e8:	f107 0314 	add.w	r3, r7, #20
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fff8 	bl	800b7e4 <xTaskCheckForTimeOut>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d124      	bne.n	800a844 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7fc:	f000 faa2 	bl	800ad44 <prvIsQueueFull>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d018      	beq.n	800a838 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	3310      	adds	r3, #16
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	4611      	mov	r1, r2
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 ff1e 	bl	800b650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a816:	f000 fa2d 	bl	800ac74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a81a:	f000 fd53 	bl	800b2c4 <xTaskResumeAll>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	f47f af7c 	bne.w	800a71e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a826:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <xQueueGenericSend+0x1f8>)
 800a828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	e772      	b.n	800a71e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a83a:	f000 fa1b 	bl	800ac74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a83e:	f000 fd41 	bl	800b2c4 <xTaskResumeAll>
 800a842:	e76c      	b.n	800a71e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a846:	f000 fa15 	bl	800ac74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a84a:	f000 fd3b 	bl	800b2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a84e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a850:	4618      	mov	r0, r3
 800a852:	3738      	adds	r7, #56	; 0x38
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b090      	sub	sp, #64	; 0x40
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10a      	bne.n	800a88a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a886:	bf00      	nop
 800a888:	e7fe      	b.n	800a888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d103      	bne.n	800a898 <xQueueGenericSendFromISR+0x3c>
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <xQueueGenericSendFromISR+0x40>
 800a898:	2301      	movs	r3, #1
 800a89a:	e000      	b.n	800a89e <xQueueGenericSendFromISR+0x42>
 800a89c:	2300      	movs	r3, #0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d103      	bne.n	800a8c6 <xQueueGenericSendFromISR+0x6a>
 800a8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <xQueueGenericSendFromISR+0x6e>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <xQueueGenericSendFromISR+0x70>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	623b      	str	r3, [r7, #32]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8e6:	f7ff fd77 	bl	800a3d8 <vPortValidateInterruptPriority>
	__asm volatile
 800a8ea:	f3ef 8211 	mrs	r2, BASEPRI
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	61fa      	str	r2, [r7, #28]
 800a900:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a902:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a904:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90e:	429a      	cmp	r2, r3
 800a910:	d302      	bcc.n	800a918 <xQueueGenericSendFromISR+0xbc>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b02      	cmp	r3, #2
 800a916:	d12f      	bne.n	800a978 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a92e:	f000 f911 	bl	800ab54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93a:	d112      	bne.n	800a962 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	2b00      	cmp	r3, #0
 800a942:	d016      	beq.n	800a972 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a946:	3324      	adds	r3, #36	; 0x24
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 fed1 	bl	800b6f0 <xTaskRemoveFromEventList>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00e      	beq.n	800a972 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00b      	beq.n	800a972 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	e007      	b.n	800a972 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a962:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a966:	3301      	adds	r3, #1
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	b25a      	sxtb	r2, r3
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a972:	2301      	movs	r3, #1
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a976:	e001      	b.n	800a97c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f383 8811 	msr	BASEPRI, r3
}
 800a986:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3740      	adds	r7, #64	; 0x40
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b08c      	sub	sp, #48	; 0x30
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10a      	bne.n	800a9c4 <xQueueReceive+0x30>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	623b      	str	r3, [r7, #32]
}
 800a9c0:	bf00      	nop
 800a9c2:	e7fe      	b.n	800a9c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d103      	bne.n	800a9d2 <xQueueReceive+0x3e>
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <xQueueReceive+0x42>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e000      	b.n	800a9d8 <xQueueReceive+0x44>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10a      	bne.n	800a9f2 <xQueueReceive+0x5e>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	61fb      	str	r3, [r7, #28]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9f2:	f001 f83b 	bl	800ba6c <xTaskGetSchedulerState>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d102      	bne.n	800aa02 <xQueueReceive+0x6e>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <xQueueReceive+0x72>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e000      	b.n	800aa08 <xQueueReceive+0x74>
 800aa06:	2300      	movs	r3, #0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xQueueReceive+0x8e>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	61bb      	str	r3, [r7, #24]
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa22:	f7ff fbf7 	bl	800a214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d01f      	beq.n	800aa72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa32:	68b9      	ldr	r1, [r7, #8]
 800aa34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa36:	f000 f8f7 	bl	800ac28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	1e5a      	subs	r2, r3, #1
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00f      	beq.n	800aa6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	3310      	adds	r3, #16
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fe4e 	bl	800b6f0 <xTaskRemoveFromEventList>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d007      	beq.n	800aa6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa5a:	4b3d      	ldr	r3, [pc, #244]	; (800ab50 <xQueueReceive+0x1bc>)
 800aa5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa6a:	f7ff fc03 	bl	800a274 <vPortExitCritical>
				return pdPASS;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e069      	b.n	800ab46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d103      	bne.n	800aa80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa78:	f7ff fbfc 	bl	800a274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e062      	b.n	800ab46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa86:	f107 0310 	add.w	r3, r7, #16
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fe94 	bl	800b7b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa90:	2301      	movs	r3, #1
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa94:	f7ff fbee 	bl	800a274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa98:	f000 fc06 	bl	800b2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa9c:	f7ff fbba 	bl	800a214 <vPortEnterCritical>
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaac:	d103      	bne.n	800aab6 <xQueueReceive+0x122>
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aabc:	b25b      	sxtb	r3, r3
 800aabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac2:	d103      	bne.n	800aacc <xQueueReceive+0x138>
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aacc:	f7ff fbd2 	bl	800a274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aad0:	1d3a      	adds	r2, r7, #4
 800aad2:	f107 0310 	add.w	r3, r7, #16
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 fe83 	bl	800b7e4 <xTaskCheckForTimeOut>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d123      	bne.n	800ab2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae6:	f000 f917 	bl	800ad18 <prvIsQueueEmpty>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d017      	beq.n	800ab20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	3324      	adds	r3, #36	; 0x24
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 fda9 	bl	800b650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aafe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab00:	f000 f8b8 	bl	800ac74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab04:	f000 fbde 	bl	800b2c4 <xTaskResumeAll>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d189      	bne.n	800aa22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab0e:	4b10      	ldr	r3, [pc, #64]	; (800ab50 <xQueueReceive+0x1bc>)
 800ab10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	e780      	b.n	800aa22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab22:	f000 f8a7 	bl	800ac74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab26:	f000 fbcd 	bl	800b2c4 <xTaskResumeAll>
 800ab2a:	e77a      	b.n	800aa22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab2e:	f000 f8a1 	bl	800ac74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab32:	f000 fbc7 	bl	800b2c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab38:	f000 f8ee 	bl	800ad18 <prvIsQueueEmpty>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f43f af6f 	beq.w	800aa22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3730      	adds	r7, #48	; 0x30
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	e000ed04 	.word	0xe000ed04

0800ab54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab60:	2300      	movs	r3, #0
 800ab62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10d      	bne.n	800ab8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d14d      	bne.n	800ac16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 ff92 	bl	800baa8 <xTaskPriorityDisinherit>
 800ab84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	609a      	str	r2, [r3, #8]
 800ab8c:	e043      	b.n	800ac16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d119      	bne.n	800abc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6858      	ldr	r0, [r3, #4]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	f001 fbbc 	bl	800c31c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abac:	441a      	add	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d32b      	bcc.n	800ac16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	605a      	str	r2, [r3, #4]
 800abc6:	e026      	b.n	800ac16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	68d8      	ldr	r0, [r3, #12]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	461a      	mov	r2, r3
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	f001 fba2 	bl	800c31c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	68da      	ldr	r2, [r3, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe0:	425b      	negs	r3, r3
 800abe2:	441a      	add	r2, r3
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	68da      	ldr	r2, [r3, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d207      	bcs.n	800ac04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	425b      	negs	r3, r3
 800abfe:	441a      	add	r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d105      	bne.n	800ac16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac1e:	697b      	ldr	r3, [r7, #20]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d018      	beq.n	800ac6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac42:	441a      	add	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68da      	ldr	r2, [r3, #12]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d303      	bcc.n	800ac5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68d9      	ldr	r1, [r3, #12]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac64:	461a      	mov	r2, r3
 800ac66:	6838      	ldr	r0, [r7, #0]
 800ac68:	f001 fb58 	bl	800c31c <memcpy>
	}
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac7c:	f7ff faca 	bl	800a214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac88:	e011      	b.n	800acae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d012      	beq.n	800acb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	3324      	adds	r3, #36	; 0x24
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 fd2a 	bl	800b6f0 <xTaskRemoveFromEventList>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aca2:	f000 fe01 	bl	800b8a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
 800aca8:	3b01      	subs	r3, #1
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	dce9      	bgt.n	800ac8a <prvUnlockQueue+0x16>
 800acb6:	e000      	b.n	800acba <prvUnlockQueue+0x46>
					break;
 800acb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	22ff      	movs	r2, #255	; 0xff
 800acbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800acc2:	f7ff fad7 	bl	800a274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acc6:	f7ff faa5 	bl	800a214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acd2:	e011      	b.n	800acf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d012      	beq.n	800ad02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3310      	adds	r3, #16
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fd05 	bl	800b6f0 <xTaskRemoveFromEventList>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800acec:	f000 fddc 	bl	800b8a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	dce9      	bgt.n	800acd4 <prvUnlockQueue+0x60>
 800ad00:	e000      	b.n	800ad04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	22ff      	movs	r2, #255	; 0xff
 800ad08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad0c:	f7ff fab2 	bl	800a274 <vPortExitCritical>
}
 800ad10:	bf00      	nop
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad20:	f7ff fa78 	bl	800a214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d102      	bne.n	800ad32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	e001      	b.n	800ad36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad36:	f7ff fa9d 	bl	800a274 <vPortExitCritical>

	return xReturn;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad4c:	f7ff fa62 	bl	800a214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d102      	bne.n	800ad62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	e001      	b.n	800ad66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad66:	f7ff fa85 	bl	800a274 <vPortExitCritical>

	return xReturn;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60fb      	str	r3, [r7, #12]
 800ad82:	e014      	b.n	800adae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad84:	4a0f      	ldr	r2, [pc, #60]	; (800adc4 <vQueueAddToRegistry+0x50>)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10b      	bne.n	800ada8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad90:	490c      	ldr	r1, [pc, #48]	; (800adc4 <vQueueAddToRegistry+0x50>)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad9a:	4a0a      	ldr	r2, [pc, #40]	; (800adc4 <vQueueAddToRegistry+0x50>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	4413      	add	r3, r2
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ada6:	e006      	b.n	800adb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3301      	adds	r3, #1
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b07      	cmp	r3, #7
 800adb2:	d9e7      	bls.n	800ad84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	240045fc 	.word	0x240045fc

0800adc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800add8:	f7ff fa1c 	bl	800a214 <vPortEnterCritical>
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ade2:	b25b      	sxtb	r3, r3
 800ade4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade8:	d103      	bne.n	800adf2 <vQueueWaitForMessageRestricted+0x2a>
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adf8:	b25b      	sxtb	r3, r3
 800adfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfe:	d103      	bne.n	800ae08 <vQueueWaitForMessageRestricted+0x40>
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae08:	f7ff fa34 	bl	800a274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d106      	bne.n	800ae22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	3324      	adds	r3, #36	; 0x24
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	68b9      	ldr	r1, [r7, #8]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 fc3b 	bl	800b698 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae22:	6978      	ldr	r0, [r7, #20]
 800ae24:	f7ff ff26 	bl	800ac74 <prvUnlockQueue>
	}
 800ae28:	bf00      	nop
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08e      	sub	sp, #56	; 0x38
 800ae34:	af04      	add	r7, sp, #16
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	623b      	str	r3, [r7, #32]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	61fb      	str	r3, [r7, #28]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae76:	235c      	movs	r3, #92	; 0x5c
 800ae78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b5c      	cmp	r3, #92	; 0x5c
 800ae7e:	d00a      	beq.n	800ae96 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	61bb      	str	r3, [r7, #24]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d01e      	beq.n	800aedc <xTaskCreateStatic+0xac>
 800ae9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01b      	beq.n	800aedc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9303      	str	r3, [sp, #12]
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	9302      	str	r3, [sp, #8]
 800aebe:	f107 0314 	add.w	r3, r7, #20
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	68b9      	ldr	r1, [r7, #8]
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 f850 	bl	800af74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aed6:	f000 f8dd 	bl	800b094 <prvAddNewTaskToReadyList>
 800aeda:	e001      	b.n	800aee0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aedc:	2300      	movs	r3, #0
 800aede:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aee0:	697b      	ldr	r3, [r7, #20]
	}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3728      	adds	r7, #40	; 0x28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b08c      	sub	sp, #48	; 0x30
 800aeee:	af04      	add	r7, sp, #16
 800aef0:	60f8      	str	r0, [r7, #12]
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	603b      	str	r3, [r7, #0]
 800aef6:	4613      	mov	r3, r2
 800aef8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aefa:	88fb      	ldrh	r3, [r7, #6]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe fdbc 	bl	8009a7c <pvPortMalloc>
 800af04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00e      	beq.n	800af2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af0c:	205c      	movs	r0, #92	; 0x5c
 800af0e:	f7fe fdb5 	bl	8009a7c <pvPortMalloc>
 800af12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	631a      	str	r2, [r3, #48]	; 0x30
 800af20:	e005      	b.n	800af2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af22:	6978      	ldr	r0, [r7, #20]
 800af24:	f7fe fe76 	bl	8009c14 <vPortFree>
 800af28:	e001      	b.n	800af2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d017      	beq.n	800af64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af3c:	88fa      	ldrh	r2, [r7, #6]
 800af3e:	2300      	movs	r3, #0
 800af40:	9303      	str	r3, [sp, #12]
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	9302      	str	r3, [sp, #8]
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	68b9      	ldr	r1, [r7, #8]
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 f80e 	bl	800af74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af58:	69f8      	ldr	r0, [r7, #28]
 800af5a:	f000 f89b 	bl	800b094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af5e:	2301      	movs	r3, #1
 800af60:	61bb      	str	r3, [r7, #24]
 800af62:	e002      	b.n	800af6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af64:	f04f 33ff 	mov.w	r3, #4294967295
 800af68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af6a:	69bb      	ldr	r3, [r7, #24]
	}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3720      	adds	r7, #32
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	461a      	mov	r2, r3
 800af8c:	21a5      	movs	r1, #165	; 0xa5
 800af8e:	f001 f9d3 	bl	800c338 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af96:	6879      	ldr	r1, [r7, #4]
 800af98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800af9c:	440b      	add	r3, r1
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	f023 0307 	bic.w	r3, r3, #7
 800afaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00a      	beq.n	800afcc <prvInitialiseNewTask+0x58>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	617b      	str	r3, [r7, #20]
}
 800afc8:	bf00      	nop
 800afca:	e7fe      	b.n	800afca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d01f      	beq.n	800b012 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd2:	2300      	movs	r3, #0
 800afd4:	61fb      	str	r3, [r7, #28]
 800afd6:	e012      	b.n	800affe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	7819      	ldrb	r1, [r3, #0]
 800afe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	4413      	add	r3, r2
 800afe6:	3334      	adds	r3, #52	; 0x34
 800afe8:	460a      	mov	r2, r1
 800afea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	4413      	add	r3, r2
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d006      	beq.n	800b006 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	3301      	adds	r3, #1
 800affc:	61fb      	str	r3, [r7, #28]
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	2b0f      	cmp	r3, #15
 800b002:	d9e9      	bls.n	800afd8 <prvInitialiseNewTask+0x64>
 800b004:	e000      	b.n	800b008 <prvInitialiseNewTask+0x94>
			{
				break;
 800b006:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b010:	e003      	b.n	800b01a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	2b37      	cmp	r3, #55	; 0x37
 800b01e:	d901      	bls.n	800b024 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b020:	2337      	movs	r3, #55	; 0x37
 800b022:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b028:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b02e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	2200      	movs	r2, #0
 800b034:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	3304      	adds	r3, #4
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe ff28 	bl	8009e90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	3318      	adds	r3, #24
 800b044:	4618      	mov	r0, r3
 800b046:	f7fe ff23 	bl	8009e90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b04e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b052:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b05e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	2200      	movs	r2, #0
 800b064:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	68f9      	ldr	r1, [r7, #12]
 800b072:	69b8      	ldr	r0, [r7, #24]
 800b074:	f7fe ffa0 	bl	8009fb8 <pxPortInitialiseStack>
 800b078:	4602      	mov	r2, r0
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b08a:	bf00      	nop
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
	...

0800b094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b09c:	f7ff f8ba 	bl	800a214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0a0:	4b2d      	ldr	r3, [pc, #180]	; (800b158 <prvAddNewTaskToReadyList+0xc4>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	4a2c      	ldr	r2, [pc, #176]	; (800b158 <prvAddNewTaskToReadyList+0xc4>)
 800b0a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0aa:	4b2c      	ldr	r3, [pc, #176]	; (800b15c <prvAddNewTaskToReadyList+0xc8>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d109      	bne.n	800b0c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0b2:	4a2a      	ldr	r2, [pc, #168]	; (800b15c <prvAddNewTaskToReadyList+0xc8>)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0b8:	4b27      	ldr	r3, [pc, #156]	; (800b158 <prvAddNewTaskToReadyList+0xc4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d110      	bne.n	800b0e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0c0:	f000 fc16 	bl	800b8f0 <prvInitialiseTaskLists>
 800b0c4:	e00d      	b.n	800b0e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0c6:	4b26      	ldr	r3, [pc, #152]	; (800b160 <prvAddNewTaskToReadyList+0xcc>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d109      	bne.n	800b0e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0ce:	4b23      	ldr	r3, [pc, #140]	; (800b15c <prvAddNewTaskToReadyList+0xc8>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d802      	bhi.n	800b0e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0dc:	4a1f      	ldr	r2, [pc, #124]	; (800b15c <prvAddNewTaskToReadyList+0xc8>)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0e2:	4b20      	ldr	r3, [pc, #128]	; (800b164 <prvAddNewTaskToReadyList+0xd0>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	4a1e      	ldr	r2, [pc, #120]	; (800b164 <prvAddNewTaskToReadyList+0xd0>)
 800b0ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0ec:	4b1d      	ldr	r3, [pc, #116]	; (800b164 <prvAddNewTaskToReadyList+0xd0>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f8:	4b1b      	ldr	r3, [pc, #108]	; (800b168 <prvAddNewTaskToReadyList+0xd4>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d903      	bls.n	800b108 <prvAddNewTaskToReadyList+0x74>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	4a18      	ldr	r2, [pc, #96]	; (800b168 <prvAddNewTaskToReadyList+0xd4>)
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10c:	4613      	mov	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4a15      	ldr	r2, [pc, #84]	; (800b16c <prvAddNewTaskToReadyList+0xd8>)
 800b116:	441a      	add	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3304      	adds	r3, #4
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f7fe fec3 	bl	8009eaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b124:	f7ff f8a6 	bl	800a274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b128:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <prvAddNewTaskToReadyList+0xcc>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00e      	beq.n	800b14e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b130:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <prvAddNewTaskToReadyList+0xc8>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d207      	bcs.n	800b14e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b13e:	4b0c      	ldr	r3, [pc, #48]	; (800b170 <prvAddNewTaskToReadyList+0xdc>)
 800b140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	24004b10 	.word	0x24004b10
 800b15c:	2400463c 	.word	0x2400463c
 800b160:	24004b1c 	.word	0x24004b1c
 800b164:	24004b2c 	.word	0x24004b2c
 800b168:	24004b18 	.word	0x24004b18
 800b16c:	24004640 	.word	0x24004640
 800b170:	e000ed04 	.word	0xe000ed04

0800b174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b17c:	2300      	movs	r3, #0
 800b17e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d017      	beq.n	800b1b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b186:	4b13      	ldr	r3, [pc, #76]	; (800b1d4 <vTaskDelay+0x60>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <vTaskDelay+0x30>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60bb      	str	r3, [r7, #8]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b1a4:	f000 f880 	bl	800b2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fcea 	bl	800bb84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1b0:	f000 f888 	bl	800b2c4 <xTaskResumeAll>
 800b1b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d107      	bne.n	800b1cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <vTaskDelay+0x64>)
 800b1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1cc:	bf00      	nop
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	24004b38 	.word	0x24004b38
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08a      	sub	sp, #40	; 0x28
 800b1e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1ea:	463a      	mov	r2, r7
 800b1ec:	1d39      	adds	r1, r7, #4
 800b1ee:	f107 0308 	add.w	r3, r7, #8
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fc0e 	bl	8009a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	9202      	str	r2, [sp, #8]
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	2300      	movs	r3, #0
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	2300      	movs	r3, #0
 800b208:	460a      	mov	r2, r1
 800b20a:	4921      	ldr	r1, [pc, #132]	; (800b290 <vTaskStartScheduler+0xb4>)
 800b20c:	4821      	ldr	r0, [pc, #132]	; (800b294 <vTaskStartScheduler+0xb8>)
 800b20e:	f7ff fe0f 	bl	800ae30 <xTaskCreateStatic>
 800b212:	4603      	mov	r3, r0
 800b214:	4a20      	ldr	r2, [pc, #128]	; (800b298 <vTaskStartScheduler+0xbc>)
 800b216:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b218:	4b1f      	ldr	r3, [pc, #124]	; (800b298 <vTaskStartScheduler+0xbc>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b220:	2301      	movs	r3, #1
 800b222:	617b      	str	r3, [r7, #20]
 800b224:	e001      	b.n	800b22a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b226:	2300      	movs	r3, #0
 800b228:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d102      	bne.n	800b236 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b230:	f000 fcfc 	bl	800bc2c <xTimerCreateTimerTask>
 800b234:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d116      	bne.n	800b26a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	613b      	str	r3, [r7, #16]
}
 800b24e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b250:	4b12      	ldr	r3, [pc, #72]	; (800b29c <vTaskStartScheduler+0xc0>)
 800b252:	f04f 32ff 	mov.w	r2, #4294967295
 800b256:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b258:	4b11      	ldr	r3, [pc, #68]	; (800b2a0 <vTaskStartScheduler+0xc4>)
 800b25a:	2201      	movs	r2, #1
 800b25c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b25e:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <vTaskStartScheduler+0xc8>)
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b264:	f7fe ff34 	bl	800a0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b268:	e00e      	b.n	800b288 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b270:	d10a      	bne.n	800b288 <vTaskStartScheduler+0xac>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	60fb      	str	r3, [r7, #12]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <vTaskStartScheduler+0xaa>
}
 800b288:	bf00      	nop
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	0800d788 	.word	0x0800d788
 800b294:	0800b8c1 	.word	0x0800b8c1
 800b298:	24004b34 	.word	0x24004b34
 800b29c:	24004b30 	.word	0x24004b30
 800b2a0:	24004b1c 	.word	0x24004b1c
 800b2a4:	24004b14 	.word	0x24004b14

0800b2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2ac:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <vTaskSuspendAll+0x18>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	4a03      	ldr	r2, [pc, #12]	; (800b2c0 <vTaskSuspendAll+0x18>)
 800b2b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2b6:	bf00      	nop
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	24004b38 	.word	0x24004b38

0800b2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2d2:	4b42      	ldr	r3, [pc, #264]	; (800b3dc <xTaskResumeAll+0x118>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d10a      	bne.n	800b2f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	603b      	str	r3, [r7, #0]
}
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2f0:	f7fe ff90 	bl	800a214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2f4:	4b39      	ldr	r3, [pc, #228]	; (800b3dc <xTaskResumeAll+0x118>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	4a38      	ldr	r2, [pc, #224]	; (800b3dc <xTaskResumeAll+0x118>)
 800b2fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2fe:	4b37      	ldr	r3, [pc, #220]	; (800b3dc <xTaskResumeAll+0x118>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d162      	bne.n	800b3cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b306:	4b36      	ldr	r3, [pc, #216]	; (800b3e0 <xTaskResumeAll+0x11c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d05e      	beq.n	800b3cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b30e:	e02f      	b.n	800b370 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b310:	4b34      	ldr	r3, [pc, #208]	; (800b3e4 <xTaskResumeAll+0x120>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3318      	adds	r3, #24
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe fe21 	bl	8009f64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3304      	adds	r3, #4
 800b326:	4618      	mov	r0, r3
 800b328:	f7fe fe1c 	bl	8009f64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b330:	4b2d      	ldr	r3, [pc, #180]	; (800b3e8 <xTaskResumeAll+0x124>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d903      	bls.n	800b340 <xTaskResumeAll+0x7c>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33c:	4a2a      	ldr	r2, [pc, #168]	; (800b3e8 <xTaskResumeAll+0x124>)
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b344:	4613      	mov	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4a27      	ldr	r2, [pc, #156]	; (800b3ec <xTaskResumeAll+0x128>)
 800b34e:	441a      	add	r2, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3304      	adds	r3, #4
 800b354:	4619      	mov	r1, r3
 800b356:	4610      	mov	r0, r2
 800b358:	f7fe fda7 	bl	8009eaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b360:	4b23      	ldr	r3, [pc, #140]	; (800b3f0 <xTaskResumeAll+0x12c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	429a      	cmp	r2, r3
 800b368:	d302      	bcc.n	800b370 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b36a:	4b22      	ldr	r3, [pc, #136]	; (800b3f4 <xTaskResumeAll+0x130>)
 800b36c:	2201      	movs	r2, #1
 800b36e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b370:	4b1c      	ldr	r3, [pc, #112]	; (800b3e4 <xTaskResumeAll+0x120>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1cb      	bne.n	800b310 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b37e:	f000 fb55 	bl	800ba2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b382:	4b1d      	ldr	r3, [pc, #116]	; (800b3f8 <xTaskResumeAll+0x134>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d010      	beq.n	800b3b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b38e:	f000 f847 	bl	800b420 <xTaskIncrementTick>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b398:	4b16      	ldr	r3, [pc, #88]	; (800b3f4 <xTaskResumeAll+0x130>)
 800b39a:	2201      	movs	r2, #1
 800b39c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1f1      	bne.n	800b38e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b3aa:	4b13      	ldr	r3, [pc, #76]	; (800b3f8 <xTaskResumeAll+0x134>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3b0:	4b10      	ldr	r3, [pc, #64]	; (800b3f4 <xTaskResumeAll+0x130>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d009      	beq.n	800b3cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3bc:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <xTaskResumeAll+0x138>)
 800b3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3cc:	f7fe ff52 	bl	800a274 <vPortExitCritical>

	return xAlreadyYielded;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	24004b38 	.word	0x24004b38
 800b3e0:	24004b10 	.word	0x24004b10
 800b3e4:	24004ad0 	.word	0x24004ad0
 800b3e8:	24004b18 	.word	0x24004b18
 800b3ec:	24004640 	.word	0x24004640
 800b3f0:	2400463c 	.word	0x2400463c
 800b3f4:	24004b24 	.word	0x24004b24
 800b3f8:	24004b20 	.word	0x24004b20
 800b3fc:	e000ed04 	.word	0xe000ed04

0800b400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b406:	4b05      	ldr	r3, [pc, #20]	; (800b41c <xTaskGetTickCount+0x1c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b40c:	687b      	ldr	r3, [r7, #4]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	370c      	adds	r7, #12
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	24004b14 	.word	0x24004b14

0800b420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b426:	2300      	movs	r3, #0
 800b428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b42a:	4b4f      	ldr	r3, [pc, #316]	; (800b568 <xTaskIncrementTick+0x148>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f040 808f 	bne.w	800b552 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b434:	4b4d      	ldr	r3, [pc, #308]	; (800b56c <xTaskIncrementTick+0x14c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3301      	adds	r3, #1
 800b43a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b43c:	4a4b      	ldr	r2, [pc, #300]	; (800b56c <xTaskIncrementTick+0x14c>)
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d120      	bne.n	800b48a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b448:	4b49      	ldr	r3, [pc, #292]	; (800b570 <xTaskIncrementTick+0x150>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00a      	beq.n	800b468 <xTaskIncrementTick+0x48>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	603b      	str	r3, [r7, #0]
}
 800b464:	bf00      	nop
 800b466:	e7fe      	b.n	800b466 <xTaskIncrementTick+0x46>
 800b468:	4b41      	ldr	r3, [pc, #260]	; (800b570 <xTaskIncrementTick+0x150>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	60fb      	str	r3, [r7, #12]
 800b46e:	4b41      	ldr	r3, [pc, #260]	; (800b574 <xTaskIncrementTick+0x154>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a3f      	ldr	r2, [pc, #252]	; (800b570 <xTaskIncrementTick+0x150>)
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	4a3f      	ldr	r2, [pc, #252]	; (800b574 <xTaskIncrementTick+0x154>)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	4b3e      	ldr	r3, [pc, #248]	; (800b578 <xTaskIncrementTick+0x158>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3301      	adds	r3, #1
 800b482:	4a3d      	ldr	r2, [pc, #244]	; (800b578 <xTaskIncrementTick+0x158>)
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	f000 fad1 	bl	800ba2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b48a:	4b3c      	ldr	r3, [pc, #240]	; (800b57c <xTaskIncrementTick+0x15c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	429a      	cmp	r2, r3
 800b492:	d349      	bcc.n	800b528 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b494:	4b36      	ldr	r3, [pc, #216]	; (800b570 <xTaskIncrementTick+0x150>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d104      	bne.n	800b4a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b49e:	4b37      	ldr	r3, [pc, #220]	; (800b57c <xTaskIncrementTick+0x15c>)
 800b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a4:	601a      	str	r2, [r3, #0]
					break;
 800b4a6:	e03f      	b.n	800b528 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a8:	4b31      	ldr	r3, [pc, #196]	; (800b570 <xTaskIncrementTick+0x150>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d203      	bcs.n	800b4c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4c0:	4a2e      	ldr	r2, [pc, #184]	; (800b57c <xTaskIncrementTick+0x15c>)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4c6:	e02f      	b.n	800b528 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe fd49 	bl	8009f64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d004      	beq.n	800b4e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	3318      	adds	r3, #24
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fe fd40 	bl	8009f64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e8:	4b25      	ldr	r3, [pc, #148]	; (800b580 <xTaskIncrementTick+0x160>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d903      	bls.n	800b4f8 <xTaskIncrementTick+0xd8>
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f4:	4a22      	ldr	r2, [pc, #136]	; (800b580 <xTaskIncrementTick+0x160>)
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4a1f      	ldr	r2, [pc, #124]	; (800b584 <xTaskIncrementTick+0x164>)
 800b506:	441a      	add	r2, r3
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	3304      	adds	r3, #4
 800b50c:	4619      	mov	r1, r3
 800b50e:	4610      	mov	r0, r2
 800b510:	f7fe fccb 	bl	8009eaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b518:	4b1b      	ldr	r3, [pc, #108]	; (800b588 <xTaskIncrementTick+0x168>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51e:	429a      	cmp	r2, r3
 800b520:	d3b8      	bcc.n	800b494 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b522:	2301      	movs	r3, #1
 800b524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b526:	e7b5      	b.n	800b494 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b528:	4b17      	ldr	r3, [pc, #92]	; (800b588 <xTaskIncrementTick+0x168>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	4915      	ldr	r1, [pc, #84]	; (800b584 <xTaskIncrementTick+0x164>)
 800b530:	4613      	mov	r3, r2
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	4413      	add	r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	440b      	add	r3, r1
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d901      	bls.n	800b544 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b540:	2301      	movs	r3, #1
 800b542:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b544:	4b11      	ldr	r3, [pc, #68]	; (800b58c <xTaskIncrementTick+0x16c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d007      	beq.n	800b55c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b54c:	2301      	movs	r3, #1
 800b54e:	617b      	str	r3, [r7, #20]
 800b550:	e004      	b.n	800b55c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b552:	4b0f      	ldr	r3, [pc, #60]	; (800b590 <xTaskIncrementTick+0x170>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3301      	adds	r3, #1
 800b558:	4a0d      	ldr	r2, [pc, #52]	; (800b590 <xTaskIncrementTick+0x170>)
 800b55a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b55c:	697b      	ldr	r3, [r7, #20]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	24004b38 	.word	0x24004b38
 800b56c:	24004b14 	.word	0x24004b14
 800b570:	24004ac8 	.word	0x24004ac8
 800b574:	24004acc 	.word	0x24004acc
 800b578:	24004b28 	.word	0x24004b28
 800b57c:	24004b30 	.word	0x24004b30
 800b580:	24004b18 	.word	0x24004b18
 800b584:	24004640 	.word	0x24004640
 800b588:	2400463c 	.word	0x2400463c
 800b58c:	24004b24 	.word	0x24004b24
 800b590:	24004b20 	.word	0x24004b20

0800b594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b59a:	4b28      	ldr	r3, [pc, #160]	; (800b63c <vTaskSwitchContext+0xa8>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d003      	beq.n	800b5aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5a2:	4b27      	ldr	r3, [pc, #156]	; (800b640 <vTaskSwitchContext+0xac>)
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5a8:	e041      	b.n	800b62e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b5aa:	4b25      	ldr	r3, [pc, #148]	; (800b640 <vTaskSwitchContext+0xac>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5b0:	4b24      	ldr	r3, [pc, #144]	; (800b644 <vTaskSwitchContext+0xb0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	e010      	b.n	800b5da <vTaskSwitchContext+0x46>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	607b      	str	r3, [r7, #4]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <vTaskSwitchContext+0x3e>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	60fb      	str	r3, [r7, #12]
 800b5da:	491b      	ldr	r1, [pc, #108]	; (800b648 <vTaskSwitchContext+0xb4>)
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0e4      	beq.n	800b5b8 <vTaskSwitchContext+0x24>
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4a13      	ldr	r2, [pc, #76]	; (800b648 <vTaskSwitchContext+0xb4>)
 800b5fa:	4413      	add	r3, r2
 800b5fc:	60bb      	str	r3, [r7, #8]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	605a      	str	r2, [r3, #4]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	3308      	adds	r3, #8
 800b610:	429a      	cmp	r2, r3
 800b612:	d104      	bne.n	800b61e <vTaskSwitchContext+0x8a>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	605a      	str	r2, [r3, #4]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	4a09      	ldr	r2, [pc, #36]	; (800b64c <vTaskSwitchContext+0xb8>)
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	4a06      	ldr	r2, [pc, #24]	; (800b644 <vTaskSwitchContext+0xb0>)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6013      	str	r3, [r2, #0]
}
 800b62e:	bf00      	nop
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	24004b38 	.word	0x24004b38
 800b640:	24004b24 	.word	0x24004b24
 800b644:	24004b18 	.word	0x24004b18
 800b648:	24004640 	.word	0x24004640
 800b64c:	2400463c 	.word	0x2400463c

0800b650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10a      	bne.n	800b676 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	60fb      	str	r3, [r7, #12]
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b676:	4b07      	ldr	r3, [pc, #28]	; (800b694 <vTaskPlaceOnEventList+0x44>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3318      	adds	r3, #24
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fe fc37 	bl	8009ef2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b684:	2101      	movs	r1, #1
 800b686:	6838      	ldr	r0, [r7, #0]
 800b688:	f000 fa7c 	bl	800bb84 <prvAddCurrentTaskToDelayedList>
}
 800b68c:	bf00      	nop
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	2400463c 	.word	0x2400463c

0800b698 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10a      	bne.n	800b6c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	617b      	str	r3, [r7, #20]
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6c0:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <vTaskPlaceOnEventListRestricted+0x54>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3318      	adds	r3, #24
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7fe fbee 	bl	8009eaa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	68b8      	ldr	r0, [r7, #8]
 800b6de:	f000 fa51 	bl	800bb84 <prvAddCurrentTaskToDelayedList>
	}
 800b6e2:	bf00      	nop
 800b6e4:	3718      	adds	r7, #24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	2400463c 	.word	0x2400463c

0800b6f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10a      	bne.n	800b71c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60fb      	str	r3, [r7, #12]
}
 800b718:	bf00      	nop
 800b71a:	e7fe      	b.n	800b71a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	3318      	adds	r3, #24
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe fc1f 	bl	8009f64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b726:	4b1e      	ldr	r3, [pc, #120]	; (800b7a0 <xTaskRemoveFromEventList+0xb0>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d11d      	bne.n	800b76a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3304      	adds	r3, #4
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe fc16 	bl	8009f64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73c:	4b19      	ldr	r3, [pc, #100]	; (800b7a4 <xTaskRemoveFromEventList+0xb4>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	d903      	bls.n	800b74c <xTaskRemoveFromEventList+0x5c>
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	4a16      	ldr	r2, [pc, #88]	; (800b7a4 <xTaskRemoveFromEventList+0xb4>)
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	4613      	mov	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4a13      	ldr	r2, [pc, #76]	; (800b7a8 <xTaskRemoveFromEventList+0xb8>)
 800b75a:	441a      	add	r2, r3
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	3304      	adds	r3, #4
 800b760:	4619      	mov	r1, r3
 800b762:	4610      	mov	r0, r2
 800b764:	f7fe fba1 	bl	8009eaa <vListInsertEnd>
 800b768:	e005      	b.n	800b776 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	3318      	adds	r3, #24
 800b76e:	4619      	mov	r1, r3
 800b770:	480e      	ldr	r0, [pc, #56]	; (800b7ac <xTaskRemoveFromEventList+0xbc>)
 800b772:	f7fe fb9a 	bl	8009eaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77a:	4b0d      	ldr	r3, [pc, #52]	; (800b7b0 <xTaskRemoveFromEventList+0xc0>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	429a      	cmp	r2, r3
 800b782:	d905      	bls.n	800b790 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b784:	2301      	movs	r3, #1
 800b786:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b788:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <xTaskRemoveFromEventList+0xc4>)
 800b78a:	2201      	movs	r2, #1
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	e001      	b.n	800b794 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b790:	2300      	movs	r3, #0
 800b792:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b794:	697b      	ldr	r3, [r7, #20]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	24004b38 	.word	0x24004b38
 800b7a4:	24004b18 	.word	0x24004b18
 800b7a8:	24004640 	.word	0x24004640
 800b7ac:	24004ad0 	.word	0x24004ad0
 800b7b0:	2400463c 	.word	0x2400463c
 800b7b4:	24004b24 	.word	0x24004b24

0800b7b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7c0:	4b06      	ldr	r3, [pc, #24]	; (800b7dc <vTaskInternalSetTimeOutState+0x24>)
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <vTaskInternalSetTimeOutState+0x28>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	605a      	str	r2, [r3, #4]
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	24004b28 	.word	0x24004b28
 800b7e0:	24004b14 	.word	0x24004b14

0800b7e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b088      	sub	sp, #32
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10a      	bne.n	800b80a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	613b      	str	r3, [r7, #16]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10a      	bne.n	800b826 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	60fb      	str	r3, [r7, #12]
}
 800b822:	bf00      	nop
 800b824:	e7fe      	b.n	800b824 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b826:	f7fe fcf5 	bl	800a214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b82a:	4b1d      	ldr	r3, [pc, #116]	; (800b8a0 <xTaskCheckForTimeOut+0xbc>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	69ba      	ldr	r2, [r7, #24]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b842:	d102      	bne.n	800b84a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b844:	2300      	movs	r3, #0
 800b846:	61fb      	str	r3, [r7, #28]
 800b848:	e023      	b.n	800b892 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	4b15      	ldr	r3, [pc, #84]	; (800b8a4 <xTaskCheckForTimeOut+0xc0>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	429a      	cmp	r2, r3
 800b854:	d007      	beq.n	800b866 <xTaskCheckForTimeOut+0x82>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	69ba      	ldr	r2, [r7, #24]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d302      	bcc.n	800b866 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b860:	2301      	movs	r3, #1
 800b862:	61fb      	str	r3, [r7, #28]
 800b864:	e015      	b.n	800b892 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d20b      	bcs.n	800b888 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	1ad2      	subs	r2, r2, r3
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff ff9b 	bl	800b7b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b882:	2300      	movs	r3, #0
 800b884:	61fb      	str	r3, [r7, #28]
 800b886:	e004      	b.n	800b892 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b88e:	2301      	movs	r3, #1
 800b890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b892:	f7fe fcef 	bl	800a274 <vPortExitCritical>

	return xReturn;
 800b896:	69fb      	ldr	r3, [r7, #28]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3720      	adds	r7, #32
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	24004b14 	.word	0x24004b14
 800b8a4:	24004b28 	.word	0x24004b28

0800b8a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8ac:	4b03      	ldr	r3, [pc, #12]	; (800b8bc <vTaskMissedYield+0x14>)
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	601a      	str	r2, [r3, #0]
}
 800b8b2:	bf00      	nop
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	24004b24 	.word	0x24004b24

0800b8c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8c8:	f000 f852 	bl	800b970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <prvIdleTask+0x28>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d9f9      	bls.n	800b8c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8d4:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <prvIdleTask+0x2c>)
 800b8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8e4:	e7f0      	b.n	800b8c8 <prvIdleTask+0x8>
 800b8e6:	bf00      	nop
 800b8e8:	24004640 	.word	0x24004640
 800b8ec:	e000ed04 	.word	0xe000ed04

0800b8f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	607b      	str	r3, [r7, #4]
 800b8fa:	e00c      	b.n	800b916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	4613      	mov	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4a12      	ldr	r2, [pc, #72]	; (800b950 <prvInitialiseTaskLists+0x60>)
 800b908:	4413      	add	r3, r2
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe faa0 	bl	8009e50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	3301      	adds	r3, #1
 800b914:	607b      	str	r3, [r7, #4]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b37      	cmp	r3, #55	; 0x37
 800b91a:	d9ef      	bls.n	800b8fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b91c:	480d      	ldr	r0, [pc, #52]	; (800b954 <prvInitialiseTaskLists+0x64>)
 800b91e:	f7fe fa97 	bl	8009e50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b922:	480d      	ldr	r0, [pc, #52]	; (800b958 <prvInitialiseTaskLists+0x68>)
 800b924:	f7fe fa94 	bl	8009e50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b928:	480c      	ldr	r0, [pc, #48]	; (800b95c <prvInitialiseTaskLists+0x6c>)
 800b92a:	f7fe fa91 	bl	8009e50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b92e:	480c      	ldr	r0, [pc, #48]	; (800b960 <prvInitialiseTaskLists+0x70>)
 800b930:	f7fe fa8e 	bl	8009e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b934:	480b      	ldr	r0, [pc, #44]	; (800b964 <prvInitialiseTaskLists+0x74>)
 800b936:	f7fe fa8b 	bl	8009e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b93a:	4b0b      	ldr	r3, [pc, #44]	; (800b968 <prvInitialiseTaskLists+0x78>)
 800b93c:	4a05      	ldr	r2, [pc, #20]	; (800b954 <prvInitialiseTaskLists+0x64>)
 800b93e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b940:	4b0a      	ldr	r3, [pc, #40]	; (800b96c <prvInitialiseTaskLists+0x7c>)
 800b942:	4a05      	ldr	r2, [pc, #20]	; (800b958 <prvInitialiseTaskLists+0x68>)
 800b944:	601a      	str	r2, [r3, #0]
}
 800b946:	bf00      	nop
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	24004640 	.word	0x24004640
 800b954:	24004aa0 	.word	0x24004aa0
 800b958:	24004ab4 	.word	0x24004ab4
 800b95c:	24004ad0 	.word	0x24004ad0
 800b960:	24004ae4 	.word	0x24004ae4
 800b964:	24004afc 	.word	0x24004afc
 800b968:	24004ac8 	.word	0x24004ac8
 800b96c:	24004acc 	.word	0x24004acc

0800b970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b976:	e019      	b.n	800b9ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b978:	f7fe fc4c 	bl	800a214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <prvCheckTasksWaitingTermination+0x50>)
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3304      	adds	r3, #4
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fe faeb 	bl	8009f64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b98e:	4b0d      	ldr	r3, [pc, #52]	; (800b9c4 <prvCheckTasksWaitingTermination+0x54>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3b01      	subs	r3, #1
 800b994:	4a0b      	ldr	r2, [pc, #44]	; (800b9c4 <prvCheckTasksWaitingTermination+0x54>)
 800b996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b998:	4b0b      	ldr	r3, [pc, #44]	; (800b9c8 <prvCheckTasksWaitingTermination+0x58>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3b01      	subs	r3, #1
 800b99e:	4a0a      	ldr	r2, [pc, #40]	; (800b9c8 <prvCheckTasksWaitingTermination+0x58>)
 800b9a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b9a2:	f7fe fc67 	bl	800a274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f810 	bl	800b9cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9ac:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <prvCheckTasksWaitingTermination+0x58>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1e1      	bne.n	800b978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9b4:	bf00      	nop
 800b9b6:	bf00      	nop
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	24004ae4 	.word	0x24004ae4
 800b9c4:	24004b10 	.word	0x24004b10
 800b9c8:	24004af8 	.word	0x24004af8

0800b9cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d108      	bne.n	800b9f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fe f916 	bl	8009c14 <vPortFree>
				vPortFree( pxTCB );
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7fe f913 	bl	8009c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9ee:	e018      	b.n	800ba22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d103      	bne.n	800ba02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7fe f90a 	bl	8009c14 <vPortFree>
	}
 800ba00:	e00f      	b.n	800ba22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d00a      	beq.n	800ba22 <prvDeleteTCB+0x56>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	60fb      	str	r3, [r7, #12]
}
 800ba1e:	bf00      	nop
 800ba20:	e7fe      	b.n	800ba20 <prvDeleteTCB+0x54>
	}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba32:	4b0c      	ldr	r3, [pc, #48]	; (800ba64 <prvResetNextTaskUnblockTime+0x38>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d104      	bne.n	800ba46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <prvResetNextTaskUnblockTime+0x3c>)
 800ba3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba44:	e008      	b.n	800ba58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba46:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <prvResetNextTaskUnblockTime+0x38>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	4a04      	ldr	r2, [pc, #16]	; (800ba68 <prvResetNextTaskUnblockTime+0x3c>)
 800ba56:	6013      	str	r3, [r2, #0]
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	24004ac8 	.word	0x24004ac8
 800ba68:	24004b30 	.word	0x24004b30

0800ba6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba72:	4b0b      	ldr	r3, [pc, #44]	; (800baa0 <xTaskGetSchedulerState+0x34>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d102      	bne.n	800ba80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	607b      	str	r3, [r7, #4]
 800ba7e:	e008      	b.n	800ba92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba80:	4b08      	ldr	r3, [pc, #32]	; (800baa4 <xTaskGetSchedulerState+0x38>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d102      	bne.n	800ba8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba88:	2302      	movs	r3, #2
 800ba8a:	607b      	str	r3, [r7, #4]
 800ba8c:	e001      	b.n	800ba92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba92:	687b      	ldr	r3, [r7, #4]
	}
 800ba94:	4618      	mov	r0, r3
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	24004b1c 	.word	0x24004b1c
 800baa4:	24004b38 	.word	0x24004b38

0800baa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d056      	beq.n	800bb6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800babe:	4b2e      	ldr	r3, [pc, #184]	; (800bb78 <xTaskPriorityDisinherit+0xd0>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	693a      	ldr	r2, [r7, #16]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d00a      	beq.n	800bade <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60fb      	str	r3, [r7, #12]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10a      	bne.n	800bafc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	60bb      	str	r3, [r7, #8]
}
 800baf8:	bf00      	nop
 800bafa:	e7fe      	b.n	800bafa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb00:	1e5a      	subs	r2, r3, #1
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d02c      	beq.n	800bb6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d128      	bne.n	800bb6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe fa20 	bl	8009f64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3c:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <xTaskPriorityDisinherit+0xd4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d903      	bls.n	800bb4c <xTaskPriorityDisinherit+0xa4>
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	4a0c      	ldr	r2, [pc, #48]	; (800bb7c <xTaskPriorityDisinherit+0xd4>)
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4a09      	ldr	r2, [pc, #36]	; (800bb80 <xTaskPriorityDisinherit+0xd8>)
 800bb5a:	441a      	add	r2, r3
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f7fe f9a1 	bl	8009eaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb6c:	697b      	ldr	r3, [r7, #20]
	}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	2400463c 	.word	0x2400463c
 800bb7c:	24004b18 	.word	0x24004b18
 800bb80:	24004640 	.word	0x24004640

0800bb84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb8e:	4b21      	ldr	r3, [pc, #132]	; (800bc14 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb94:	4b20      	ldr	r3, [pc, #128]	; (800bc18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe f9e2 	bl	8009f64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba6:	d10a      	bne.n	800bbbe <prvAddCurrentTaskToDelayedList+0x3a>
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbae:	4b1a      	ldr	r3, [pc, #104]	; (800bc18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4819      	ldr	r0, [pc, #100]	; (800bc1c <prvAddCurrentTaskToDelayedList+0x98>)
 800bbb8:	f7fe f977 	bl	8009eaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbbc:	e026      	b.n	800bc0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbc6:	4b14      	ldr	r3, [pc, #80]	; (800bc18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d209      	bcs.n	800bbea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbd6:	4b12      	ldr	r3, [pc, #72]	; (800bc20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	4b0f      	ldr	r3, [pc, #60]	; (800bc18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3304      	adds	r3, #4
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	f7fe f985 	bl	8009ef2 <vListInsert>
}
 800bbe8:	e010      	b.n	800bc0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbea:	4b0e      	ldr	r3, [pc, #56]	; (800bc24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	4b0a      	ldr	r3, [pc, #40]	; (800bc18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	f7fe f97b 	bl	8009ef2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbfc:	4b0a      	ldr	r3, [pc, #40]	; (800bc28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d202      	bcs.n	800bc0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc06:	4a08      	ldr	r2, [pc, #32]	; (800bc28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	6013      	str	r3, [r2, #0]
}
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	24004b14 	.word	0x24004b14
 800bc18:	2400463c 	.word	0x2400463c
 800bc1c:	24004afc 	.word	0x24004afc
 800bc20:	24004acc 	.word	0x24004acc
 800bc24:	24004ac8 	.word	0x24004ac8
 800bc28:	24004b30 	.word	0x24004b30

0800bc2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08a      	sub	sp, #40	; 0x28
 800bc30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc32:	2300      	movs	r3, #0
 800bc34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc36:	f000 fb07 	bl	800c248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc3a:	4b1c      	ldr	r3, [pc, #112]	; (800bcac <xTimerCreateTimerTask+0x80>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d021      	beq.n	800bc86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc42:	2300      	movs	r3, #0
 800bc44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc46:	2300      	movs	r3, #0
 800bc48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc4a:	1d3a      	adds	r2, r7, #4
 800bc4c:	f107 0108 	add.w	r1, r7, #8
 800bc50:	f107 030c 	add.w	r3, r7, #12
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7fd fef7 	bl	8009a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc5a:	6879      	ldr	r1, [r7, #4]
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	9202      	str	r2, [sp, #8]
 800bc62:	9301      	str	r3, [sp, #4]
 800bc64:	2302      	movs	r3, #2
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	2300      	movs	r3, #0
 800bc6a:	460a      	mov	r2, r1
 800bc6c:	4910      	ldr	r1, [pc, #64]	; (800bcb0 <xTimerCreateTimerTask+0x84>)
 800bc6e:	4811      	ldr	r0, [pc, #68]	; (800bcb4 <xTimerCreateTimerTask+0x88>)
 800bc70:	f7ff f8de 	bl	800ae30 <xTaskCreateStatic>
 800bc74:	4603      	mov	r3, r0
 800bc76:	4a10      	ldr	r2, [pc, #64]	; (800bcb8 <xTimerCreateTimerTask+0x8c>)
 800bc78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc7a:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <xTimerCreateTimerTask+0x8c>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc82:	2301      	movs	r3, #1
 800bc84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	613b      	str	r3, [r7, #16]
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bca2:	697b      	ldr	r3, [r7, #20]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	24004b6c 	.word	0x24004b6c
 800bcb0:	0800d790 	.word	0x0800d790
 800bcb4:	0800bdf1 	.word	0x0800bdf1
 800bcb8:	24004b70 	.word	0x24004b70

0800bcbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08a      	sub	sp, #40	; 0x28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
 800bcc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10a      	bne.n	800bcea <xTimerGenericCommand+0x2e>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	623b      	str	r3, [r7, #32]
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcea:	4b1a      	ldr	r3, [pc, #104]	; (800bd54 <xTimerGenericCommand+0x98>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d02a      	beq.n	800bd48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2b05      	cmp	r3, #5
 800bd02:	dc18      	bgt.n	800bd36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd04:	f7ff feb2 	bl	800ba6c <xTaskGetSchedulerState>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d109      	bne.n	800bd22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd0e:	4b11      	ldr	r3, [pc, #68]	; (800bd54 <xTimerGenericCommand+0x98>)
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	f107 0110 	add.w	r1, r7, #16
 800bd16:	2300      	movs	r3, #0
 800bd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd1a:	f7fe fca1 	bl	800a660 <xQueueGenericSend>
 800bd1e:	6278      	str	r0, [r7, #36]	; 0x24
 800bd20:	e012      	b.n	800bd48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd22:	4b0c      	ldr	r3, [pc, #48]	; (800bd54 <xTimerGenericCommand+0x98>)
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	f107 0110 	add.w	r1, r7, #16
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f7fe fc97 	bl	800a660 <xQueueGenericSend>
 800bd32:	6278      	str	r0, [r7, #36]	; 0x24
 800bd34:	e008      	b.n	800bd48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd36:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <xTimerGenericCommand+0x98>)
 800bd38:	6818      	ldr	r0, [r3, #0]
 800bd3a:	f107 0110 	add.w	r1, r7, #16
 800bd3e:	2300      	movs	r3, #0
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	f7fe fd8b 	bl	800a85c <xQueueGenericSendFromISR>
 800bd46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3728      	adds	r7, #40	; 0x28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	24004b6c 	.word	0x24004b6c

0800bd58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af02      	add	r7, sp, #8
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd62:	4b22      	ldr	r3, [pc, #136]	; (800bdec <prvProcessExpiredTimer+0x94>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fe f8f7 	bl	8009f64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d022      	beq.n	800bdca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	699a      	ldr	r2, [r3, #24]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	18d1      	adds	r1, r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	6978      	ldr	r0, [r7, #20]
 800bd92:	f000 f8d1 	bl	800bf38 <prvInsertTimerInActiveList>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d01f      	beq.n	800bddc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	2300      	movs	r3, #0
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	2100      	movs	r1, #0
 800bda6:	6978      	ldr	r0, [r7, #20]
 800bda8:	f7ff ff88 	bl	800bcbc <xTimerGenericCommand>
 800bdac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d113      	bne.n	800bddc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	60fb      	str	r3, [r7, #12]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdd0:	f023 0301 	bic.w	r3, r3, #1
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	6a1b      	ldr	r3, [r3, #32]
 800bde0:	6978      	ldr	r0, [r7, #20]
 800bde2:	4798      	blx	r3
}
 800bde4:	bf00      	nop
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	24004b64 	.word	0x24004b64

0800bdf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdf8:	f107 0308 	add.w	r3, r7, #8
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 f857 	bl	800beb0 <prvGetNextExpireTime>
 800be02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	4619      	mov	r1, r3
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f000 f803 	bl	800be14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be0e:	f000 f8d5 	bl	800bfbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be12:	e7f1      	b.n	800bdf8 <prvTimerTask+0x8>

0800be14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be1e:	f7ff fa43 	bl	800b2a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be22:	f107 0308 	add.w	r3, r7, #8
 800be26:	4618      	mov	r0, r3
 800be28:	f000 f866 	bl	800bef8 <prvSampleTimeNow>
 800be2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d130      	bne.n	800be96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <prvProcessTimerOrBlockTask+0x3c>
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d806      	bhi.n	800be50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be42:	f7ff fa3f 	bl	800b2c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be46:	68f9      	ldr	r1, [r7, #12]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff ff85 	bl	800bd58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be4e:	e024      	b.n	800be9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d008      	beq.n	800be68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be56:	4b13      	ldr	r3, [pc, #76]	; (800bea4 <prvProcessTimerOrBlockTask+0x90>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <prvProcessTimerOrBlockTask+0x50>
 800be60:	2301      	movs	r3, #1
 800be62:	e000      	b.n	800be66 <prvProcessTimerOrBlockTask+0x52>
 800be64:	2300      	movs	r3, #0
 800be66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be68:	4b0f      	ldr	r3, [pc, #60]	; (800bea8 <prvProcessTimerOrBlockTask+0x94>)
 800be6a:	6818      	ldr	r0, [r3, #0]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	4619      	mov	r1, r3
 800be76:	f7fe ffa7 	bl	800adc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be7a:	f7ff fa23 	bl	800b2c4 <xTaskResumeAll>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be84:	4b09      	ldr	r3, [pc, #36]	; (800beac <prvProcessTimerOrBlockTask+0x98>)
 800be86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	f3bf 8f6f 	isb	sy
}
 800be94:	e001      	b.n	800be9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be96:	f7ff fa15 	bl	800b2c4 <xTaskResumeAll>
}
 800be9a:	bf00      	nop
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	24004b68 	.word	0x24004b68
 800bea8:	24004b6c 	.word	0x24004b6c
 800beac:	e000ed04 	.word	0xe000ed04

0800beb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800beb8:	4b0e      	ldr	r3, [pc, #56]	; (800bef4 <prvGetNextExpireTime+0x44>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <prvGetNextExpireTime+0x16>
 800bec2:	2201      	movs	r2, #1
 800bec4:	e000      	b.n	800bec8 <prvGetNextExpireTime+0x18>
 800bec6:	2200      	movs	r2, #0
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d105      	bne.n	800bee0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <prvGetNextExpireTime+0x44>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	60fb      	str	r3, [r7, #12]
 800bede:	e001      	b.n	800bee4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bee4:	68fb      	ldr	r3, [r7, #12]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	24004b64 	.word	0x24004b64

0800bef8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf00:	f7ff fa7e 	bl	800b400 <xTaskGetTickCount>
 800bf04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf06:	4b0b      	ldr	r3, [pc, #44]	; (800bf34 <prvSampleTimeNow+0x3c>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d205      	bcs.n	800bf1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf10:	f000 f936 	bl	800c180 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	e002      	b.n	800bf22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf22:	4a04      	ldr	r2, [pc, #16]	; (800bf34 <prvSampleTimeNow+0x3c>)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf28:	68fb      	ldr	r3, [r7, #12]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	24004b74 	.word	0x24004b74

0800bf38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf46:	2300      	movs	r3, #0
 800bf48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d812      	bhi.n	800bf84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	1ad2      	subs	r2, r2, r3
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d302      	bcc.n	800bf72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	617b      	str	r3, [r7, #20]
 800bf70:	e01b      	b.n	800bfaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf72:	4b10      	ldr	r3, [pc, #64]	; (800bfb4 <prvInsertTimerInActiveList+0x7c>)
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7fd ffb8 	bl	8009ef2 <vListInsert>
 800bf82:	e012      	b.n	800bfaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d206      	bcs.n	800bf9a <prvInsertTimerInActiveList+0x62>
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d302      	bcc.n	800bf9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf94:	2301      	movs	r3, #1
 800bf96:	617b      	str	r3, [r7, #20]
 800bf98:	e007      	b.n	800bfaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf9a:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <prvInsertTimerInActiveList+0x80>)
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f7fd ffa4 	bl	8009ef2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfaa:	697b      	ldr	r3, [r7, #20]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	24004b68 	.word	0x24004b68
 800bfb8:	24004b64 	.word	0x24004b64

0800bfbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b08e      	sub	sp, #56	; 0x38
 800bfc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfc2:	e0ca      	b.n	800c15a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	da18      	bge.n	800bffc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfca:	1d3b      	adds	r3, r7, #4
 800bfcc:	3304      	adds	r3, #4
 800bfce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10a      	bne.n	800bfec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	61fb      	str	r3, [r7, #28]
}
 800bfe8:	bf00      	nop
 800bfea:	e7fe      	b.n	800bfea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bff2:	6850      	ldr	r0, [r2, #4]
 800bff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bff6:	6892      	ldr	r2, [r2, #8]
 800bff8:	4611      	mov	r1, r2
 800bffa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f2c0 80aa 	blt.w	800c158 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	695b      	ldr	r3, [r3, #20]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d004      	beq.n	800c01a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	3304      	adds	r3, #4
 800c014:	4618      	mov	r0, r3
 800c016:	f7fd ffa5 	bl	8009f64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c01a:	463b      	mov	r3, r7
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff ff6b 	bl	800bef8 <prvSampleTimeNow>
 800c022:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b09      	cmp	r3, #9
 800c028:	f200 8097 	bhi.w	800c15a <prvProcessReceivedCommands+0x19e>
 800c02c:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <prvProcessReceivedCommands+0x78>)
 800c02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c032:	bf00      	nop
 800c034:	0800c05d 	.word	0x0800c05d
 800c038:	0800c05d 	.word	0x0800c05d
 800c03c:	0800c05d 	.word	0x0800c05d
 800c040:	0800c0d1 	.word	0x0800c0d1
 800c044:	0800c0e5 	.word	0x0800c0e5
 800c048:	0800c12f 	.word	0x0800c12f
 800c04c:	0800c05d 	.word	0x0800c05d
 800c050:	0800c05d 	.word	0x0800c05d
 800c054:	0800c0d1 	.word	0x0800c0d1
 800c058:	0800c0e5 	.word	0x0800c0e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c062:	f043 0301 	orr.w	r3, r3, #1
 800c066:	b2da      	uxtb	r2, r3
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	18d1      	adds	r1, r2, r3
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c07a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c07c:	f7ff ff5c 	bl	800bf38 <prvInsertTimerInActiveList>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d069      	beq.n	800c15a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c08c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d05e      	beq.n	800c15a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	441a      	add	r2, r3
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ae:	f7ff fe05 	bl	800bcbc <xTimerGenericCommand>
 800c0b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d14f      	bne.n	800c15a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	61bb      	str	r3, [r7, #24]
}
 800c0cc:	bf00      	nop
 800c0ce:	e7fe      	b.n	800c0ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0d6:	f023 0301 	bic.w	r3, r3, #1
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0e2:	e03a      	b.n	800c15a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0ea:	f043 0301 	orr.w	r3, r3, #1
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	617b      	str	r3, [r7, #20]
}
 800c116:	bf00      	nop
 800c118:	e7fe      	b.n	800c118 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	699a      	ldr	r2, [r3, #24]
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	18d1      	adds	r1, r2, r3
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c128:	f7ff ff06 	bl	800bf38 <prvInsertTimerInActiveList>
					break;
 800c12c:	e015      	b.n	800c15a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c134:	f003 0302 	and.w	r3, r3, #2
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d103      	bne.n	800c144 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c13c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c13e:	f7fd fd69 	bl	8009c14 <vPortFree>
 800c142:	e00a      	b.n	800c15a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c14a:	f023 0301 	bic.w	r3, r3, #1
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c156:	e000      	b.n	800c15a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c158:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c15a:	4b08      	ldr	r3, [pc, #32]	; (800c17c <prvProcessReceivedCommands+0x1c0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	1d39      	adds	r1, r7, #4
 800c160:	2200      	movs	r2, #0
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fc16 	bl	800a994 <xQueueReceive>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f47f af2a 	bne.w	800bfc4 <prvProcessReceivedCommands+0x8>
	}
}
 800c170:	bf00      	nop
 800c172:	bf00      	nop
 800c174:	3730      	adds	r7, #48	; 0x30
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	24004b6c 	.word	0x24004b6c

0800c180 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b088      	sub	sp, #32
 800c184:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c186:	e048      	b.n	800c21a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c188:	4b2d      	ldr	r3, [pc, #180]	; (800c240 <prvSwitchTimerLists+0xc0>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c192:	4b2b      	ldr	r3, [pc, #172]	; (800c240 <prvSwitchTimerLists+0xc0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fd fedf 	bl	8009f64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1b4:	f003 0304 	and.w	r3, r3, #4
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d02e      	beq.n	800c21a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	699b      	ldr	r3, [r3, #24]
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d90e      	bls.n	800c1ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1da:	4b19      	ldr	r3, [pc, #100]	; (800c240 <prvSwitchTimerLists+0xc0>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	f7fd fe84 	bl	8009ef2 <vListInsert>
 800c1ea:	e016      	b.n	800c21a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f7ff fd60 	bl	800bcbc <xTimerGenericCommand>
 800c1fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10a      	bne.n	800c21a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c208:	f383 8811 	msr	BASEPRI, r3
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	603b      	str	r3, [r7, #0]
}
 800c216:	bf00      	nop
 800c218:	e7fe      	b.n	800c218 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c21a:	4b09      	ldr	r3, [pc, #36]	; (800c240 <prvSwitchTimerLists+0xc0>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1b1      	bne.n	800c188 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c224:	4b06      	ldr	r3, [pc, #24]	; (800c240 <prvSwitchTimerLists+0xc0>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c22a:	4b06      	ldr	r3, [pc, #24]	; (800c244 <prvSwitchTimerLists+0xc4>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a04      	ldr	r2, [pc, #16]	; (800c240 <prvSwitchTimerLists+0xc0>)
 800c230:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c232:	4a04      	ldr	r2, [pc, #16]	; (800c244 <prvSwitchTimerLists+0xc4>)
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	6013      	str	r3, [r2, #0]
}
 800c238:	bf00      	nop
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	24004b64 	.word	0x24004b64
 800c244:	24004b68 	.word	0x24004b68

0800c248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c24e:	f7fd ffe1 	bl	800a214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c252:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <prvCheckForValidListAndQueue+0x60>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d120      	bne.n	800c29c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c25a:	4814      	ldr	r0, [pc, #80]	; (800c2ac <prvCheckForValidListAndQueue+0x64>)
 800c25c:	f7fd fdf8 	bl	8009e50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c260:	4813      	ldr	r0, [pc, #76]	; (800c2b0 <prvCheckForValidListAndQueue+0x68>)
 800c262:	f7fd fdf5 	bl	8009e50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c266:	4b13      	ldr	r3, [pc, #76]	; (800c2b4 <prvCheckForValidListAndQueue+0x6c>)
 800c268:	4a10      	ldr	r2, [pc, #64]	; (800c2ac <prvCheckForValidListAndQueue+0x64>)
 800c26a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c26c:	4b12      	ldr	r3, [pc, #72]	; (800c2b8 <prvCheckForValidListAndQueue+0x70>)
 800c26e:	4a10      	ldr	r2, [pc, #64]	; (800c2b0 <prvCheckForValidListAndQueue+0x68>)
 800c270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c272:	2300      	movs	r3, #0
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	4b11      	ldr	r3, [pc, #68]	; (800c2bc <prvCheckForValidListAndQueue+0x74>)
 800c278:	4a11      	ldr	r2, [pc, #68]	; (800c2c0 <prvCheckForValidListAndQueue+0x78>)
 800c27a:	2110      	movs	r1, #16
 800c27c:	200a      	movs	r0, #10
 800c27e:	f7fe f953 	bl	800a528 <xQueueGenericCreateStatic>
 800c282:	4603      	mov	r3, r0
 800c284:	4a08      	ldr	r2, [pc, #32]	; (800c2a8 <prvCheckForValidListAndQueue+0x60>)
 800c286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c288:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <prvCheckForValidListAndQueue+0x60>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d005      	beq.n	800c29c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c290:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <prvCheckForValidListAndQueue+0x60>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	490b      	ldr	r1, [pc, #44]	; (800c2c4 <prvCheckForValidListAndQueue+0x7c>)
 800c296:	4618      	mov	r0, r3
 800c298:	f7fe fd6c 	bl	800ad74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c29c:	f7fd ffea 	bl	800a274 <vPortExitCritical>
}
 800c2a0:	bf00      	nop
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	24004b6c 	.word	0x24004b6c
 800c2ac:	24004b3c 	.word	0x24004b3c
 800c2b0:	24004b50 	.word	0x24004b50
 800c2b4:	24004b64 	.word	0x24004b64
 800c2b8:	24004b68 	.word	0x24004b68
 800c2bc:	24004c18 	.word	0x24004c18
 800c2c0:	24004b78 	.word	0x24004b78
 800c2c4:	0800d798 	.word	0x0800d798

0800c2c8 <__errno>:
 800c2c8:	4b01      	ldr	r3, [pc, #4]	; (800c2d0 <__errno+0x8>)
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	24000018 	.word	0x24000018

0800c2d4 <__libc_init_array>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	4d0d      	ldr	r5, [pc, #52]	; (800c30c <__libc_init_array+0x38>)
 800c2d8:	4c0d      	ldr	r4, [pc, #52]	; (800c310 <__libc_init_array+0x3c>)
 800c2da:	1b64      	subs	r4, r4, r5
 800c2dc:	10a4      	asrs	r4, r4, #2
 800c2de:	2600      	movs	r6, #0
 800c2e0:	42a6      	cmp	r6, r4
 800c2e2:	d109      	bne.n	800c2f8 <__libc_init_array+0x24>
 800c2e4:	4d0b      	ldr	r5, [pc, #44]	; (800c314 <__libc_init_array+0x40>)
 800c2e6:	4c0c      	ldr	r4, [pc, #48]	; (800c318 <__libc_init_array+0x44>)
 800c2e8:	f001 fa20 	bl	800d72c <_init>
 800c2ec:	1b64      	subs	r4, r4, r5
 800c2ee:	10a4      	asrs	r4, r4, #2
 800c2f0:	2600      	movs	r6, #0
 800c2f2:	42a6      	cmp	r6, r4
 800c2f4:	d105      	bne.n	800c302 <__libc_init_array+0x2e>
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}
 800c2f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2fc:	4798      	blx	r3
 800c2fe:	3601      	adds	r6, #1
 800c300:	e7ee      	b.n	800c2e0 <__libc_init_array+0xc>
 800c302:	f855 3b04 	ldr.w	r3, [r5], #4
 800c306:	4798      	blx	r3
 800c308:	3601      	adds	r6, #1
 800c30a:	e7f2      	b.n	800c2f2 <__libc_init_array+0x1e>
 800c30c:	0800dc10 	.word	0x0800dc10
 800c310:	0800dc10 	.word	0x0800dc10
 800c314:	0800dc10 	.word	0x0800dc10
 800c318:	0800dc14 	.word	0x0800dc14

0800c31c <memcpy>:
 800c31c:	440a      	add	r2, r1
 800c31e:	4291      	cmp	r1, r2
 800c320:	f100 33ff 	add.w	r3, r0, #4294967295
 800c324:	d100      	bne.n	800c328 <memcpy+0xc>
 800c326:	4770      	bx	lr
 800c328:	b510      	push	{r4, lr}
 800c32a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c32e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c332:	4291      	cmp	r1, r2
 800c334:	d1f9      	bne.n	800c32a <memcpy+0xe>
 800c336:	bd10      	pop	{r4, pc}

0800c338 <memset>:
 800c338:	4402      	add	r2, r0
 800c33a:	4603      	mov	r3, r0
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d100      	bne.n	800c342 <memset+0xa>
 800c340:	4770      	bx	lr
 800c342:	f803 1b01 	strb.w	r1, [r3], #1
 800c346:	e7f9      	b.n	800c33c <memset+0x4>

0800c348 <_vsniprintf_r>:
 800c348:	b530      	push	{r4, r5, lr}
 800c34a:	4614      	mov	r4, r2
 800c34c:	2c00      	cmp	r4, #0
 800c34e:	b09b      	sub	sp, #108	; 0x6c
 800c350:	4605      	mov	r5, r0
 800c352:	461a      	mov	r2, r3
 800c354:	da05      	bge.n	800c362 <_vsniprintf_r+0x1a>
 800c356:	238b      	movs	r3, #139	; 0x8b
 800c358:	6003      	str	r3, [r0, #0]
 800c35a:	f04f 30ff 	mov.w	r0, #4294967295
 800c35e:	b01b      	add	sp, #108	; 0x6c
 800c360:	bd30      	pop	{r4, r5, pc}
 800c362:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c366:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c36a:	bf14      	ite	ne
 800c36c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c370:	4623      	moveq	r3, r4
 800c372:	9302      	str	r3, [sp, #8]
 800c374:	9305      	str	r3, [sp, #20]
 800c376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c37a:	9100      	str	r1, [sp, #0]
 800c37c:	9104      	str	r1, [sp, #16]
 800c37e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c382:	4669      	mov	r1, sp
 800c384:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c386:	f000 f875 	bl	800c474 <_svfiprintf_r>
 800c38a:	1c43      	adds	r3, r0, #1
 800c38c:	bfbc      	itt	lt
 800c38e:	238b      	movlt	r3, #139	; 0x8b
 800c390:	602b      	strlt	r3, [r5, #0]
 800c392:	2c00      	cmp	r4, #0
 800c394:	d0e3      	beq.n	800c35e <_vsniprintf_r+0x16>
 800c396:	9b00      	ldr	r3, [sp, #0]
 800c398:	2200      	movs	r2, #0
 800c39a:	701a      	strb	r2, [r3, #0]
 800c39c:	e7df      	b.n	800c35e <_vsniprintf_r+0x16>
	...

0800c3a0 <vsniprintf>:
 800c3a0:	b507      	push	{r0, r1, r2, lr}
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	460a      	mov	r2, r1
 800c3a8:	4601      	mov	r1, r0
 800c3aa:	4803      	ldr	r0, [pc, #12]	; (800c3b8 <vsniprintf+0x18>)
 800c3ac:	6800      	ldr	r0, [r0, #0]
 800c3ae:	f7ff ffcb 	bl	800c348 <_vsniprintf_r>
 800c3b2:	b003      	add	sp, #12
 800c3b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3b8:	24000018 	.word	0x24000018

0800c3bc <__ssputs_r>:
 800c3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c0:	688e      	ldr	r6, [r1, #8]
 800c3c2:	429e      	cmp	r6, r3
 800c3c4:	4682      	mov	sl, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	4690      	mov	r8, r2
 800c3ca:	461f      	mov	r7, r3
 800c3cc:	d838      	bhi.n	800c440 <__ssputs_r+0x84>
 800c3ce:	898a      	ldrh	r2, [r1, #12]
 800c3d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3d4:	d032      	beq.n	800c43c <__ssputs_r+0x80>
 800c3d6:	6825      	ldr	r5, [r4, #0]
 800c3d8:	6909      	ldr	r1, [r1, #16]
 800c3da:	eba5 0901 	sub.w	r9, r5, r1
 800c3de:	6965      	ldr	r5, [r4, #20]
 800c3e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	444b      	add	r3, r9
 800c3ec:	106d      	asrs	r5, r5, #1
 800c3ee:	429d      	cmp	r5, r3
 800c3f0:	bf38      	it	cc
 800c3f2:	461d      	movcc	r5, r3
 800c3f4:	0553      	lsls	r3, r2, #21
 800c3f6:	d531      	bpl.n	800c45c <__ssputs_r+0xa0>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	f000 fb55 	bl	800caa8 <_malloc_r>
 800c3fe:	4606      	mov	r6, r0
 800c400:	b950      	cbnz	r0, 800c418 <__ssputs_r+0x5c>
 800c402:	230c      	movs	r3, #12
 800c404:	f8ca 3000 	str.w	r3, [sl]
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c418:	6921      	ldr	r1, [r4, #16]
 800c41a:	464a      	mov	r2, r9
 800c41c:	f7ff ff7e 	bl	800c31c <memcpy>
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c42a:	81a3      	strh	r3, [r4, #12]
 800c42c:	6126      	str	r6, [r4, #16]
 800c42e:	6165      	str	r5, [r4, #20]
 800c430:	444e      	add	r6, r9
 800c432:	eba5 0509 	sub.w	r5, r5, r9
 800c436:	6026      	str	r6, [r4, #0]
 800c438:	60a5      	str	r5, [r4, #8]
 800c43a:	463e      	mov	r6, r7
 800c43c:	42be      	cmp	r6, r7
 800c43e:	d900      	bls.n	800c442 <__ssputs_r+0x86>
 800c440:	463e      	mov	r6, r7
 800c442:	6820      	ldr	r0, [r4, #0]
 800c444:	4632      	mov	r2, r6
 800c446:	4641      	mov	r1, r8
 800c448:	f000 faa8 	bl	800c99c <memmove>
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	1b9b      	subs	r3, r3, r6
 800c450:	60a3      	str	r3, [r4, #8]
 800c452:	6823      	ldr	r3, [r4, #0]
 800c454:	4433      	add	r3, r6
 800c456:	6023      	str	r3, [r4, #0]
 800c458:	2000      	movs	r0, #0
 800c45a:	e7db      	b.n	800c414 <__ssputs_r+0x58>
 800c45c:	462a      	mov	r2, r5
 800c45e:	f000 fb97 	bl	800cb90 <_realloc_r>
 800c462:	4606      	mov	r6, r0
 800c464:	2800      	cmp	r0, #0
 800c466:	d1e1      	bne.n	800c42c <__ssputs_r+0x70>
 800c468:	6921      	ldr	r1, [r4, #16]
 800c46a:	4650      	mov	r0, sl
 800c46c:	f000 fab0 	bl	800c9d0 <_free_r>
 800c470:	e7c7      	b.n	800c402 <__ssputs_r+0x46>
	...

0800c474 <_svfiprintf_r>:
 800c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c478:	4698      	mov	r8, r3
 800c47a:	898b      	ldrh	r3, [r1, #12]
 800c47c:	061b      	lsls	r3, r3, #24
 800c47e:	b09d      	sub	sp, #116	; 0x74
 800c480:	4607      	mov	r7, r0
 800c482:	460d      	mov	r5, r1
 800c484:	4614      	mov	r4, r2
 800c486:	d50e      	bpl.n	800c4a6 <_svfiprintf_r+0x32>
 800c488:	690b      	ldr	r3, [r1, #16]
 800c48a:	b963      	cbnz	r3, 800c4a6 <_svfiprintf_r+0x32>
 800c48c:	2140      	movs	r1, #64	; 0x40
 800c48e:	f000 fb0b 	bl	800caa8 <_malloc_r>
 800c492:	6028      	str	r0, [r5, #0]
 800c494:	6128      	str	r0, [r5, #16]
 800c496:	b920      	cbnz	r0, 800c4a2 <_svfiprintf_r+0x2e>
 800c498:	230c      	movs	r3, #12
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a0:	e0d1      	b.n	800c646 <_svfiprintf_r+0x1d2>
 800c4a2:	2340      	movs	r3, #64	; 0x40
 800c4a4:	616b      	str	r3, [r5, #20]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4aa:	2320      	movs	r3, #32
 800c4ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4b4:	2330      	movs	r3, #48	; 0x30
 800c4b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c660 <_svfiprintf_r+0x1ec>
 800c4ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4be:	f04f 0901 	mov.w	r9, #1
 800c4c2:	4623      	mov	r3, r4
 800c4c4:	469a      	mov	sl, r3
 800c4c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ca:	b10a      	cbz	r2, 800c4d0 <_svfiprintf_r+0x5c>
 800c4cc:	2a25      	cmp	r2, #37	; 0x25
 800c4ce:	d1f9      	bne.n	800c4c4 <_svfiprintf_r+0x50>
 800c4d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d4:	d00b      	beq.n	800c4ee <_svfiprintf_r+0x7a>
 800c4d6:	465b      	mov	r3, fp
 800c4d8:	4622      	mov	r2, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4638      	mov	r0, r7
 800c4de:	f7ff ff6d 	bl	800c3bc <__ssputs_r>
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	f000 80aa 	beq.w	800c63c <_svfiprintf_r+0x1c8>
 800c4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ea:	445a      	add	r2, fp
 800c4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 80a2 	beq.w	800c63c <_svfiprintf_r+0x1c8>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c502:	f10a 0a01 	add.w	sl, sl, #1
 800c506:	9304      	str	r3, [sp, #16]
 800c508:	9307      	str	r3, [sp, #28]
 800c50a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c50e:	931a      	str	r3, [sp, #104]	; 0x68
 800c510:	4654      	mov	r4, sl
 800c512:	2205      	movs	r2, #5
 800c514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c518:	4851      	ldr	r0, [pc, #324]	; (800c660 <_svfiprintf_r+0x1ec>)
 800c51a:	f7f3 fee9 	bl	80002f0 <memchr>
 800c51e:	9a04      	ldr	r2, [sp, #16]
 800c520:	b9d8      	cbnz	r0, 800c55a <_svfiprintf_r+0xe6>
 800c522:	06d0      	lsls	r0, r2, #27
 800c524:	bf44      	itt	mi
 800c526:	2320      	movmi	r3, #32
 800c528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c52c:	0711      	lsls	r1, r2, #28
 800c52e:	bf44      	itt	mi
 800c530:	232b      	movmi	r3, #43	; 0x2b
 800c532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c536:	f89a 3000 	ldrb.w	r3, [sl]
 800c53a:	2b2a      	cmp	r3, #42	; 0x2a
 800c53c:	d015      	beq.n	800c56a <_svfiprintf_r+0xf6>
 800c53e:	9a07      	ldr	r2, [sp, #28]
 800c540:	4654      	mov	r4, sl
 800c542:	2000      	movs	r0, #0
 800c544:	f04f 0c0a 	mov.w	ip, #10
 800c548:	4621      	mov	r1, r4
 800c54a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c54e:	3b30      	subs	r3, #48	; 0x30
 800c550:	2b09      	cmp	r3, #9
 800c552:	d94e      	bls.n	800c5f2 <_svfiprintf_r+0x17e>
 800c554:	b1b0      	cbz	r0, 800c584 <_svfiprintf_r+0x110>
 800c556:	9207      	str	r2, [sp, #28]
 800c558:	e014      	b.n	800c584 <_svfiprintf_r+0x110>
 800c55a:	eba0 0308 	sub.w	r3, r0, r8
 800c55e:	fa09 f303 	lsl.w	r3, r9, r3
 800c562:	4313      	orrs	r3, r2
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	46a2      	mov	sl, r4
 800c568:	e7d2      	b.n	800c510 <_svfiprintf_r+0x9c>
 800c56a:	9b03      	ldr	r3, [sp, #12]
 800c56c:	1d19      	adds	r1, r3, #4
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	9103      	str	r1, [sp, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	bfbb      	ittet	lt
 800c576:	425b      	neglt	r3, r3
 800c578:	f042 0202 	orrlt.w	r2, r2, #2
 800c57c:	9307      	strge	r3, [sp, #28]
 800c57e:	9307      	strlt	r3, [sp, #28]
 800c580:	bfb8      	it	lt
 800c582:	9204      	strlt	r2, [sp, #16]
 800c584:	7823      	ldrb	r3, [r4, #0]
 800c586:	2b2e      	cmp	r3, #46	; 0x2e
 800c588:	d10c      	bne.n	800c5a4 <_svfiprintf_r+0x130>
 800c58a:	7863      	ldrb	r3, [r4, #1]
 800c58c:	2b2a      	cmp	r3, #42	; 0x2a
 800c58e:	d135      	bne.n	800c5fc <_svfiprintf_r+0x188>
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	1d1a      	adds	r2, r3, #4
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	9203      	str	r2, [sp, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bfb8      	it	lt
 800c59c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5a0:	3402      	adds	r4, #2
 800c5a2:	9305      	str	r3, [sp, #20]
 800c5a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c670 <_svfiprintf_r+0x1fc>
 800c5a8:	7821      	ldrb	r1, [r4, #0]
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	4650      	mov	r0, sl
 800c5ae:	f7f3 fe9f 	bl	80002f0 <memchr>
 800c5b2:	b140      	cbz	r0, 800c5c6 <_svfiprintf_r+0x152>
 800c5b4:	2340      	movs	r3, #64	; 0x40
 800c5b6:	eba0 000a 	sub.w	r0, r0, sl
 800c5ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c5be:	9b04      	ldr	r3, [sp, #16]
 800c5c0:	4303      	orrs	r3, r0
 800c5c2:	3401      	adds	r4, #1
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ca:	4826      	ldr	r0, [pc, #152]	; (800c664 <_svfiprintf_r+0x1f0>)
 800c5cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5d0:	2206      	movs	r2, #6
 800c5d2:	f7f3 fe8d 	bl	80002f0 <memchr>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d038      	beq.n	800c64c <_svfiprintf_r+0x1d8>
 800c5da:	4b23      	ldr	r3, [pc, #140]	; (800c668 <_svfiprintf_r+0x1f4>)
 800c5dc:	bb1b      	cbnz	r3, 800c626 <_svfiprintf_r+0x1b2>
 800c5de:	9b03      	ldr	r3, [sp, #12]
 800c5e0:	3307      	adds	r3, #7
 800c5e2:	f023 0307 	bic.w	r3, r3, #7
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	9303      	str	r3, [sp, #12]
 800c5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ec:	4433      	add	r3, r6
 800c5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f0:	e767      	b.n	800c4c2 <_svfiprintf_r+0x4e>
 800c5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	e7a5      	b.n	800c548 <_svfiprintf_r+0xd4>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	3401      	adds	r4, #1
 800c600:	9305      	str	r3, [sp, #20]
 800c602:	4619      	mov	r1, r3
 800c604:	f04f 0c0a 	mov.w	ip, #10
 800c608:	4620      	mov	r0, r4
 800c60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c60e:	3a30      	subs	r2, #48	; 0x30
 800c610:	2a09      	cmp	r2, #9
 800c612:	d903      	bls.n	800c61c <_svfiprintf_r+0x1a8>
 800c614:	2b00      	cmp	r3, #0
 800c616:	d0c5      	beq.n	800c5a4 <_svfiprintf_r+0x130>
 800c618:	9105      	str	r1, [sp, #20]
 800c61a:	e7c3      	b.n	800c5a4 <_svfiprintf_r+0x130>
 800c61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c620:	4604      	mov	r4, r0
 800c622:	2301      	movs	r3, #1
 800c624:	e7f0      	b.n	800c608 <_svfiprintf_r+0x194>
 800c626:	ab03      	add	r3, sp, #12
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	462a      	mov	r2, r5
 800c62c:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <_svfiprintf_r+0x1f8>)
 800c62e:	a904      	add	r1, sp, #16
 800c630:	4638      	mov	r0, r7
 800c632:	f3af 8000 	nop.w
 800c636:	1c42      	adds	r2, r0, #1
 800c638:	4606      	mov	r6, r0
 800c63a:	d1d6      	bne.n	800c5ea <_svfiprintf_r+0x176>
 800c63c:	89ab      	ldrh	r3, [r5, #12]
 800c63e:	065b      	lsls	r3, r3, #25
 800c640:	f53f af2c 	bmi.w	800c49c <_svfiprintf_r+0x28>
 800c644:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c646:	b01d      	add	sp, #116	; 0x74
 800c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64c:	ab03      	add	r3, sp, #12
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	462a      	mov	r2, r5
 800c652:	4b06      	ldr	r3, [pc, #24]	; (800c66c <_svfiprintf_r+0x1f8>)
 800c654:	a904      	add	r1, sp, #16
 800c656:	4638      	mov	r0, r7
 800c658:	f000 f87a 	bl	800c750 <_printf_i>
 800c65c:	e7eb      	b.n	800c636 <_svfiprintf_r+0x1c2>
 800c65e:	bf00      	nop
 800c660:	0800d804 	.word	0x0800d804
 800c664:	0800d80e 	.word	0x0800d80e
 800c668:	00000000 	.word	0x00000000
 800c66c:	0800c3bd 	.word	0x0800c3bd
 800c670:	0800d80a 	.word	0x0800d80a

0800c674 <_printf_common>:
 800c674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c678:	4616      	mov	r6, r2
 800c67a:	4699      	mov	r9, r3
 800c67c:	688a      	ldr	r2, [r1, #8]
 800c67e:	690b      	ldr	r3, [r1, #16]
 800c680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c684:	4293      	cmp	r3, r2
 800c686:	bfb8      	it	lt
 800c688:	4613      	movlt	r3, r2
 800c68a:	6033      	str	r3, [r6, #0]
 800c68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c690:	4607      	mov	r7, r0
 800c692:	460c      	mov	r4, r1
 800c694:	b10a      	cbz	r2, 800c69a <_printf_common+0x26>
 800c696:	3301      	adds	r3, #1
 800c698:	6033      	str	r3, [r6, #0]
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	0699      	lsls	r1, r3, #26
 800c69e:	bf42      	ittt	mi
 800c6a0:	6833      	ldrmi	r3, [r6, #0]
 800c6a2:	3302      	addmi	r3, #2
 800c6a4:	6033      	strmi	r3, [r6, #0]
 800c6a6:	6825      	ldr	r5, [r4, #0]
 800c6a8:	f015 0506 	ands.w	r5, r5, #6
 800c6ac:	d106      	bne.n	800c6bc <_printf_common+0x48>
 800c6ae:	f104 0a19 	add.w	sl, r4, #25
 800c6b2:	68e3      	ldr	r3, [r4, #12]
 800c6b4:	6832      	ldr	r2, [r6, #0]
 800c6b6:	1a9b      	subs	r3, r3, r2
 800c6b8:	42ab      	cmp	r3, r5
 800c6ba:	dc26      	bgt.n	800c70a <_printf_common+0x96>
 800c6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6c0:	1e13      	subs	r3, r2, #0
 800c6c2:	6822      	ldr	r2, [r4, #0]
 800c6c4:	bf18      	it	ne
 800c6c6:	2301      	movne	r3, #1
 800c6c8:	0692      	lsls	r2, r2, #26
 800c6ca:	d42b      	bmi.n	800c724 <_printf_common+0xb0>
 800c6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6d0:	4649      	mov	r1, r9
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	47c0      	blx	r8
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	d01e      	beq.n	800c718 <_printf_common+0xa4>
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	68e5      	ldr	r5, [r4, #12]
 800c6de:	6832      	ldr	r2, [r6, #0]
 800c6e0:	f003 0306 	and.w	r3, r3, #6
 800c6e4:	2b04      	cmp	r3, #4
 800c6e6:	bf08      	it	eq
 800c6e8:	1aad      	subeq	r5, r5, r2
 800c6ea:	68a3      	ldr	r3, [r4, #8]
 800c6ec:	6922      	ldr	r2, [r4, #16]
 800c6ee:	bf0c      	ite	eq
 800c6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6f4:	2500      	movne	r5, #0
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	bfc4      	itt	gt
 800c6fa:	1a9b      	subgt	r3, r3, r2
 800c6fc:	18ed      	addgt	r5, r5, r3
 800c6fe:	2600      	movs	r6, #0
 800c700:	341a      	adds	r4, #26
 800c702:	42b5      	cmp	r5, r6
 800c704:	d11a      	bne.n	800c73c <_printf_common+0xc8>
 800c706:	2000      	movs	r0, #0
 800c708:	e008      	b.n	800c71c <_printf_common+0xa8>
 800c70a:	2301      	movs	r3, #1
 800c70c:	4652      	mov	r2, sl
 800c70e:	4649      	mov	r1, r9
 800c710:	4638      	mov	r0, r7
 800c712:	47c0      	blx	r8
 800c714:	3001      	adds	r0, #1
 800c716:	d103      	bne.n	800c720 <_printf_common+0xac>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c720:	3501      	adds	r5, #1
 800c722:	e7c6      	b.n	800c6b2 <_printf_common+0x3e>
 800c724:	18e1      	adds	r1, r4, r3
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	2030      	movs	r0, #48	; 0x30
 800c72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c72e:	4422      	add	r2, r4
 800c730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c738:	3302      	adds	r3, #2
 800c73a:	e7c7      	b.n	800c6cc <_printf_common+0x58>
 800c73c:	2301      	movs	r3, #1
 800c73e:	4622      	mov	r2, r4
 800c740:	4649      	mov	r1, r9
 800c742:	4638      	mov	r0, r7
 800c744:	47c0      	blx	r8
 800c746:	3001      	adds	r0, #1
 800c748:	d0e6      	beq.n	800c718 <_printf_common+0xa4>
 800c74a:	3601      	adds	r6, #1
 800c74c:	e7d9      	b.n	800c702 <_printf_common+0x8e>
	...

0800c750 <_printf_i>:
 800c750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c754:	7e0f      	ldrb	r7, [r1, #24]
 800c756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c758:	2f78      	cmp	r7, #120	; 0x78
 800c75a:	4691      	mov	r9, r2
 800c75c:	4680      	mov	r8, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	469a      	mov	sl, r3
 800c762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c766:	d807      	bhi.n	800c778 <_printf_i+0x28>
 800c768:	2f62      	cmp	r7, #98	; 0x62
 800c76a:	d80a      	bhi.n	800c782 <_printf_i+0x32>
 800c76c:	2f00      	cmp	r7, #0
 800c76e:	f000 80d8 	beq.w	800c922 <_printf_i+0x1d2>
 800c772:	2f58      	cmp	r7, #88	; 0x58
 800c774:	f000 80a3 	beq.w	800c8be <_printf_i+0x16e>
 800c778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c780:	e03a      	b.n	800c7f8 <_printf_i+0xa8>
 800c782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c786:	2b15      	cmp	r3, #21
 800c788:	d8f6      	bhi.n	800c778 <_printf_i+0x28>
 800c78a:	a101      	add	r1, pc, #4	; (adr r1, 800c790 <_printf_i+0x40>)
 800c78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c790:	0800c7e9 	.word	0x0800c7e9
 800c794:	0800c7fd 	.word	0x0800c7fd
 800c798:	0800c779 	.word	0x0800c779
 800c79c:	0800c779 	.word	0x0800c779
 800c7a0:	0800c779 	.word	0x0800c779
 800c7a4:	0800c779 	.word	0x0800c779
 800c7a8:	0800c7fd 	.word	0x0800c7fd
 800c7ac:	0800c779 	.word	0x0800c779
 800c7b0:	0800c779 	.word	0x0800c779
 800c7b4:	0800c779 	.word	0x0800c779
 800c7b8:	0800c779 	.word	0x0800c779
 800c7bc:	0800c909 	.word	0x0800c909
 800c7c0:	0800c82d 	.word	0x0800c82d
 800c7c4:	0800c8eb 	.word	0x0800c8eb
 800c7c8:	0800c779 	.word	0x0800c779
 800c7cc:	0800c779 	.word	0x0800c779
 800c7d0:	0800c92b 	.word	0x0800c92b
 800c7d4:	0800c779 	.word	0x0800c779
 800c7d8:	0800c82d 	.word	0x0800c82d
 800c7dc:	0800c779 	.word	0x0800c779
 800c7e0:	0800c779 	.word	0x0800c779
 800c7e4:	0800c8f3 	.word	0x0800c8f3
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	1d1a      	adds	r2, r3, #4
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	602a      	str	r2, [r5, #0]
 800c7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e0a3      	b.n	800c944 <_printf_i+0x1f4>
 800c7fc:	6820      	ldr	r0, [r4, #0]
 800c7fe:	6829      	ldr	r1, [r5, #0]
 800c800:	0606      	lsls	r6, r0, #24
 800c802:	f101 0304 	add.w	r3, r1, #4
 800c806:	d50a      	bpl.n	800c81e <_printf_i+0xce>
 800c808:	680e      	ldr	r6, [r1, #0]
 800c80a:	602b      	str	r3, [r5, #0]
 800c80c:	2e00      	cmp	r6, #0
 800c80e:	da03      	bge.n	800c818 <_printf_i+0xc8>
 800c810:	232d      	movs	r3, #45	; 0x2d
 800c812:	4276      	negs	r6, r6
 800c814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c818:	485e      	ldr	r0, [pc, #376]	; (800c994 <_printf_i+0x244>)
 800c81a:	230a      	movs	r3, #10
 800c81c:	e019      	b.n	800c852 <_printf_i+0x102>
 800c81e:	680e      	ldr	r6, [r1, #0]
 800c820:	602b      	str	r3, [r5, #0]
 800c822:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c826:	bf18      	it	ne
 800c828:	b236      	sxthne	r6, r6
 800c82a:	e7ef      	b.n	800c80c <_printf_i+0xbc>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	6820      	ldr	r0, [r4, #0]
 800c830:	1d19      	adds	r1, r3, #4
 800c832:	6029      	str	r1, [r5, #0]
 800c834:	0601      	lsls	r1, r0, #24
 800c836:	d501      	bpl.n	800c83c <_printf_i+0xec>
 800c838:	681e      	ldr	r6, [r3, #0]
 800c83a:	e002      	b.n	800c842 <_printf_i+0xf2>
 800c83c:	0646      	lsls	r6, r0, #25
 800c83e:	d5fb      	bpl.n	800c838 <_printf_i+0xe8>
 800c840:	881e      	ldrh	r6, [r3, #0]
 800c842:	4854      	ldr	r0, [pc, #336]	; (800c994 <_printf_i+0x244>)
 800c844:	2f6f      	cmp	r7, #111	; 0x6f
 800c846:	bf0c      	ite	eq
 800c848:	2308      	moveq	r3, #8
 800c84a:	230a      	movne	r3, #10
 800c84c:	2100      	movs	r1, #0
 800c84e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c852:	6865      	ldr	r5, [r4, #4]
 800c854:	60a5      	str	r5, [r4, #8]
 800c856:	2d00      	cmp	r5, #0
 800c858:	bfa2      	ittt	ge
 800c85a:	6821      	ldrge	r1, [r4, #0]
 800c85c:	f021 0104 	bicge.w	r1, r1, #4
 800c860:	6021      	strge	r1, [r4, #0]
 800c862:	b90e      	cbnz	r6, 800c868 <_printf_i+0x118>
 800c864:	2d00      	cmp	r5, #0
 800c866:	d04d      	beq.n	800c904 <_printf_i+0x1b4>
 800c868:	4615      	mov	r5, r2
 800c86a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c86e:	fb03 6711 	mls	r7, r3, r1, r6
 800c872:	5dc7      	ldrb	r7, [r0, r7]
 800c874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c878:	4637      	mov	r7, r6
 800c87a:	42bb      	cmp	r3, r7
 800c87c:	460e      	mov	r6, r1
 800c87e:	d9f4      	bls.n	800c86a <_printf_i+0x11a>
 800c880:	2b08      	cmp	r3, #8
 800c882:	d10b      	bne.n	800c89c <_printf_i+0x14c>
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	07de      	lsls	r6, r3, #31
 800c888:	d508      	bpl.n	800c89c <_printf_i+0x14c>
 800c88a:	6923      	ldr	r3, [r4, #16]
 800c88c:	6861      	ldr	r1, [r4, #4]
 800c88e:	4299      	cmp	r1, r3
 800c890:	bfde      	ittt	le
 800c892:	2330      	movle	r3, #48	; 0x30
 800c894:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c89c:	1b52      	subs	r2, r2, r5
 800c89e:	6122      	str	r2, [r4, #16]
 800c8a0:	f8cd a000 	str.w	sl, [sp]
 800c8a4:	464b      	mov	r3, r9
 800c8a6:	aa03      	add	r2, sp, #12
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	f7ff fee2 	bl	800c674 <_printf_common>
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d14c      	bne.n	800c94e <_printf_i+0x1fe>
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b8:	b004      	add	sp, #16
 800c8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8be:	4835      	ldr	r0, [pc, #212]	; (800c994 <_printf_i+0x244>)
 800c8c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c8c4:	6829      	ldr	r1, [r5, #0]
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8cc:	6029      	str	r1, [r5, #0]
 800c8ce:	061d      	lsls	r5, r3, #24
 800c8d0:	d514      	bpl.n	800c8fc <_printf_i+0x1ac>
 800c8d2:	07df      	lsls	r7, r3, #31
 800c8d4:	bf44      	itt	mi
 800c8d6:	f043 0320 	orrmi.w	r3, r3, #32
 800c8da:	6023      	strmi	r3, [r4, #0]
 800c8dc:	b91e      	cbnz	r6, 800c8e6 <_printf_i+0x196>
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	f023 0320 	bic.w	r3, r3, #32
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	2310      	movs	r3, #16
 800c8e8:	e7b0      	b.n	800c84c <_printf_i+0xfc>
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	f043 0320 	orr.w	r3, r3, #32
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	2378      	movs	r3, #120	; 0x78
 800c8f4:	4828      	ldr	r0, [pc, #160]	; (800c998 <_printf_i+0x248>)
 800c8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8fa:	e7e3      	b.n	800c8c4 <_printf_i+0x174>
 800c8fc:	0659      	lsls	r1, r3, #25
 800c8fe:	bf48      	it	mi
 800c900:	b2b6      	uxthmi	r6, r6
 800c902:	e7e6      	b.n	800c8d2 <_printf_i+0x182>
 800c904:	4615      	mov	r5, r2
 800c906:	e7bb      	b.n	800c880 <_printf_i+0x130>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	6826      	ldr	r6, [r4, #0]
 800c90c:	6961      	ldr	r1, [r4, #20]
 800c90e:	1d18      	adds	r0, r3, #4
 800c910:	6028      	str	r0, [r5, #0]
 800c912:	0635      	lsls	r5, r6, #24
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	d501      	bpl.n	800c91c <_printf_i+0x1cc>
 800c918:	6019      	str	r1, [r3, #0]
 800c91a:	e002      	b.n	800c922 <_printf_i+0x1d2>
 800c91c:	0670      	lsls	r0, r6, #25
 800c91e:	d5fb      	bpl.n	800c918 <_printf_i+0x1c8>
 800c920:	8019      	strh	r1, [r3, #0]
 800c922:	2300      	movs	r3, #0
 800c924:	6123      	str	r3, [r4, #16]
 800c926:	4615      	mov	r5, r2
 800c928:	e7ba      	b.n	800c8a0 <_printf_i+0x150>
 800c92a:	682b      	ldr	r3, [r5, #0]
 800c92c:	1d1a      	adds	r2, r3, #4
 800c92e:	602a      	str	r2, [r5, #0]
 800c930:	681d      	ldr	r5, [r3, #0]
 800c932:	6862      	ldr	r2, [r4, #4]
 800c934:	2100      	movs	r1, #0
 800c936:	4628      	mov	r0, r5
 800c938:	f7f3 fcda 	bl	80002f0 <memchr>
 800c93c:	b108      	cbz	r0, 800c942 <_printf_i+0x1f2>
 800c93e:	1b40      	subs	r0, r0, r5
 800c940:	6060      	str	r0, [r4, #4]
 800c942:	6863      	ldr	r3, [r4, #4]
 800c944:	6123      	str	r3, [r4, #16]
 800c946:	2300      	movs	r3, #0
 800c948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c94c:	e7a8      	b.n	800c8a0 <_printf_i+0x150>
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	462a      	mov	r2, r5
 800c952:	4649      	mov	r1, r9
 800c954:	4640      	mov	r0, r8
 800c956:	47d0      	blx	sl
 800c958:	3001      	adds	r0, #1
 800c95a:	d0ab      	beq.n	800c8b4 <_printf_i+0x164>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	079b      	lsls	r3, r3, #30
 800c960:	d413      	bmi.n	800c98a <_printf_i+0x23a>
 800c962:	68e0      	ldr	r0, [r4, #12]
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	4298      	cmp	r0, r3
 800c968:	bfb8      	it	lt
 800c96a:	4618      	movlt	r0, r3
 800c96c:	e7a4      	b.n	800c8b8 <_printf_i+0x168>
 800c96e:	2301      	movs	r3, #1
 800c970:	4632      	mov	r2, r6
 800c972:	4649      	mov	r1, r9
 800c974:	4640      	mov	r0, r8
 800c976:	47d0      	blx	sl
 800c978:	3001      	adds	r0, #1
 800c97a:	d09b      	beq.n	800c8b4 <_printf_i+0x164>
 800c97c:	3501      	adds	r5, #1
 800c97e:	68e3      	ldr	r3, [r4, #12]
 800c980:	9903      	ldr	r1, [sp, #12]
 800c982:	1a5b      	subs	r3, r3, r1
 800c984:	42ab      	cmp	r3, r5
 800c986:	dcf2      	bgt.n	800c96e <_printf_i+0x21e>
 800c988:	e7eb      	b.n	800c962 <_printf_i+0x212>
 800c98a:	2500      	movs	r5, #0
 800c98c:	f104 0619 	add.w	r6, r4, #25
 800c990:	e7f5      	b.n	800c97e <_printf_i+0x22e>
 800c992:	bf00      	nop
 800c994:	0800d815 	.word	0x0800d815
 800c998:	0800d826 	.word	0x0800d826

0800c99c <memmove>:
 800c99c:	4288      	cmp	r0, r1
 800c99e:	b510      	push	{r4, lr}
 800c9a0:	eb01 0402 	add.w	r4, r1, r2
 800c9a4:	d902      	bls.n	800c9ac <memmove+0x10>
 800c9a6:	4284      	cmp	r4, r0
 800c9a8:	4623      	mov	r3, r4
 800c9aa:	d807      	bhi.n	800c9bc <memmove+0x20>
 800c9ac:	1e43      	subs	r3, r0, #1
 800c9ae:	42a1      	cmp	r1, r4
 800c9b0:	d008      	beq.n	800c9c4 <memmove+0x28>
 800c9b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9ba:	e7f8      	b.n	800c9ae <memmove+0x12>
 800c9bc:	4402      	add	r2, r0
 800c9be:	4601      	mov	r1, r0
 800c9c0:	428a      	cmp	r2, r1
 800c9c2:	d100      	bne.n	800c9c6 <memmove+0x2a>
 800c9c4:	bd10      	pop	{r4, pc}
 800c9c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9ce:	e7f7      	b.n	800c9c0 <memmove+0x24>

0800c9d0 <_free_r>:
 800c9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9d2:	2900      	cmp	r1, #0
 800c9d4:	d044      	beq.n	800ca60 <_free_r+0x90>
 800c9d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9da:	9001      	str	r0, [sp, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f1a1 0404 	sub.w	r4, r1, #4
 800c9e2:	bfb8      	it	lt
 800c9e4:	18e4      	addlt	r4, r4, r3
 800c9e6:	f000 f913 	bl	800cc10 <__malloc_lock>
 800c9ea:	4a1e      	ldr	r2, [pc, #120]	; (800ca64 <_free_r+0x94>)
 800c9ec:	9801      	ldr	r0, [sp, #4]
 800c9ee:	6813      	ldr	r3, [r2, #0]
 800c9f0:	b933      	cbnz	r3, 800ca00 <_free_r+0x30>
 800c9f2:	6063      	str	r3, [r4, #4]
 800c9f4:	6014      	str	r4, [r2, #0]
 800c9f6:	b003      	add	sp, #12
 800c9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9fc:	f000 b90e 	b.w	800cc1c <__malloc_unlock>
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	d908      	bls.n	800ca16 <_free_r+0x46>
 800ca04:	6825      	ldr	r5, [r4, #0]
 800ca06:	1961      	adds	r1, r4, r5
 800ca08:	428b      	cmp	r3, r1
 800ca0a:	bf01      	itttt	eq
 800ca0c:	6819      	ldreq	r1, [r3, #0]
 800ca0e:	685b      	ldreq	r3, [r3, #4]
 800ca10:	1949      	addeq	r1, r1, r5
 800ca12:	6021      	streq	r1, [r4, #0]
 800ca14:	e7ed      	b.n	800c9f2 <_free_r+0x22>
 800ca16:	461a      	mov	r2, r3
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	b10b      	cbz	r3, 800ca20 <_free_r+0x50>
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	d9fa      	bls.n	800ca16 <_free_r+0x46>
 800ca20:	6811      	ldr	r1, [r2, #0]
 800ca22:	1855      	adds	r5, r2, r1
 800ca24:	42a5      	cmp	r5, r4
 800ca26:	d10b      	bne.n	800ca40 <_free_r+0x70>
 800ca28:	6824      	ldr	r4, [r4, #0]
 800ca2a:	4421      	add	r1, r4
 800ca2c:	1854      	adds	r4, r2, r1
 800ca2e:	42a3      	cmp	r3, r4
 800ca30:	6011      	str	r1, [r2, #0]
 800ca32:	d1e0      	bne.n	800c9f6 <_free_r+0x26>
 800ca34:	681c      	ldr	r4, [r3, #0]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	6053      	str	r3, [r2, #4]
 800ca3a:	4421      	add	r1, r4
 800ca3c:	6011      	str	r1, [r2, #0]
 800ca3e:	e7da      	b.n	800c9f6 <_free_r+0x26>
 800ca40:	d902      	bls.n	800ca48 <_free_r+0x78>
 800ca42:	230c      	movs	r3, #12
 800ca44:	6003      	str	r3, [r0, #0]
 800ca46:	e7d6      	b.n	800c9f6 <_free_r+0x26>
 800ca48:	6825      	ldr	r5, [r4, #0]
 800ca4a:	1961      	adds	r1, r4, r5
 800ca4c:	428b      	cmp	r3, r1
 800ca4e:	bf04      	itt	eq
 800ca50:	6819      	ldreq	r1, [r3, #0]
 800ca52:	685b      	ldreq	r3, [r3, #4]
 800ca54:	6063      	str	r3, [r4, #4]
 800ca56:	bf04      	itt	eq
 800ca58:	1949      	addeq	r1, r1, r5
 800ca5a:	6021      	streq	r1, [r4, #0]
 800ca5c:	6054      	str	r4, [r2, #4]
 800ca5e:	e7ca      	b.n	800c9f6 <_free_r+0x26>
 800ca60:	b003      	add	sp, #12
 800ca62:	bd30      	pop	{r4, r5, pc}
 800ca64:	24004c68 	.word	0x24004c68

0800ca68 <sbrk_aligned>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	4e0e      	ldr	r6, [pc, #56]	; (800caa4 <sbrk_aligned+0x3c>)
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	6831      	ldr	r1, [r6, #0]
 800ca70:	4605      	mov	r5, r0
 800ca72:	b911      	cbnz	r1, 800ca7a <sbrk_aligned+0x12>
 800ca74:	f000 f8bc 	bl	800cbf0 <_sbrk_r>
 800ca78:	6030      	str	r0, [r6, #0]
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	f000 f8b7 	bl	800cbf0 <_sbrk_r>
 800ca82:	1c43      	adds	r3, r0, #1
 800ca84:	d00a      	beq.n	800ca9c <sbrk_aligned+0x34>
 800ca86:	1cc4      	adds	r4, r0, #3
 800ca88:	f024 0403 	bic.w	r4, r4, #3
 800ca8c:	42a0      	cmp	r0, r4
 800ca8e:	d007      	beq.n	800caa0 <sbrk_aligned+0x38>
 800ca90:	1a21      	subs	r1, r4, r0
 800ca92:	4628      	mov	r0, r5
 800ca94:	f000 f8ac 	bl	800cbf0 <_sbrk_r>
 800ca98:	3001      	adds	r0, #1
 800ca9a:	d101      	bne.n	800caa0 <sbrk_aligned+0x38>
 800ca9c:	f04f 34ff 	mov.w	r4, #4294967295
 800caa0:	4620      	mov	r0, r4
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
 800caa4:	24004c6c 	.word	0x24004c6c

0800caa8 <_malloc_r>:
 800caa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caac:	1ccd      	adds	r5, r1, #3
 800caae:	f025 0503 	bic.w	r5, r5, #3
 800cab2:	3508      	adds	r5, #8
 800cab4:	2d0c      	cmp	r5, #12
 800cab6:	bf38      	it	cc
 800cab8:	250c      	movcc	r5, #12
 800caba:	2d00      	cmp	r5, #0
 800cabc:	4607      	mov	r7, r0
 800cabe:	db01      	blt.n	800cac4 <_malloc_r+0x1c>
 800cac0:	42a9      	cmp	r1, r5
 800cac2:	d905      	bls.n	800cad0 <_malloc_r+0x28>
 800cac4:	230c      	movs	r3, #12
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	2600      	movs	r6, #0
 800caca:	4630      	mov	r0, r6
 800cacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad0:	4e2e      	ldr	r6, [pc, #184]	; (800cb8c <_malloc_r+0xe4>)
 800cad2:	f000 f89d 	bl	800cc10 <__malloc_lock>
 800cad6:	6833      	ldr	r3, [r6, #0]
 800cad8:	461c      	mov	r4, r3
 800cada:	bb34      	cbnz	r4, 800cb2a <_malloc_r+0x82>
 800cadc:	4629      	mov	r1, r5
 800cade:	4638      	mov	r0, r7
 800cae0:	f7ff ffc2 	bl	800ca68 <sbrk_aligned>
 800cae4:	1c43      	adds	r3, r0, #1
 800cae6:	4604      	mov	r4, r0
 800cae8:	d14d      	bne.n	800cb86 <_malloc_r+0xde>
 800caea:	6834      	ldr	r4, [r6, #0]
 800caec:	4626      	mov	r6, r4
 800caee:	2e00      	cmp	r6, #0
 800caf0:	d140      	bne.n	800cb74 <_malloc_r+0xcc>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	4631      	mov	r1, r6
 800caf6:	4638      	mov	r0, r7
 800caf8:	eb04 0803 	add.w	r8, r4, r3
 800cafc:	f000 f878 	bl	800cbf0 <_sbrk_r>
 800cb00:	4580      	cmp	r8, r0
 800cb02:	d13a      	bne.n	800cb7a <_malloc_r+0xd2>
 800cb04:	6821      	ldr	r1, [r4, #0]
 800cb06:	3503      	adds	r5, #3
 800cb08:	1a6d      	subs	r5, r5, r1
 800cb0a:	f025 0503 	bic.w	r5, r5, #3
 800cb0e:	3508      	adds	r5, #8
 800cb10:	2d0c      	cmp	r5, #12
 800cb12:	bf38      	it	cc
 800cb14:	250c      	movcc	r5, #12
 800cb16:	4629      	mov	r1, r5
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f7ff ffa5 	bl	800ca68 <sbrk_aligned>
 800cb1e:	3001      	adds	r0, #1
 800cb20:	d02b      	beq.n	800cb7a <_malloc_r+0xd2>
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	442b      	add	r3, r5
 800cb26:	6023      	str	r3, [r4, #0]
 800cb28:	e00e      	b.n	800cb48 <_malloc_r+0xa0>
 800cb2a:	6822      	ldr	r2, [r4, #0]
 800cb2c:	1b52      	subs	r2, r2, r5
 800cb2e:	d41e      	bmi.n	800cb6e <_malloc_r+0xc6>
 800cb30:	2a0b      	cmp	r2, #11
 800cb32:	d916      	bls.n	800cb62 <_malloc_r+0xba>
 800cb34:	1961      	adds	r1, r4, r5
 800cb36:	42a3      	cmp	r3, r4
 800cb38:	6025      	str	r5, [r4, #0]
 800cb3a:	bf18      	it	ne
 800cb3c:	6059      	strne	r1, [r3, #4]
 800cb3e:	6863      	ldr	r3, [r4, #4]
 800cb40:	bf08      	it	eq
 800cb42:	6031      	streq	r1, [r6, #0]
 800cb44:	5162      	str	r2, [r4, r5]
 800cb46:	604b      	str	r3, [r1, #4]
 800cb48:	4638      	mov	r0, r7
 800cb4a:	f104 060b 	add.w	r6, r4, #11
 800cb4e:	f000 f865 	bl	800cc1c <__malloc_unlock>
 800cb52:	f026 0607 	bic.w	r6, r6, #7
 800cb56:	1d23      	adds	r3, r4, #4
 800cb58:	1af2      	subs	r2, r6, r3
 800cb5a:	d0b6      	beq.n	800caca <_malloc_r+0x22>
 800cb5c:	1b9b      	subs	r3, r3, r6
 800cb5e:	50a3      	str	r3, [r4, r2]
 800cb60:	e7b3      	b.n	800caca <_malloc_r+0x22>
 800cb62:	6862      	ldr	r2, [r4, #4]
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	bf0c      	ite	eq
 800cb68:	6032      	streq	r2, [r6, #0]
 800cb6a:	605a      	strne	r2, [r3, #4]
 800cb6c:	e7ec      	b.n	800cb48 <_malloc_r+0xa0>
 800cb6e:	4623      	mov	r3, r4
 800cb70:	6864      	ldr	r4, [r4, #4]
 800cb72:	e7b2      	b.n	800cada <_malloc_r+0x32>
 800cb74:	4634      	mov	r4, r6
 800cb76:	6876      	ldr	r6, [r6, #4]
 800cb78:	e7b9      	b.n	800caee <_malloc_r+0x46>
 800cb7a:	230c      	movs	r3, #12
 800cb7c:	603b      	str	r3, [r7, #0]
 800cb7e:	4638      	mov	r0, r7
 800cb80:	f000 f84c 	bl	800cc1c <__malloc_unlock>
 800cb84:	e7a1      	b.n	800caca <_malloc_r+0x22>
 800cb86:	6025      	str	r5, [r4, #0]
 800cb88:	e7de      	b.n	800cb48 <_malloc_r+0xa0>
 800cb8a:	bf00      	nop
 800cb8c:	24004c68 	.word	0x24004c68

0800cb90 <_realloc_r>:
 800cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb94:	4680      	mov	r8, r0
 800cb96:	4614      	mov	r4, r2
 800cb98:	460e      	mov	r6, r1
 800cb9a:	b921      	cbnz	r1, 800cba6 <_realloc_r+0x16>
 800cb9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cba0:	4611      	mov	r1, r2
 800cba2:	f7ff bf81 	b.w	800caa8 <_malloc_r>
 800cba6:	b92a      	cbnz	r2, 800cbb4 <_realloc_r+0x24>
 800cba8:	f7ff ff12 	bl	800c9d0 <_free_r>
 800cbac:	4625      	mov	r5, r4
 800cbae:	4628      	mov	r0, r5
 800cbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb4:	f000 f838 	bl	800cc28 <_malloc_usable_size_r>
 800cbb8:	4284      	cmp	r4, r0
 800cbba:	4607      	mov	r7, r0
 800cbbc:	d802      	bhi.n	800cbc4 <_realloc_r+0x34>
 800cbbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbc2:	d812      	bhi.n	800cbea <_realloc_r+0x5a>
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	f7ff ff6e 	bl	800caa8 <_malloc_r>
 800cbcc:	4605      	mov	r5, r0
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d0ed      	beq.n	800cbae <_realloc_r+0x1e>
 800cbd2:	42bc      	cmp	r4, r7
 800cbd4:	4622      	mov	r2, r4
 800cbd6:	4631      	mov	r1, r6
 800cbd8:	bf28      	it	cs
 800cbda:	463a      	movcs	r2, r7
 800cbdc:	f7ff fb9e 	bl	800c31c <memcpy>
 800cbe0:	4631      	mov	r1, r6
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	f7ff fef4 	bl	800c9d0 <_free_r>
 800cbe8:	e7e1      	b.n	800cbae <_realloc_r+0x1e>
 800cbea:	4635      	mov	r5, r6
 800cbec:	e7df      	b.n	800cbae <_realloc_r+0x1e>
	...

0800cbf0 <_sbrk_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4d06      	ldr	r5, [pc, #24]	; (800cc0c <_sbrk_r+0x1c>)
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	602b      	str	r3, [r5, #0]
 800cbfc:	f7f4 fcd4 	bl	80015a8 <_sbrk>
 800cc00:	1c43      	adds	r3, r0, #1
 800cc02:	d102      	bne.n	800cc0a <_sbrk_r+0x1a>
 800cc04:	682b      	ldr	r3, [r5, #0]
 800cc06:	b103      	cbz	r3, 800cc0a <_sbrk_r+0x1a>
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	24004c70 	.word	0x24004c70

0800cc10 <__malloc_lock>:
 800cc10:	4801      	ldr	r0, [pc, #4]	; (800cc18 <__malloc_lock+0x8>)
 800cc12:	f000 b811 	b.w	800cc38 <__retarget_lock_acquire_recursive>
 800cc16:	bf00      	nop
 800cc18:	24004c74 	.word	0x24004c74

0800cc1c <__malloc_unlock>:
 800cc1c:	4801      	ldr	r0, [pc, #4]	; (800cc24 <__malloc_unlock+0x8>)
 800cc1e:	f000 b80c 	b.w	800cc3a <__retarget_lock_release_recursive>
 800cc22:	bf00      	nop
 800cc24:	24004c74 	.word	0x24004c74

0800cc28 <_malloc_usable_size_r>:
 800cc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc2c:	1f18      	subs	r0, r3, #4
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfbc      	itt	lt
 800cc32:	580b      	ldrlt	r3, [r1, r0]
 800cc34:	18c0      	addlt	r0, r0, r3
 800cc36:	4770      	bx	lr

0800cc38 <__retarget_lock_acquire_recursive>:
 800cc38:	4770      	bx	lr

0800cc3a <__retarget_lock_release_recursive>:
 800cc3a:	4770      	bx	lr

0800cc3c <tanf>:
 800cc3c:	ee10 3a10 	vmov	r3, s0
 800cc40:	b507      	push	{r0, r1, r2, lr}
 800cc42:	4a12      	ldr	r2, [pc, #72]	; (800cc8c <tanf+0x50>)
 800cc44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	dc07      	bgt.n	800cc5c <tanf+0x20>
 800cc4c:	eddf 0a10 	vldr	s1, [pc, #64]	; 800cc90 <tanf+0x54>
 800cc50:	2001      	movs	r0, #1
 800cc52:	b003      	add	sp, #12
 800cc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc58:	f000 bbce 	b.w	800d3f8 <__kernel_tanf>
 800cc5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cc60:	db04      	blt.n	800cc6c <tanf+0x30>
 800cc62:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cc66:	b003      	add	sp, #12
 800cc68:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc6c:	4668      	mov	r0, sp
 800cc6e:	f000 f811 	bl	800cc94 <__ieee754_rem_pio2f>
 800cc72:	0040      	lsls	r0, r0, #1
 800cc74:	f000 0002 	and.w	r0, r0, #2
 800cc78:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc7c:	ed9d 0a00 	vldr	s0, [sp]
 800cc80:	f1c0 0001 	rsb	r0, r0, #1
 800cc84:	f000 fbb8 	bl	800d3f8 <__kernel_tanf>
 800cc88:	e7ed      	b.n	800cc66 <tanf+0x2a>
 800cc8a:	bf00      	nop
 800cc8c:	3f490fda 	.word	0x3f490fda
 800cc90:	00000000 	.word	0x00000000

0800cc94 <__ieee754_rem_pio2f>:
 800cc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc96:	ee10 6a10 	vmov	r6, s0
 800cc9a:	4b8e      	ldr	r3, [pc, #568]	; (800ced4 <__ieee754_rem_pio2f+0x240>)
 800cc9c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cca0:	429d      	cmp	r5, r3
 800cca2:	b087      	sub	sp, #28
 800cca4:	eef0 7a40 	vmov.f32	s15, s0
 800cca8:	4604      	mov	r4, r0
 800ccaa:	dc05      	bgt.n	800ccb8 <__ieee754_rem_pio2f+0x24>
 800ccac:	2300      	movs	r3, #0
 800ccae:	ed80 0a00 	vstr	s0, [r0]
 800ccb2:	6043      	str	r3, [r0, #4]
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	e01a      	b.n	800ccee <__ieee754_rem_pio2f+0x5a>
 800ccb8:	4b87      	ldr	r3, [pc, #540]	; (800ced8 <__ieee754_rem_pio2f+0x244>)
 800ccba:	429d      	cmp	r5, r3
 800ccbc:	dc46      	bgt.n	800cd4c <__ieee754_rem_pio2f+0xb8>
 800ccbe:	2e00      	cmp	r6, #0
 800ccc0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800cedc <__ieee754_rem_pio2f+0x248>
 800ccc4:	4b86      	ldr	r3, [pc, #536]	; (800cee0 <__ieee754_rem_pio2f+0x24c>)
 800ccc6:	f025 050f 	bic.w	r5, r5, #15
 800ccca:	dd1f      	ble.n	800cd0c <__ieee754_rem_pio2f+0x78>
 800cccc:	429d      	cmp	r5, r3
 800ccce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ccd2:	d00e      	beq.n	800ccf2 <__ieee754_rem_pio2f+0x5e>
 800ccd4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800cee4 <__ieee754_rem_pio2f+0x250>
 800ccd8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ccdc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cce0:	ed80 0a00 	vstr	s0, [r0]
 800cce4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cce8:	2001      	movs	r0, #1
 800ccea:	edc4 7a01 	vstr	s15, [r4, #4]
 800ccee:	b007      	add	sp, #28
 800ccf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccf2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800cee8 <__ieee754_rem_pio2f+0x254>
 800ccf6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ceec <__ieee754_rem_pio2f+0x258>
 800ccfa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ccfe:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800cd02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cd06:	edc0 6a00 	vstr	s13, [r0]
 800cd0a:	e7eb      	b.n	800cce4 <__ieee754_rem_pio2f+0x50>
 800cd0c:	429d      	cmp	r5, r3
 800cd0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cd12:	d00e      	beq.n	800cd32 <__ieee754_rem_pio2f+0x9e>
 800cd14:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800cee4 <__ieee754_rem_pio2f+0x250>
 800cd18:	ee37 0a87 	vadd.f32	s0, s15, s14
 800cd1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cd20:	ed80 0a00 	vstr	s0, [r0]
 800cd24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd28:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2c:	edc4 7a01 	vstr	s15, [r4, #4]
 800cd30:	e7dd      	b.n	800ccee <__ieee754_rem_pio2f+0x5a>
 800cd32:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800cee8 <__ieee754_rem_pio2f+0x254>
 800cd36:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800ceec <__ieee754_rem_pio2f+0x258>
 800cd3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cd3e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cd46:	edc0 6a00 	vstr	s13, [r0]
 800cd4a:	e7eb      	b.n	800cd24 <__ieee754_rem_pio2f+0x90>
 800cd4c:	4b68      	ldr	r3, [pc, #416]	; (800cef0 <__ieee754_rem_pio2f+0x25c>)
 800cd4e:	429d      	cmp	r5, r3
 800cd50:	dc72      	bgt.n	800ce38 <__ieee754_rem_pio2f+0x1a4>
 800cd52:	f000 fc31 	bl	800d5b8 <fabsf>
 800cd56:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800cef4 <__ieee754_rem_pio2f+0x260>
 800cd5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd5e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cd62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cd6a:	ee17 0a90 	vmov	r0, s15
 800cd6e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800cedc <__ieee754_rem_pio2f+0x248>
 800cd72:	eea7 0a67 	vfms.f32	s0, s14, s15
 800cd76:	281f      	cmp	r0, #31
 800cd78:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800cee4 <__ieee754_rem_pio2f+0x250>
 800cd7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd80:	eeb1 6a47 	vneg.f32	s12, s14
 800cd84:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cd88:	ee16 2a90 	vmov	r2, s13
 800cd8c:	dc1c      	bgt.n	800cdc8 <__ieee754_rem_pio2f+0x134>
 800cd8e:	495a      	ldr	r1, [pc, #360]	; (800cef8 <__ieee754_rem_pio2f+0x264>)
 800cd90:	1e47      	subs	r7, r0, #1
 800cd92:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800cd96:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800cd9a:	428b      	cmp	r3, r1
 800cd9c:	d014      	beq.n	800cdc8 <__ieee754_rem_pio2f+0x134>
 800cd9e:	6022      	str	r2, [r4, #0]
 800cda0:	ed94 7a00 	vldr	s14, [r4]
 800cda4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cda8:	2e00      	cmp	r6, #0
 800cdaa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cdae:	ed84 0a01 	vstr	s0, [r4, #4]
 800cdb2:	da9c      	bge.n	800ccee <__ieee754_rem_pio2f+0x5a>
 800cdb4:	eeb1 7a47 	vneg.f32	s14, s14
 800cdb8:	eeb1 0a40 	vneg.f32	s0, s0
 800cdbc:	ed84 7a00 	vstr	s14, [r4]
 800cdc0:	ed84 0a01 	vstr	s0, [r4, #4]
 800cdc4:	4240      	negs	r0, r0
 800cdc6:	e792      	b.n	800ccee <__ieee754_rem_pio2f+0x5a>
 800cdc8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cdcc:	15eb      	asrs	r3, r5, #23
 800cdce:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800cdd2:	2d08      	cmp	r5, #8
 800cdd4:	dde3      	ble.n	800cd9e <__ieee754_rem_pio2f+0x10a>
 800cdd6:	eddf 7a44 	vldr	s15, [pc, #272]	; 800cee8 <__ieee754_rem_pio2f+0x254>
 800cdda:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ceec <__ieee754_rem_pio2f+0x258>
 800cdde:	eef0 6a40 	vmov.f32	s13, s0
 800cde2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cde6:	ee30 0a66 	vsub.f32	s0, s0, s13
 800cdea:	eea6 0a27 	vfma.f32	s0, s12, s15
 800cdee:	eef0 7a40 	vmov.f32	s15, s0
 800cdf2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cdf6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800cdfa:	ee15 2a90 	vmov	r2, s11
 800cdfe:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ce02:	1a5b      	subs	r3, r3, r1
 800ce04:	2b19      	cmp	r3, #25
 800ce06:	dc04      	bgt.n	800ce12 <__ieee754_rem_pio2f+0x17e>
 800ce08:	edc4 5a00 	vstr	s11, [r4]
 800ce0c:	eeb0 0a66 	vmov.f32	s0, s13
 800ce10:	e7c6      	b.n	800cda0 <__ieee754_rem_pio2f+0x10c>
 800ce12:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800cefc <__ieee754_rem_pio2f+0x268>
 800ce16:	eeb0 0a66 	vmov.f32	s0, s13
 800ce1a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ce1e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ce22:	eddf 6a37 	vldr	s13, [pc, #220]	; 800cf00 <__ieee754_rem_pio2f+0x26c>
 800ce26:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ce2a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ce2e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ce32:	ed84 7a00 	vstr	s14, [r4]
 800ce36:	e7b3      	b.n	800cda0 <__ieee754_rem_pio2f+0x10c>
 800ce38:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ce3c:	db06      	blt.n	800ce4c <__ieee754_rem_pio2f+0x1b8>
 800ce3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ce42:	edc0 7a01 	vstr	s15, [r0, #4]
 800ce46:	edc0 7a00 	vstr	s15, [r0]
 800ce4a:	e733      	b.n	800ccb4 <__ieee754_rem_pio2f+0x20>
 800ce4c:	15ea      	asrs	r2, r5, #23
 800ce4e:	3a86      	subs	r2, #134	; 0x86
 800ce50:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ce54:	ee07 3a90 	vmov	s15, r3
 800ce58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ce5c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800cf04 <__ieee754_rem_pio2f+0x270>
 800ce60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ce64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce68:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ce6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ce74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ce78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce7c:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ce80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce84:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ce88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce8c:	edcd 7a05 	vstr	s15, [sp, #20]
 800ce90:	d11e      	bne.n	800ced0 <__ieee754_rem_pio2f+0x23c>
 800ce92:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ce96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9a:	bf14      	ite	ne
 800ce9c:	2302      	movne	r3, #2
 800ce9e:	2301      	moveq	r3, #1
 800cea0:	4919      	ldr	r1, [pc, #100]	; (800cf08 <__ieee754_rem_pio2f+0x274>)
 800cea2:	9101      	str	r1, [sp, #4]
 800cea4:	2102      	movs	r1, #2
 800cea6:	9100      	str	r1, [sp, #0]
 800cea8:	a803      	add	r0, sp, #12
 800ceaa:	4621      	mov	r1, r4
 800ceac:	f000 f82e 	bl	800cf0c <__kernel_rem_pio2f>
 800ceb0:	2e00      	cmp	r6, #0
 800ceb2:	f6bf af1c 	bge.w	800ccee <__ieee754_rem_pio2f+0x5a>
 800ceb6:	edd4 7a00 	vldr	s15, [r4]
 800ceba:	eef1 7a67 	vneg.f32	s15, s15
 800cebe:	edc4 7a00 	vstr	s15, [r4]
 800cec2:	edd4 7a01 	vldr	s15, [r4, #4]
 800cec6:	eef1 7a67 	vneg.f32	s15, s15
 800ceca:	edc4 7a01 	vstr	s15, [r4, #4]
 800cece:	e779      	b.n	800cdc4 <__ieee754_rem_pio2f+0x130>
 800ced0:	2303      	movs	r3, #3
 800ced2:	e7e5      	b.n	800cea0 <__ieee754_rem_pio2f+0x20c>
 800ced4:	3f490fd8 	.word	0x3f490fd8
 800ced8:	4016cbe3 	.word	0x4016cbe3
 800cedc:	3fc90f80 	.word	0x3fc90f80
 800cee0:	3fc90fd0 	.word	0x3fc90fd0
 800cee4:	37354443 	.word	0x37354443
 800cee8:	37354400 	.word	0x37354400
 800ceec:	2e85a308 	.word	0x2e85a308
 800cef0:	43490f80 	.word	0x43490f80
 800cef4:	3f22f984 	.word	0x3f22f984
 800cef8:	0800d838 	.word	0x0800d838
 800cefc:	2e85a300 	.word	0x2e85a300
 800cf00:	248d3132 	.word	0x248d3132
 800cf04:	43800000 	.word	0x43800000
 800cf08:	0800d8b8 	.word	0x0800d8b8

0800cf0c <__kernel_rem_pio2f>:
 800cf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf10:	ed2d 8b04 	vpush	{d8-d9}
 800cf14:	b0d9      	sub	sp, #356	; 0x164
 800cf16:	4688      	mov	r8, r1
 800cf18:	9002      	str	r0, [sp, #8]
 800cf1a:	49bb      	ldr	r1, [pc, #748]	; (800d208 <__kernel_rem_pio2f+0x2fc>)
 800cf1c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800cf1e:	9301      	str	r3, [sp, #4]
 800cf20:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800cf24:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800cf28:	1e59      	subs	r1, r3, #1
 800cf2a:	1d13      	adds	r3, r2, #4
 800cf2c:	db27      	blt.n	800cf7e <__kernel_rem_pio2f+0x72>
 800cf2e:	f1b2 0b03 	subs.w	fp, r2, #3
 800cf32:	bf48      	it	mi
 800cf34:	f102 0b04 	addmi.w	fp, r2, #4
 800cf38:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800cf3c:	1c45      	adds	r5, r0, #1
 800cf3e:	00ec      	lsls	r4, r5, #3
 800cf40:	1a47      	subs	r7, r0, r1
 800cf42:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800d218 <__kernel_rem_pio2f+0x30c>
 800cf46:	9403      	str	r4, [sp, #12]
 800cf48:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800cf4c:	eb0a 0c01 	add.w	ip, sl, r1
 800cf50:	ae1c      	add	r6, sp, #112	; 0x70
 800cf52:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800cf56:	2400      	movs	r4, #0
 800cf58:	4564      	cmp	r4, ip
 800cf5a:	dd12      	ble.n	800cf82 <__kernel_rem_pio2f+0x76>
 800cf5c:	9b01      	ldr	r3, [sp, #4]
 800cf5e:	ac1c      	add	r4, sp, #112	; 0x70
 800cf60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800cf64:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800cf68:	f04f 0c00 	mov.w	ip, #0
 800cf6c:	45d4      	cmp	ip, sl
 800cf6e:	dc27      	bgt.n	800cfc0 <__kernel_rem_pio2f+0xb4>
 800cf70:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800cf74:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800d218 <__kernel_rem_pio2f+0x30c>
 800cf78:	4627      	mov	r7, r4
 800cf7a:	2600      	movs	r6, #0
 800cf7c:	e016      	b.n	800cfac <__kernel_rem_pio2f+0xa0>
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e7dc      	b.n	800cf3c <__kernel_rem_pio2f+0x30>
 800cf82:	42e7      	cmn	r7, r4
 800cf84:	bf5d      	ittte	pl
 800cf86:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800cf8a:	ee07 3a90 	vmovpl	s15, r3
 800cf8e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cf92:	eef0 7a47 	vmovmi.f32	s15, s14
 800cf96:	ece6 7a01 	vstmia	r6!, {s15}
 800cf9a:	3401      	adds	r4, #1
 800cf9c:	e7dc      	b.n	800cf58 <__kernel_rem_pio2f+0x4c>
 800cf9e:	ecf9 6a01 	vldmia	r9!, {s13}
 800cfa2:	ed97 7a00 	vldr	s14, [r7]
 800cfa6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cfaa:	3601      	adds	r6, #1
 800cfac:	428e      	cmp	r6, r1
 800cfae:	f1a7 0704 	sub.w	r7, r7, #4
 800cfb2:	ddf4      	ble.n	800cf9e <__kernel_rem_pio2f+0x92>
 800cfb4:	eceb 7a01 	vstmia	fp!, {s15}
 800cfb8:	f10c 0c01 	add.w	ip, ip, #1
 800cfbc:	3404      	adds	r4, #4
 800cfbe:	e7d5      	b.n	800cf6c <__kernel_rem_pio2f+0x60>
 800cfc0:	ab08      	add	r3, sp, #32
 800cfc2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800cfc6:	eddf 8a93 	vldr	s17, [pc, #588]	; 800d214 <__kernel_rem_pio2f+0x308>
 800cfca:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800d210 <__kernel_rem_pio2f+0x304>
 800cfce:	9304      	str	r3, [sp, #16]
 800cfd0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800cfd4:	4656      	mov	r6, sl
 800cfd6:	00b3      	lsls	r3, r6, #2
 800cfd8:	9305      	str	r3, [sp, #20]
 800cfda:	ab58      	add	r3, sp, #352	; 0x160
 800cfdc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800cfe0:	ac08      	add	r4, sp, #32
 800cfe2:	ab44      	add	r3, sp, #272	; 0x110
 800cfe4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800cfe8:	46a4      	mov	ip, r4
 800cfea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800cfee:	4637      	mov	r7, r6
 800cff0:	2f00      	cmp	r7, #0
 800cff2:	f1a0 0004 	sub.w	r0, r0, #4
 800cff6:	dc4f      	bgt.n	800d098 <__kernel_rem_pio2f+0x18c>
 800cff8:	4628      	mov	r0, r5
 800cffa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800cffe:	f000 fb25 	bl	800d64c <scalbnf>
 800d002:	eeb0 8a40 	vmov.f32	s16, s0
 800d006:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d00a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d00e:	f000 fadb 	bl	800d5c8 <floorf>
 800d012:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d016:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d01a:	2d00      	cmp	r5, #0
 800d01c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d020:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d024:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800d028:	ee17 9a90 	vmov	r9, s15
 800d02c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d030:	dd44      	ble.n	800d0bc <__kernel_rem_pio2f+0x1b0>
 800d032:	f106 3cff 	add.w	ip, r6, #4294967295
 800d036:	ab08      	add	r3, sp, #32
 800d038:	f1c5 0e08 	rsb	lr, r5, #8
 800d03c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800d040:	fa47 f00e 	asr.w	r0, r7, lr
 800d044:	4481      	add	r9, r0
 800d046:	fa00 f00e 	lsl.w	r0, r0, lr
 800d04a:	1a3f      	subs	r7, r7, r0
 800d04c:	f1c5 0007 	rsb	r0, r5, #7
 800d050:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800d054:	4107      	asrs	r7, r0
 800d056:	2f00      	cmp	r7, #0
 800d058:	dd3f      	ble.n	800d0da <__kernel_rem_pio2f+0x1ce>
 800d05a:	f04f 0e00 	mov.w	lr, #0
 800d05e:	f109 0901 	add.w	r9, r9, #1
 800d062:	4673      	mov	r3, lr
 800d064:	4576      	cmp	r6, lr
 800d066:	dc6b      	bgt.n	800d140 <__kernel_rem_pio2f+0x234>
 800d068:	2d00      	cmp	r5, #0
 800d06a:	dd04      	ble.n	800d076 <__kernel_rem_pio2f+0x16a>
 800d06c:	2d01      	cmp	r5, #1
 800d06e:	d078      	beq.n	800d162 <__kernel_rem_pio2f+0x256>
 800d070:	2d02      	cmp	r5, #2
 800d072:	f000 8081 	beq.w	800d178 <__kernel_rem_pio2f+0x26c>
 800d076:	2f02      	cmp	r7, #2
 800d078:	d12f      	bne.n	800d0da <__kernel_rem_pio2f+0x1ce>
 800d07a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d07e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d082:	b353      	cbz	r3, 800d0da <__kernel_rem_pio2f+0x1ce>
 800d084:	4628      	mov	r0, r5
 800d086:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d08a:	f000 fadf 	bl	800d64c <scalbnf>
 800d08e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d092:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d096:	e020      	b.n	800d0da <__kernel_rem_pio2f+0x1ce>
 800d098:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d09c:	3f01      	subs	r7, #1
 800d09e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d0aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d0ae:	ecac 0a01 	vstmia	ip!, {s0}
 800d0b2:	ed90 0a00 	vldr	s0, [r0]
 800d0b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d0ba:	e799      	b.n	800cff0 <__kernel_rem_pio2f+0xe4>
 800d0bc:	d105      	bne.n	800d0ca <__kernel_rem_pio2f+0x1be>
 800d0be:	1e70      	subs	r0, r6, #1
 800d0c0:	ab08      	add	r3, sp, #32
 800d0c2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800d0c6:	11ff      	asrs	r7, r7, #7
 800d0c8:	e7c5      	b.n	800d056 <__kernel_rem_pio2f+0x14a>
 800d0ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d0ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d6:	da31      	bge.n	800d13c <__kernel_rem_pio2f+0x230>
 800d0d8:	2700      	movs	r7, #0
 800d0da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e2:	f040 809b 	bne.w	800d21c <__kernel_rem_pio2f+0x310>
 800d0e6:	1e74      	subs	r4, r6, #1
 800d0e8:	46a4      	mov	ip, r4
 800d0ea:	2000      	movs	r0, #0
 800d0ec:	45d4      	cmp	ip, sl
 800d0ee:	da4a      	bge.n	800d186 <__kernel_rem_pio2f+0x27a>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d07a      	beq.n	800d1ea <__kernel_rem_pio2f+0x2de>
 800d0f4:	ab08      	add	r3, sp, #32
 800d0f6:	3d08      	subs	r5, #8
 800d0f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f000 8081 	beq.w	800d204 <__kernel_rem_pio2f+0x2f8>
 800d102:	4628      	mov	r0, r5
 800d104:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d108:	00a5      	lsls	r5, r4, #2
 800d10a:	f000 fa9f 	bl	800d64c <scalbnf>
 800d10e:	aa44      	add	r2, sp, #272	; 0x110
 800d110:	1d2b      	adds	r3, r5, #4
 800d112:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d214 <__kernel_rem_pio2f+0x308>
 800d116:	18d1      	adds	r1, r2, r3
 800d118:	4622      	mov	r2, r4
 800d11a:	2a00      	cmp	r2, #0
 800d11c:	f280 80ae 	bge.w	800d27c <__kernel_rem_pio2f+0x370>
 800d120:	4622      	mov	r2, r4
 800d122:	2a00      	cmp	r2, #0
 800d124:	f2c0 80cc 	blt.w	800d2c0 <__kernel_rem_pio2f+0x3b4>
 800d128:	a944      	add	r1, sp, #272	; 0x110
 800d12a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800d12e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800d20c <__kernel_rem_pio2f+0x300>
 800d132:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d218 <__kernel_rem_pio2f+0x30c>
 800d136:	2000      	movs	r0, #0
 800d138:	1aa1      	subs	r1, r4, r2
 800d13a:	e0b6      	b.n	800d2aa <__kernel_rem_pio2f+0x39e>
 800d13c:	2702      	movs	r7, #2
 800d13e:	e78c      	b.n	800d05a <__kernel_rem_pio2f+0x14e>
 800d140:	6820      	ldr	r0, [r4, #0]
 800d142:	b94b      	cbnz	r3, 800d158 <__kernel_rem_pio2f+0x24c>
 800d144:	b118      	cbz	r0, 800d14e <__kernel_rem_pio2f+0x242>
 800d146:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800d14a:	6020      	str	r0, [r4, #0]
 800d14c:	2001      	movs	r0, #1
 800d14e:	f10e 0e01 	add.w	lr, lr, #1
 800d152:	3404      	adds	r4, #4
 800d154:	4603      	mov	r3, r0
 800d156:	e785      	b.n	800d064 <__kernel_rem_pio2f+0x158>
 800d158:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800d15c:	6020      	str	r0, [r4, #0]
 800d15e:	4618      	mov	r0, r3
 800d160:	e7f5      	b.n	800d14e <__kernel_rem_pio2f+0x242>
 800d162:	1e74      	subs	r4, r6, #1
 800d164:	a808      	add	r0, sp, #32
 800d166:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d16a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d16e:	f10d 0c20 	add.w	ip, sp, #32
 800d172:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800d176:	e77e      	b.n	800d076 <__kernel_rem_pio2f+0x16a>
 800d178:	1e74      	subs	r4, r6, #1
 800d17a:	a808      	add	r0, sp, #32
 800d17c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d180:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d184:	e7f3      	b.n	800d16e <__kernel_rem_pio2f+0x262>
 800d186:	ab08      	add	r3, sp, #32
 800d188:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d18c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d190:	4318      	orrs	r0, r3
 800d192:	e7ab      	b.n	800d0ec <__kernel_rem_pio2f+0x1e0>
 800d194:	f10c 0c01 	add.w	ip, ip, #1
 800d198:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800d19c:	2c00      	cmp	r4, #0
 800d19e:	d0f9      	beq.n	800d194 <__kernel_rem_pio2f+0x288>
 800d1a0:	9b05      	ldr	r3, [sp, #20]
 800d1a2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d1a6:	eb0d 0003 	add.w	r0, sp, r3
 800d1aa:	9b01      	ldr	r3, [sp, #4]
 800d1ac:	18f4      	adds	r4, r6, r3
 800d1ae:	ab1c      	add	r3, sp, #112	; 0x70
 800d1b0:	1c77      	adds	r7, r6, #1
 800d1b2:	384c      	subs	r0, #76	; 0x4c
 800d1b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1b8:	4466      	add	r6, ip
 800d1ba:	42be      	cmp	r6, r7
 800d1bc:	f6ff af0b 	blt.w	800cfd6 <__kernel_rem_pio2f+0xca>
 800d1c0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800d1c4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d1c8:	ee07 3a90 	vmov	s15, r3
 800d1cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1d0:	f04f 0c00 	mov.w	ip, #0
 800d1d4:	ece4 7a01 	vstmia	r4!, {s15}
 800d1d8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d218 <__kernel_rem_pio2f+0x30c>
 800d1dc:	46a1      	mov	r9, r4
 800d1de:	458c      	cmp	ip, r1
 800d1e0:	dd07      	ble.n	800d1f2 <__kernel_rem_pio2f+0x2e6>
 800d1e2:	ece0 7a01 	vstmia	r0!, {s15}
 800d1e6:	3701      	adds	r7, #1
 800d1e8:	e7e7      	b.n	800d1ba <__kernel_rem_pio2f+0x2ae>
 800d1ea:	9804      	ldr	r0, [sp, #16]
 800d1ec:	f04f 0c01 	mov.w	ip, #1
 800d1f0:	e7d2      	b.n	800d198 <__kernel_rem_pio2f+0x28c>
 800d1f2:	ecfe 6a01 	vldmia	lr!, {s13}
 800d1f6:	ed39 7a01 	vldmdb	r9!, {s14}
 800d1fa:	f10c 0c01 	add.w	ip, ip, #1
 800d1fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d202:	e7ec      	b.n	800d1de <__kernel_rem_pio2f+0x2d2>
 800d204:	3c01      	subs	r4, #1
 800d206:	e775      	b.n	800d0f4 <__kernel_rem_pio2f+0x1e8>
 800d208:	0800dbfc 	.word	0x0800dbfc
 800d20c:	0800dbd0 	.word	0x0800dbd0
 800d210:	43800000 	.word	0x43800000
 800d214:	3b800000 	.word	0x3b800000
 800d218:	00000000 	.word	0x00000000
 800d21c:	9b03      	ldr	r3, [sp, #12]
 800d21e:	eeb0 0a48 	vmov.f32	s0, s16
 800d222:	1a98      	subs	r0, r3, r2
 800d224:	f000 fa12 	bl	800d64c <scalbnf>
 800d228:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800d210 <__kernel_rem_pio2f+0x304>
 800d22c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d234:	db19      	blt.n	800d26a <__kernel_rem_pio2f+0x35e>
 800d236:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d214 <__kernel_rem_pio2f+0x308>
 800d23a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d23e:	aa08      	add	r2, sp, #32
 800d240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d244:	1c74      	adds	r4, r6, #1
 800d246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d24a:	3508      	adds	r5, #8
 800d24c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d254:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d258:	ee10 3a10 	vmov	r3, s0
 800d25c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d260:	ee17 3a90 	vmov	r3, s15
 800d264:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d268:	e74b      	b.n	800d102 <__kernel_rem_pio2f+0x1f6>
 800d26a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d26e:	aa08      	add	r2, sp, #32
 800d270:	ee10 3a10 	vmov	r3, s0
 800d274:	4634      	mov	r4, r6
 800d276:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d27a:	e742      	b.n	800d102 <__kernel_rem_pio2f+0x1f6>
 800d27c:	a808      	add	r0, sp, #32
 800d27e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800d282:	9001      	str	r0, [sp, #4]
 800d284:	ee07 0a90 	vmov	s15, r0
 800d288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d28c:	3a01      	subs	r2, #1
 800d28e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d292:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d296:	ed61 7a01 	vstmdb	r1!, {s15}
 800d29a:	e73e      	b.n	800d11a <__kernel_rem_pio2f+0x20e>
 800d29c:	ecfc 6a01 	vldmia	ip!, {s13}
 800d2a0:	ecb6 7a01 	vldmia	r6!, {s14}
 800d2a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	4550      	cmp	r0, sl
 800d2ac:	dc01      	bgt.n	800d2b2 <__kernel_rem_pio2f+0x3a6>
 800d2ae:	4288      	cmp	r0, r1
 800d2b0:	ddf4      	ble.n	800d29c <__kernel_rem_pio2f+0x390>
 800d2b2:	a858      	add	r0, sp, #352	; 0x160
 800d2b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d2b8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800d2bc:	3a01      	subs	r2, #1
 800d2be:	e730      	b.n	800d122 <__kernel_rem_pio2f+0x216>
 800d2c0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800d2c2:	2a02      	cmp	r2, #2
 800d2c4:	dc09      	bgt.n	800d2da <__kernel_rem_pio2f+0x3ce>
 800d2c6:	2a00      	cmp	r2, #0
 800d2c8:	dc2a      	bgt.n	800d320 <__kernel_rem_pio2f+0x414>
 800d2ca:	d043      	beq.n	800d354 <__kernel_rem_pio2f+0x448>
 800d2cc:	f009 0007 	and.w	r0, r9, #7
 800d2d0:	b059      	add	sp, #356	; 0x164
 800d2d2:	ecbd 8b04 	vpop	{d8-d9}
 800d2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800d2dc:	2b03      	cmp	r3, #3
 800d2de:	d1f5      	bne.n	800d2cc <__kernel_rem_pio2f+0x3c0>
 800d2e0:	ab30      	add	r3, sp, #192	; 0xc0
 800d2e2:	442b      	add	r3, r5
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	f1a1 0104 	sub.w	r1, r1, #4
 800d2f0:	dc51      	bgt.n	800d396 <__kernel_rem_pio2f+0x48a>
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	2901      	cmp	r1, #1
 800d2f6:	f1a2 0204 	sub.w	r2, r2, #4
 800d2fa:	dc5c      	bgt.n	800d3b6 <__kernel_rem_pio2f+0x4aa>
 800d2fc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800d218 <__kernel_rem_pio2f+0x30c>
 800d300:	3304      	adds	r3, #4
 800d302:	2c01      	cmp	r4, #1
 800d304:	dc67      	bgt.n	800d3d6 <__kernel_rem_pio2f+0x4ca>
 800d306:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800d30a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800d30e:	2f00      	cmp	r7, #0
 800d310:	d167      	bne.n	800d3e2 <__kernel_rem_pio2f+0x4d6>
 800d312:	edc8 6a00 	vstr	s13, [r8]
 800d316:	ed88 7a01 	vstr	s14, [r8, #4]
 800d31a:	edc8 7a02 	vstr	s15, [r8, #8]
 800d31e:	e7d5      	b.n	800d2cc <__kernel_rem_pio2f+0x3c0>
 800d320:	aa30      	add	r2, sp, #192	; 0xc0
 800d322:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800d218 <__kernel_rem_pio2f+0x30c>
 800d326:	4413      	add	r3, r2
 800d328:	4622      	mov	r2, r4
 800d32a:	2a00      	cmp	r2, #0
 800d32c:	da24      	bge.n	800d378 <__kernel_rem_pio2f+0x46c>
 800d32e:	b34f      	cbz	r7, 800d384 <__kernel_rem_pio2f+0x478>
 800d330:	eef1 7a47 	vneg.f32	s15, s14
 800d334:	edc8 7a00 	vstr	s15, [r8]
 800d338:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800d33c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d340:	aa31      	add	r2, sp, #196	; 0xc4
 800d342:	2301      	movs	r3, #1
 800d344:	429c      	cmp	r4, r3
 800d346:	da20      	bge.n	800d38a <__kernel_rem_pio2f+0x47e>
 800d348:	b10f      	cbz	r7, 800d34e <__kernel_rem_pio2f+0x442>
 800d34a:	eef1 7a67 	vneg.f32	s15, s15
 800d34e:	edc8 7a01 	vstr	s15, [r8, #4]
 800d352:	e7bb      	b.n	800d2cc <__kernel_rem_pio2f+0x3c0>
 800d354:	aa30      	add	r2, sp, #192	; 0xc0
 800d356:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800d218 <__kernel_rem_pio2f+0x30c>
 800d35a:	4413      	add	r3, r2
 800d35c:	2c00      	cmp	r4, #0
 800d35e:	da05      	bge.n	800d36c <__kernel_rem_pio2f+0x460>
 800d360:	b10f      	cbz	r7, 800d366 <__kernel_rem_pio2f+0x45a>
 800d362:	eef1 7a67 	vneg.f32	s15, s15
 800d366:	edc8 7a00 	vstr	s15, [r8]
 800d36a:	e7af      	b.n	800d2cc <__kernel_rem_pio2f+0x3c0>
 800d36c:	ed33 7a01 	vldmdb	r3!, {s14}
 800d370:	3c01      	subs	r4, #1
 800d372:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d376:	e7f1      	b.n	800d35c <__kernel_rem_pio2f+0x450>
 800d378:	ed73 7a01 	vldmdb	r3!, {s15}
 800d37c:	3a01      	subs	r2, #1
 800d37e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d382:	e7d2      	b.n	800d32a <__kernel_rem_pio2f+0x41e>
 800d384:	eef0 7a47 	vmov.f32	s15, s14
 800d388:	e7d4      	b.n	800d334 <__kernel_rem_pio2f+0x428>
 800d38a:	ecb2 7a01 	vldmia	r2!, {s14}
 800d38e:	3301      	adds	r3, #1
 800d390:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d394:	e7d6      	b.n	800d344 <__kernel_rem_pio2f+0x438>
 800d396:	edd1 7a00 	vldr	s15, [r1]
 800d39a:	edd1 6a01 	vldr	s13, [r1, #4]
 800d39e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d3a2:	3801      	subs	r0, #1
 800d3a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3a8:	ed81 7a00 	vstr	s14, [r1]
 800d3ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3b0:	edc1 7a01 	vstr	s15, [r1, #4]
 800d3b4:	e799      	b.n	800d2ea <__kernel_rem_pio2f+0x3de>
 800d3b6:	edd2 7a00 	vldr	s15, [r2]
 800d3ba:	edd2 6a01 	vldr	s13, [r2, #4]
 800d3be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d3c2:	3901      	subs	r1, #1
 800d3c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3c8:	ed82 7a00 	vstr	s14, [r2]
 800d3cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d0:	edc2 7a01 	vstr	s15, [r2, #4]
 800d3d4:	e78e      	b.n	800d2f4 <__kernel_rem_pio2f+0x3e8>
 800d3d6:	ed33 7a01 	vldmdb	r3!, {s14}
 800d3da:	3c01      	subs	r4, #1
 800d3dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3e0:	e78f      	b.n	800d302 <__kernel_rem_pio2f+0x3f6>
 800d3e2:	eef1 6a66 	vneg.f32	s13, s13
 800d3e6:	eeb1 7a47 	vneg.f32	s14, s14
 800d3ea:	edc8 6a00 	vstr	s13, [r8]
 800d3ee:	ed88 7a01 	vstr	s14, [r8, #4]
 800d3f2:	eef1 7a67 	vneg.f32	s15, s15
 800d3f6:	e790      	b.n	800d31a <__kernel_rem_pio2f+0x40e>

0800d3f8 <__kernel_tanf>:
 800d3f8:	b508      	push	{r3, lr}
 800d3fa:	ee10 3a10 	vmov	r3, s0
 800d3fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d402:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800d406:	eef0 7a40 	vmov.f32	s15, s0
 800d40a:	da17      	bge.n	800d43c <__kernel_tanf+0x44>
 800d40c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800d410:	ee17 1a10 	vmov	r1, s14
 800d414:	bb41      	cbnz	r1, 800d468 <__kernel_tanf+0x70>
 800d416:	1c43      	adds	r3, r0, #1
 800d418:	4313      	orrs	r3, r2
 800d41a:	d108      	bne.n	800d42e <__kernel_tanf+0x36>
 800d41c:	f000 f8cc 	bl	800d5b8 <fabsf>
 800d420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d424:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d428:	eeb0 0a67 	vmov.f32	s0, s15
 800d42c:	bd08      	pop	{r3, pc}
 800d42e:	2801      	cmp	r0, #1
 800d430:	d0fa      	beq.n	800d428 <__kernel_tanf+0x30>
 800d432:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d436:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d43a:	e7f5      	b.n	800d428 <__kernel_tanf+0x30>
 800d43c:	494c      	ldr	r1, [pc, #304]	; (800d570 <__kernel_tanf+0x178>)
 800d43e:	428a      	cmp	r2, r1
 800d440:	db12      	blt.n	800d468 <__kernel_tanf+0x70>
 800d442:	2b00      	cmp	r3, #0
 800d444:	bfb8      	it	lt
 800d446:	eef1 7a40 	vneglt.f32	s15, s0
 800d44a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800d574 <__kernel_tanf+0x17c>
 800d44e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d452:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800d578 <__kernel_tanf+0x180>
 800d456:	bfb8      	it	lt
 800d458:	eef1 0a60 	vneglt.f32	s1, s1
 800d45c:	ee70 0a60 	vsub.f32	s1, s0, s1
 800d460:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800d464:	eddf 0a45 	vldr	s1, [pc, #276]	; 800d57c <__kernel_tanf+0x184>
 800d468:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d580 <__kernel_tanf+0x188>
 800d46c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800d584 <__kernel_tanf+0x18c>
 800d470:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800d588 <__kernel_tanf+0x190>
 800d474:	493e      	ldr	r1, [pc, #248]	; (800d570 <__kernel_tanf+0x178>)
 800d476:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d47a:	428a      	cmp	r2, r1
 800d47c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d480:	eea7 6a25 	vfma.f32	s12, s14, s11
 800d484:	eddf 5a41 	vldr	s11, [pc, #260]	; 800d58c <__kernel_tanf+0x194>
 800d488:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d48c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800d590 <__kernel_tanf+0x198>
 800d490:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d494:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d594 <__kernel_tanf+0x19c>
 800d498:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d49c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800d598 <__kernel_tanf+0x1a0>
 800d4a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d4a4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800d59c <__kernel_tanf+0x1a4>
 800d4a8:	eee7 5a05 	vfma.f32	s11, s14, s10
 800d4ac:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800d5a0 <__kernel_tanf+0x1a8>
 800d4b0:	eea5 5a87 	vfma.f32	s10, s11, s14
 800d4b4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800d5a4 <__kernel_tanf+0x1ac>
 800d4b8:	eee5 5a07 	vfma.f32	s11, s10, s14
 800d4bc:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800d5a8 <__kernel_tanf+0x1b0>
 800d4c0:	eea5 5a87 	vfma.f32	s10, s11, s14
 800d4c4:	eddf 5a39 	vldr	s11, [pc, #228]	; 800d5ac <__kernel_tanf+0x1b4>
 800d4c8:	eee5 5a07 	vfma.f32	s11, s10, s14
 800d4cc:	eeb0 7a46 	vmov.f32	s14, s12
 800d4d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d4d4:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800d4d8:	eeb0 6a60 	vmov.f32	s12, s1
 800d4dc:	eea7 6a05 	vfma.f32	s12, s14, s10
 800d4e0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d5b0 <__kernel_tanf+0x1b8>
 800d4e4:	eee6 0a26 	vfma.f32	s1, s12, s13
 800d4e8:	eee5 0a07 	vfma.f32	s1, s10, s14
 800d4ec:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d4f0:	db1d      	blt.n	800d52e <__kernel_tanf+0x136>
 800d4f2:	ee06 0a90 	vmov	s13, r0
 800d4f6:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800d4fa:	ee27 6a07 	vmul.f32	s12, s14, s14
 800d4fe:	ee37 7a00 	vadd.f32	s14, s14, s0
 800d502:	179b      	asrs	r3, r3, #30
 800d504:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800d508:	f003 0302 	and.w	r3, r3, #2
 800d50c:	f1c3 0301 	rsb	r3, r3, #1
 800d510:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d514:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800d518:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d51c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d520:	ee07 3a90 	vmov	s15, r3
 800d524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d528:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d52c:	e77c      	b.n	800d428 <__kernel_tanf+0x30>
 800d52e:	2801      	cmp	r0, #1
 800d530:	d01b      	beq.n	800d56a <__kernel_tanf+0x172>
 800d532:	4b20      	ldr	r3, [pc, #128]	; (800d5b4 <__kernel_tanf+0x1bc>)
 800d534:	ee17 2a10 	vmov	r2, s14
 800d538:	401a      	ands	r2, r3
 800d53a:	ee06 2a10 	vmov	s12, r2
 800d53e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d542:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d546:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d54a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d54e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d552:	ee16 2a90 	vmov	r2, s13
 800d556:	4013      	ands	r3, r2
 800d558:	ee07 3a90 	vmov	s15, r3
 800d55c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d560:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800d564:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d568:	e75e      	b.n	800d428 <__kernel_tanf+0x30>
 800d56a:	eef0 7a47 	vmov.f32	s15, s14
 800d56e:	e75b      	b.n	800d428 <__kernel_tanf+0x30>
 800d570:	3f2ca140 	.word	0x3f2ca140
 800d574:	3f490fda 	.word	0x3f490fda
 800d578:	33222168 	.word	0x33222168
 800d57c:	00000000 	.word	0x00000000
 800d580:	b79bae5f 	.word	0xb79bae5f
 800d584:	38a3f445 	.word	0x38a3f445
 800d588:	37d95384 	.word	0x37d95384
 800d58c:	3a1a26c8 	.word	0x3a1a26c8
 800d590:	3b6b6916 	.word	0x3b6b6916
 800d594:	3cb327a4 	.word	0x3cb327a4
 800d598:	3e088889 	.word	0x3e088889
 800d59c:	3895c07a 	.word	0x3895c07a
 800d5a0:	398137b9 	.word	0x398137b9
 800d5a4:	3abede48 	.word	0x3abede48
 800d5a8:	3c11371f 	.word	0x3c11371f
 800d5ac:	3d5d0dd1 	.word	0x3d5d0dd1
 800d5b0:	3eaaaaab 	.word	0x3eaaaaab
 800d5b4:	fffff000 	.word	0xfffff000

0800d5b8 <fabsf>:
 800d5b8:	ee10 3a10 	vmov	r3, s0
 800d5bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5c0:	ee00 3a10 	vmov	s0, r3
 800d5c4:	4770      	bx	lr
	...

0800d5c8 <floorf>:
 800d5c8:	ee10 3a10 	vmov	r3, s0
 800d5cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d5d0:	3a7f      	subs	r2, #127	; 0x7f
 800d5d2:	2a16      	cmp	r2, #22
 800d5d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d5d8:	dc2a      	bgt.n	800d630 <floorf+0x68>
 800d5da:	2a00      	cmp	r2, #0
 800d5dc:	da11      	bge.n	800d602 <floorf+0x3a>
 800d5de:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d640 <floorf+0x78>
 800d5e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d5e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ee:	dd05      	ble.n	800d5fc <floorf+0x34>
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	da23      	bge.n	800d63c <floorf+0x74>
 800d5f4:	4a13      	ldr	r2, [pc, #76]	; (800d644 <floorf+0x7c>)
 800d5f6:	2900      	cmp	r1, #0
 800d5f8:	bf18      	it	ne
 800d5fa:	4613      	movne	r3, r2
 800d5fc:	ee00 3a10 	vmov	s0, r3
 800d600:	4770      	bx	lr
 800d602:	4911      	ldr	r1, [pc, #68]	; (800d648 <floorf+0x80>)
 800d604:	4111      	asrs	r1, r2
 800d606:	420b      	tst	r3, r1
 800d608:	d0fa      	beq.n	800d600 <floorf+0x38>
 800d60a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d640 <floorf+0x78>
 800d60e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d612:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61a:	ddef      	ble.n	800d5fc <floorf+0x34>
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	bfbe      	ittt	lt
 800d620:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d624:	fa40 f202 	asrlt.w	r2, r0, r2
 800d628:	189b      	addlt	r3, r3, r2
 800d62a:	ea23 0301 	bic.w	r3, r3, r1
 800d62e:	e7e5      	b.n	800d5fc <floorf+0x34>
 800d630:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d634:	d3e4      	bcc.n	800d600 <floorf+0x38>
 800d636:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d63a:	4770      	bx	lr
 800d63c:	2300      	movs	r3, #0
 800d63e:	e7dd      	b.n	800d5fc <floorf+0x34>
 800d640:	7149f2ca 	.word	0x7149f2ca
 800d644:	bf800000 	.word	0xbf800000
 800d648:	007fffff 	.word	0x007fffff

0800d64c <scalbnf>:
 800d64c:	ee10 3a10 	vmov	r3, s0
 800d650:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d654:	d024      	beq.n	800d6a0 <scalbnf+0x54>
 800d656:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d65a:	d302      	bcc.n	800d662 <scalbnf+0x16>
 800d65c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d660:	4770      	bx	lr
 800d662:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d666:	d121      	bne.n	800d6ac <scalbnf+0x60>
 800d668:	4b29      	ldr	r3, [pc, #164]	; (800d710 <scalbnf+0xc4>)
 800d66a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d714 <scalbnf+0xc8>
 800d66e:	4298      	cmp	r0, r3
 800d670:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d674:	db15      	blt.n	800d6a2 <scalbnf+0x56>
 800d676:	ee10 3a10 	vmov	r3, s0
 800d67a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d67e:	3a19      	subs	r2, #25
 800d680:	4402      	add	r2, r0
 800d682:	2afe      	cmp	r2, #254	; 0xfe
 800d684:	dd14      	ble.n	800d6b0 <scalbnf+0x64>
 800d686:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d718 <scalbnf+0xcc>
 800d68a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d71c <scalbnf+0xd0>
 800d68e:	ee10 3a10 	vmov	r3, s0
 800d692:	eeb0 7a67 	vmov.f32	s14, s15
 800d696:	2b00      	cmp	r3, #0
 800d698:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800d69c:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d6a0:	4770      	bx	lr
 800d6a2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d720 <scalbnf+0xd4>
 800d6a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d6aa:	4770      	bx	lr
 800d6ac:	0dd2      	lsrs	r2, r2, #23
 800d6ae:	e7e7      	b.n	800d680 <scalbnf+0x34>
 800d6b0:	2a00      	cmp	r2, #0
 800d6b2:	dd06      	ble.n	800d6c2 <scalbnf+0x76>
 800d6b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6b8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d6bc:	ee00 3a10 	vmov	s0, r3
 800d6c0:	4770      	bx	lr
 800d6c2:	f112 0f16 	cmn.w	r2, #22
 800d6c6:	da19      	bge.n	800d6fc <scalbnf+0xb0>
 800d6c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d6cc:	4298      	cmp	r0, r3
 800d6ce:	ee10 3a10 	vmov	r3, s0
 800d6d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6d6:	dd09      	ble.n	800d6ec <scalbnf+0xa0>
 800d6d8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800d718 <scalbnf+0xcc>
 800d6dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d71c <scalbnf+0xd0>
 800d6e0:	eef0 7a40 	vmov.f32	s15, s0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	fe00 0a07 	vseleq.f32	s0, s0, s14
 800d6ea:	e7dc      	b.n	800d6a6 <scalbnf+0x5a>
 800d6ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d720 <scalbnf+0xd4>
 800d6f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d724 <scalbnf+0xd8>
 800d6f4:	eef0 7a40 	vmov.f32	s15, s0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	e7f4      	b.n	800d6e6 <scalbnf+0x9a>
 800d6fc:	3219      	adds	r2, #25
 800d6fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d702:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d706:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d728 <scalbnf+0xdc>
 800d70a:	ee07 3a10 	vmov	s14, r3
 800d70e:	e7c5      	b.n	800d69c <scalbnf+0x50>
 800d710:	ffff3cb0 	.word	0xffff3cb0
 800d714:	4c000000 	.word	0x4c000000
 800d718:	7149f2ca 	.word	0x7149f2ca
 800d71c:	f149f2ca 	.word	0xf149f2ca
 800d720:	0da24260 	.word	0x0da24260
 800d724:	8da24260 	.word	0x8da24260
 800d728:	33000000 	.word	0x33000000

0800d72c <_init>:
 800d72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72e:	bf00      	nop
 800d730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d732:	bc08      	pop	{r3}
 800d734:	469e      	mov	lr, r3
 800d736:	4770      	bx	lr

0800d738 <_fini>:
 800d738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73a:	bf00      	nop
 800d73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d73e:	bc08      	pop	{r3}
 800d740:	469e      	mov	lr, r3
 800d742:	4770      	bx	lr
