
DigiMix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .buffers      00012200  30000000  30000000  00030000  2**5
                  ALLOC
  1 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000be58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004ac  0800c0f8  0800c0f8  0001c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800c5a4  0800c5a4  0002007c  2**0
                  CONTENTS
  5 .ARM          00000008  0800c5a4  0800c5a4  0001c5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800c5ac  0800c5ac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800c5ac  0800c5ac  0001c5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800c5b0  0800c5b0  0001c5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000007c  24000000  0800c5b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004254  2400007c  0800c630  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240042d0  0800c630  000242d0  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee40  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003abc  00000000  00000000  0003eeea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  000429a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001678  00000000  00000000  00044198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c823  00000000  00000000  00045810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0d0  00000000  00000000  00082033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018e716  00000000  00000000  000a1103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0022f819  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069d8  00000000  00000000  0022f86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c0e0 	.word	0x0800c0e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800c0e0 	.word	0x0800c0e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <IFX_PeakingFilter_Init>:


#include "IFX_PeakingFilter.h"

// Initialize
void IFX_PeakingFilter_Init(IFX_PeakingFilter *filt, float sampleRate_Hz) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	ed87 0a00 	vstr	s0, [r7]

	// Sample time
	filt->sampleTime_s = 1.0f / sampleRate_Hz;
 80007cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007d0:	ed97 7a00 	vldr	s14, [r7]
 80007d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	edc3 7a00 	vstr	s15, [r3]

	// Clear mem
	for(uint8_t n = 0; n < 3; n++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e012      	b.n	800080a <IFX_PeakingFilter_Init+0x4a>
		filt->x[n] = 0.0f;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	3304      	adds	r3, #4
 80007ee:	f04f 0200 	mov.w	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	3304      	adds	r3, #4
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < 3; n++) {
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	3301      	adds	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d9e9      	bls.n	80007e4 <IFX_PeakingFilter_Init+0x24>
	}

	// Calculate all-pass filter
	IFX_PeakingFilter_SetParameters(filt, 1.0f, 0.0f, 1.0f);
 8000810:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000814:	eddf 0a05 	vldr	s1, [pc, #20]	; 800082c <IFX_PeakingFilter_Init+0x6c>
 8000818:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 f807 	bl	8000830 <IFX_PeakingFilter_SetParameters>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	00000000 	.word	0x00000000

08000830 <IFX_PeakingFilter_SetParameters>:

// Compute filter coefficients. (boostCut_linear > 1.0f = boost | boostCut_linear < 1.0f = cut)
void IFX_PeakingFilter_SetParameters(IFX_PeakingFilter *filt, float centerFrequency_Hz, float bandwidth_Hz, float boostCut_linear) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	ed87 0a02 	vstr	s0, [r7, #8]
 800083c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000840:	ed87 1a00 	vstr	s2, [r7]

	// Convert Hz to rad/s, pre-warp cut off frequency, multiply by sampling time (wc*T = ...)
	float wcT = 2.0f * tanf(M_PI * centerFrequency_Hz * filt->sampleTime_s);
 8000844:	edd7 7a02 	vldr	s15, [r7, #8]
 8000848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80009a8 <IFX_PeakingFilter_SetParameters+0x178>
 8000850:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	edd3 7a00 	vldr	s15, [r3]
 800085a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800085e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000866:	eeb0 0a67 	vmov.f32	s0, s15
 800086a:	f00a fec1 	bl	800b5f0 <tanf>
 800086e:	eef0 7a40 	vmov.f32	s15, s0
 8000872:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000876:	edc7 7a05 	vstr	s15, [r7, #20]

	// Compute quality factor (Q = f(Center) / f(bandwidth))
	float Q = centerFrequency_Hz / bandwidth_Hz;
 800087a:	edd7 6a02 	vldr	s13, [r7, #8]
 800087e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000886:	edc7 7a04 	vstr	s15, [r7, #16]

	// Compute filter coefficients
	filt->a[0] = 4.0f + 2.0f * (boostCut_linear / Q) * wcT * wcT * wcT;
 800088a:	edd7 6a00 	vldr	s13, [r7]
 800088e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000896:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800089a:	edd7 7a05 	vldr	s15, [r7, #20]
 800089e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80008a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80008b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->a[1] = 2.0f * wcT * wcT - 8.0f;
 80008c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80008c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80008c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80008cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80008d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	edc3 7a08 	vstr	s15, [r3, #32]
	filt->a[2] = 4.0f - 2.0f * (boostCut_linear / Q) * wcT * wcT * wcT;
 80008de:	edd7 6a00 	vldr	s13, [r7]
 80008e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80008e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80008ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80008f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000906:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800090a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	filt->b[0] = 1.0f / (4.0f + 2.0f / Q * wcT + wcT * wcT);	// 1 / coefficient
 8000914:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000918:	edd7 7a04 	vldr	s15, [r7, #16]
 800091c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000920:	edd7 7a05 	vldr	s15, [r7, #20]
 8000924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000928:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800092c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000930:	edd7 7a05 	vldr	s15, [r7, #20]
 8000934:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800093c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	filt->b[1] = -(2.0f * wcT * wcT - 8.0f);					// -coefficient
 800094a:	edd7 7a05 	vldr	s15, [r7, #20]
 800094e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000952:	edd7 7a05 	vldr	s15, [r7, #20]
 8000956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800095e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000962:	eef1 7a67 	vneg.f32	s15, s15
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	filt->b[2] = -(4.0f - 2.0f / Q * wcT + wcT * wcT);			// -coefficient
 800096c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000970:	edd7 7a04 	vldr	s15, [r7, #16]
 8000974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000978:	edd7 7a05 	vldr	s15, [r7, #20]
 800097c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000980:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000988:	edd7 7a05 	vldr	s15, [r7, #20]
 800098c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000994:	eef1 7a67 	vneg.f32	s15, s15
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	54442d18 	.word	0x54442d18
 80009ac:	400921fb 	.word	0x400921fb

080009b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <vApplicationGetIdleTaskMemory+0x2c>)
 80009c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <vApplicationGetIdleTaskMemory+0x30>)
 80009c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	24000098 	.word	0x24000098
 80009e0:	240000ec 	.word	0x240000ec

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b5b0      	push	{r4, r5, r7, lr}
 80009e6:	b08c      	sub	sp, #48	; 0x30
 80009e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009ea:	f000 fb8f 	bl	800110c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009ee:	4b73      	ldr	r3, [pc, #460]	; (8000bbc <main+0x1d8>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d11b      	bne.n	8000a32 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009fa:	f3bf 8f4f 	dsb	sy
}
 80009fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a00:	f3bf 8f6f 	isb	sy
}
 8000a04:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a06:	4b6d      	ldr	r3, [pc, #436]	; (8000bbc <main+0x1d8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0e:	f3bf 8f4f 	dsb	sy
}
 8000a12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a14:	f3bf 8f6f 	isb	sy
}
 8000a18:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a1a:	4b68      	ldr	r3, [pc, #416]	; (8000bbc <main+0x1d8>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a67      	ldr	r2, [pc, #412]	; (8000bbc <main+0x1d8>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a26:	f3bf 8f4f 	dsb	sy
}
 8000a2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a2c:	f3bf 8f6f 	isb	sy
}
 8000a30:	e000      	b.n	8000a34 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a32:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a34:	4b61      	ldr	r3, [pc, #388]	; (8000bbc <main+0x1d8>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d138      	bne.n	8000ab2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a40:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <main+0x1d8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a48:	f3bf 8f4f 	dsb	sy
}
 8000a4c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a4e:	4b5b      	ldr	r3, [pc, #364]	; (8000bbc <main+0x1d8>)
 8000a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	0b5b      	lsrs	r3, r3, #13
 8000a5a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a68:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	015a      	lsls	r2, r3, #5
 8000a6e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a72:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a74:	6a3a      	ldr	r2, [r7, #32]
 8000a76:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a78:	4950      	ldr	r1, [pc, #320]	; (8000bbc <main+0x1d8>)
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	1e5a      	subs	r2, r3, #1
 8000a84:	623a      	str	r2, [r7, #32]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1ef      	bne.n	8000a6a <main+0x86>
    } while(sets-- != 0U);
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	1e5a      	subs	r2, r3, #1
 8000a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1e5      	bne.n	8000a60 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a94:	f3bf 8f4f 	dsb	sy
}
 8000a98:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a9a:	4b48      	ldr	r3, [pc, #288]	; (8000bbc <main+0x1d8>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a47      	ldr	r2, [pc, #284]	; (8000bbc <main+0x1d8>)
 8000aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa6:	f3bf 8f4f 	dsb	sy
}
 8000aaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aac:	f3bf 8f6f 	isb	sy
}
 8000ab0:	e000      	b.n	8000ab4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ab2:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000aba:	bf00      	nop
 8000abc:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <main+0x1dc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d004      	beq.n	8000ad2 <main+0xee>
 8000ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dcf4      	bgt.n	8000abc <main+0xd8>
  if ( timeout < 0 )
 8000ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	da01      	bge.n	8000adc <main+0xf8>
  {
  Error_Handler();
 8000ad8:	f000 fb58 	bl	800118c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 fde4 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f888 	bl	8000bf4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <main+0x1dc>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a35      	ldr	r2, [pc, #212]	; (8000bc0 <main+0x1dc>)
 8000aec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <main+0x1dc>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f003 fa18 	bl	8003f38 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f003 fa2e 	bl	8003f6c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b16:	bf00      	nop
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <main+0x1dc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d104      	bne.n	8000b2e <main+0x14a>
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	1e5a      	subs	r2, r3, #1
 8000b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	dcf4      	bgt.n	8000b18 <main+0x134>
if ( timeout < 0 )
 8000b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da01      	bge.n	8000b38 <main+0x154>
{
Error_Handler();
 8000b34:	f000 fb2a 	bl	800118c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f000 f984 	bl	8000e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3c:	f000 f95a 	bl	8000df4 <MX_DMA_Init>
  MX_I2S3_Init();
 8000b40:	f000 f8d8 	bl	8000cf4 <MX_I2S3_Init>
  MX_USART3_UART_Init();
 8000b44:	f000 f90a 	bl	8000d5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(dacData, 0, sizeof(dacData));
 8000b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	481d      	ldr	r0, [pc, #116]	; (8000bc4 <main+0x1e0>)
 8000b50:	f00a f8cc 	bl	800acec <memset>

  IFX_PeakingFilter_Init(&filt1, SAMPLE_RATE_HZ);
 8000b54:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8000bc8 <main+0x1e4>
 8000b58:	481c      	ldr	r0, [pc, #112]	; (8000bcc <main+0x1e8>)
 8000b5a:	f7ff fe31 	bl	80007c0 <IFX_PeakingFilter_Init>
  //  IFX_PeakingFilter_Init(&filt2, SAMPLE_RATE_HZ);
  //  IFX_PeakingFilter_Init(&filt3, SAMPLE_RATE_HZ);
  //  IFX_PeakingFilter_Init(&filt4, SAMPLE_RATE_HZ);
  //  IFX_PeakingFilter_Init(&filt5, SAMPLE_RATE_HZ);

  UART_Printf("Readyy!\r\n");
 8000b5e:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <main+0x1ec>)
 8000b60:	f000 f9a8 	bl	8000eb4 <UART_Printf>

  IFX_PeakingFilter_SetParameters(&filt1, 1000.0f, 10000.0f, 0.0f);
 8000b64:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8000bd4 <main+0x1f0>
 8000b68:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8000bd8 <main+0x1f4>
 8000b6c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8000bdc <main+0x1f8>
 8000b70:	4816      	ldr	r0, [pc, #88]	; (8000bcc <main+0x1e8>)
 8000b72:	f7ff fe5d 	bl	8000830 <IFX_PeakingFilter_SetParameters>

  if (HAL_I2SEx_TransmitReceive_DMA(&hi2s3, (uint16_t *) dacData, (uint16_t *) adcData, BUFFER_SIZE) != HAL_OK) {
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <main+0x1fc>)
 8000b7a:	4912      	ldr	r1, [pc, #72]	; (8000bc4 <main+0x1e0>)
 8000b7c:	4819      	ldr	r0, [pc, #100]	; (8000be4 <main+0x200>)
 8000b7e:	f003 fb2b 	bl	80041d8 <HAL_I2SEx_TransmitReceive_DMA>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d004      	beq.n	8000b92 <main+0x1ae>
    UART_Printf("I2S Full-Duplex DMA initialization failed\n");
 8000b88:	4817      	ldr	r0, [pc, #92]	; (8000be8 <main+0x204>)
 8000b8a:	f000 f993 	bl	8000eb4 <UART_Printf>
    Error_Handler();
 8000b8e:	f000 fafd 	bl	800118c <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of filterTask */
  osThreadDef(filterTask, setFilterTask, osPriorityNormal, 0, 128);
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <main+0x208>)
 8000b94:	1d3c      	adds	r4, r7, #4
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  filterTaskHandle = osThreadCreate(osThread(filterTask), NULL);
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fe36 	bl	800981a <osThreadCreate>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <main+0x20c>)
 8000bb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bb4:	f008 fe2a 	bl	800980c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    if (dataReadyFlag) {
 8000bb8:	e7fe      	b.n	8000bb8 <main+0x1d4>
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	30012000 	.word	0x30012000
 8000bc8:	473b8000 	.word	0x473b8000
 8000bcc:	240004d0 	.word	0x240004d0
 8000bd0:	0800c104 	.word	0x0800c104
 8000bd4:	00000000 	.word	0x00000000
 8000bd8:	461c4000 	.word	0x461c4000
 8000bdc:	447a0000 	.word	0x447a0000
 8000be0:	30010000 	.word	0x30010000
 8000be4:	240002ec 	.word	0x240002ec
 8000be8:	0800c110 	.word	0x0800c110
 8000bec:	0800c13c 	.word	0x0800c13c
 8000bf0:	240004c4 	.word	0x240004c4

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	; 0x70
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	224c      	movs	r2, #76	; 0x4c
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00a f872 	bl	800acec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f00a f86c 	bl	800acec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c14:	2004      	movs	r0, #4
 8000c16:	f003 fc29 	bl	800446c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b33      	ldr	r3, [pc, #204]	; (8000cec <SystemClock_Config+0xf8>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	4a32      	ldr	r2, [pc, #200]	; (8000cec <SystemClock_Config+0xf8>)
 8000c24:	f023 0301 	bic.w	r3, r3, #1
 8000c28:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c2a:	4b30      	ldr	r3, [pc, #192]	; (8000cec <SystemClock_Config+0xf8>)
 8000c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <SystemClock_Config+0xfc>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a2d      	ldr	r2, [pc, #180]	; (8000cf0 <SystemClock_Config+0xfc>)
 8000c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <SystemClock_Config+0xfc>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c4c:	bf00      	nop
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <SystemClock_Config+0xfc>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5a:	d1f8      	bne.n	8000c4e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8000c5c:	2311      	movs	r3, #17
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000c6a:	2320      	movs	r3, #32
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c72:	2302      	movs	r3, #2
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c76:	2310      	movs	r3, #16
 8000c78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 500;
 8000c7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fc3f 	bl	8004520 <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ca8:	f000 fa70 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	233f      	movs	r3, #63	; 0x3f
 8000cae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cc0:	2340      	movs	r3, #64	; 0x40
 8000cc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cca:	2340      	movs	r3, #64	; 0x40
 8000ccc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 f87e 	bl	8004dd4 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000cde:	f000 fa55 	bl	800118c <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3770      	adds	r7, #112	; 0x70
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58000400 	.word	0x58000400
 8000cf0:	58024800 	.word	0x58024800

08000cf4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <MX_I2S3_Init+0x64>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d00:	220a      	movs	r2, #10
 8000d02:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d10:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d18:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d1c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000d20:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_I2S3_Init+0x60>)
 8000d42:	f003 f927 	bl	8003f94 <HAL_I2S_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2S3_Init+0x5c>
  {
    Error_Handler();
 8000d4c:	f000 fa1e 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	240002ec 	.word	0x240002ec
 8000d58:	40003c00 	.word	0x40003c00

08000d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d62:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000da6:	f007 fbaf 	bl	8008508 <HAL_UART_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000db0:	f000 f9ec 	bl	800118c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000db8:	f008 fc45 	bl	8009646 <HAL_UARTEx_SetTxFifoThreshold>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc2:	f000 f9e3 	bl	800118c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4808      	ldr	r0, [pc, #32]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000dca:	f008 fc7a 	bl	80096c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd4:	f000 f9da 	bl	800118c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_USART3_UART_Init+0x90>)
 8000dda:	f008 fbfb 	bl	80095d4 <HAL_UARTEx_DisableFifoMode>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 f9d2 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24000430 	.word	0x24000430
 8000df0:	40004800 	.word	0x40004800

08000df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000dfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e00:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <MX_DMA_Init+0x4c>)
 8000e0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	200b      	movs	r0, #11
 8000e1e:	f000 fd63 	bl	80018e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e22:	200b      	movs	r0, #11
 8000e24:	f000 fd7a 	bl	800191c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	200c      	movs	r0, #12
 8000e2e:	f000 fd5b 	bl	80018e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e32:	200c      	movs	r0, #12
 8000e34:	f000 fd72 	bl	800191c <HAL_NVIC_EnableIRQ>

}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	58024400 	.word	0x58024400

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_GPIO_Init+0x6c>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <UART_Printf>:

/* USER CODE BEGIN 4 */
void UART_Printf(const char* fmt, ...) {
 8000eb4:	b40f      	push	{r0, r1, r2, r3}
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b0c2      	sub	sp, #264	; 0x108
 8000eba:	af00      	add	r7, sp, #0
  char buff[256];
  va_list args;
  va_start(args, fmt);
 8000ebc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ec8:	601a      	str	r2, [r3, #0]
  vsnprintf(buff, sizeof(buff), fmt, args);
 8000eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ed2:	f107 0008 	add.w	r0, r7, #8
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee0:	f009 ff38 	bl	800ad54 <vsniprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff f9f9 	bl	80002e0 <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f107 0108 	add.w	r1, r7, #8
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <UART_Printf+0x5c>)
 8000efc:	f007 fb54 	bl	80085a8 <HAL_UART_Transmit>
  va_end(args);
}
 8000f00:	bf00      	nop
 8000f02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000f06:	46bd      	mov	sp, r7
 8000f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f0c:	b004      	add	sp, #16
 8000f0e:	4770      	bx	lr
 8000f10:	24000430 	.word	0x24000430

08000f14 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  inBufPtr = &adcData[0];
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000f20:	601a      	str	r2, [r3, #0]
  outBufPtr = &dacData[0];
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000f24:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000f26:	601a      	str	r2, [r3, #0]
  processData();
 8000f28:	f000 f830 	bl	8000f8c <processData>
  dataReadyFlag = 1;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	240004c8 	.word	0x240004c8
 8000f40:	30010000 	.word	0x30010000
 8000f44:	24000008 	.word	0x24000008
 8000f48:	30012000 	.word	0x30012000
 8000f4c:	240004cc 	.word	0x240004cc

08000f50 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  inBufPtr = &adcData[BUFFER_SIZE];
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  outBufPtr = &dacData[BUFFER_SIZE];
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000f62:	601a      	str	r2, [r3, #0]
  processData();
 8000f64:	f000 f812 	bl	8000f8c <processData>
  dataReadyFlag = 1;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	240004c8 	.word	0x240004c8
 8000f7c:	30010100 	.word	0x30010100
 8000f80:	24000008 	.word	0x24000008
 8000f84:	30012100 	.word	0x30012100
 8000f88:	240004cc 	.word	0x240004cc

08000f8c <processData>:

void processData() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
  static float leftIn, leftProcessed, leftOut;
  static float rightIn, rightProcessed, rightOut;

  for (uint8_t n = 0; n < (BUFFER_SIZE) - 1; n+=4) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e092      	b.n	80010be <processData+0x132>
    // LEFT

	//  CONVERTIR ENTRADA ADC A FLOAT
	leftIn = INT16_TO_FLOAT(inBufPtr[n]);
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <processData+0x14c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80010dc <processData+0x150>
 8000fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb6:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <processData+0x154>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
	if (leftIn > 1.0f) {
 8000fbc:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <processData+0x154>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	dd09      	ble.n	8000fe4 <processData+0x58>
	  leftIn -= 2.0f;
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <processData+0x154>)
 8000fd2:	edd3 7a00 	vldr	s15, [r3]
 8000fd6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <processData+0x154>)
 8000fe0:	edc3 7a00 	vstr	s15, [r3]
	}

	//leftProcessed = IFX_PeakingFilter_Update(&filt1, leftIn);
	leftProcessed = leftIn;
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <processData+0x154>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a3e      	ldr	r2, [pc, #248]	; (80010e4 <processData+0x158>)
 8000fea:	6013      	str	r3, [r2, #0]

	// OUTPUT LEFT
	leftOut = leftProcessed;
 8000fec:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <processData+0x158>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a3d      	ldr	r2, [pc, #244]	; (80010e8 <processData+0x15c>)
 8000ff2:	6013      	str	r3, [r2, #0]

	// CONVERTIR SALIDA DAC A SIGNED INT
	outBufPtr[n] = (int16_t) (FLOAT_TO_INT16(leftOut));
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <processData+0x15c>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80010dc <processData+0x150>
 8000ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	b219      	sxth	r1, r3
 800100c:	4b37      	ldr	r3, [pc, #220]	; (80010ec <processData+0x160>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	b28a      	uxth	r2, r1
 8001018:	801a      	strh	r2, [r3, #0]
	outBufPtr[n+1] = 0;//(int16_t) (FLOAT_TO_INT16(leftOut));
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <processData+0x160>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	3301      	adds	r3, #1
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
	// RIGHT

	//  CONVERTIR ENTRADA ADC A FLOAT
	rightIn = INT16_TO_FLOAT(inBufPtr[n+2]);
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <processData+0x14c>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	3302      	adds	r3, #2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001042:	eddf 6a26 	vldr	s13, [pc, #152]	; 80010dc <processData+0x150>
 8001046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <processData+0x164>)
 800104c:	edc3 7a00 	vstr	s15, [r3]
	if (rightIn > 1.0f) {
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <processData+0x164>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800105a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	dd09      	ble.n	8001078 <processData+0xec>
	  rightIn -= 2.0f;
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <processData+0x164>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800106e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <processData+0x164>)
 8001074:	edc3 7a00 	vstr	s15, [r3]
	}

	// OUTPUT RIGHT
	rightOut = rightIn;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <processData+0x164>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <processData+0x168>)
 800107e:	6013      	str	r3, [r2, #0]

	// CONVERTIR SALIDA DAC A SIGNED INT
	outBufPtr[n+2] = (int16_t) (FLOAT_TO_INT16(rightOut));
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <processData+0x168>)
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80010dc <processData+0x150>
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	ee17 3a90 	vmov	r3, s15
 8001096:	b219      	sxth	r1, r3
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <processData+0x160>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3302      	adds	r3, #2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	b28a      	uxth	r2, r1
 80010a6:	801a      	strh	r2, [r3, #0]
	outBufPtr[n+3] = 0;
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <processData+0x160>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3303      	adds	r3, #3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	2200      	movs	r2, #0
 80010b6:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 0; n < (BUFFER_SIZE) - 1; n+=4) {
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	3304      	adds	r3, #4
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b7e      	cmp	r3, #126	; 0x7e
 80010c2:	f67f af69 	bls.w	8000f98 <processData+0xc>
  }

	dataReadyFlag = 0;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <processData+0x16c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	240004c8 	.word	0x240004c8
 80010dc:	46fffe00 	.word	0x46fffe00
 80010e0:	24000504 	.word	0x24000504
 80010e4:	24000508 	.word	0x24000508
 80010e8:	2400050c 	.word	0x2400050c
 80010ec:	24000008 	.word	0x24000008
 80010f0:	24000510 	.word	0x24000510
 80010f4:	24000514 	.word	0x24000514
 80010f8:	240004cc 	.word	0x240004cc

080010fc <setFilterTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_setFilterTask */
void setFilterTask(void const * argument)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//IFX_PeakingFilter_SetParameters(&filt1, 1000.0f, hz, 0.0f);

    osDelay(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f008 fbd4 	bl	80098b2 <osDelay>
 800110a:	e7fb      	b.n	8001104 <setFilterTask+0x8>

0800110c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800111e:	f000 fc0b 	bl	8001938 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001122:	2301      	movs	r3, #1
 8001124:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001126:	2300      	movs	r3, #0
 8001128:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30010000;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MPU_Config+0x58>)
 800112c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800112e:	230f      	movs	r3, #15
 8001130:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001132:	2300      	movs	r3, #0
 8001134:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001136:	2300      	movs	r3, #0
 8001138:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800113a:	2303      	movs	r3, #3
 800113c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800113e:	2301      	movs	r3, #1
 8001140:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800114e:	463b      	mov	r3, r7
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fc29 	bl	80019a8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001156:	2004      	movs	r0, #4
 8001158:	f000 fc06 	bl	8001968 <HAL_MPU_Enable>

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	30010000 	.word	0x30010000

08001168 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800117a:	f000 fad1 	bl	8001720 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010000 	.word	0x40010000

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x8>
	...

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_MspInit+0x38>)
 80011a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_MspInit+0x38>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_MspInit+0x38>)
 80011b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	210f      	movs	r1, #15
 80011c0:	f06f 0001 	mvn.w	r0, #1
 80011c4:	f000 fb90 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	58024400 	.word	0x58024400

080011d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0bc      	sub	sp, #240	; 0xf0
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	22c0      	movs	r2, #192	; 0xc0
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f009 fd79 	bl	800acec <memset>
  if(hi2s->Instance==SPI3)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a72      	ldr	r2, [pc, #456]	; (80013c8 <HAL_I2S_MspInit+0x1f4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	f040 80dd 	bne.w	80013c0 <HAL_I2S_MspInit+0x1ec>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 8001212:	2310      	movs	r3, #16
 8001214:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 800121a:	2308      	movs	r3, #8
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 800121e:	2308      	movs	r3, #8
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001226:	2300      	movs	r3, #0
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800122a:	2300      	movs	r3, #0
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	4618      	mov	r0, r3
 800123e:	f004 f997 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8001248:	f7ff ffa0 	bl	800118c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800124c:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 800124e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001252:	4a5e      	ldr	r2, [pc, #376]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 8001254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001258:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800125c:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 800125e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a56      	ldr	r2, [pc, #344]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_I2S_MspInit+0x1f8>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_SDI
    PC12     ------> I2S3_SDO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012a6:	2310      	movs	r3, #16
 80012a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012be:	2306      	movs	r3, #6
 80012c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012c8:	4619      	mov	r1, r3
 80012ca:	4841      	ldr	r0, [pc, #260]	; (80013d0 <HAL_I2S_MspInit+0x1fc>)
 80012cc:	f002 fc84 	bl	8003bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012d0:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 80012d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ea:	2306      	movs	r3, #6
 80012ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012f4:	4619      	mov	r1, r3
 80012f6:	4837      	ldr	r0, [pc, #220]	; (80013d4 <HAL_I2S_MspInit+0x200>)
 80012f8:	f002 fc6e 	bl	8003bd8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80012fc:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 80012fe:	4a37      	ldr	r2, [pc, #220]	; (80013dc <HAL_I2S_MspInit+0x208>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001302:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 8001304:	223d      	movs	r2, #61	; 0x3d
 8001306:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 8001316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 800131e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001322:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 800132e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001332:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 8001336:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800133a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 8001344:	f000 fb70 	bl	8001a28 <HAL_DMA_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2S_MspInit+0x17e>
    {
      Error_Handler();
 800134e:	f7ff ff1d 	bl	800118c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 8001356:	649a      	str	r2, [r3, #72]	; 0x48
 8001358:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_I2S_MspInit+0x204>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream1;
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 8001360:	4a20      	ldr	r2, [pc, #128]	; (80013e4 <HAL_I2S_MspInit+0x210>)
 8001362:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 8001366:	223e      	movs	r2, #62	; 0x3e
 8001368:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 800136c:	2240      	movs	r2, #64	; 0x40
 800136e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 8001378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 8001380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001384:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 8001388:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 8001390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001394:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 8001398:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800139c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 80013a6:	f000 fb3f 	bl	8001a28 <HAL_DMA_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_I2S_MspInit+0x1e0>
    {
      Error_Handler();
 80013b0:	f7ff feec 	bl	800118c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_I2S_MspInit+0x20c>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	37f0      	adds	r7, #240	; 0xf0
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40003c00 	.word	0x40003c00
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020000 	.word	0x58020000
 80013d4:	58020800 	.word	0x58020800
 80013d8:	24000340 	.word	0x24000340
 80013dc:	40020010 	.word	0x40020010
 80013e0:	240003b8 	.word	0x240003b8
 80013e4:	40020028 	.word	0x40020028

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ba      	sub	sp, #232	; 0xe8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	22c0      	movs	r2, #192	; 0xc0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f009 fc6f 	bl	800acec <memset>
  if(huart->Instance==USART3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <HAL_UART_MspInit+0xc8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d146      	bne.n	80014a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001418:	f04f 0202 	mov.w	r2, #2
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 8001424:	2304      	movs	r3, #4
 8001426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f004 f89e 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800143a:	f7ff fea7 	bl	800118c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_UART_MspInit+0xcc>)
 8001440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_UART_MspInit+0xcc>)
 8001446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_UART_MspInit+0xcc>)
 8001450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_UART_MspInit+0xcc>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <HAL_UART_MspInit+0xcc>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_UART_MspInit+0xcc>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800147a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001494:	2307      	movs	r3, #7
 8001496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <HAL_UART_MspInit+0xd0>)
 80014a2:	f002 fb99 	bl	8003bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	37e8      	adds	r7, #232	; 0xe8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40004800 	.word	0x40004800
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58020c00 	.word	0x58020c00

080014bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	d844      	bhi.n	8001554 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80014ca:	2200      	movs	r2, #0
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	2019      	movs	r0, #25
 80014d0:	f000 fa0a 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80014d4:	2019      	movs	r0, #25
 80014d6:	f000 fa21 	bl	800191c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014da:	4a24      	ldr	r2, [pc, #144]	; (800156c <HAL_InitTick+0xb0>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_InitTick+0xb4>)
 80014e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014e6:	4a22      	ldr	r2, [pc, #136]	; (8001570 <HAL_InitTick+0xb4>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_InitTick+0xb4>)
 80014f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f003 ffef 	bl	80054ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800150e:	f003 ffd7 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8001512:	4603      	mov	r3, r0
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <HAL_InitTick+0xb8>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	3b01      	subs	r3, #1
 8001524:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0xbc>)
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_InitTick+0xc0>)
 800152a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0xbc>)
 800152e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001532:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_InitTick+0xbc>)
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_InitTick+0xbc>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_InitTick+0xbc>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_InitTick+0xbc>)
 8001548:	f006 fd10 	bl	8007f6c <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <HAL_InitTick+0xa6>
 8001552:	e001      	b.n	8001558 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e005      	b.n	8001564 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <HAL_InitTick+0xbc>)
 800155a:	f006 fd69 	bl	8008030 <HAL_TIM_Base_Start_IT>
 800155e:	4603      	mov	r3, r0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2400000c 	.word	0x2400000c
 8001570:	58024400 	.word	0x58024400
 8001574:	431bde83 	.word	0x431bde83
 8001578:	24000518 	.word	0x24000518
 800157c:	40010000 	.word	0x40010000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA1_Stream0_IRQHandler+0x10>)
 80015b2:	f000 ffff 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	24000340 	.word	0x24000340

080015c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA1_Stream1_IRQHandler+0x10>)
 80015c6:	f000 fff5 	bl	80025b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	240003b8 	.word	0x240003b8

080015d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <TIM1_UP_IRQHandler+0x10>)
 80015da:	f006 fda1 	bl	8008120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000518 	.word	0x24000518

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f009 fb30 	bl	800ac7c <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	24080000 	.word	0x24080000
 8001648:	00000400 	.word	0x00000400
 800164c:	24000564 	.word	0x24000564
 8001650:	240042d0 	.word	0x240042d0

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001658:	f7ff f81c 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	; (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	; (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f009 fb01 	bl	800ac88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff f9ad 	bl	80009e4 <main>
  bx  lr
 800168a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001690:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001694:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001698:	0800c5b4 	.word	0x0800c5b4
  ldr r2, =_sbss
 800169c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80016a0:	240042d0 	.word	0x240042d0

080016a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC3_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f000 f90f 	bl	80018d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b4:	f003 fd44 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_Init+0x68>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	4913      	ldr	r1, [pc, #76]	; (8001714 <HAL_Init+0x6c>)
 80016c6:	5ccb      	ldrb	r3, [r1, r3]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_Init+0x68>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_Init+0x6c>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_Init+0x70>)
 80016ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_Init+0x74>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f2:	200f      	movs	r0, #15
 80016f4:	f7ff fee2 	bl	80014bc <HAL_InitTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e002      	b.n	8001708 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001702:	f7ff fd49 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	58024400 	.word	0x58024400
 8001714:	0800c160 	.word	0x0800c160
 8001718:	24000004 	.word	0x24000004
 800171c:	24000000 	.word	0x24000000

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	24000010 	.word	0x24000010
 8001744:	24000568 	.word	0x24000568

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	24000568 	.word	0x24000568

08001760 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetREVID+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0c1b      	lsrs	r3, r3, #16
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	5c001000 	.word	0x5c001000

08001778 <__NVIC_SetPriorityGrouping>:
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <__NVIC_SetPriorityGrouping+0x40>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x40>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	05fa0000 	.word	0x05fa0000

080017c0 <__NVIC_GetPriorityGrouping>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff4c 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018f6:	f7ff ff63 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 80018fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	6978      	ldr	r0, [r7, #20]
 8001902:	f7ff ffb3 	bl	800186c <NVIC_EncodePriority>
 8001906:	4602      	mov	r2, r0
 8001908:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff82 	bl	8001818 <__NVIC_SetPriority>
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff56 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800193c:	f3bf 8f5f 	dmb	sy
}
 8001940:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_MPU_Disable+0x28>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	4a06      	ldr	r2, [pc, #24]	; (8001960 <HAL_MPU_Disable+0x28>)
 8001948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_MPU_Disable+0x2c>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00
 8001964:	e000ed90 	.word	0xe000ed90

08001968 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_MPU_Enable+0x38>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_MPU_Enable+0x3c>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_MPU_Enable+0x3c>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001986:	f3bf 8f4f 	dsb	sy
}
 800198a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800198c:	f3bf 8f6f 	isb	sy
}
 8001990:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed90 	.word	0xe000ed90
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	785a      	ldrb	r2, [r3, #1]
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_MPU_ConfigRegion+0x7c>)
 80019b6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_MPU_ConfigRegion+0x7c>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_MPU_ConfigRegion+0x7c>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_MPU_ConfigRegion+0x7c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7b1b      	ldrb	r3, [r3, #12]
 80019d0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7adb      	ldrb	r3, [r3, #11]
 80019d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7a9b      	ldrb	r3, [r3, #10]
 80019de:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7b5b      	ldrb	r3, [r3, #13]
 80019e6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7b9b      	ldrb	r3, [r3, #14]
 80019ee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7bdb      	ldrb	r3, [r3, #15]
 80019f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7a5b      	ldrb	r3, [r3, #9]
 80019fe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7a1b      	ldrb	r3, [r3, #8]
 8001a06:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a08:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a12:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a14:	6113      	str	r3, [r2, #16]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed90 	.word	0xe000ed90

08001a28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff fe8a 	bl	8001748 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e316      	b.n	800206e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a66      	ldr	r2, [pc, #408]	; (8001be0 <HAL_DMA_Init+0x1b8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d04a      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_DMA_Init+0x1bc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d045      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a63      	ldr	r2, [pc, #396]	; (8001be8 <HAL_DMA_Init+0x1c0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d040      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a62      	ldr	r2, [pc, #392]	; (8001bec <HAL_DMA_Init+0x1c4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d03b      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a60      	ldr	r2, [pc, #384]	; (8001bf0 <HAL_DMA_Init+0x1c8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d036      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a5f      	ldr	r2, [pc, #380]	; (8001bf4 <HAL_DMA_Init+0x1cc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d031      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a5d      	ldr	r2, [pc, #372]	; (8001bf8 <HAL_DMA_Init+0x1d0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d02c      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5c      	ldr	r2, [pc, #368]	; (8001bfc <HAL_DMA_Init+0x1d4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d027      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_DMA_Init+0x1d8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d022      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a59      	ldr	r2, [pc, #356]	; (8001c04 <HAL_DMA_Init+0x1dc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d01d      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_DMA_Init+0x1e0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d018      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a56      	ldr	r2, [pc, #344]	; (8001c0c <HAL_DMA_Init+0x1e4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d013      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a54      	ldr	r2, [pc, #336]	; (8001c10 <HAL_DMA_Init+0x1e8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00e      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a53      	ldr	r2, [pc, #332]	; (8001c14 <HAL_DMA_Init+0x1ec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d009      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a51      	ldr	r2, [pc, #324]	; (8001c18 <HAL_DMA_Init+0x1f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d004      	beq.n	8001ae0 <HAL_DMA_Init+0xb8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a50      	ldr	r2, [pc, #320]	; (8001c1c <HAL_DMA_Init+0x1f4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_DMA_Init+0xbc>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_DMA_Init+0xbe>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 813b 	beq.w	8001d62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a37      	ldr	r2, [pc, #220]	; (8001be0 <HAL_DMA_Init+0x1b8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d04a      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <HAL_DMA_Init+0x1bc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d045      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <HAL_DMA_Init+0x1c0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d040      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a33      	ldr	r2, [pc, #204]	; (8001bec <HAL_DMA_Init+0x1c4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d03b      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <HAL_DMA_Init+0x1c8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d036      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <HAL_DMA_Init+0x1cc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d031      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <HAL_DMA_Init+0x1d0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02c      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <HAL_DMA_Init+0x1d4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d027      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <HAL_DMA_Init+0x1d8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d022      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <HAL_DMA_Init+0x1dc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d01d      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <HAL_DMA_Init+0x1e0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d018      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a27      	ldr	r2, [pc, #156]	; (8001c0c <HAL_DMA_Init+0x1e4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a25      	ldr	r2, [pc, #148]	; (8001c10 <HAL_DMA_Init+0x1e8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <HAL_DMA_Init+0x1ec>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <HAL_DMA_Init+0x1f0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_DMA_Init+0x174>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <HAL_DMA_Init+0x1f4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <HAL_DMA_Init+0x186>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e007      	b.n	8001bbe <HAL_DMA_Init+0x196>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bbe:	e02f      	b.n	8001c20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc0:	f7ff fdc2 	bl	8001748 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d928      	bls.n	8001c20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e246      	b.n	800206e <HAL_DMA_Init+0x646>
 8001be0:	40020010 	.word	0x40020010
 8001be4:	40020028 	.word	0x40020028
 8001be8:	40020040 	.word	0x40020040
 8001bec:	40020058 	.word	0x40020058
 8001bf0:	40020070 	.word	0x40020070
 8001bf4:	40020088 	.word	0x40020088
 8001bf8:	400200a0 	.word	0x400200a0
 8001bfc:	400200b8 	.word	0x400200b8
 8001c00:	40020410 	.word	0x40020410
 8001c04:	40020428 	.word	0x40020428
 8001c08:	40020440 	.word	0x40020440
 8001c0c:	40020458 	.word	0x40020458
 8001c10:	40020470 	.word	0x40020470
 8001c14:	40020488 	.word	0x40020488
 8001c18:	400204a0 	.word	0x400204a0
 8001c1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1c8      	bne.n	8001bc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4b83      	ldr	r3, [pc, #524]	; (8001e48 <HAL_DMA_Init+0x420>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d107      	bne.n	8001c84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c84:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <HAL_DMA_Init+0x424>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <HAL_DMA_Init+0x428>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c90:	d328      	bcc.n	8001ce4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b28      	cmp	r3, #40	; 0x28
 8001c98:	d903      	bls.n	8001ca2 <HAL_DMA_Init+0x27a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8001ca0:	d917      	bls.n	8001cd2 <HAL_DMA_Init+0x2aa>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8001ca8:	d903      	bls.n	8001cb2 <HAL_DMA_Init+0x28a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b42      	cmp	r3, #66	; 0x42
 8001cb0:	d90f      	bls.n	8001cd2 <HAL_DMA_Init+0x2aa>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b46      	cmp	r3, #70	; 0x46
 8001cb8:	d903      	bls.n	8001cc2 <HAL_DMA_Init+0x29a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b48      	cmp	r3, #72	; 0x48
 8001cc0:	d907      	bls.n	8001cd2 <HAL_DMA_Init+0x2aa>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b4e      	cmp	r3, #78	; 0x4e
 8001cc8:	d905      	bls.n	8001cd6 <HAL_DMA_Init+0x2ae>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b52      	cmp	r3, #82	; 0x52
 8001cd0:	d801      	bhi.n	8001cd6 <HAL_DMA_Init+0x2ae>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_DMA_Init+0x2b0>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ce2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f023 0307 	bic.w	r3, r3, #7
 8001cfa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d117      	bne.n	8001d3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00e      	beq.n	8001d3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f001 fdcf 	bl	80038c4 <DMA_CheckFifoParam>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e197      	b.n	800206e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f001 fd0a 	bl	8003760 <DMA_CalcBaseAndBitshift>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	223f      	movs	r2, #63	; 0x3f
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	e0cd      	b.n	8001efe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a3b      	ldr	r2, [pc, #236]	; (8001e54 <HAL_DMA_Init+0x42c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d022      	beq.n	8001db2 <HAL_DMA_Init+0x38a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a39      	ldr	r2, [pc, #228]	; (8001e58 <HAL_DMA_Init+0x430>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01d      	beq.n	8001db2 <HAL_DMA_Init+0x38a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a38      	ldr	r2, [pc, #224]	; (8001e5c <HAL_DMA_Init+0x434>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d018      	beq.n	8001db2 <HAL_DMA_Init+0x38a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <HAL_DMA_Init+0x438>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_DMA_Init+0x38a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a35      	ldr	r2, [pc, #212]	; (8001e64 <HAL_DMA_Init+0x43c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00e      	beq.n	8001db2 <HAL_DMA_Init+0x38a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a33      	ldr	r2, [pc, #204]	; (8001e68 <HAL_DMA_Init+0x440>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_DMA_Init+0x38a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a32      	ldr	r2, [pc, #200]	; (8001e6c <HAL_DMA_Init+0x444>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_Init+0x38a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a30      	ldr	r2, [pc, #192]	; (8001e70 <HAL_DMA_Init+0x448>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_DMA_Init+0x38e>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_DMA_Init+0x390>
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8097 	beq.w	8001eec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <HAL_DMA_Init+0x42c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d021      	beq.n	8001e0c <HAL_DMA_Init+0x3e4>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HAL_DMA_Init+0x430>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01c      	beq.n	8001e0c <HAL_DMA_Init+0x3e4>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <HAL_DMA_Init+0x434>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d017      	beq.n	8001e0c <HAL_DMA_Init+0x3e4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <HAL_DMA_Init+0x438>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d012      	beq.n	8001e0c <HAL_DMA_Init+0x3e4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <HAL_DMA_Init+0x43c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00d      	beq.n	8001e0c <HAL_DMA_Init+0x3e4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <HAL_DMA_Init+0x440>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d008      	beq.n	8001e0c <HAL_DMA_Init+0x3e4>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_DMA_Init+0x444>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_Init+0x3e4>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_DMA_Init+0x448>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_DMA_Init+0x44c>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b40      	cmp	r3, #64	; 0x40
 8001e34:	d020      	beq.n	8001e78 <HAL_DMA_Init+0x450>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b80      	cmp	r3, #128	; 0x80
 8001e3c:	d102      	bne.n	8001e44 <HAL_DMA_Init+0x41c>
 8001e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e42:	e01a      	b.n	8001e7a <HAL_DMA_Init+0x452>
 8001e44:	2300      	movs	r3, #0
 8001e46:	e018      	b.n	8001e7a <HAL_DMA_Init+0x452>
 8001e48:	fe10803f 	.word	0xfe10803f
 8001e4c:	5c001000 	.word	0x5c001000
 8001e50:	ffff0000 	.word	0xffff0000
 8001e54:	58025408 	.word	0x58025408
 8001e58:	5802541c 	.word	0x5802541c
 8001e5c:	58025430 	.word	0x58025430
 8001e60:	58025444 	.word	0x58025444
 8001e64:	58025458 	.word	0x58025458
 8001e68:	5802546c 	.word	0x5802546c
 8001e6c:	58025480 	.word	0x58025480
 8001e70:	58025494 	.word	0x58025494
 8001e74:	fffe000f 	.word	0xfffe000f
 8001e78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68d2      	ldr	r2, [r2, #12]
 8001e7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ea8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b6e      	ldr	r3, [pc, #440]	; (8002078 <HAL_DMA_Init+0x650>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_DMA_Init+0x654>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	009a      	lsls	r2, r3, #2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f001 fc45 	bl	8003760 <DMA_CalcBaseAndBitshift>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	e008      	b.n	8001efe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0b7      	b.n	800206e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5f      	ldr	r2, [pc, #380]	; (8002080 <HAL_DMA_Init+0x658>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d072      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5d      	ldr	r2, [pc, #372]	; (8002084 <HAL_DMA_Init+0x65c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d06d      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <HAL_DMA_Init+0x660>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d068      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5a      	ldr	r2, [pc, #360]	; (800208c <HAL_DMA_Init+0x664>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d063      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a59      	ldr	r2, [pc, #356]	; (8002090 <HAL_DMA_Init+0x668>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d05e      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a57      	ldr	r2, [pc, #348]	; (8002094 <HAL_DMA_Init+0x66c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d059      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a56      	ldr	r2, [pc, #344]	; (8002098 <HAL_DMA_Init+0x670>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d054      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a54      	ldr	r2, [pc, #336]	; (800209c <HAL_DMA_Init+0x674>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d04f      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a53      	ldr	r2, [pc, #332]	; (80020a0 <HAL_DMA_Init+0x678>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04a      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a51      	ldr	r2, [pc, #324]	; (80020a4 <HAL_DMA_Init+0x67c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d045      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a50      	ldr	r2, [pc, #320]	; (80020a8 <HAL_DMA_Init+0x680>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d040      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4e      	ldr	r2, [pc, #312]	; (80020ac <HAL_DMA_Init+0x684>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d03b      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a4d      	ldr	r2, [pc, #308]	; (80020b0 <HAL_DMA_Init+0x688>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d036      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a4b      	ldr	r2, [pc, #300]	; (80020b4 <HAL_DMA_Init+0x68c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a4a      	ldr	r2, [pc, #296]	; (80020b8 <HAL_DMA_Init+0x690>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d02c      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a48      	ldr	r2, [pc, #288]	; (80020bc <HAL_DMA_Init+0x694>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d027      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a47      	ldr	r2, [pc, #284]	; (80020c0 <HAL_DMA_Init+0x698>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a45      	ldr	r2, [pc, #276]	; (80020c4 <HAL_DMA_Init+0x69c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a44      	ldr	r2, [pc, #272]	; (80020c8 <HAL_DMA_Init+0x6a0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	; (80020cc <HAL_DMA_Init+0x6a4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <HAL_DMA_Init+0x6a8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3f      	ldr	r2, [pc, #252]	; (80020d4 <HAL_DMA_Init+0x6ac>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <HAL_DMA_Init+0x6b0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Init+0x5c6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a3c      	ldr	r2, [pc, #240]	; (80020dc <HAL_DMA_Init+0x6b4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_DMA_Init+0x5ca>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_DMA_Init+0x5cc>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d032      	beq.n	800205e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f001 fcdf 	bl	80039bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	d102      	bne.n	800200c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002020:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <HAL_DMA_Init+0x624>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b08      	cmp	r3, #8
 8002030:	d80c      	bhi.n	800204c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f001 fd5c 	bl	8003af0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	e008      	b.n	800205e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	a7fdabf8 	.word	0xa7fdabf8
 800207c:	cccccccd 	.word	0xcccccccd
 8002080:	40020010 	.word	0x40020010
 8002084:	40020028 	.word	0x40020028
 8002088:	40020040 	.word	0x40020040
 800208c:	40020058 	.word	0x40020058
 8002090:	40020070 	.word	0x40020070
 8002094:	40020088 	.word	0x40020088
 8002098:	400200a0 	.word	0x400200a0
 800209c:	400200b8 	.word	0x400200b8
 80020a0:	40020410 	.word	0x40020410
 80020a4:	40020428 	.word	0x40020428
 80020a8:	40020440 	.word	0x40020440
 80020ac:	40020458 	.word	0x40020458
 80020b0:	40020470 	.word	0x40020470
 80020b4:	40020488 	.word	0x40020488
 80020b8:	400204a0 	.word	0x400204a0
 80020bc:	400204b8 	.word	0x400204b8
 80020c0:	58025408 	.word	0x58025408
 80020c4:	5802541c 	.word	0x5802541c
 80020c8:	58025430 	.word	0x58025430
 80020cc:	58025444 	.word	0x58025444
 80020d0:	58025458 	.word	0x58025458
 80020d4:	5802546c 	.word	0x5802546c
 80020d8:	58025480 	.word	0x58025480
 80020dc:	58025494 	.word	0x58025494

080020e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e226      	b.n	800254a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_DMA_Start_IT+0x2a>
 8002106:	2302      	movs	r3, #2
 8002108:	e21f      	b.n	800254a <HAL_DMA_Start_IT+0x46a>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	f040 820a 	bne.w	8002534 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a68      	ldr	r2, [pc, #416]	; (80022d4 <HAL_DMA_Start_IT+0x1f4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d04a      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <HAL_DMA_Start_IT+0x1f8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d045      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_DMA_Start_IT+0x1fc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d040      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_DMA_Start_IT+0x200>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d03b      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <HAL_DMA_Start_IT+0x204>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d036      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a60      	ldr	r2, [pc, #384]	; (80022e8 <HAL_DMA_Start_IT+0x208>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d031      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_DMA_Start_IT+0x20c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d02c      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <HAL_DMA_Start_IT+0x210>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d027      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5c      	ldr	r2, [pc, #368]	; (80022f4 <HAL_DMA_Start_IT+0x214>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d022      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <HAL_DMA_Start_IT+0x218>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01d      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a59      	ldr	r2, [pc, #356]	; (80022fc <HAL_DMA_Start_IT+0x21c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d018      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a57      	ldr	r2, [pc, #348]	; (8002300 <HAL_DMA_Start_IT+0x220>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_DMA_Start_IT+0x224>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00e      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_DMA_Start_IT+0x228>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a53      	ldr	r2, [pc, #332]	; (800230c <HAL_DMA_Start_IT+0x22c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d004      	beq.n	80021ce <HAL_DMA_Start_IT+0xee>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a51      	ldr	r2, [pc, #324]	; (8002310 <HAL_DMA_Start_IT+0x230>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d108      	bne.n	80021e0 <HAL_DMA_Start_IT+0x100>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e007      	b.n	80021f0 <HAL_DMA_Start_IT+0x110>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f001 f906 	bl	8003408 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a34      	ldr	r2, [pc, #208]	; (80022d4 <HAL_DMA_Start_IT+0x1f4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d04a      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_DMA_Start_IT+0x1f8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d045      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a31      	ldr	r2, [pc, #196]	; (80022dc <HAL_DMA_Start_IT+0x1fc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d040      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a30      	ldr	r2, [pc, #192]	; (80022e0 <HAL_DMA_Start_IT+0x200>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d03b      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2e      	ldr	r2, [pc, #184]	; (80022e4 <HAL_DMA_Start_IT+0x204>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d036      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_DMA_Start_IT+0x208>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d031      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <HAL_DMA_Start_IT+0x20c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02c      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <HAL_DMA_Start_IT+0x210>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d027      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <HAL_DMA_Start_IT+0x214>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d022      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <HAL_DMA_Start_IT+0x218>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d01d      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <HAL_DMA_Start_IT+0x21c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d018      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a24      	ldr	r2, [pc, #144]	; (8002300 <HAL_DMA_Start_IT+0x220>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_DMA_Start_IT+0x224>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00e      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_DMA_Start_IT+0x228>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_DMA_Start_IT+0x22c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_DMA_Start_IT+0x1bc>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_DMA_Start_IT+0x230>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Start_IT+0x1c0>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_DMA_Start_IT+0x1c2>
 80022a0:	2300      	movs	r3, #0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d036      	beq.n	8002314 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 021e 	bic.w	r2, r3, #30
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0216 	orr.w	r2, r2, #22
 80022b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d03e      	beq.n	8002340 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0208 	orr.w	r2, r2, #8
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e035      	b.n	8002340 <HAL_DMA_Start_IT+0x260>
 80022d4:	40020010 	.word	0x40020010
 80022d8:	40020028 	.word	0x40020028
 80022dc:	40020040 	.word	0x40020040
 80022e0:	40020058 	.word	0x40020058
 80022e4:	40020070 	.word	0x40020070
 80022e8:	40020088 	.word	0x40020088
 80022ec:	400200a0 	.word	0x400200a0
 80022f0:	400200b8 	.word	0x400200b8
 80022f4:	40020410 	.word	0x40020410
 80022f8:	40020428 	.word	0x40020428
 80022fc:	40020440 	.word	0x40020440
 8002300:	40020458 	.word	0x40020458
 8002304:	40020470 	.word	0x40020470
 8002308:	40020488 	.word	0x40020488
 800230c:	400204a0 	.word	0x400204a0
 8002310:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 020e 	bic.w	r2, r3, #14
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 020a 	orr.w	r2, r2, #10
 8002326:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0204 	orr.w	r2, r2, #4
 800233e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a83      	ldr	r2, [pc, #524]	; (8002554 <HAL_DMA_Start_IT+0x474>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d072      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a82      	ldr	r2, [pc, #520]	; (8002558 <HAL_DMA_Start_IT+0x478>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d06d      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a80      	ldr	r2, [pc, #512]	; (800255c <HAL_DMA_Start_IT+0x47c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d068      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7f      	ldr	r2, [pc, #508]	; (8002560 <HAL_DMA_Start_IT+0x480>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d063      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7d      	ldr	r2, [pc, #500]	; (8002564 <HAL_DMA_Start_IT+0x484>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d05e      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7c      	ldr	r2, [pc, #496]	; (8002568 <HAL_DMA_Start_IT+0x488>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d059      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a7a      	ldr	r2, [pc, #488]	; (800256c <HAL_DMA_Start_IT+0x48c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d054      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a79      	ldr	r2, [pc, #484]	; (8002570 <HAL_DMA_Start_IT+0x490>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d04f      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a77      	ldr	r2, [pc, #476]	; (8002574 <HAL_DMA_Start_IT+0x494>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d04a      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a76      	ldr	r2, [pc, #472]	; (8002578 <HAL_DMA_Start_IT+0x498>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d045      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a74      	ldr	r2, [pc, #464]	; (800257c <HAL_DMA_Start_IT+0x49c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d040      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a73      	ldr	r2, [pc, #460]	; (8002580 <HAL_DMA_Start_IT+0x4a0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d03b      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a71      	ldr	r2, [pc, #452]	; (8002584 <HAL_DMA_Start_IT+0x4a4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d036      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a70      	ldr	r2, [pc, #448]	; (8002588 <HAL_DMA_Start_IT+0x4a8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d031      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6e      	ldr	r2, [pc, #440]	; (800258c <HAL_DMA_Start_IT+0x4ac>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02c      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6d      	ldr	r2, [pc, #436]	; (8002590 <HAL_DMA_Start_IT+0x4b0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d027      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a6b      	ldr	r2, [pc, #428]	; (8002594 <HAL_DMA_Start_IT+0x4b4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d022      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6a      	ldr	r2, [pc, #424]	; (8002598 <HAL_DMA_Start_IT+0x4b8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01d      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a68      	ldr	r2, [pc, #416]	; (800259c <HAL_DMA_Start_IT+0x4bc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d018      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a67      	ldr	r2, [pc, #412]	; (80025a0 <HAL_DMA_Start_IT+0x4c0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_DMA_Start_IT+0x4c4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00e      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a64      	ldr	r2, [pc, #400]	; (80025a8 <HAL_DMA_Start_IT+0x4c8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a62      	ldr	r2, [pc, #392]	; (80025ac <HAL_DMA_Start_IT+0x4cc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_DMA_Start_IT+0x350>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a61      	ldr	r2, [pc, #388]	; (80025b0 <HAL_DMA_Start_IT+0x4d0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Start_IT+0x354>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_DMA_Start_IT+0x356>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01a      	beq.n	8002470 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002456:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a37      	ldr	r2, [pc, #220]	; (8002554 <HAL_DMA_Start_IT+0x474>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d04a      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a36      	ldr	r2, [pc, #216]	; (8002558 <HAL_DMA_Start_IT+0x478>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d045      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_DMA_Start_IT+0x47c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d040      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a33      	ldr	r2, [pc, #204]	; (8002560 <HAL_DMA_Start_IT+0x480>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d03b      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a31      	ldr	r2, [pc, #196]	; (8002564 <HAL_DMA_Start_IT+0x484>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d036      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a30      	ldr	r2, [pc, #192]	; (8002568 <HAL_DMA_Start_IT+0x488>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d031      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a2e      	ldr	r2, [pc, #184]	; (800256c <HAL_DMA_Start_IT+0x48c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02c      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a2d      	ldr	r2, [pc, #180]	; (8002570 <HAL_DMA_Start_IT+0x490>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d027      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <HAL_DMA_Start_IT+0x494>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d022      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <HAL_DMA_Start_IT+0x498>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d01d      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a28      	ldr	r2, [pc, #160]	; (800257c <HAL_DMA_Start_IT+0x49c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d018      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a27      	ldr	r2, [pc, #156]	; (8002580 <HAL_DMA_Start_IT+0x4a0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d013      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a25      	ldr	r2, [pc, #148]	; (8002584 <HAL_DMA_Start_IT+0x4a4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00e      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a24      	ldr	r2, [pc, #144]	; (8002588 <HAL_DMA_Start_IT+0x4a8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d009      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <HAL_DMA_Start_IT+0x4ac>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_DMA_Start_IT+0x430>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a21      	ldr	r2, [pc, #132]	; (8002590 <HAL_DMA_Start_IT+0x4b0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d108      	bne.n	8002522 <HAL_DMA_Start_IT+0x442>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e012      	b.n	8002548 <HAL_DMA_Start_IT+0x468>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e009      	b.n	8002548 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800253a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002548:	7dfb      	ldrb	r3, [r7, #23]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40020010 	.word	0x40020010
 8002558:	40020028 	.word	0x40020028
 800255c:	40020040 	.word	0x40020040
 8002560:	40020058 	.word	0x40020058
 8002564:	40020070 	.word	0x40020070
 8002568:	40020088 	.word	0x40020088
 800256c:	400200a0 	.word	0x400200a0
 8002570:	400200b8 	.word	0x400200b8
 8002574:	40020410 	.word	0x40020410
 8002578:	40020428 	.word	0x40020428
 800257c:	40020440 	.word	0x40020440
 8002580:	40020458 	.word	0x40020458
 8002584:	40020470 	.word	0x40020470
 8002588:	40020488 	.word	0x40020488
 800258c:	400204a0 	.word	0x400204a0
 8002590:	400204b8 	.word	0x400204b8
 8002594:	58025408 	.word	0x58025408
 8002598:	5802541c 	.word	0x5802541c
 800259c:	58025430 	.word	0x58025430
 80025a0:	58025444 	.word	0x58025444
 80025a4:	58025458 	.word	0x58025458
 80025a8:	5802546c 	.word	0x5802546c
 80025ac:	58025480 	.word	0x58025480
 80025b0:	58025494 	.word	0x58025494

080025b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025c0:	4b67      	ldr	r3, [pc, #412]	; (8002760 <HAL_DMA_IRQHandler+0x1ac>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a67      	ldr	r2, [pc, #412]	; (8002764 <HAL_DMA_IRQHandler+0x1b0>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a9b      	lsrs	r3, r3, #10
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5f      	ldr	r2, [pc, #380]	; (8002768 <HAL_DMA_IRQHandler+0x1b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04a      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5d      	ldr	r2, [pc, #372]	; (800276c <HAL_DMA_IRQHandler+0x1b8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d045      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5c      	ldr	r2, [pc, #368]	; (8002770 <HAL_DMA_IRQHandler+0x1bc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d040      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5a      	ldr	r2, [pc, #360]	; (8002774 <HAL_DMA_IRQHandler+0x1c0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d03b      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a59      	ldr	r2, [pc, #356]	; (8002778 <HAL_DMA_IRQHandler+0x1c4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d036      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a57      	ldr	r2, [pc, #348]	; (800277c <HAL_DMA_IRQHandler+0x1c8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d031      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a56      	ldr	r2, [pc, #344]	; (8002780 <HAL_DMA_IRQHandler+0x1cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d02c      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a54      	ldr	r2, [pc, #336]	; (8002784 <HAL_DMA_IRQHandler+0x1d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d027      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a53      	ldr	r2, [pc, #332]	; (8002788 <HAL_DMA_IRQHandler+0x1d4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a51      	ldr	r2, [pc, #324]	; (800278c <HAL_DMA_IRQHandler+0x1d8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a50      	ldr	r2, [pc, #320]	; (8002790 <HAL_DMA_IRQHandler+0x1dc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_DMA_IRQHandler+0x1e0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <HAL_DMA_IRQHandler+0x1e4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a4b      	ldr	r2, [pc, #300]	; (800279c <HAL_DMA_IRQHandler+0x1e8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a4a      	ldr	r2, [pc, #296]	; (80027a0 <HAL_DMA_IRQHandler+0x1ec>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_IRQHandler+0xd2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_DMA_IRQHandler+0xd6>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_DMA_IRQHandler+0xd8>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 842b 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2208      	movs	r2, #8
 800269c:	409a      	lsls	r2, r3
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80a2 	beq.w	80027ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <HAL_DMA_IRQHandler+0x1b4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d04a      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2d      	ldr	r2, [pc, #180]	; (800276c <HAL_DMA_IRQHandler+0x1b8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d045      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <HAL_DMA_IRQHandler+0x1bc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d040      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <HAL_DMA_IRQHandler+0x1c0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d03b      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a28      	ldr	r2, [pc, #160]	; (8002778 <HAL_DMA_IRQHandler+0x1c4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d036      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a27      	ldr	r2, [pc, #156]	; (800277c <HAL_DMA_IRQHandler+0x1c8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d031      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a25      	ldr	r2, [pc, #148]	; (8002780 <HAL_DMA_IRQHandler+0x1cc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02c      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_DMA_IRQHandler+0x1d0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d027      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_DMA_IRQHandler+0x1d4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d022      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a21      	ldr	r2, [pc, #132]	; (800278c <HAL_DMA_IRQHandler+0x1d8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d01d      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <HAL_DMA_IRQHandler+0x1dc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d018      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_DMA_IRQHandler+0x1e0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_DMA_IRQHandler+0x1e4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00e      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_DMA_IRQHandler+0x1e8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <HAL_DMA_IRQHandler+0x1ec>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_DMA_IRQHandler+0x194>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_DMA_IRQHandler+0x1f0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d12f      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x1f4>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf14      	ite	ne
 8002756:	2301      	movne	r3, #1
 8002758:	2300      	moveq	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	e02e      	b.n	80027bc <HAL_DMA_IRQHandler+0x208>
 800275e:	bf00      	nop
 8002760:	24000000 	.word	0x24000000
 8002764:	1b4e81b5 	.word	0x1b4e81b5
 8002768:	40020010 	.word	0x40020010
 800276c:	40020028 	.word	0x40020028
 8002770:	40020040 	.word	0x40020040
 8002774:	40020058 	.word	0x40020058
 8002778:	40020070 	.word	0x40020070
 800277c:	40020088 	.word	0x40020088
 8002780:	400200a0 	.word	0x400200a0
 8002784:	400200b8 	.word	0x400200b8
 8002788:	40020410 	.word	0x40020410
 800278c:	40020428 	.word	0x40020428
 8002790:	40020440 	.word	0x40020440
 8002794:	40020458 	.word	0x40020458
 8002798:	40020470 	.word	0x40020470
 800279c:	40020488 	.word	0x40020488
 80027a0:	400204a0 	.word	0x400204a0
 80027a4:	400204b8 	.word	0x400204b8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf14      	ite	ne
 80027b6:	2301      	movne	r3, #1
 80027b8:	2300      	moveq	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2208      	movs	r2, #8
 80027da:	409a      	lsls	r2, r3
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06e      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a69      	ldr	r2, [pc, #420]	; (80029ac <HAL_DMA_IRQHandler+0x3f8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d04a      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a67      	ldr	r2, [pc, #412]	; (80029b0 <HAL_DMA_IRQHandler+0x3fc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d045      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a66      	ldr	r2, [pc, #408]	; (80029b4 <HAL_DMA_IRQHandler+0x400>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d040      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a64      	ldr	r2, [pc, #400]	; (80029b8 <HAL_DMA_IRQHandler+0x404>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d03b      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a63      	ldr	r2, [pc, #396]	; (80029bc <HAL_DMA_IRQHandler+0x408>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d036      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a61      	ldr	r2, [pc, #388]	; (80029c0 <HAL_DMA_IRQHandler+0x40c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d031      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a60      	ldr	r2, [pc, #384]	; (80029c4 <HAL_DMA_IRQHandler+0x410>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d02c      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5e      	ldr	r2, [pc, #376]	; (80029c8 <HAL_DMA_IRQHandler+0x414>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d027      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <HAL_DMA_IRQHandler+0x418>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d022      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5b      	ldr	r2, [pc, #364]	; (80029d0 <HAL_DMA_IRQHandler+0x41c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01d      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a5a      	ldr	r2, [pc, #360]	; (80029d4 <HAL_DMA_IRQHandler+0x420>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d018      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_DMA_IRQHandler+0x424>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a57      	ldr	r2, [pc, #348]	; (80029dc <HAL_DMA_IRQHandler+0x428>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00e      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a55      	ldr	r2, [pc, #340]	; (80029e0 <HAL_DMA_IRQHandler+0x42c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d009      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a54      	ldr	r2, [pc, #336]	; (80029e4 <HAL_DMA_IRQHandler+0x430>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d004      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x2ee>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_DMA_IRQHandler+0x434>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10a      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x304>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e003      	b.n	80028c0 <HAL_DMA_IRQHandler+0x30c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2201      	movs	r2, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f043 0202 	orr.w	r2, r3, #2
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2204      	movs	r2, #4
 80028ea:	409a      	lsls	r2, r3
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 808f 	beq.w	8002a14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2c      	ldr	r2, [pc, #176]	; (80029ac <HAL_DMA_IRQHandler+0x3f8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d04a      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <HAL_DMA_IRQHandler+0x3fc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d045      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <HAL_DMA_IRQHandler+0x400>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d040      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_DMA_IRQHandler+0x404>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d03b      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a26      	ldr	r2, [pc, #152]	; (80029bc <HAL_DMA_IRQHandler+0x408>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d036      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <HAL_DMA_IRQHandler+0x40c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d031      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_DMA_IRQHandler+0x410>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d02c      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <HAL_DMA_IRQHandler+0x414>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d027      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_DMA_IRQHandler+0x418>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d022      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_DMA_IRQHandler+0x41c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01d      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_DMA_IRQHandler+0x420>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d018      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_DMA_IRQHandler+0x424>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1a      	ldr	r2, [pc, #104]	; (80029dc <HAL_DMA_IRQHandler+0x428>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00e      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_DMA_IRQHandler+0x42c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_DMA_IRQHandler+0x430>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_DMA_IRQHandler+0x3e2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <HAL_DMA_IRQHandler+0x434>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d12a      	bne.n	80029ec <HAL_DMA_IRQHandler+0x438>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e023      	b.n	80029f4 <HAL_DMA_IRQHandler+0x440>
 80029ac:	40020010 	.word	0x40020010
 80029b0:	40020028 	.word	0x40020028
 80029b4:	40020040 	.word	0x40020040
 80029b8:	40020058 	.word	0x40020058
 80029bc:	40020070 	.word	0x40020070
 80029c0:	40020088 	.word	0x40020088
 80029c4:	400200a0 	.word	0x400200a0
 80029c8:	400200b8 	.word	0x400200b8
 80029cc:	40020410 	.word	0x40020410
 80029d0:	40020428 	.word	0x40020428
 80029d4:	40020440 	.word	0x40020440
 80029d8:	40020458 	.word	0x40020458
 80029dc:	40020470 	.word	0x40020470
 80029e0:	40020488 	.word	0x40020488
 80029e4:	400204a0 	.word	0x400204a0
 80029e8:	400204b8 	.word	0x400204b8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2204      	movs	r2, #4
 8002a02:	409a      	lsls	r2, r3
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a6 	beq.w	8002b76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a85      	ldr	r2, [pc, #532]	; (8002c44 <HAL_DMA_IRQHandler+0x690>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d04a      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a83      	ldr	r2, [pc, #524]	; (8002c48 <HAL_DMA_IRQHandler+0x694>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d045      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a82      	ldr	r2, [pc, #520]	; (8002c4c <HAL_DMA_IRQHandler+0x698>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d040      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <HAL_DMA_IRQHandler+0x69c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d03b      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7f      	ldr	r2, [pc, #508]	; (8002c54 <HAL_DMA_IRQHandler+0x6a0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d036      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a7d      	ldr	r2, [pc, #500]	; (8002c58 <HAL_DMA_IRQHandler+0x6a4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d031      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a7c      	ldr	r2, [pc, #496]	; (8002c5c <HAL_DMA_IRQHandler+0x6a8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d02c      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7a      	ldr	r2, [pc, #488]	; (8002c60 <HAL_DMA_IRQHandler+0x6ac>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d027      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a79      	ldr	r2, [pc, #484]	; (8002c64 <HAL_DMA_IRQHandler+0x6b0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d022      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a77      	ldr	r2, [pc, #476]	; (8002c68 <HAL_DMA_IRQHandler+0x6b4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a76      	ldr	r2, [pc, #472]	; (8002c6c <HAL_DMA_IRQHandler+0x6b8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d018      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a74      	ldr	r2, [pc, #464]	; (8002c70 <HAL_DMA_IRQHandler+0x6bc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a73      	ldr	r2, [pc, #460]	; (8002c74 <HAL_DMA_IRQHandler+0x6c0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a71      	ldr	r2, [pc, #452]	; (8002c78 <HAL_DMA_IRQHandler+0x6c4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a70      	ldr	r2, [pc, #448]	; (8002c7c <HAL_DMA_IRQHandler+0x6c8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_IRQHandler+0x516>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <HAL_DMA_IRQHandler+0x6cc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x52c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e009      	b.n	8002af4 <HAL_DMA_IRQHandler+0x540>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d03e      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2210      	movs	r2, #16
 8002b02:	409a      	lsls	r2, r3
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d018      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d108      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d024      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
 8002b34:	e01f      	b.n	8002b76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01b      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
 8002b46:	e016      	b.n	8002b76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0208 	bic.w	r2, r2, #8
 8002b64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2220      	movs	r2, #32
 8002b80:	409a      	lsls	r2, r3
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8110 	beq.w	8002dac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <HAL_DMA_IRQHandler+0x690>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d04a      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2b      	ldr	r2, [pc, #172]	; (8002c48 <HAL_DMA_IRQHandler+0x694>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d045      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <HAL_DMA_IRQHandler+0x698>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d040      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a28      	ldr	r2, [pc, #160]	; (8002c50 <HAL_DMA_IRQHandler+0x69c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d03b      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a26      	ldr	r2, [pc, #152]	; (8002c54 <HAL_DMA_IRQHandler+0x6a0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d036      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a25      	ldr	r2, [pc, #148]	; (8002c58 <HAL_DMA_IRQHandler+0x6a4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d031      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_DMA_IRQHandler+0x6a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02c      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a22      	ldr	r2, [pc, #136]	; (8002c60 <HAL_DMA_IRQHandler+0x6ac>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d027      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <HAL_DMA_IRQHandler+0x6b0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d022      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <HAL_DMA_IRQHandler+0x6b4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d01d      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_DMA_IRQHandler+0x6b8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d018      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <HAL_DMA_IRQHandler+0x6bc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <HAL_DMA_IRQHandler+0x6c0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00e      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a19      	ldr	r2, [pc, #100]	; (8002c78 <HAL_DMA_IRQHandler+0x6c4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_DMA_IRQHandler+0x6c8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x678>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <HAL_DMA_IRQHandler+0x6cc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d12b      	bne.n	8002c84 <HAL_DMA_IRQHandler+0x6d0>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e02a      	b.n	8002c98 <HAL_DMA_IRQHandler+0x6e4>
 8002c42:	bf00      	nop
 8002c44:	40020010 	.word	0x40020010
 8002c48:	40020028 	.word	0x40020028
 8002c4c:	40020040 	.word	0x40020040
 8002c50:	40020058 	.word	0x40020058
 8002c54:	40020070 	.word	0x40020070
 8002c58:	40020088 	.word	0x40020088
 8002c5c:	400200a0 	.word	0x400200a0
 8002c60:	400200b8 	.word	0x400200b8
 8002c64:	40020410 	.word	0x40020410
 8002c68:	40020428 	.word	0x40020428
 8002c6c:	40020440 	.word	0x40020440
 8002c70:	40020458 	.word	0x40020458
 8002c74:	40020470 	.word	0x40020470
 8002c78:	40020488 	.word	0x40020488
 8002c7c:	400204a0 	.word	0x400204a0
 8002c80:	400204b8 	.word	0x400204b8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8087 	beq.w	8002dac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d139      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0216 	bic.w	r2, r2, #22
 8002cc8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <HAL_DMA_IRQHandler+0x736>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0208 	bic.w	r2, r2, #8
 8002cf8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	223f      	movs	r2, #63	; 0x3f
 8002d04:	409a      	lsls	r2, r3
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 834a 	beq.w	80033b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
          }
          return;
 8002d2c:	e344      	b.n	80033b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d018      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02c      	beq.n	8002dac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
 8002d5a:	e027      	b.n	8002dac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d023      	beq.n	8002dac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
 8002d6c:	e01e      	b.n	8002dac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0210 	bic.w	r2, r2, #16
 8002d8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8306 	beq.w	80033c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8088 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a7a      	ldr	r2, [pc, #488]	; (8002fbc <HAL_DMA_IRQHandler+0xa08>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d04a      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a79      	ldr	r2, [pc, #484]	; (8002fc0 <HAL_DMA_IRQHandler+0xa0c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d045      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a77      	ldr	r2, [pc, #476]	; (8002fc4 <HAL_DMA_IRQHandler+0xa10>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d040      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a76      	ldr	r2, [pc, #472]	; (8002fc8 <HAL_DMA_IRQHandler+0xa14>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d03b      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a74      	ldr	r2, [pc, #464]	; (8002fcc <HAL_DMA_IRQHandler+0xa18>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d036      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a73      	ldr	r2, [pc, #460]	; (8002fd0 <HAL_DMA_IRQHandler+0xa1c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d031      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a71      	ldr	r2, [pc, #452]	; (8002fd4 <HAL_DMA_IRQHandler+0xa20>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d02c      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a70      	ldr	r2, [pc, #448]	; (8002fd8 <HAL_DMA_IRQHandler+0xa24>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d027      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6e      	ldr	r2, [pc, #440]	; (8002fdc <HAL_DMA_IRQHandler+0xa28>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a6d      	ldr	r2, [pc, #436]	; (8002fe0 <HAL_DMA_IRQHandler+0xa2c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d01d      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a6b      	ldr	r2, [pc, #428]	; (8002fe4 <HAL_DMA_IRQHandler+0xa30>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d018      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6a      	ldr	r2, [pc, #424]	; (8002fe8 <HAL_DMA_IRQHandler+0xa34>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a68      	ldr	r2, [pc, #416]	; (8002fec <HAL_DMA_IRQHandler+0xa38>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a67      	ldr	r2, [pc, #412]	; (8002ff0 <HAL_DMA_IRQHandler+0xa3c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a65      	ldr	r2, [pc, #404]	; (8002ff4 <HAL_DMA_IRQHandler+0xa40>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x8b8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a64      	ldr	r2, [pc, #400]	; (8002ff8 <HAL_DMA_IRQHandler+0xa44>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <HAL_DMA_IRQHandler+0x8ca>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e007      	b.n	8002e8e <HAL_DMA_IRQHandler+0x8da>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3301      	adds	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d307      	bcc.n	8002eaa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f2      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x8da>
 8002ea8:	e000      	b.n	8002eac <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002eaa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002ec2:	e003      	b.n	8002ecc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8272 	beq.w	80033c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
 8002ee6:	e26c      	b.n	80033c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a43      	ldr	r2, [pc, #268]	; (8002ffc <HAL_DMA_IRQHandler+0xa48>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x984>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_DMA_IRQHandler+0xa4c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x984>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a40      	ldr	r2, [pc, #256]	; (8003004 <HAL_DMA_IRQHandler+0xa50>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x984>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a3f      	ldr	r2, [pc, #252]	; (8003008 <HAL_DMA_IRQHandler+0xa54>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x984>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3d      	ldr	r2, [pc, #244]	; (800300c <HAL_DMA_IRQHandler+0xa58>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x984>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <HAL_DMA_IRQHandler+0xa5c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x984>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a3a      	ldr	r2, [pc, #232]	; (8003014 <HAL_DMA_IRQHandler+0xa60>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x984>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_DMA_IRQHandler+0xa64>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x988>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_DMA_IRQHandler+0x98a>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 823f 	beq.w	80033c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2204      	movs	r2, #4
 8002f56:	409a      	lsls	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80cd 	beq.w	80030fc <HAL_DMA_IRQHandler+0xb48>
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80c7 	beq.w	80030fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2204      	movs	r2, #4
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d049      	beq.n	800301c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8210 	beq.w	80033bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fa4:	e20a      	b.n	80033bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8206 	beq.w	80033bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fb8:	e200      	b.n	80033bc <HAL_DMA_IRQHandler+0xe08>
 8002fba:	bf00      	nop
 8002fbc:	40020010 	.word	0x40020010
 8002fc0:	40020028 	.word	0x40020028
 8002fc4:	40020040 	.word	0x40020040
 8002fc8:	40020058 	.word	0x40020058
 8002fcc:	40020070 	.word	0x40020070
 8002fd0:	40020088 	.word	0x40020088
 8002fd4:	400200a0 	.word	0x400200a0
 8002fd8:	400200b8 	.word	0x400200b8
 8002fdc:	40020410 	.word	0x40020410
 8002fe0:	40020428 	.word	0x40020428
 8002fe4:	40020440 	.word	0x40020440
 8002fe8:	40020458 	.word	0x40020458
 8002fec:	40020470 	.word	0x40020470
 8002ff0:	40020488 	.word	0x40020488
 8002ff4:	400204a0 	.word	0x400204a0
 8002ff8:	400204b8 	.word	0x400204b8
 8002ffc:	58025408 	.word	0x58025408
 8003000:	5802541c 	.word	0x5802541c
 8003004:	58025430 	.word	0x58025430
 8003008:	58025444 	.word	0x58025444
 800300c:	58025458 	.word	0x58025458
 8003010:	5802546c 	.word	0x5802546c
 8003014:	58025480 	.word	0x58025480
 8003018:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d160      	bne.n	80030e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7f      	ldr	r2, [pc, #508]	; (8003228 <HAL_DMA_IRQHandler+0xc74>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d04a      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a7d      	ldr	r2, [pc, #500]	; (800322c <HAL_DMA_IRQHandler+0xc78>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d045      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7c      	ldr	r2, [pc, #496]	; (8003230 <HAL_DMA_IRQHandler+0xc7c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d040      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7a      	ldr	r2, [pc, #488]	; (8003234 <HAL_DMA_IRQHandler+0xc80>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d03b      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a79      	ldr	r2, [pc, #484]	; (8003238 <HAL_DMA_IRQHandler+0xc84>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d036      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a77      	ldr	r2, [pc, #476]	; (800323c <HAL_DMA_IRQHandler+0xc88>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d031      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a76      	ldr	r2, [pc, #472]	; (8003240 <HAL_DMA_IRQHandler+0xc8c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d02c      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a74      	ldr	r2, [pc, #464]	; (8003244 <HAL_DMA_IRQHandler+0xc90>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d027      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a73      	ldr	r2, [pc, #460]	; (8003248 <HAL_DMA_IRQHandler+0xc94>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d022      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a71      	ldr	r2, [pc, #452]	; (800324c <HAL_DMA_IRQHandler+0xc98>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01d      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a70      	ldr	r2, [pc, #448]	; (8003250 <HAL_DMA_IRQHandler+0xc9c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d018      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6e      	ldr	r2, [pc, #440]	; (8003254 <HAL_DMA_IRQHandler+0xca0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6d      	ldr	r2, [pc, #436]	; (8003258 <HAL_DMA_IRQHandler+0xca4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00e      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6b      	ldr	r2, [pc, #428]	; (800325c <HAL_DMA_IRQHandler+0xca8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d009      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6a      	ldr	r2, [pc, #424]	; (8003260 <HAL_DMA_IRQHandler+0xcac>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xb12>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a68      	ldr	r2, [pc, #416]	; (8003264 <HAL_DMA_IRQHandler+0xcb0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d108      	bne.n	80030d8 <HAL_DMA_IRQHandler+0xb24>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0208 	bic.w	r2, r2, #8
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e007      	b.n	80030e8 <HAL_DMA_IRQHandler+0xb34>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0204 	bic.w	r2, r2, #4
 80030e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8165 	beq.w	80033bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030fa:	e15f      	b.n	80033bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2202      	movs	r2, #2
 8003106:	409a      	lsls	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80c5 	beq.w	800329c <HAL_DMA_IRQHandler+0xce8>
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80bf 	beq.w	800329c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2202      	movs	r2, #2
 8003128:	409a      	lsls	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d018      	beq.n	800316a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 813a 	beq.w	80033c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003154:	e134      	b.n	80033c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8130 	beq.w	80033c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003168:	e12a      	b.n	80033c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 8089 	bne.w	8003288 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2b      	ldr	r2, [pc, #172]	; (8003228 <HAL_DMA_IRQHandler+0xc74>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a29      	ldr	r2, [pc, #164]	; (800322c <HAL_DMA_IRQHandler+0xc78>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a28      	ldr	r2, [pc, #160]	; (8003230 <HAL_DMA_IRQHandler+0xc7c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a26      	ldr	r2, [pc, #152]	; (8003234 <HAL_DMA_IRQHandler+0xc80>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a25      	ldr	r2, [pc, #148]	; (8003238 <HAL_DMA_IRQHandler+0xc84>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a23      	ldr	r2, [pc, #140]	; (800323c <HAL_DMA_IRQHandler+0xc88>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a22      	ldr	r2, [pc, #136]	; (8003240 <HAL_DMA_IRQHandler+0xc8c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a20      	ldr	r2, [pc, #128]	; (8003244 <HAL_DMA_IRQHandler+0xc90>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <HAL_DMA_IRQHandler+0xc94>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <HAL_DMA_IRQHandler+0xc98>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_DMA_IRQHandler+0xc9c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_DMA_IRQHandler+0xca0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_DMA_IRQHandler+0xca4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <HAL_DMA_IRQHandler+0xca8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <HAL_DMA_IRQHandler+0xcac>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_IRQHandler+0xc62>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <HAL_DMA_IRQHandler+0xcb0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d128      	bne.n	8003268 <HAL_DMA_IRQHandler+0xcb4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0214 	bic.w	r2, r2, #20
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e027      	b.n	8003278 <HAL_DMA_IRQHandler+0xcc4>
 8003228:	40020010 	.word	0x40020010
 800322c:	40020028 	.word	0x40020028
 8003230:	40020040 	.word	0x40020040
 8003234:	40020058 	.word	0x40020058
 8003238:	40020070 	.word	0x40020070
 800323c:	40020088 	.word	0x40020088
 8003240:	400200a0 	.word	0x400200a0
 8003244:	400200b8 	.word	0x400200b8
 8003248:	40020410 	.word	0x40020410
 800324c:	40020428 	.word	0x40020428
 8003250:	40020440 	.word	0x40020440
 8003254:	40020458 	.word	0x40020458
 8003258:	40020470 	.word	0x40020470
 800325c:	40020488 	.word	0x40020488
 8003260:	400204a0 	.word	0x400204a0
 8003264:	400204b8 	.word	0x400204b8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 020a 	bic.w	r2, r2, #10
 8003276:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8097 	beq.w	80033c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800329a:	e091      	b.n	80033c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	2208      	movs	r2, #8
 80032a6:	409a      	lsls	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8088 	beq.w	80033c2 <HAL_DMA_IRQHandler+0xe0e>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8082 	beq.w	80033c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <HAL_DMA_IRQHandler+0xe14>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04a      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3f      	ldr	r2, [pc, #252]	; (80033cc <HAL_DMA_IRQHandler+0xe18>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d045      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3e      	ldr	r2, [pc, #248]	; (80033d0 <HAL_DMA_IRQHandler+0xe1c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d040      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3c      	ldr	r2, [pc, #240]	; (80033d4 <HAL_DMA_IRQHandler+0xe20>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d03b      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a3b      	ldr	r2, [pc, #236]	; (80033d8 <HAL_DMA_IRQHandler+0xe24>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d036      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a39      	ldr	r2, [pc, #228]	; (80033dc <HAL_DMA_IRQHandler+0xe28>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <HAL_DMA_IRQHandler+0xe2c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d02c      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a36      	ldr	r2, [pc, #216]	; (80033e4 <HAL_DMA_IRQHandler+0xe30>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d027      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <HAL_DMA_IRQHandler+0xe34>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a33      	ldr	r2, [pc, #204]	; (80033ec <HAL_DMA_IRQHandler+0xe38>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01d      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_DMA_IRQHandler+0xe3c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_DMA_IRQHandler+0xe40>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <HAL_DMA_IRQHandler+0xe44>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2d      	ldr	r2, [pc, #180]	; (80033fc <HAL_DMA_IRQHandler+0xe48>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <HAL_DMA_IRQHandler+0xe4c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_DMA_IRQHandler+0xdaa>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2a      	ldr	r2, [pc, #168]	; (8003404 <HAL_DMA_IRQHandler+0xe50>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <HAL_DMA_IRQHandler+0xdbc>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 021c 	bic.w	r2, r2, #28
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e007      	b.n	8003380 <HAL_DMA_IRQHandler+0xdcc>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 020e 	bic.w	r2, r2, #14
 800337e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2201      	movs	r2, #1
 800338a:	409a      	lsls	r2, r3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e004      	b.n	80033c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40020010 	.word	0x40020010
 80033cc:	40020028 	.word	0x40020028
 80033d0:	40020040 	.word	0x40020040
 80033d4:	40020058 	.word	0x40020058
 80033d8:	40020070 	.word	0x40020070
 80033dc:	40020088 	.word	0x40020088
 80033e0:	400200a0 	.word	0x400200a0
 80033e4:	400200b8 	.word	0x400200b8
 80033e8:	40020410 	.word	0x40020410
 80033ec:	40020428 	.word	0x40020428
 80033f0:	40020440 	.word	0x40020440
 80033f4:	40020458 	.word	0x40020458
 80033f8:	40020470 	.word	0x40020470
 80033fc:	40020488 	.word	0x40020488
 8003400:	400204a0 	.word	0x400204a0
 8003404:	400204b8 	.word	0x400204b8

08003408 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a7f      	ldr	r2, [pc, #508]	; (8003624 <DMA_SetConfig+0x21c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d072      	beq.n	8003512 <DMA_SetConfig+0x10a>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a7d      	ldr	r2, [pc, #500]	; (8003628 <DMA_SetConfig+0x220>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d06d      	beq.n	8003512 <DMA_SetConfig+0x10a>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7c      	ldr	r2, [pc, #496]	; (800362c <DMA_SetConfig+0x224>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d068      	beq.n	8003512 <DMA_SetConfig+0x10a>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7a      	ldr	r2, [pc, #488]	; (8003630 <DMA_SetConfig+0x228>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d063      	beq.n	8003512 <DMA_SetConfig+0x10a>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a79      	ldr	r2, [pc, #484]	; (8003634 <DMA_SetConfig+0x22c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d05e      	beq.n	8003512 <DMA_SetConfig+0x10a>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a77      	ldr	r2, [pc, #476]	; (8003638 <DMA_SetConfig+0x230>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d059      	beq.n	8003512 <DMA_SetConfig+0x10a>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a76      	ldr	r2, [pc, #472]	; (800363c <DMA_SetConfig+0x234>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d054      	beq.n	8003512 <DMA_SetConfig+0x10a>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a74      	ldr	r2, [pc, #464]	; (8003640 <DMA_SetConfig+0x238>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d04f      	beq.n	8003512 <DMA_SetConfig+0x10a>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a73      	ldr	r2, [pc, #460]	; (8003644 <DMA_SetConfig+0x23c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d04a      	beq.n	8003512 <DMA_SetConfig+0x10a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a71      	ldr	r2, [pc, #452]	; (8003648 <DMA_SetConfig+0x240>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d045      	beq.n	8003512 <DMA_SetConfig+0x10a>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a70      	ldr	r2, [pc, #448]	; (800364c <DMA_SetConfig+0x244>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d040      	beq.n	8003512 <DMA_SetConfig+0x10a>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6e      	ldr	r2, [pc, #440]	; (8003650 <DMA_SetConfig+0x248>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d03b      	beq.n	8003512 <DMA_SetConfig+0x10a>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6d      	ldr	r2, [pc, #436]	; (8003654 <DMA_SetConfig+0x24c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d036      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6b      	ldr	r2, [pc, #428]	; (8003658 <DMA_SetConfig+0x250>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d031      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6a      	ldr	r2, [pc, #424]	; (800365c <DMA_SetConfig+0x254>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d02c      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a68      	ldr	r2, [pc, #416]	; (8003660 <DMA_SetConfig+0x258>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d027      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a67      	ldr	r2, [pc, #412]	; (8003664 <DMA_SetConfig+0x25c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d022      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a65      	ldr	r2, [pc, #404]	; (8003668 <DMA_SetConfig+0x260>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01d      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a64      	ldr	r2, [pc, #400]	; (800366c <DMA_SetConfig+0x264>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a62      	ldr	r2, [pc, #392]	; (8003670 <DMA_SetConfig+0x268>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a61      	ldr	r2, [pc, #388]	; (8003674 <DMA_SetConfig+0x26c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5f      	ldr	r2, [pc, #380]	; (8003678 <DMA_SetConfig+0x270>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <DMA_SetConfig+0x10a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a5e      	ldr	r2, [pc, #376]	; (800367c <DMA_SetConfig+0x274>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <DMA_SetConfig+0x10a>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a5c      	ldr	r2, [pc, #368]	; (8003680 <DMA_SetConfig+0x278>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <DMA_SetConfig+0x10e>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <DMA_SetConfig+0x110>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003524:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003536:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a39      	ldr	r2, [pc, #228]	; (8003624 <DMA_SetConfig+0x21c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d04a      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <DMA_SetConfig+0x220>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d045      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a36      	ldr	r2, [pc, #216]	; (800362c <DMA_SetConfig+0x224>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d040      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a35      	ldr	r2, [pc, #212]	; (8003630 <DMA_SetConfig+0x228>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03b      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a33      	ldr	r2, [pc, #204]	; (8003634 <DMA_SetConfig+0x22c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d036      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a32      	ldr	r2, [pc, #200]	; (8003638 <DMA_SetConfig+0x230>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d031      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a30      	ldr	r2, [pc, #192]	; (800363c <DMA_SetConfig+0x234>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02c      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <DMA_SetConfig+0x238>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d027      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <DMA_SetConfig+0x23c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <DMA_SetConfig+0x240>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01d      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2a      	ldr	r2, [pc, #168]	; (800364c <DMA_SetConfig+0x244>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a29      	ldr	r2, [pc, #164]	; (8003650 <DMA_SetConfig+0x248>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a27      	ldr	r2, [pc, #156]	; (8003654 <DMA_SetConfig+0x24c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a26      	ldr	r2, [pc, #152]	; (8003658 <DMA_SetConfig+0x250>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <DMA_SetConfig+0x254>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <DMA_SetConfig+0x1d0>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a23      	ldr	r2, [pc, #140]	; (8003660 <DMA_SetConfig+0x258>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <DMA_SetConfig+0x1d4>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <DMA_SetConfig+0x1d6>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d059      	beq.n	8003696 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	223f      	movs	r2, #63	; 0x3f
 80035ec:	409a      	lsls	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003600:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d138      	bne.n	8003684 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003622:	e086      	b.n	8003732 <DMA_SetConfig+0x32a>
 8003624:	40020010 	.word	0x40020010
 8003628:	40020028 	.word	0x40020028
 800362c:	40020040 	.word	0x40020040
 8003630:	40020058 	.word	0x40020058
 8003634:	40020070 	.word	0x40020070
 8003638:	40020088 	.word	0x40020088
 800363c:	400200a0 	.word	0x400200a0
 8003640:	400200b8 	.word	0x400200b8
 8003644:	40020410 	.word	0x40020410
 8003648:	40020428 	.word	0x40020428
 800364c:	40020440 	.word	0x40020440
 8003650:	40020458 	.word	0x40020458
 8003654:	40020470 	.word	0x40020470
 8003658:	40020488 	.word	0x40020488
 800365c:	400204a0 	.word	0x400204a0
 8003660:	400204b8 	.word	0x400204b8
 8003664:	58025408 	.word	0x58025408
 8003668:	5802541c 	.word	0x5802541c
 800366c:	58025430 	.word	0x58025430
 8003670:	58025444 	.word	0x58025444
 8003674:	58025458 	.word	0x58025458
 8003678:	5802546c 	.word	0x5802546c
 800367c:	58025480 	.word	0x58025480
 8003680:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
}
 8003694:	e04d      	b.n	8003732 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <DMA_SetConfig+0x338>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <DMA_SetConfig+0x2de>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <DMA_SetConfig+0x33c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01d      	beq.n	80036e6 <DMA_SetConfig+0x2de>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a26      	ldr	r2, [pc, #152]	; (8003748 <DMA_SetConfig+0x340>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d018      	beq.n	80036e6 <DMA_SetConfig+0x2de>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a24      	ldr	r2, [pc, #144]	; (800374c <DMA_SetConfig+0x344>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <DMA_SetConfig+0x2de>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <DMA_SetConfig+0x348>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <DMA_SetConfig+0x2de>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a21      	ldr	r2, [pc, #132]	; (8003754 <DMA_SetConfig+0x34c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <DMA_SetConfig+0x2de>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a20      	ldr	r2, [pc, #128]	; (8003758 <DMA_SetConfig+0x350>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <DMA_SetConfig+0x2de>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <DMA_SetConfig+0x354>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <DMA_SetConfig+0x2e2>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <DMA_SetConfig+0x2e4>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2201      	movs	r2, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d108      	bne.n	8003722 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	60da      	str	r2, [r3, #12]
}
 8003720:	e007      	b.n	8003732 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	60da      	str	r2, [r3, #12]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	58025408 	.word	0x58025408
 8003744:	5802541c 	.word	0x5802541c
 8003748:	58025430 	.word	0x58025430
 800374c:	58025444 	.word	0x58025444
 8003750:	58025458 	.word	0x58025458
 8003754:	5802546c 	.word	0x5802546c
 8003758:	58025480 	.word	0x58025480
 800375c:	58025494 	.word	0x58025494

08003760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a42      	ldr	r2, [pc, #264]	; (8003878 <DMA_CalcBaseAndBitshift+0x118>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d04a      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a41      	ldr	r2, [pc, #260]	; (800387c <DMA_CalcBaseAndBitshift+0x11c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d045      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3f      	ldr	r2, [pc, #252]	; (8003880 <DMA_CalcBaseAndBitshift+0x120>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d040      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3e      	ldr	r2, [pc, #248]	; (8003884 <DMA_CalcBaseAndBitshift+0x124>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d03b      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a3c      	ldr	r2, [pc, #240]	; (8003888 <DMA_CalcBaseAndBitshift+0x128>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d036      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3b      	ldr	r2, [pc, #236]	; (800388c <DMA_CalcBaseAndBitshift+0x12c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d031      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a39      	ldr	r2, [pc, #228]	; (8003890 <DMA_CalcBaseAndBitshift+0x130>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02c      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a38      	ldr	r2, [pc, #224]	; (8003894 <DMA_CalcBaseAndBitshift+0x134>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d027      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a36      	ldr	r2, [pc, #216]	; (8003898 <DMA_CalcBaseAndBitshift+0x138>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d022      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a35      	ldr	r2, [pc, #212]	; (800389c <DMA_CalcBaseAndBitshift+0x13c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01d      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a33      	ldr	r2, [pc, #204]	; (80038a0 <DMA_CalcBaseAndBitshift+0x140>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d018      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a32      	ldr	r2, [pc, #200]	; (80038a4 <DMA_CalcBaseAndBitshift+0x144>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a30      	ldr	r2, [pc, #192]	; (80038a8 <DMA_CalcBaseAndBitshift+0x148>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <DMA_CalcBaseAndBitshift+0x14c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	; (80038b0 <DMA_CalcBaseAndBitshift+0x150>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <DMA_CalcBaseAndBitshift+0xa8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <DMA_CalcBaseAndBitshift+0x154>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <DMA_CalcBaseAndBitshift+0xac>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <DMA_CalcBaseAndBitshift+0xae>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d024      	beq.n	800385c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3b10      	subs	r3, #16
 800381a:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <DMA_CalcBaseAndBitshift+0x158>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	4a24      	ldr	r2, [pc, #144]	; (80038bc <DMA_CalcBaseAndBitshift+0x15c>)
 800382c:	5cd3      	ldrb	r3, [r2, r3]
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d908      	bls.n	800384c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <DMA_CalcBaseAndBitshift+0x160>)
 8003842:	4013      	ands	r3, r2
 8003844:	1d1a      	adds	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	659a      	str	r2, [r3, #88]	; 0x58
 800384a:	e00d      	b.n	8003868 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <DMA_CalcBaseAndBitshift+0x160>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6593      	str	r3, [r2, #88]	; 0x58
 800385a:	e005      	b.n	8003868 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40020010 	.word	0x40020010
 800387c:	40020028 	.word	0x40020028
 8003880:	40020040 	.word	0x40020040
 8003884:	40020058 	.word	0x40020058
 8003888:	40020070 	.word	0x40020070
 800388c:	40020088 	.word	0x40020088
 8003890:	400200a0 	.word	0x400200a0
 8003894:	400200b8 	.word	0x400200b8
 8003898:	40020410 	.word	0x40020410
 800389c:	40020428 	.word	0x40020428
 80038a0:	40020440 	.word	0x40020440
 80038a4:	40020458 	.word	0x40020458
 80038a8:	40020470 	.word	0x40020470
 80038ac:	40020488 	.word	0x40020488
 80038b0:	400204a0 	.word	0x400204a0
 80038b4:	400204b8 	.word	0x400204b8
 80038b8:	aaaaaaab 	.word	0xaaaaaaab
 80038bc:	0800c170 	.word	0x0800c170
 80038c0:	fffffc00 	.word	0xfffffc00

080038c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d120      	bne.n	800391a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d858      	bhi.n	8003992 <DMA_CheckFifoParam+0xce>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <DMA_CheckFifoParam+0x24>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	0800390b 	.word	0x0800390b
 80038f0:	080038f9 	.word	0x080038f9
 80038f4:	08003993 	.word	0x08003993
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d048      	beq.n	8003996 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003908:	e045      	b.n	8003996 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003912:	d142      	bne.n	800399a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003918:	e03f      	b.n	800399a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003922:	d123      	bne.n	800396c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	2b03      	cmp	r3, #3
 800392a:	d838      	bhi.n	800399e <DMA_CheckFifoParam+0xda>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <DMA_CheckFifoParam+0x70>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003945 	.word	0x08003945
 8003938:	0800394b 	.word	0x0800394b
 800393c:	08003945 	.word	0x08003945
 8003940:	0800395d 	.word	0x0800395d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
        break;
 8003948:	e030      	b.n	80039ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d025      	beq.n	80039a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800395a:	e022      	b.n	80039a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003964:	d11f      	bne.n	80039a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800396a:	e01c      	b.n	80039a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	2b02      	cmp	r3, #2
 8003972:	d902      	bls.n	800397a <DMA_CheckFifoParam+0xb6>
 8003974:	2b03      	cmp	r3, #3
 8003976:	d003      	beq.n	8003980 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003978:	e018      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
        break;
 800397e:	e015      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
    break;
 8003990:	e00b      	b.n	80039aa <DMA_CheckFifoParam+0xe6>
        break;
 8003992:	bf00      	nop
 8003994:	e00a      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
        break;
 8003996:	bf00      	nop
 8003998:	e008      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
        break;
 800399a:	bf00      	nop
 800399c:	e006      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
        break;
 800399e:	bf00      	nop
 80039a0:	e004      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
        break;
 80039a2:	bf00      	nop
 80039a4:	e002      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
        break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
    break;
 80039aa:	bf00      	nop
    }
  }

  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d022      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a36      	ldr	r2, [pc, #216]	; (8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01d      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a35      	ldr	r2, [pc, #212]	; (8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d018      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a33      	ldr	r2, [pc, #204]	; (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a32      	ldr	r2, [pc, #200]	; (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00e      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a30      	ldr	r2, [pc, #192]	; (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2d      	ldr	r2, [pc, #180]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01a      	beq.n	8003a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	3b08      	subs	r3, #8
 8003a2c:	4a28      	ldr	r2, [pc, #160]	; (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	461a      	mov	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2201      	movs	r2, #1
 8003a52:	409a      	lsls	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a58:	e024      	b.n	8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	3b10      	subs	r3, #16
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d806      	bhi.n	8003a82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d902      	bls.n	8003a82 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	58025408 	.word	0x58025408
 8003ab4:	5802541c 	.word	0x5802541c
 8003ab8:	58025430 	.word	0x58025430
 8003abc:	58025444 	.word	0x58025444
 8003ac0:	58025458 	.word	0x58025458
 8003ac4:	5802546c 	.word	0x5802546c
 8003ac8:	58025480 	.word	0x58025480
 8003acc:	58025494 	.word	0x58025494
 8003ad0:	cccccccd 	.word	0xcccccccd
 8003ad4:	16009600 	.word	0x16009600
 8003ad8:	58025880 	.word	0x58025880
 8003adc:	aaaaaaab 	.word	0xaaaaaaab
 8003ae0:	400204b8 	.word	0x400204b8
 8003ae4:	4002040f 	.word	0x4002040f
 8003ae8:	10008200 	.word	0x10008200
 8003aec:	40020880 	.word	0x40020880

08003af0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d04a      	beq.n	8003b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d847      	bhi.n	8003b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a24      	ldr	r2, [pc, #144]	; (8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b78:	671a      	str	r2, [r3, #112]	; 0x70
 8003b7a:	e009      	b.n	8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a11      	ldr	r2, [pc, #68]	; (8003bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b8e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	2201      	movs	r2, #1
 8003b96:	409a      	lsls	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	58025408 	.word	0x58025408
 8003bac:	5802541c 	.word	0x5802541c
 8003bb0:	58025430 	.word	0x58025430
 8003bb4:	58025444 	.word	0x58025444
 8003bb8:	58025458 	.word	0x58025458
 8003bbc:	5802546c 	.word	0x5802546c
 8003bc0:	58025480 	.word	0x58025480
 8003bc4:	58025494 	.word	0x58025494
 8003bc8:	1600963f 	.word	0x1600963f
 8003bcc:	58025940 	.word	0x58025940
 8003bd0:	1000823f 	.word	0x1000823f
 8003bd4:	40020940 	.word	0x40020940

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003be6:	4b89      	ldr	r3, [pc, #548]	; (8003e0c <HAL_GPIO_Init+0x234>)
 8003be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bea:	e194      	b.n	8003f16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8186 	beq.w	8003f10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d005      	beq.n	8003c1c <HAL_GPIO_Init+0x44>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d130      	bne.n	8003c7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c52:	2201      	movs	r2, #1
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 0201 	and.w	r2, r3, #1
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d017      	beq.n	8003cba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	2203      	movs	r2, #3
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d123      	bne.n	8003d0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	08da      	lsrs	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3208      	adds	r2, #8
 8003cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	08da      	lsrs	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3208      	adds	r2, #8
 8003d08:	69b9      	ldr	r1, [r7, #24]
 8003d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	2203      	movs	r2, #3
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0203 	and.w	r2, r3, #3
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80e0 	beq.w	8003f10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d50:	4b2f      	ldr	r3, [pc, #188]	; (8003e10 <HAL_GPIO_Init+0x238>)
 8003d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d56:	4a2e      	ldr	r2, [pc, #184]	; (8003e10 <HAL_GPIO_Init+0x238>)
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_GPIO_Init+0x238>)
 8003d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d6e:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <HAL_GPIO_Init+0x23c>)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	220f      	movs	r2, #15
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <HAL_GPIO_Init+0x240>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d052      	beq.n	8003e40 <HAL_GPIO_Init+0x268>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <HAL_GPIO_Init+0x244>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d031      	beq.n	8003e06 <HAL_GPIO_Init+0x22e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_GPIO_Init+0x248>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02b      	beq.n	8003e02 <HAL_GPIO_Init+0x22a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_GPIO_Init+0x24c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d025      	beq.n	8003dfe <HAL_GPIO_Init+0x226>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <HAL_GPIO_Init+0x250>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01f      	beq.n	8003dfa <HAL_GPIO_Init+0x222>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <HAL_GPIO_Init+0x254>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d019      	beq.n	8003df6 <HAL_GPIO_Init+0x21e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <HAL_GPIO_Init+0x258>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_GPIO_Init+0x21a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <HAL_GPIO_Init+0x25c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00d      	beq.n	8003dee <HAL_GPIO_Init+0x216>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_GPIO_Init+0x260>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <HAL_GPIO_Init+0x212>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_GPIO_Init+0x264>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_GPIO_Init+0x20e>
 8003de2:	2309      	movs	r3, #9
 8003de4:	e02d      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003de6:	230a      	movs	r3, #10
 8003de8:	e02b      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003dea:	2308      	movs	r3, #8
 8003dec:	e029      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003dee:	2307      	movs	r3, #7
 8003df0:	e027      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003df2:	2306      	movs	r3, #6
 8003df4:	e025      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003df6:	2305      	movs	r3, #5
 8003df8:	e023      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	e021      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e01f      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e01d      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e01b      	b.n	8003e42 <HAL_GPIO_Init+0x26a>
 8003e0a:	bf00      	nop
 8003e0c:	58000080 	.word	0x58000080
 8003e10:	58024400 	.word	0x58024400
 8003e14:	58000400 	.word	0x58000400
 8003e18:	58020000 	.word	0x58020000
 8003e1c:	58020400 	.word	0x58020400
 8003e20:	58020800 	.word	0x58020800
 8003e24:	58020c00 	.word	0x58020c00
 8003e28:	58021000 	.word	0x58021000
 8003e2c:	58021400 	.word	0x58021400
 8003e30:	58021800 	.word	0x58021800
 8003e34:	58021c00 	.word	0x58021c00
 8003e38:	58022000 	.word	0x58022000
 8003e3c:	58022400 	.word	0x58022400
 8003e40:	2300      	movs	r3, #0
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	f002 0203 	and.w	r2, r2, #3
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	4093      	lsls	r3, r2
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e52:	4938      	ldr	r1, [pc, #224]	; (8003f34 <HAL_GPIO_Init+0x35c>)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f47f ae63 	bne.w	8003bec <HAL_GPIO_Init+0x14>
  }
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	3724      	adds	r7, #36	; 0x24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	58000400 	.word	0x58000400

08003f38 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_HSEM_FastTake+0x2c>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3320      	adds	r3, #32
 8003f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4a:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <HAL_HSEM_FastTake+0x30>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	58026400 	.word	0x58026400
 8003f68:	80000300 	.word	0x80000300

08003f6c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003f76:	4906      	ldr	r1, [pc, #24]	; (8003f90 <HAL_HSEM_Release+0x24>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	58026400 	.word	0x58026400

08003f94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e10d      	b.n	80041c2 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd f90a 	bl	80011d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d107      	bne.n	8003fe6 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d008      	beq.n	8004008 <HAL_I2S_Init+0x74>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d004      	beq.n	8004008 <HAL_I2S_Init+0x74>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b0a      	cmp	r3, #10
 8004004:	f040 8087 	bne.w	8004116 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d05a      	beq.n	80040c6 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004018:	2302      	movs	r3, #2
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e001      	b.n	8004022 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800401e:	2301      	movs	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b30      	cmp	r3, #48	; 0x30
 8004028:	d003      	beq.n	8004032 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800402e:	2bb0      	cmp	r3, #176	; 0xb0
 8004030:	d102      	bne.n	8004038 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004032:	2301      	movs	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e001      	b.n	800403c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800403c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	f002 fc9e 	bl	8006984 <HAL_RCCEx_GetPeriphCLKFreq>
 8004048:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004052:	d113      	bne.n	800407c <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	fa22 f303 	lsr.w	r3, r2, r3
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	fbb2 f2f3 	udiv	r2, r2, r3
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	461a      	mov	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	3305      	adds	r3, #5
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	e014      	b.n	80040a6 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800407c:	2220      	movs	r2, #32
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	461a      	mov	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	3305      	adds	r3, #5
 80040a4:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4a48      	ldr	r2, [pc, #288]	; (80041cc <HAL_I2S_Init+0x238>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	08db      	lsrs	r3, r3, #3
 80040b0:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	e003      	b.n	80040ce <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80040c6:	2302      	movs	r3, #2
 80040c8:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d102      	bne.n	80040da <HAL_I2S_Init+0x146>
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d002      	beq.n	80040e0 <HAL_I2S_Init+0x14c>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2bff      	cmp	r3, #255	; 0xff
 80040de:	d907      	bls.n	80040f0 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	f043 0210 	orr.w	r2, r3, #16
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e068      	b.n	80041c2 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 80040f6:	2301      	movs	r3, #1
 80040f8:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004100:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <HAL_I2S_Init+0x23c>)
 8004102:	4013      	ands	r3, r2
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	0411      	lsls	r1, r2, #16
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	0612      	lsls	r2, r2, #24
 800410c:	4311      	orrs	r1, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	430b      	orrs	r3, r1
 8004114:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800411c:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <HAL_I2S_Init+0x240>)
 800411e:	4013      	ands	r3, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6851      	ldr	r1, [r2, #4]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6892      	ldr	r2, [r2, #8]
 8004128:	4311      	orrs	r1, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68d2      	ldr	r2, [r2, #12]
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6992      	ldr	r2, [r2, #24]
 8004134:	4311      	orrs	r1, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6a12      	ldr	r2, [r2, #32]
 800413a:	4311      	orrs	r1, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004140:	4311      	orrs	r1, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6912      	ldr	r2, [r2, #16]
 8004146:	430a      	orrs	r2, r1
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f640 72f8 	movw	r2, #4088	; 0xff8
 800415c:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800416c:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d007      	beq.n	800419c <HAL_I2S_Init+0x208>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b06      	cmp	r3, #6
 8004192:	d003      	beq.n	800419c <HAL_I2S_Init+0x208>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b0a      	cmp	r3, #10
 800419a:	d10a      	bne.n	80041b2 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	cccccccd 	.word	0xcccccccd
 80041d0:	fe00ffff 	.word	0xfe00ffff
 80041d4:	fdff9040 	.word	0xfdff9040

080041d8 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]


  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_I2SEx_TransmitReceive_DMA+0x24>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_I2SEx_TransmitReceive_DMA+0x24>
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_I2SEx_TransmitReceive_DMA+0x28>
  {
    return  HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0c0      	b.n	8004382 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_I2SEx_TransmitReceive_DMA+0x38>
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
 800420e:	e0b8      	b.n	8004382 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_I2SEx_TransmitReceive_DMA+0x48>
 800421c:	2302      	movs	r3, #2
 800421e:	e0b0      	b.n	8004382 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  hi2s->pTxBuffPtr = (const uint16_t *)pTxData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->pRxBuffPtr = pRxData;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	635a      	str	r2, [r3, #52]	; 0x34

  hi2s->TxXferSize  = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	887a      	ldrh	r2, [r7, #2]
 800423e:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferSize  = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	887a      	ldrh	r2, [r7, #2]
 800424a:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State       = HAL_I2S_STATE_BUSY_TX_RX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2205      	movs	r2, #5
 8004256:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004268:	609a      	str	r2, [r3, #8]

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_DMATxRxHalfCplt;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426e:	4a47      	ldr	r2, [pc, #284]	; (800438c <HAL_I2SEx_TransmitReceive_DMA+0x1b4>)
 8004270:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_DMATxRxCplt;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004276:	4a46      	ldr	r2, [pc, #280]	; (8004390 <HAL_I2SEx_TransmitReceive_DMA+0x1b8>)
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	4a45      	ldr	r2, [pc, #276]	; (8004394 <HAL_I2SEx_TransmitReceive_DMA+0x1bc>)
 8004280:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4619      	mov	r1, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3320      	adds	r3, #32
 8004292:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004298:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 800429a:	f7fd ff21 	bl	80020e0 <HAL_DMA_Start_IT>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <HAL_I2SEx_TransmitReceive_DMA+0xf0>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	f043 0208 	orr.w	r2, r3, #8
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	e05c      	b.n	8004382 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_I2SEx_TransmitReceive_DMA+0x10e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3330      	adds	r3, #48	; 0x30
 80042f0:	4619      	mov	r1, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 80042fe:	f7fd feef 	bl	80020e0 <HAL_DMA_Start_IT>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d011      	beq.n	800432c <HAL_I2SEx_TransmitReceive_DMA+0x154>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430c:	f043 0208 	orr.w	r2, r3, #8
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	e02a      	b.n	8004382 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d107      	bne.n	800434a <HAL_I2SEx_TransmitReceive_DMA+0x172>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004348:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_I2SEx_TransmitReceive_DMA+0x190>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004376:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	08004405 	.word	0x08004405
 8004390:	080043ad 	.word	0x080043ad
 8004394:	08004421 	.word	0x08004421

08004398 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <I2SEx_DMATxRxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxCplt(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d119      	bne.n	80043f6 <I2SEx_DMATxRxCplt+0x4a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d0:	609a      	str	r2, [r3, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043e6:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	875a      	strh	r2, [r3, #58]	; 0x3a

    /* Updated HAL State */
    hi2s->State = HAL_I2S_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7fc fdaa 	bl	8000f50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2SEx_DMATxRxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7fc fd7e 	bl	8000f14 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800443c:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004456:	f043 0208 	orr.w	r2, r3, #8
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff ff9a 	bl	8004398 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004474:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_PWREx_ConfigSupply+0xb0>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	2b06      	cmp	r3, #6
 800447e:	d00a      	beq.n	8004496 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004480:	4b26      	ldr	r3, [pc, #152]	; (800451c <HAL_PWREx_ConfigSupply+0xb0>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	429a      	cmp	r2, r3
 800448c:	d001      	beq.n	8004492 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e040      	b.n	8004514 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e03e      	b.n	8004514 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004496:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_PWREx_ConfigSupply+0xb0>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800449e:	491f      	ldr	r1, [pc, #124]	; (800451c <HAL_PWREx_ConfigSupply+0xb0>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80044a6:	f7fd f94f 	bl	8001748 <HAL_GetTick>
 80044aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044ac:	e009      	b.n	80044c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044ae:	f7fd f94b 	bl	8001748 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044bc:	d901      	bls.n	80044c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e028      	b.n	8004514 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044c2:	4b16      	ldr	r3, [pc, #88]	; (800451c <HAL_PWREx_ConfigSupply+0xb0>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ce:	d1ee      	bne.n	80044ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b1e      	cmp	r3, #30
 80044d4:	d008      	beq.n	80044e8 <HAL_PWREx_ConfigSupply+0x7c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b2e      	cmp	r3, #46	; 0x2e
 80044da:	d005      	beq.n	80044e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b1d      	cmp	r3, #29
 80044e0:	d002      	beq.n	80044e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b2d      	cmp	r3, #45	; 0x2d
 80044e6:	d114      	bne.n	8004512 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80044e8:	f7fd f92e 	bl	8001748 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80044ee:	e009      	b.n	8004504 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044f0:	f7fd f92a 	bl	8001748 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044fe:	d901      	bls.n	8004504 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e007      	b.n	8004514 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_PWREx_ConfigSupply+0xb0>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004510:	d1ee      	bne.n	80044f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	58024800 	.word	0x58024800

08004520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08c      	sub	sp, #48	; 0x30
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f000 bc48 	b.w	8004dc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8088 	beq.w	8004652 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004542:	4b99      	ldr	r3, [pc, #612]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800454c:	4b96      	ldr	r3, [pc, #600]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	2b10      	cmp	r3, #16
 8004556:	d007      	beq.n	8004568 <HAL_RCC_OscConfig+0x48>
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	2b18      	cmp	r3, #24
 800455c:	d111      	bne.n	8004582 <HAL_RCC_OscConfig+0x62>
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	4b8f      	ldr	r3, [pc, #572]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d06d      	beq.n	8004650 <HAL_RCC_OscConfig+0x130>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d169      	bne.n	8004650 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f000 bc21 	b.w	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x7a>
 800458c:	4b86      	ldr	r3, [pc, #536]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a85      	ldr	r2, [pc, #532]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e02e      	b.n	80045f8 <HAL_RCC_OscConfig+0xd8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x9c>
 80045a2:	4b81      	ldr	r3, [pc, #516]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a80      	ldr	r2, [pc, #512]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b7e      	ldr	r3, [pc, #504]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0xd8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0xc0>
 80045c6:	4b78      	ldr	r3, [pc, #480]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a77      	ldr	r2, [pc, #476]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b75      	ldr	r3, [pc, #468]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a74      	ldr	r2, [pc, #464]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xd8>
 80045e0:	4b71      	ldr	r3, [pc, #452]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a70      	ldr	r2, [pc, #448]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b6e      	ldr	r3, [pc, #440]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6d      	ldr	r2, [pc, #436]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f8a2 	bl	8001748 <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004608:	f7fd f89e 	bl	8001748 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e3d4      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800461a:	4b63      	ldr	r3, [pc, #396]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0xe8>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd f88e 	bl	8001748 <HAL_GetTick>
 800462c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd f88a 	bl	8001748 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e3c0      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004642:	4b59      	ldr	r3, [pc, #356]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x110>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80ca 	beq.w	80047f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004660:	4b51      	ldr	r3, [pc, #324]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004668:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800466a:	4b4f      	ldr	r3, [pc, #316]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_RCC_OscConfig+0x166>
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2b18      	cmp	r3, #24
 800467a:	d156      	bne.n	800472a <HAL_RCC_OscConfig+0x20a>
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d151      	bne.n	800472a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004686:	4b48      	ldr	r3, [pc, #288]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_RCC_OscConfig+0x17e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e392      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800469e:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 0219 	bic.w	r2, r3, #25
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	493f      	ldr	r1, [pc, #252]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fd f84a 	bl	8001748 <HAL_GetTick>
 80046b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b8:	f7fd f846 	bl	8001748 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e37c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ca:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d6:	f7fd f843 	bl	8001760 <HAL_GetREVID>
 80046da:	4603      	mov	r3, r0
 80046dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d817      	bhi.n	8004714 <HAL_RCC_OscConfig+0x1f4>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d108      	bne.n	80046fe <HAL_RCC_OscConfig+0x1de>
 80046ec:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046f4:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046fc:	e07a      	b.n	80047f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	031b      	lsls	r3, r3, #12
 800470c:	4926      	ldr	r1, [pc, #152]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004712:	e06f      	b.n	80047f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	4921      	ldr	r1, [pc, #132]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004728:	e064      	b.n	80047f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d047      	beq.n	80047c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004732:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 0219 	bic.w	r2, r3, #25
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	491a      	ldr	r1, [pc, #104]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd f800 	bl	8001748 <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474c:	f7fc fffc 	bl	8001748 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e332      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476a:	f7fc fff9 	bl	8001760 <HAL_GetREVID>
 800476e:	4603      	mov	r3, r0
 8004770:	f241 0203 	movw	r2, #4099	; 0x1003
 8004774:	4293      	cmp	r3, r2
 8004776:	d819      	bhi.n	80047ac <HAL_RCC_OscConfig+0x28c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d108      	bne.n	8004792 <HAL_RCC_OscConfig+0x272>
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004788:	4a07      	ldr	r2, [pc, #28]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 800478a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478e:	6053      	str	r3, [r2, #4]
 8004790:	e030      	b.n	80047f4 <HAL_RCC_OscConfig+0x2d4>
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	031b      	lsls	r3, r3, #12
 80047a0:	4901      	ldr	r1, [pc, #4]	; (80047a8 <HAL_RCC_OscConfig+0x288>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
 80047a6:	e025      	b.n	80047f4 <HAL_RCC_OscConfig+0x2d4>
 80047a8:	58024400 	.word	0x58024400
 80047ac:	4b9a      	ldr	r3, [pc, #616]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	4997      	ldr	r1, [pc, #604]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	e018      	b.n	80047f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c2:	4b95      	ldr	r3, [pc, #596]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a94      	ldr	r2, [pc, #592]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fc ffbb 	bl	8001748 <HAL_GetTick>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fc ffb7 	bl	8001748 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e2ed      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047e8:	4b8b      	ldr	r3, [pc, #556]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80a9 	beq.w	8004954 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004802:	4b85      	ldr	r3, [pc, #532]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800480a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800480c:	4b82      	ldr	r3, [pc, #520]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d007      	beq.n	8004828 <HAL_RCC_OscConfig+0x308>
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b18      	cmp	r3, #24
 800481c:	d13a      	bne.n	8004894 <HAL_RCC_OscConfig+0x374>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d135      	bne.n	8004894 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004828:	4b7b      	ldr	r3, [pc, #492]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_OscConfig+0x320>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e2c1      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004840:	f7fc ff8e 	bl	8001760 <HAL_GetREVID>
 8004844:	4603      	mov	r3, r0
 8004846:	f241 0203 	movw	r2, #4099	; 0x1003
 800484a:	4293      	cmp	r3, r2
 800484c:	d817      	bhi.n	800487e <HAL_RCC_OscConfig+0x35e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	2b20      	cmp	r3, #32
 8004854:	d108      	bne.n	8004868 <HAL_RCC_OscConfig+0x348>
 8004856:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800485e:	4a6e      	ldr	r2, [pc, #440]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004864:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004866:	e075      	b.n	8004954 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004868:	4b6b      	ldr	r3, [pc, #428]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	069b      	lsls	r3, r3, #26
 8004876:	4968      	ldr	r1, [pc, #416]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800487c:	e06a      	b.n	8004954 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800487e:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	061b      	lsls	r3, r3, #24
 800488c:	4962      	ldr	r1, [pc, #392]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004892:	e05f      	b.n	8004954 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d042      	beq.n	8004922 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800489c:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fc ff4e 	bl	8001748 <HAL_GetTick>
 80048ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048b0:	f7fc ff4a 	bl	8001748 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e280      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048c2:	4b55      	ldr	r3, [pc, #340]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ce:	f7fc ff47 	bl	8001760 <HAL_GetREVID>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80048d8:	4293      	cmp	r3, r2
 80048da:	d817      	bhi.n	800490c <HAL_RCC_OscConfig+0x3ec>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d108      	bne.n	80048f6 <HAL_RCC_OscConfig+0x3d6>
 80048e4:	4b4c      	ldr	r3, [pc, #304]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048ec:	4a4a      	ldr	r2, [pc, #296]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80048ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f2:	6053      	str	r3, [r2, #4]
 80048f4:	e02e      	b.n	8004954 <HAL_RCC_OscConfig+0x434>
 80048f6:	4b48      	ldr	r3, [pc, #288]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	069b      	lsls	r3, r3, #26
 8004904:	4944      	ldr	r1, [pc, #272]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
 800490a:	e023      	b.n	8004954 <HAL_RCC_OscConfig+0x434>
 800490c:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	493f      	ldr	r1, [pc, #252]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	60cb      	str	r3, [r1, #12]
 8004920:	e018      	b.n	8004954 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004922:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fc ff0b 	bl	8001748 <HAL_GetTick>
 8004932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004936:	f7fc ff07 	bl	8001748 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e23d      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004948:	4b33      	ldr	r3, [pc, #204]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f0      	bne.n	8004936 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d036      	beq.n	80049ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d019      	beq.n	800499c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fc fee8 	bl	8001748 <HAL_GetTick>
 8004978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7fc fee4 	bl	8001748 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e21a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x45c>
 800499a:	e018      	b.n	80049ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 800499e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a0:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80049a2:	f023 0301 	bic.w	r3, r3, #1
 80049a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fc fece 	bl	8001748 <HAL_GetTick>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fc feca 	bl	8001748 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e200      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d039      	beq.n	8004a4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01c      	beq.n	8004a1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a0c      	ldr	r2, [pc, #48]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 80049e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049ee:	f7fc feab 	bl	8001748 <HAL_GetTick>
 80049f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f6:	f7fc fea7 	bl	8001748 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e1dd      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_OscConfig+0x4f8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x4d6>
 8004a14:	e01b      	b.n	8004a4e <HAL_RCC_OscConfig+0x52e>
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a1c:	4b9b      	ldr	r3, [pc, #620]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a9a      	ldr	r2, [pc, #616]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a28:	f7fc fe8e 	bl	8001748 <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a30:	f7fc fe8a 	bl	8001748 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e1c0      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a42:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8081 	beq.w	8004b5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a5c:	4b8c      	ldr	r3, [pc, #560]	; (8004c90 <HAL_RCC_OscConfig+0x770>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a8b      	ldr	r2, [pc, #556]	; (8004c90 <HAL_RCC_OscConfig+0x770>)
 8004a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a68:	f7fc fe6e 	bl	8001748 <HAL_GetTick>
 8004a6c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a70:	f7fc fe6a 	bl	8001748 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e1a0      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a82:	4b83      	ldr	r3, [pc, #524]	; (8004c90 <HAL_RCC_OscConfig+0x770>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d106      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x584>
 8004a96:	4b7d      	ldr	r3, [pc, #500]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	4a7c      	ldr	r2, [pc, #496]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa2:	e02d      	b.n	8004b00 <HAL_RCC_OscConfig+0x5e0>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10c      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x5a6>
 8004aac:	4b77      	ldr	r3, [pc, #476]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a76      	ldr	r2, [pc, #472]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab8:	4b74      	ldr	r3, [pc, #464]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	4a73      	ldr	r2, [pc, #460]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac4:	e01c      	b.n	8004b00 <HAL_RCC_OscConfig+0x5e0>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b05      	cmp	r3, #5
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5c8>
 8004ace:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a6e      	ldr	r2, [pc, #440]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	f043 0304 	orr.w	r3, r3, #4
 8004ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ada:	4b6c      	ldr	r3, [pc, #432]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a6b      	ldr	r2, [pc, #428]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0x5e0>
 8004ae8:	4b68      	ldr	r3, [pc, #416]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	4a67      	ldr	r2, [pc, #412]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70
 8004af4:	4b65      	ldr	r3, [pc, #404]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	4a64      	ldr	r2, [pc, #400]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004afa:	f023 0304 	bic.w	r3, r3, #4
 8004afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d015      	beq.n	8004b34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fc fe1e 	bl	8001748 <HAL_GetTick>
 8004b0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fc fe1a 	bl	8001748 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e14e      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b26:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0ee      	beq.n	8004b10 <HAL_RCC_OscConfig+0x5f0>
 8004b32:	e014      	b.n	8004b5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fc fe08 	bl	8001748 <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3c:	f7fc fe04 	bl	8001748 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e138      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b52:	4b4e      	ldr	r3, [pc, #312]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1ee      	bne.n	8004b3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 812d 	beq.w	8004dc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b68:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b70:	2b18      	cmp	r3, #24
 8004b72:	f000 80bd 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	f040 809e 	bne.w	8004cbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b80:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a41      	ldr	r2, [pc, #260]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fc fddc 	bl	8001748 <HAL_GetTick>
 8004b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fc fdd8 	bl	8001748 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e10e      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb6:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_RCC_OscConfig+0x774>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	4931      	ldr	r1, [pc, #196]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	628b      	str	r3, [r1, #40]	; 0x28
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	025b      	lsls	r3, r3, #9
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	3b01      	subs	r3, #1
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bfc:	4923      	ldr	r1, [pc, #140]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c02:	4b22      	ldr	r3, [pc, #136]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c12:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCC_OscConfig+0x778>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c1a:	00d2      	lsls	r2, r2, #3
 8004c1c:	491b      	ldr	r1, [pc, #108]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	f023 020c 	bic.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	4917      	ldr	r1, [pc, #92]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c34:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	f023 0202 	bic.w	r2, r3, #2
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	4912      	ldr	r1, [pc, #72]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c52:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	4a0d      	ldr	r2, [pc, #52]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	4a07      	ldr	r2, [pc, #28]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a04      	ldr	r2, [pc, #16]	; (8004c8c <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fc fd61 	bl	8001748 <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c88:	e011      	b.n	8004cae <HAL_RCC_OscConfig+0x78e>
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	58024800 	.word	0x58024800
 8004c94:	fffffc0c 	.word	0xfffffc0c
 8004c98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fc fd54 	bl	8001748 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e08a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cae:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x77c>
 8004cba:	e082      	b.n	8004dc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbc:	4b43      	ldr	r3, [pc, #268]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a42      	ldr	r2, [pc, #264]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fc fd3e 	bl	8001748 <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fc fd3a 	bl	8001748 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e070      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ce2:	4b3a      	ldr	r3, [pc, #232]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x7b0>
 8004cee:	e068      	b.n	8004dc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cf0:	4b36      	ldr	r3, [pc, #216]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cf6:	4b35      	ldr	r3, [pc, #212]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d031      	beq.n	8004d68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f003 0203 	and.w	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d12a      	bne.n	8004d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d122      	bne.n	8004d68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d11a      	bne.n	8004d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	0a5b      	lsrs	r3, r3, #9
 8004d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d111      	bne.n	8004d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d108      	bne.n	8004d68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	0e1b      	lsrs	r3, r3, #24
 8004d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e02b      	b.n	8004dc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d6c:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	08db      	lsrs	r3, r3, #3
 8004d72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d01f      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d82:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d8e:	f7fc fcdb 	bl	8001748 <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d94:	bf00      	nop
 8004d96:	f7fc fcd7 	bl	8001748 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d0f9      	beq.n	8004d96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <HAL_RCC_OscConfig+0x8b0>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004dae:	00d2      	lsls	r2, r2, #3
 8004db0:	4906      	ldr	r1, [pc, #24]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <HAL_RCC_OscConfig+0x8ac>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3730      	adds	r7, #48	; 0x30
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	58024400 	.word	0x58024400
 8004dd0:	ffff0007 	.word	0xffff0007

08004dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e19c      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de8:	4b8a      	ldr	r3, [pc, #552]	; (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d910      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b87      	ldr	r3, [pc, #540]	; (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 020f 	bic.w	r2, r3, #15
 8004dfe:	4985      	ldr	r1, [pc, #532]	; (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b83      	ldr	r3, [pc, #524]	; (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e184      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d010      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	4b7b      	ldr	r3, [pc, #492]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d908      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e34:	4b78      	ldr	r3, [pc, #480]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	4975      	ldr	r1, [pc, #468]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d010      	beq.n	8004e74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	4b70      	ldr	r3, [pc, #448]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d908      	bls.n	8004e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e62:	4b6d      	ldr	r3, [pc, #436]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	496a      	ldr	r1, [pc, #424]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	4b64      	ldr	r3, [pc, #400]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d908      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e90:	4b61      	ldr	r3, [pc, #388]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	495e      	ldr	r1, [pc, #376]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	4b59      	ldr	r3, [pc, #356]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d908      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ebe:	4b56      	ldr	r3, [pc, #344]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4953      	ldr	r1, [pc, #332]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	4b4d      	ldr	r3, [pc, #308]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d908      	bls.n	8004efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eec:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f023 020f 	bic.w	r2, r3, #15
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4947      	ldr	r1, [pc, #284]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d055      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f0a:	4b43      	ldr	r3, [pc, #268]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4940      	ldr	r1, [pc, #256]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f24:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d121      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0f6      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0ea      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0de      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f64:	4b2c      	ldr	r3, [pc, #176]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0d6      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f74:	4b28      	ldr	r3, [pc, #160]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f023 0207 	bic.w	r2, r3, #7
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4925      	ldr	r1, [pc, #148]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fc fbdf 	bl	8001748 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8e:	f7fc fbdb 	bl	8001748 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0be      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa4:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d1eb      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d208      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd2:	4b11      	ldr	r3, [pc, #68]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f023 020f 	bic.w	r2, r3, #15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	490e      	ldr	r1, [pc, #56]	; (8005018 <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d214      	bcs.n	800501c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f023 020f 	bic.w	r2, r3, #15
 8004ffa:	4906      	ldr	r1, [pc, #24]	; (8005014 <HAL_RCC_ClockConfig+0x240>)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCC_ClockConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e086      	b.n	8005122 <HAL_RCC_ClockConfig+0x34e>
 8005014:	52002000 	.word	0x52002000
 8005018:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	4b3f      	ldr	r3, [pc, #252]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005034:	429a      	cmp	r2, r3
 8005036:	d208      	bcs.n	800504a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005038:	4b3c      	ldr	r3, [pc, #240]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4939      	ldr	r1, [pc, #228]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 8005046:	4313      	orrs	r3, r2
 8005048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d010      	beq.n	8005078 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005062:	429a      	cmp	r2, r3
 8005064:	d208      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005066:	4b31      	ldr	r3, [pc, #196]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	492e      	ldr	r1, [pc, #184]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 8005074:	4313      	orrs	r3, r2
 8005076:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	4b28      	ldr	r3, [pc, #160]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005090:	429a      	cmp	r2, r3
 8005092:	d208      	bcs.n	80050a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005094:	4b25      	ldr	r3, [pc, #148]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	4922      	ldr	r1, [pc, #136]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d010      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69da      	ldr	r2, [r3, #28]
 80050b6:	4b1d      	ldr	r3, [pc, #116]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050be:	429a      	cmp	r2, r3
 80050c0:	d208      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050c2:	4b1a      	ldr	r3, [pc, #104]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4917      	ldr	r1, [pc, #92]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050d4:	f000 f834 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	4912      	ldr	r1, [pc, #72]	; (8005130 <HAL_RCC_ClockConfig+0x35c>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <HAL_RCC_ClockConfig+0x358>)
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <HAL_RCC_ClockConfig+0x35c>)
 80050fc:	5cd3      	ldrb	r3, [r2, r3]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <HAL_RCC_ClockConfig+0x360>)
 800510a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800510c:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <HAL_RCC_ClockConfig+0x364>)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <HAL_RCC_ClockConfig+0x368>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fc f9d0 	bl	80014bc <HAL_InitTick>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
 8005130:	0800c160 	.word	0x0800c160
 8005134:	24000004 	.word	0x24000004
 8005138:	24000000 	.word	0x24000000
 800513c:	2400000c 	.word	0x2400000c

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005146:	4bb3      	ldr	r3, [pc, #716]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800514e:	2b18      	cmp	r3, #24
 8005150:	f200 8155 	bhi.w	80053fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005154:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	080051c1 	.word	0x080051c1
 8005160:	080053ff 	.word	0x080053ff
 8005164:	080053ff 	.word	0x080053ff
 8005168:	080053ff 	.word	0x080053ff
 800516c:	080053ff 	.word	0x080053ff
 8005170:	080053ff 	.word	0x080053ff
 8005174:	080053ff 	.word	0x080053ff
 8005178:	080053ff 	.word	0x080053ff
 800517c:	080051e7 	.word	0x080051e7
 8005180:	080053ff 	.word	0x080053ff
 8005184:	080053ff 	.word	0x080053ff
 8005188:	080053ff 	.word	0x080053ff
 800518c:	080053ff 	.word	0x080053ff
 8005190:	080053ff 	.word	0x080053ff
 8005194:	080053ff 	.word	0x080053ff
 8005198:	080053ff 	.word	0x080053ff
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	080053ff 	.word	0x080053ff
 80051a4:	080053ff 	.word	0x080053ff
 80051a8:	080053ff 	.word	0x080053ff
 80051ac:	080053ff 	.word	0x080053ff
 80051b0:	080053ff 	.word	0x080053ff
 80051b4:	080053ff 	.word	0x080053ff
 80051b8:	080053ff 	.word	0x080053ff
 80051bc:	080051f3 	.word	0x080051f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c0:	4b94      	ldr	r3, [pc, #592]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051cc:	4b91      	ldr	r3, [pc, #580]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	4a90      	ldr	r2, [pc, #576]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80051de:	e111      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051e0:	4b8d      	ldr	r3, [pc, #564]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051e2:	61bb      	str	r3, [r7, #24]
      break;
 80051e4:	e10e      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80051e6:	4b8d      	ldr	r3, [pc, #564]	; (800541c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051e8:	61bb      	str	r3, [r7, #24]
      break;
 80051ea:	e10b      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051ec:	4b8c      	ldr	r3, [pc, #560]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051ee:	61bb      	str	r3, [r7, #24]
      break;
 80051f0:	e108      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051f2:	4b88      	ldr	r3, [pc, #544]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051fc:	4b85      	ldr	r3, [pc, #532]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005206:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005208:	4b82      	ldr	r3, [pc, #520]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005212:	4b80      	ldr	r3, [pc, #512]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	08db      	lsrs	r3, r3, #3
 8005218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80e1 	beq.w	80053f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b02      	cmp	r3, #2
 800523a:	f000 8083 	beq.w	8005344 <HAL_RCC_GetSysClockFreq+0x204>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b02      	cmp	r3, #2
 8005242:	f200 80a1 	bhi.w	8005388 <HAL_RCC_GetSysClockFreq+0x248>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x114>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d056      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005252:	e099      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005254:	4b6f      	ldr	r3, [pc, #444]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02d      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005260:	4b6c      	ldr	r3, [pc, #432]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	08db      	lsrs	r3, r3, #3
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	4a6b      	ldr	r2, [pc, #428]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	ee07 3a90 	vmov	s15, r3
 8005278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	4b62      	ldr	r3, [pc, #392]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529a:	ed97 6a02 	vldr	s12, [r7, #8]
 800529e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052ba:	e087      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005428 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b51      	ldr	r3, [pc, #324]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a02 	vldr	s12, [r7, #8]
 80052e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052fe:	e065      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800542c <HAL_RCC_GetSysClockFreq+0x2ec>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b40      	ldr	r3, [pc, #256]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a02 	vldr	s12, [r7, #8]
 8005326:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005342:	e043      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005356:	4b2f      	ldr	r3, [pc, #188]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005366:	ed97 6a02 	vldr	s12, [r7, #8]
 800536a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 800536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005386:	e021      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	eddf 6a26 	vldr	s13, [pc, #152]	; 800542c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005424 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	0a5b      	lsrs	r3, r3, #9
 80053d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d6:	3301      	adds	r3, #1
 80053d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f0:	ee17 3a90 	vmov	r3, s15
 80053f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053f6:	e005      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
      break;
 80053fc:	e002      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053fe:	4b07      	ldr	r3, [pc, #28]	; (800541c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005400:	61bb      	str	r3, [r7, #24]
      break;
 8005402:	bf00      	nop
  }

  return sysclockfreq;
 8005404:	69bb      	ldr	r3, [r7, #24]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	03d09000 	.word	0x03d09000
 800541c:	003d0900 	.word	0x003d0900
 8005420:	01770000 	.word	0x01770000
 8005424:	46000000 	.word	0x46000000
 8005428:	4c742400 	.word	0x4c742400
 800542c:	4a742400 	.word	0x4a742400
 8005430:	4bbb8000 	.word	0x4bbb8000

08005434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800543a:	f7ff fe81 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800543e:	4602      	mov	r2, r0
 8005440:	4b10      	ldr	r3, [pc, #64]	; (8005484 <HAL_RCC_GetHCLKFreq+0x50>)
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	490f      	ldr	r1, [pc, #60]	; (8005488 <HAL_RCC_GetHCLKFreq+0x54>)
 800544c:	5ccb      	ldrb	r3, [r1, r3]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_RCC_GetHCLKFreq+0x50>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	4a09      	ldr	r2, [pc, #36]	; (8005488 <HAL_RCC_GetHCLKFreq+0x54>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	4a07      	ldr	r2, [pc, #28]	; (800548c <HAL_RCC_GetHCLKFreq+0x58>)
 8005470:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005472:	4a07      	ldr	r2, [pc, #28]	; (8005490 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <HAL_RCC_GetHCLKFreq+0x58>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	58024400 	.word	0x58024400
 8005488:	0800c160 	.word	0x0800c160
 800548c:	24000004 	.word	0x24000004
 8005490:	24000000 	.word	0x24000000

08005494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005498:	f7ff ffcc 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4904      	ldr	r1, [pc, #16]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	58024400 	.word	0x58024400
 80054bc:	0800c160 	.word	0x0800c160

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054c4:	f7ff ffb6 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	0a1b      	lsrs	r3, r3, #8
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4904      	ldr	r1, [pc, #16]	; (80054e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58024400 	.word	0x58024400
 80054e8:	0800c160 	.word	0x0800c160

080054ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	223f      	movs	r2, #63	; 0x3f
 80054fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <HAL_RCC_GetClockConfig+0x7c>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f003 0207 	and.w	r2, r3, #7
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005508:	4b17      	ldr	r3, [pc, #92]	; (8005568 <HAL_RCC_GetClockConfig+0x7c>)
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HAL_RCC_GetClockConfig+0x7c>)
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 020f 	and.w	r2, r3, #15
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005520:	4b11      	ldr	r3, [pc, #68]	; (8005568 <HAL_RCC_GetClockConfig+0x7c>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800552c:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <HAL_RCC_GetClockConfig+0x7c>)
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_GetClockConfig+0x7c>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <HAL_RCC_GetClockConfig+0x7c>)
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RCC_GetClockConfig+0x80>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	58024400 	.word	0x58024400
 800556c:	52002000 	.word	0x52002000

08005570 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005574:	b0ca      	sub	sp, #296	; 0x128
 8005576:	af00      	add	r7, sp, #0
 8005578:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800557c:	2300      	movs	r3, #0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005582:	2300      	movs	r3, #0
 8005584:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005594:	2500      	movs	r5, #0
 8005596:	ea54 0305 	orrs.w	r3, r4, r5
 800559a:	d049      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055a6:	d02f      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055ac:	d828      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b2:	d01a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b8:	d822      	bhi.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c2:	d007      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055c4:	e01c      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c6:	4bb8      	ldr	r3, [pc, #736]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	4ab7      	ldr	r2, [pc, #732]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055d2:	e01a      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d8:	3308      	adds	r3, #8
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f002 fb61 	bl	8007ca4 <RCCEx_PLL2_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055e8:	e00f      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ee:	3328      	adds	r3, #40	; 0x28
 80055f0:	2102      	movs	r1, #2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f002 fc08 	bl	8007e08 <RCCEx_PLL3_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055fe:	e004      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005606:	e000      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005612:	4ba5      	ldr	r3, [pc, #660]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005620:	4aa1      	ldr	r2, [pc, #644]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005622:	430b      	orrs	r3, r1
 8005624:	6513      	str	r3, [r2, #80]	; 0x50
 8005626:	e003      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005628:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800562c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800563c:	f04f 0900 	mov.w	r9, #0
 8005640:	ea58 0309 	orrs.w	r3, r8, r9
 8005644:	d047      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	2b04      	cmp	r3, #4
 800564e:	d82a      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800566d 	.word	0x0800566d
 800565c:	0800567b 	.word	0x0800567b
 8005660:	08005691 	.word	0x08005691
 8005664:	080056af 	.word	0x080056af
 8005668:	080056af 	.word	0x080056af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566c:	4b8e      	ldr	r3, [pc, #568]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a8d      	ldr	r2, [pc, #564]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005676:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005678:	e01a      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567e:	3308      	adds	r3, #8
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f002 fb0e 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800568e:	e00f      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005694:	3328      	adds	r3, #40	; 0x28
 8005696:	2100      	movs	r1, #0
 8005698:	4618      	mov	r0, r3
 800569a:	f002 fbb5 	bl	8007e08 <RCCEx_PLL3_Config>
 800569e:	4603      	mov	r3, r0
 80056a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056a4:	e004      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056b8:	4b7b      	ldr	r3, [pc, #492]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056bc:	f023 0107 	bic.w	r1, r3, #7
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c6:	4a78      	ldr	r2, [pc, #480]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6513      	str	r3, [r2, #80]	; 0x50
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80056e2:	f04f 0b00 	mov.w	fp, #0
 80056e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80056ea:	d04c      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f6:	d030      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80056f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fc:	d829      	bhi.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005700:	d02d      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005702:	2bc0      	cmp	r3, #192	; 0xc0
 8005704:	d825      	bhi.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005706:	2b80      	cmp	r3, #128	; 0x80
 8005708:	d018      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800570a:	2b80      	cmp	r3, #128	; 0x80
 800570c:	d821      	bhi.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d007      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005716:	e01c      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005718:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	4a62      	ldr	r2, [pc, #392]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800571e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005724:	e01c      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572a:	3308      	adds	r3, #8
 800572c:	2100      	movs	r1, #0
 800572e:	4618      	mov	r0, r3
 8005730:	f002 fab8 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800573a:	e011      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005740:	3328      	adds	r3, #40	; 0x28
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f002 fb5f 	bl	8007e08 <RCCEx_PLL3_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005750:	e006      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005758:	e002      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800575e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005768:	4b4f      	ldr	r3, [pc, #316]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	4a4c      	ldr	r2, [pc, #304]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005778:	430b      	orrs	r3, r1
 800577a:	6513      	str	r3, [r2, #80]	; 0x50
 800577c:	e003      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005792:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005796:	2300      	movs	r3, #0
 8005798:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800579c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80057a0:	460b      	mov	r3, r1
 80057a2:	4313      	orrs	r3, r2
 80057a4:	d053      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057b2:	d035      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80057b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057b8:	d82e      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057be:	d031      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80057c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057c4:	d828      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ca:	d01a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80057cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d0:	d822      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80057d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057da:	d007      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80057dc:	e01c      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057de:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4a31      	ldr	r2, [pc, #196]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057ea:	e01c      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f0:	3308      	adds	r3, #8
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f002 fa55 	bl	8007ca4 <RCCEx_PLL2_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005800:	e011      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005806:	3328      	adds	r3, #40	; 0x28
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f002 fafc 	bl	8007e08 <RCCEx_PLL3_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005816:	e006      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800581e:	e002      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005820:	bf00      	nop
 8005822:	e000      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800582e:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800583e:	4a1a      	ldr	r2, [pc, #104]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005840:	430b      	orrs	r3, r1
 8005842:	6593      	str	r3, [r2, #88]	; 0x58
 8005844:	e003      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800584a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800585a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005864:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005868:	460b      	mov	r3, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	d056      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800587a:	d038      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800587c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005880:	d831      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005882:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005886:	d034      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005888:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800588c:	d82b      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800588e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005892:	d01d      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005898:	d825      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800589e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80058a4:	e01f      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058a6:	bf00      	nop
 80058a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ac:	4ba2      	ldr	r3, [pc, #648]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4aa1      	ldr	r2, [pc, #644]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058b8:	e01c      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058be:	3308      	adds	r3, #8
 80058c0:	2100      	movs	r1, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f002 f9ee 	bl	8007ca4 <RCCEx_PLL2_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058ce:	e011      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d4:	3328      	adds	r3, #40	; 0x28
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f002 fa95 	bl	8007e08 <RCCEx_PLL3_Config>
 80058de:	4603      	mov	r3, r0
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058e4:	e006      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ec:	e002      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058fc:	4b8e      	ldr	r3, [pc, #568]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005900:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005908:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800590c:	4a8a      	ldr	r2, [pc, #552]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800590e:	430b      	orrs	r3, r1
 8005910:	6593      	str	r3, [r2, #88]	; 0x58
 8005912:	e003      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005918:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800591c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800592c:	2300      	movs	r3, #0
 800592e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005932:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005936:	460b      	mov	r3, r1
 8005938:	4313      	orrs	r3, r2
 800593a:	d03a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	d01f      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005946:	2b30      	cmp	r3, #48	; 0x30
 8005948:	d819      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800594a:	2b20      	cmp	r3, #32
 800594c:	d00c      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800594e:	2b20      	cmp	r3, #32
 8005950:	d815      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d019      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005956:	2b10      	cmp	r3, #16
 8005958:	d111      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595a:	4b77      	ldr	r3, [pc, #476]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	4a76      	ldr	r2, [pc, #472]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005964:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005966:	e011      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596c:	3308      	adds	r3, #8
 800596e:	2102      	movs	r1, #2
 8005970:	4618      	mov	r0, r3
 8005972:	f002 f997 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800597c:	e006      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005984:	e002      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005994:	4b68      	ldr	r3, [pc, #416]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005998:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a2:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80059be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d051      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059dc:	d035      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80059de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059e2:	d82e      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059e8:	d031      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80059ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059ee:	d828      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f4:	d01a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80059f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fa:	d822      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d007      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a06:	e01c      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a08:	4b4b      	ldr	r3, [pc, #300]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	4a4a      	ldr	r2, [pc, #296]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a14:	e01c      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f002 f940 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a2a:	e011      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	3328      	adds	r3, #40	; 0x28
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f002 f9e7 	bl	8007e08 <RCCEx_PLL3_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a40:	e006      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a48:	e002      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a58:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a66:	4a34      	ldr	r2, [pc, #208]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	6513      	str	r3, [r2, #80]	; 0x50
 8005a6c:	e003      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a86:	2300      	movs	r3, #0
 8005a88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005a90:	460b      	mov	r3, r1
 8005a92:	4313      	orrs	r3, r2
 8005a94:	d056      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa0:	d033      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa6:	d82c      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005aa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aac:	d02f      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005aae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ab2:	d826      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ab4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ab8:	d02b      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005aba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005abe:	d820      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac4:	d012      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aca:	d81a      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d022      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad4:	d115      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ada:	3308      	adds	r3, #8
 8005adc:	2101      	movs	r1, #1
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f002 f8e0 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005aea:	e015      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af0:	3328      	adds	r3, #40	; 0x28
 8005af2:	2101      	movs	r1, #1
 8005af4:	4618      	mov	r0, r3
 8005af6:	f002 f987 	bl	8007e08 <RCCEx_PLL3_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b00:	e00a      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b08:	e006      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e004      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10d      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b24:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2e:	4a02      	ldr	r2, [pc, #8]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6513      	str	r3, [r2, #80]	; 0x50
 8005b34:	e006      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b36:	bf00      	nop
 8005b38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d055      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b70:	d033      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b76:	d82c      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d02f      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	d826      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b88:	d02b      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005b8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b8e:	d820      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b94:	d012      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b9a:	d81a      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d022      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ba4:	d115      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005baa:	3308      	adds	r3, #8
 8005bac:	2101      	movs	r1, #1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f002 f878 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bba:	e015      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc0:	3328      	adds	r3, #40	; 0x28
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f002 f91f 	bl	8007e08 <RCCEx_PLL3_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bd0:	e00a      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bd8:	e006      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e004      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bde:	bf00      	nop
 8005be0:	e002      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005bf0:	4ba3      	ldr	r3, [pc, #652]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c00:	4a9f      	ldr	r2, [pc, #636]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c02:	430b      	orrs	r3, r1
 8005c04:	6593      	str	r3, [r2, #88]	; 0x58
 8005c06:	e003      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c20:	2300      	movs	r3, #0
 8005c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	d037      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3a:	d00e      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c40:	d816      	bhi.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c4a:	d111      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c4c:	4b8c      	ldr	r3, [pc, #560]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	4a8b      	ldr	r2, [pc, #556]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c58:	e00f      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c5e:	3308      	adds	r3, #8
 8005c60:	2101      	movs	r1, #1
 8005c62:	4618      	mov	r0, r3
 8005c64:	f002 f81e 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c6e:	e004      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c76:	e000      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c82:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	4a7b      	ldr	r2, [pc, #492]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6513      	str	r3, [r2, #80]	; 0x50
 8005c96:	e003      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	d039      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d81c      	bhi.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005cca:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005d0d 	.word	0x08005d0d
 8005cd4:	08005ce1 	.word	0x08005ce1
 8005cd8:	08005cef 	.word	0x08005cef
 8005cdc:	08005d0d 	.word	0x08005d0d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce0:	4b67      	ldr	r3, [pc, #412]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4a66      	ldr	r2, [pc, #408]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cec:	e00f      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 ffd4 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d02:	e004      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d0a:	e000      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d16:	4b5a      	ldr	r3, [pc, #360]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	f023 0103 	bic.w	r1, r3, #3
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d24:	4a56      	ldr	r2, [pc, #344]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d26:	430b      	orrs	r3, r1
 8005d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d2a:	e003      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d44:	2300      	movs	r3, #0
 8005d46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f000 809f 	beq.w	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d56:	4b4b      	ldr	r3, [pc, #300]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a4a      	ldr	r2, [pc, #296]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d62:	f7fb fcf1 	bl	8001748 <HAL_GetTick>
 8005d66:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d6a:	e00b      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6c:	f7fb fcec 	bl	8001748 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b64      	cmp	r3, #100	; 0x64
 8005d7a:	d903      	bls.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d82:	e005      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d84:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0ed      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d179      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d98:	4b39      	ldr	r3, [pc, #228]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005da4:	4053      	eors	r3, r2
 8005da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d015      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dae:	4b34      	ldr	r3, [pc, #208]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dba:	4b31      	ldr	r3, [pc, #196]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	4a30      	ldr	r2, [pc, #192]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc6:	4b2e      	ldr	r3, [pc, #184]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	4a2d      	ldr	r2, [pc, #180]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005dd2:	4a2b      	ldr	r2, [pc, #172]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de6:	d118      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fb fcae 	bl	8001748 <HAL_GetTick>
 8005dec:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005df0:	e00d      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df2:	f7fb fca9 	bl	8001748 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005dfc:	1ad2      	subs	r2, r2, r3
 8005dfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d903      	bls.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005e0c:	e005      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e0e:	4b1c      	ldr	r3, [pc, #112]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0eb      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d129      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e32:	d10e      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005e34:	4b12      	ldr	r3, [pc, #72]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e44:	091a      	lsrs	r2, r3, #4
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	4a0d      	ldr	r2, [pc, #52]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6113      	str	r3, [r2, #16]
 8005e50:	e005      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e5c:	6113      	str	r3, [r2, #16]
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e60:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e6e:	4a04      	ldr	r2, [pc, #16]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e70:	430b      	orrs	r3, r1
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
 8005e74:	e00e      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005e7e:	e009      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005e80:	58024400 	.word	0x58024400
 8005e84:	58024800 	.word	0x58024800
 8005e88:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f002 0301 	and.w	r3, r2, #1
 8005ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eaa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f000 8089 	beq.w	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ebc:	2b28      	cmp	r3, #40	; 0x28
 8005ebe:	d86b      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005fa1 	.word	0x08005fa1
 8005ecc:	08005f99 	.word	0x08005f99
 8005ed0:	08005f99 	.word	0x08005f99
 8005ed4:	08005f99 	.word	0x08005f99
 8005ed8:	08005f99 	.word	0x08005f99
 8005edc:	08005f99 	.word	0x08005f99
 8005ee0:	08005f99 	.word	0x08005f99
 8005ee4:	08005f99 	.word	0x08005f99
 8005ee8:	08005f6d 	.word	0x08005f6d
 8005eec:	08005f99 	.word	0x08005f99
 8005ef0:	08005f99 	.word	0x08005f99
 8005ef4:	08005f99 	.word	0x08005f99
 8005ef8:	08005f99 	.word	0x08005f99
 8005efc:	08005f99 	.word	0x08005f99
 8005f00:	08005f99 	.word	0x08005f99
 8005f04:	08005f99 	.word	0x08005f99
 8005f08:	08005f83 	.word	0x08005f83
 8005f0c:	08005f99 	.word	0x08005f99
 8005f10:	08005f99 	.word	0x08005f99
 8005f14:	08005f99 	.word	0x08005f99
 8005f18:	08005f99 	.word	0x08005f99
 8005f1c:	08005f99 	.word	0x08005f99
 8005f20:	08005f99 	.word	0x08005f99
 8005f24:	08005f99 	.word	0x08005f99
 8005f28:	08005fa1 	.word	0x08005fa1
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f99 	.word	0x08005f99
 8005f38:	08005f99 	.word	0x08005f99
 8005f3c:	08005f99 	.word	0x08005f99
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005fa1 	.word	0x08005fa1
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f99 	.word	0x08005f99
 8005f58:	08005f99 	.word	0x08005f99
 8005f5c:	08005f99 	.word	0x08005f99
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005f99 	.word	0x08005f99
 8005f68:	08005fa1 	.word	0x08005fa1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f70:	3308      	adds	r3, #8
 8005f72:	2101      	movs	r1, #1
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fe95 	bl	8007ca4 <RCCEx_PLL2_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f80:	e00f      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f86:	3328      	adds	r3, #40	; 0x28
 8005f88:	2101      	movs	r1, #1
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 ff3c 	bl	8007e08 <RCCEx_PLL3_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f96:	e004      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005faa:	4bbf      	ldr	r3, [pc, #764]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb8:	4abb      	ldr	r2, [pc, #748]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	6553      	str	r3, [r2, #84]	; 0x54
 8005fbe:	e003      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f002 0302 	and.w	r3, r2, #2
 8005fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fde:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	d041      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d824      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006045 	.word	0x08006045
 8005ffc:	08006011 	.word	0x08006011
 8006000:	08006027 	.word	0x08006027
 8006004:	08006045 	.word	0x08006045
 8006008:	08006045 	.word	0x08006045
 800600c:	08006045 	.word	0x08006045
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006014:	3308      	adds	r3, #8
 8006016:	2101      	movs	r1, #1
 8006018:	4618      	mov	r0, r3
 800601a:	f001 fe43 	bl	8007ca4 <RCCEx_PLL2_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006024:	e00f      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602a:	3328      	adds	r3, #40	; 0x28
 800602c:	2101      	movs	r1, #1
 800602e:	4618      	mov	r0, r3
 8006030:	f001 feea 	bl	8007e08 <RCCEx_PLL3_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800603a:	e004      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800604e:	4b96      	ldr	r3, [pc, #600]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	f023 0107 	bic.w	r1, r3, #7
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800605a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605c:	4a92      	ldr	r2, [pc, #584]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800605e:	430b      	orrs	r3, r1
 8006060:	6553      	str	r3, [r2, #84]	; 0x54
 8006062:	e003      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006068:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f002 0304 	and.w	r3, r2, #4
 8006078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006082:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006086:	460b      	mov	r3, r1
 8006088:	4313      	orrs	r3, r2
 800608a:	d044      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006094:	2b05      	cmp	r3, #5
 8006096:	d825      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060ed 	.word	0x080060ed
 80060a4:	080060b9 	.word	0x080060b9
 80060a8:	080060cf 	.word	0x080060cf
 80060ac:	080060ed 	.word	0x080060ed
 80060b0:	080060ed 	.word	0x080060ed
 80060b4:	080060ed 	.word	0x080060ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060bc:	3308      	adds	r3, #8
 80060be:	2101      	movs	r1, #1
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 fdef 	bl	8007ca4 <RCCEx_PLL2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060cc:	e00f      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d2:	3328      	adds	r3, #40	; 0x28
 80060d4:	2101      	movs	r1, #1
 80060d6:	4618      	mov	r0, r3
 80060d8:	f001 fe96 	bl	8007e08 <RCCEx_PLL3_Config>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060e2:	e004      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060ea:	e000      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80060ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060f6:	4b6c      	ldr	r3, [pc, #432]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fa:	f023 0107 	bic.w	r1, r3, #7
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006106:	4a68      	ldr	r2, [pc, #416]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6593      	str	r3, [r2, #88]	; 0x58
 800610c:	e003      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006112:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f002 0320 	and.w	r3, r2, #32
 8006122:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006126:	2300      	movs	r3, #0
 8006128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800612c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d055      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006142:	d033      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006148:	d82c      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d02f      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006154:	d826      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006156:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800615a:	d02b      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800615c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006160:	d820      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006166:	d012      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800616c:	d81a      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d022      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006176:	d115      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617c:	3308      	adds	r3, #8
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f001 fd8f 	bl	8007ca4 <RCCEx_PLL2_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800618c:	e015      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006192:	3328      	adds	r3, #40	; 0x28
 8006194:	2102      	movs	r1, #2
 8006196:	4618      	mov	r0, r3
 8006198:	f001 fe36 	bl	8007e08 <RCCEx_PLL3_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061a2:	e00a      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061aa:	e006      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061ac:	bf00      	nop
 80061ae:	e004      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061b0:	bf00      	nop
 80061b2:	e002      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061b4:	bf00      	nop
 80061b6:	e000      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061c2:	4b39      	ldr	r3, [pc, #228]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d2:	4a35      	ldr	r2, [pc, #212]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6553      	str	r3, [r2, #84]	; 0x54
 80061d8:	e003      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80061ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4313      	orrs	r3, r2
 8006200:	d058      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800620a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800620e:	d033      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006210:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006214:	d82c      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621a:	d02f      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800621c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006220:	d826      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006226:	d02b      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800622c:	d820      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800622e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006232:	d012      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006238:	d81a      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d022      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800623e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006242:	d115      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006248:	3308      	adds	r3, #8
 800624a:	2100      	movs	r1, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f001 fd29 	bl	8007ca4 <RCCEx_PLL2_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006258:	e015      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800625e:	3328      	adds	r3, #40	; 0x28
 8006260:	2102      	movs	r1, #2
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fdd0 	bl	8007e08 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800626e:	e00a      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006276:	e006      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006278:	bf00      	nop
 800627a:	e004      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800627c:	bf00      	nop
 800627e:	e002      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006280:	bf00      	nop
 8006282:	e000      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10e      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006292:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800629e:	4a02      	ldr	r2, [pc, #8]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6593      	str	r3, [r2, #88]	; 0x58
 80062a4:	e006      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80062a6:	bf00      	nop
 80062a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80062c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062c4:	2300      	movs	r3, #0
 80062c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d055      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062e0:	d033      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80062e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062e6:	d82c      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ec:	d02f      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80062ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f2:	d826      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062f8:	d02b      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80062fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062fe:	d820      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006304:	d012      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800630a:	d81a      	bhi.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d022      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006314:	d115      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631a:	3308      	adds	r3, #8
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f001 fcc0 	bl	8007ca4 <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800632a:	e015      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800632c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006330:	3328      	adds	r3, #40	; 0x28
 8006332:	2102      	movs	r1, #2
 8006334:	4618      	mov	r0, r3
 8006336:	f001 fd67 	bl	8007e08 <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006340:	e00a      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006348:	e006      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800634a:	bf00      	nop
 800634c:	e004      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006360:	4ba1      	ldr	r3, [pc, #644]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006364:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006370:	4a9d      	ldr	r2, [pc, #628]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006372:	430b      	orrs	r3, r1
 8006374:	6593      	str	r3, [r2, #88]	; 0x58
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800637c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f002 0308 	and.w	r3, r2, #8
 800638c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006396:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d01e      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b2:	3328      	adds	r3, #40	; 0x28
 80063b4:	2102      	movs	r1, #2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fd26 	bl	8007e08 <RCCEx_PLL3_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063c8:	4b87      	ldr	r3, [pc, #540]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d8:	4a83      	ldr	r2, [pc, #524]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063da:	430b      	orrs	r3, r1
 80063dc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f002 0310 	and.w	r3, r2, #16
 80063ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063ee:	2300      	movs	r3, #0
 80063f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80063f8:	460b      	mov	r3, r1
 80063fa:	4313      	orrs	r3, r2
 80063fc:	d01e      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d10c      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800640c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006410:	3328      	adds	r3, #40	; 0x28
 8006412:	2102      	movs	r1, #2
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fcf7 	bl	8007e08 <RCCEx_PLL3_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006426:	4b70      	ldr	r3, [pc, #448]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006436:	4a6c      	ldr	r2, [pc, #432]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006438:	430b      	orrs	r3, r1
 800643a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800644c:	2300      	movs	r3, #0
 800644e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006452:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006456:	460b      	mov	r3, r1
 8006458:	4313      	orrs	r3, r2
 800645a:	d03e      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006460:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006468:	d022      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800646a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800646e:	d81b      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006478:	d00b      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800647a:	e015      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006480:	3308      	adds	r3, #8
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f001 fc0d 	bl	8007ca4 <RCCEx_PLL2_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006490:	e00f      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006496:	3328      	adds	r3, #40	; 0x28
 8006498:	2102      	movs	r1, #2
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fcb4 	bl	8007e08 <RCCEx_PLL3_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064a6:	e004      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064ae:	e000      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80064b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064ba:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80064c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064ca:	4a47      	ldr	r2, [pc, #284]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064cc:	430b      	orrs	r3, r1
 80064ce:	6593      	str	r3, [r2, #88]	; 0x58
 80064d0:	e003      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80064e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80064e8:	2300      	movs	r3, #0
 80064ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80064f0:	460b      	mov	r3, r1
 80064f2:	4313      	orrs	r3, r2
 80064f4:	d03b      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006502:	d01f      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006504:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006508:	d818      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800650a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650e:	d003      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006514:	d007      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006516:	e011      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006518:	4b33      	ldr	r3, [pc, #204]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	4a32      	ldr	r2, [pc, #200]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800651e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006524:	e00f      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652a:	3328      	adds	r3, #40	; 0x28
 800652c:	2101      	movs	r1, #1
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fc6a 	bl	8007e08 <RCCEx_PLL3_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800653a:	e004      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006542:	e000      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800654e:	4b26      	ldr	r3, [pc, #152]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006552:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655e:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006560:	430b      	orrs	r3, r1
 8006562:	6553      	str	r3, [r2, #84]	; 0x54
 8006564:	e003      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800656a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800657a:	673b      	str	r3, [r7, #112]	; 0x70
 800657c:	2300      	movs	r3, #0
 800657e:	677b      	str	r3, [r7, #116]	; 0x74
 8006580:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006584:	460b      	mov	r3, r1
 8006586:	4313      	orrs	r3, r2
 8006588:	d034      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800658e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006598:	d007      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800659a:	e011      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659c:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a11      	ldr	r2, [pc, #68]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065a8:	e00e      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ae:	3308      	adds	r3, #8
 80065b0:	2102      	movs	r1, #2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 fb76 	bl	8007ca4 <RCCEx_PLL2_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065be:	e003      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10d      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	4a02      	ldr	r2, [pc, #8]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e0:	430b      	orrs	r3, r1
 80065e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80065e6:	bf00      	nop
 80065e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006600:	66bb      	str	r3, [r7, #104]	; 0x68
 8006602:	2300      	movs	r3, #0
 8006604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006606:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800660a:	460b      	mov	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	d00c      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006614:	3328      	adds	r3, #40	; 0x28
 8006616:	2102      	movs	r1, #2
 8006618:	4618      	mov	r0, r3
 800661a:	f001 fbf5 	bl	8007e08 <RCCEx_PLL3_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006636:	663b      	str	r3, [r7, #96]	; 0x60
 8006638:	2300      	movs	r3, #0
 800663a:	667b      	str	r3, [r7, #100]	; 0x64
 800663c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006640:	460b      	mov	r3, r1
 8006642:	4313      	orrs	r3, r2
 8006644:	d038      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800664e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006652:	d018      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006658:	d811      	bhi.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800665a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665e:	d014      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006664:	d80b      	bhi.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d011      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d106      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006670:	4bc3      	ldr	r3, [pc, #780]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	4ac2      	ldr	r2, [pc, #776]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800667a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800667c:	e008      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006684:	e004      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006686:	bf00      	nop
 8006688:	e002      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800668a:	bf00      	nop
 800668c:	e000      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800668e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10b      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006698:	4bb9      	ldr	r3, [pc, #740]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a8:	4ab5      	ldr	r2, [pc, #724]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066aa:	430b      	orrs	r3, r1
 80066ac:	6553      	str	r3, [r2, #84]	; 0x54
 80066ae:	e003      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80066c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066c6:	2300      	movs	r3, #0
 80066c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80066ce:	460b      	mov	r3, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066d4:	4baa      	ldr	r3, [pc, #680]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e2:	4aa7      	ldr	r2, [pc, #668]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80066f4:	653b      	str	r3, [r7, #80]	; 0x50
 80066f6:	2300      	movs	r3, #0
 80066f8:	657b      	str	r3, [r7, #84]	; 0x54
 80066fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80066fe:	460b      	mov	r3, r1
 8006700:	4313      	orrs	r3, r2
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006704:	4b9e      	ldr	r3, [pc, #632]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006710:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006714:	4a9a      	ldr	r2, [pc, #616]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006716:	430b      	orrs	r3, r1
 8006718:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006726:	64bb      	str	r3, [r7, #72]	; 0x48
 8006728:	2300      	movs	r3, #0
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006730:	460b      	mov	r3, r1
 8006732:	4313      	orrs	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006736:	4b92      	ldr	r3, [pc, #584]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006744:	4a8e      	ldr	r2, [pc, #568]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006746:	430b      	orrs	r3, r1
 8006748:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006756:	643b      	str	r3, [r7, #64]	; 0x40
 8006758:	2300      	movs	r3, #0
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
 800675c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006760:	460b      	mov	r3, r1
 8006762:	4313      	orrs	r3, r2
 8006764:	d00e      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006766:	4b86      	ldr	r3, [pc, #536]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	4a85      	ldr	r2, [pc, #532]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800676c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006770:	6113      	str	r3, [r2, #16]
 8006772:	4b83      	ldr	r3, [pc, #524]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006774:	6919      	ldr	r1, [r3, #16]
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800677a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800677e:	4a80      	ldr	r2, [pc, #512]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006780:	430b      	orrs	r3, r1
 8006782:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006790:	63bb      	str	r3, [r7, #56]	; 0x38
 8006792:	2300      	movs	r3, #0
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006796:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067a0:	4b77      	ldr	r3, [pc, #476]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80067a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ae:	4a74      	ldr	r2, [pc, #464]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80067c0:	633b      	str	r3, [r7, #48]	; 0x30
 80067c2:	2300      	movs	r3, #0
 80067c4:	637b      	str	r3, [r7, #52]	; 0x34
 80067c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d00a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067d0:	4b6b      	ldr	r3, [pc, #428]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e0:	4a67      	ldr	r2, [pc, #412]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	2100      	movs	r1, #0
 80067f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80067fc:	460b      	mov	r3, r1
 80067fe:	4313      	orrs	r3, r2
 8006800:	d011      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006806:	3308      	adds	r3, #8
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fa4a 	bl	8007ca4 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	2100      	movs	r1, #0
 8006830:	6239      	str	r1, [r7, #32]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
 8006838:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800683c:	460b      	mov	r3, r1
 800683e:	4313      	orrs	r3, r2
 8006840:	d011      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006846:	3308      	adds	r3, #8
 8006848:	2101      	movs	r1, #1
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fa2a 	bl	8007ca4 <RCCEx_PLL2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	2100      	movs	r1, #0
 8006870:	61b9      	str	r1, [r7, #24]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d011      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006886:	3308      	adds	r3, #8
 8006888:	2102      	movs	r1, #2
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fa0a 	bl	8007ca4 <RCCEx_PLL2_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	2100      	movs	r1, #0
 80068b0:	6139      	str	r1, [r7, #16]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d011      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c6:	3328      	adds	r3, #40	; 0x28
 80068c8:	2100      	movs	r1, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fa9c 	bl	8007e08 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80068d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	2100      	movs	r1, #0
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068fc:	460b      	mov	r3, r1
 80068fe:	4313      	orrs	r3, r2
 8006900:	d011      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006906:	3328      	adds	r3, #40	; 0x28
 8006908:	2101      	movs	r1, #1
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fa7c 	bl	8007e08 <RCCEx_PLL3_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	2100      	movs	r1, #0
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	e9d7 1200 	ldrd	r1, r2, [r7]
 800693c:	460b      	mov	r3, r1
 800693e:	4313      	orrs	r3, r2
 8006940:	d011      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006946:	3328      	adds	r3, #40	; 0x28
 8006948:	2102      	movs	r1, #2
 800694a:	4618      	mov	r0, r3
 800694c:	f001 fa5c 	bl	8007e08 <RCCEx_PLL3_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006962:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006966:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
}
 8006974:	4618      	mov	r0, r3
 8006976:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800697a:	46bd      	mov	sp, r7
 800697c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006980:	58024400 	.word	0x58024400

08006984 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b090      	sub	sp, #64	; 0x40
 8006988:	af00      	add	r7, sp, #0
 800698a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800698e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006992:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006996:	430b      	orrs	r3, r1
 8006998:	f040 8094 	bne.w	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800699c:	4b9e      	ldr	r3, [pc, #632]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800699e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	f200 8087 	bhi.w	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	080069c9 	.word	0x080069c9
 80069b8:	080069f1 	.word	0x080069f1
 80069bc:	08006a19 	.word	0x08006a19
 80069c0:	08006ab5 	.word	0x08006ab5
 80069c4:	08006a41 	.word	0x08006a41
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069c8:	4b93      	ldr	r3, [pc, #588]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069d4:	d108      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f810 	bl	8007a00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069e4:	f000 bd45 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ec:	f000 bd41 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069f0:	4b89      	ldr	r3, [pc, #548]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069fc:	d108      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069fe:	f107 0318 	add.w	r3, r7, #24
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fd54 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a0c:	f000 bd31 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a14:	f000 bd2d 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a18:	4b7f      	ldr	r3, [pc, #508]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a24:	d108      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a26:	f107 030c 	add.w	r3, r7, #12
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fe94 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a34:	f000 bd1d 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a3c:	f000 bd19 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a40:	4b75      	ldr	r3, [pc, #468]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a4a:	4b73      	ldr	r3, [pc, #460]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d10c      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d109      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a5c:	4b6e      	ldr	r3, [pc, #440]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	08db      	lsrs	r3, r3, #3
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	4a6d      	ldr	r2, [pc, #436]	; (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a6e:	e01f      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a70:	4b69      	ldr	r3, [pc, #420]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7c:	d106      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a84:	d102      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a86:	4b66      	ldr	r3, [pc, #408]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8a:	e011      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a8c:	4b62      	ldr	r3, [pc, #392]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a98:	d106      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa0:	d102      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006aa2:	4b60      	ldr	r3, [pc, #384]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa6:	e003      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006aac:	f000 bce1 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ab0:	f000 bcdf 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ab4:	4b5c      	ldr	r3, [pc, #368]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab8:	f000 bcdb 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac0:	f000 bcd7 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006acc:	430b      	orrs	r3, r1
 8006ace:	f040 80ad 	bne.w	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006ad2:	4b51      	ldr	r3, [pc, #324]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae2:	d056      	beq.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	f200 8090 	bhi.w	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2bc0      	cmp	r3, #192	; 0xc0
 8006af2:	f000 8088 	beq.w	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2bc0      	cmp	r3, #192	; 0xc0
 8006afa:	f200 8088 	bhi.w	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	2b80      	cmp	r3, #128	; 0x80
 8006b02:	d032      	beq.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	2b80      	cmp	r3, #128	; 0x80
 8006b08:	f200 8081 	bhi.w	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d014      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006b18:	e079      	b.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b1a:	4b3f      	ldr	r3, [pc, #252]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b26:	d108      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 ff67 	bl	8007a00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b36:	f000 bc9c 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3e:	f000 bc98 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b42:	4b35      	ldr	r3, [pc, #212]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b4e:	d108      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b50:	f107 0318 	add.w	r3, r7, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fcab 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5e:	f000 bc88 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b66:	f000 bc84 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b6a:	4b2b      	ldr	r3, [pc, #172]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b76:	d108      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b78:	f107 030c 	add.w	r3, r7, #12
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fdeb 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b86:	f000 bc74 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b8e:	f000 bc70 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b92:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b9c:	4b1e      	ldr	r3, [pc, #120]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d10c      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bae:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	08db      	lsrs	r3, r3, #3
 8006bb4:	f003 0303 	and.w	r3, r3, #3
 8006bb8:	4a18      	ldr	r2, [pc, #96]	; (8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006bba:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc0:	e01f      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bc2:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bce:	d106      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bd6:	d102      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bd8:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bdc:	e011      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bde:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bea:	d106      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf2:	d102      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf8:	e003      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bfe:	f000 bc38 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c02:	f000 bc36 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c06:	4b08      	ldr	r3, [pc, #32]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0a:	f000 bc32 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c12:	f000 bc2e 	b.w	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	03d09000 	.word	0x03d09000
 8006c20:	003d0900 	.word	0x003d0900
 8006c24:	01770000 	.word	0x01770000
 8006c28:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c30:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006c34:	430b      	orrs	r3, r1
 8006c36:	f040 809c 	bne.w	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006c3a:	4b9e      	ldr	r3, [pc, #632]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006c42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c4a:	d054      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c52:	f200 808b 	bhi.w	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c5c:	f000 8083 	beq.w	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c66:	f200 8081 	bhi.w	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c70:	d02f      	beq.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c78:	d878      	bhi.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c86:	d012      	beq.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006c88:	e070      	b.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c8a:	4b8a      	ldr	r3, [pc, #552]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c96:	d107      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 feaf 	bl	8007a00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca6:	e3e4      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cac:	e3e1      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cae:	4b81      	ldr	r3, [pc, #516]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cba:	d107      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cbc:	f107 0318 	add.w	r3, r7, #24
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fbf5 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cca:	e3d2      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd0:	e3cf      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cd2:	4b78      	ldr	r3, [pc, #480]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce0:	f107 030c 	add.w	r3, r7, #12
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fd37 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cee:	e3c0      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf4:	e3bd      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cf6:	4b6f      	ldr	r3, [pc, #444]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d00:	4b6c      	ldr	r3, [pc, #432]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d10c      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d12:	4b68      	ldr	r3, [pc, #416]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	08db      	lsrs	r3, r3, #3
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	4a66      	ldr	r2, [pc, #408]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d24:	e01e      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d26:	4b63      	ldr	r3, [pc, #396]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d32:	d106      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d3a:	d102      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d3c:	4b5f      	ldr	r3, [pc, #380]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d40:	e010      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d42:	4b5c      	ldr	r3, [pc, #368]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4e:	d106      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d56:	d102      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d58:	4b59      	ldr	r3, [pc, #356]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d5c:	e002      	b.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d62:	e386      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d64:	e385      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d66:	4b57      	ldr	r3, [pc, #348]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d6a:	e382      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d70:	e37f      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d76:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	f040 80a7 	bne.w	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006d80:	4b4c      	ldr	r3, [pc, #304]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d84:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006d88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d90:	d055      	beq.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d98:	f200 8096 	bhi.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006da2:	f000 8084 	beq.w	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006dac:	f200 808c 	bhi.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006db6:	d030      	beq.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dbe:	f200 8083 	bhi.w	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dce:	d012      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006dd0:	e07a      	b.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dd2:	4b38      	ldr	r3, [pc, #224]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dde:	d107      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fe0b 	bl	8007a00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dee:	e340      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df4:	e33d      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006df6:	4b2f      	ldr	r3, [pc, #188]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e02:	d107      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e04:	f107 0318 	add.w	r3, r7, #24
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fb51 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e12:	e32e      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e18:	e32b      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e1a:	4b26      	ldr	r3, [pc, #152]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e26:	d107      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e28:	f107 030c 	add.w	r3, r7, #12
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fc93 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e36:	e31c      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e3c:	e319      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e48:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d10c      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e5a:	4b16      	ldr	r3, [pc, #88]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	08db      	lsrs	r3, r3, #3
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	4a14      	ldr	r2, [pc, #80]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006e66:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e6c:	e01e      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7a:	d106      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e82:	d102      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e84:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e88:	e010      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e8a:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e96:	d106      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e9e:	d102      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea4:	e002      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006eaa:	e2e2      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006eac:	e2e1      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb2:	e2de      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006eb4:	58024400 	.word	0x58024400
 8006eb8:	03d09000 	.word	0x03d09000
 8006ebc:	003d0900 	.word	0x003d0900
 8006ec0:	01770000 	.word	0x01770000
 8006ec4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ecc:	e2d1      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	f040 809c 	bne.w	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006edc:	4b93      	ldr	r3, [pc, #588]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006ee4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eec:	d054      	beq.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef4:	f200 808b 	bhi.w	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006efe:	f000 8083 	beq.w	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f08:	f200 8081 	bhi.w	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f12:	d02f      	beq.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1a:	d878      	bhi.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f28:	d012      	beq.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006f2a:	e070      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f2c:	4b7f      	ldr	r3, [pc, #508]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f38:	d107      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fd5e 	bl	8007a00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f48:	e293      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f4e:	e290      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f50:	4b76      	ldr	r3, [pc, #472]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f5c:	d107      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f5e:	f107 0318 	add.w	r3, r7, #24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 faa4 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f6c:	e281      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f72:	e27e      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f74:	4b6d      	ldr	r3, [pc, #436]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f80:	d107      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f82:	f107 030c 	add.w	r3, r7, #12
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fbe6 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f90:	e26f      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f96:	e26c      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f98:	4b64      	ldr	r3, [pc, #400]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fa2:	4b62      	ldr	r3, [pc, #392]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d10c      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d109      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fb4:	4b5d      	ldr	r3, [pc, #372]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	08db      	lsrs	r3, r3, #3
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	4a5c      	ldr	r2, [pc, #368]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fc6:	e01e      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fc8:	4b58      	ldr	r3, [pc, #352]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd4:	d106      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fdc:	d102      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fde:	4b55      	ldr	r3, [pc, #340]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fe2:	e010      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fe4:	4b51      	ldr	r3, [pc, #324]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff0:	d106      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff8:	d102      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ffa:	4b4f      	ldr	r3, [pc, #316]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ffe:	e002      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007004:	e235      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007006:	e234      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007008:	4b4c      	ldr	r3, [pc, #304]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800700c:	e231      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007012:	e22e      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007018:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800701c:	430b      	orrs	r3, r1
 800701e:	f040 808f 	bne.w	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007022:	4b42      	ldr	r3, [pc, #264]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007026:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800702a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007032:	d06b      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800703a:	d874      	bhi.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007042:	d056      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800704a:	d86c      	bhi.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007052:	d03b      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800705a:	d864      	bhi.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007062:	d021      	beq.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800706a:	d85c      	bhi.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007078:	d004      	beq.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800707a:	e054      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800707c:	f7fe fa0a 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8007080:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007082:	e1f6      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007084:	4b29      	ldr	r3, [pc, #164]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800708c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007090:	d107      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007092:	f107 0318 	add.w	r3, r7, #24
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fa0a 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a0:	e1e7      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070a6:	e1e4      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070a8:	4b20      	ldr	r3, [pc, #128]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b4:	d107      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b6:	f107 030c 	add.w	r3, r7, #12
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fb4c 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c4:	e1d5      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ca:	e1d2      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070cc:	4b17      	ldr	r3, [pc, #92]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d109      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070d8:	4b14      	ldr	r3, [pc, #80]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	08db      	lsrs	r3, r3, #3
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	4a13      	ldr	r2, [pc, #76]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ea:	e1c2      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f0:	e1bf      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070f2:	4b0e      	ldr	r3, [pc, #56]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fe:	d102      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007100:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007104:	e1b5      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800710a:	e1b2      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800710c:	4b07      	ldr	r3, [pc, #28]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007118:	d102      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800711a:	4b07      	ldr	r3, [pc, #28]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800711e:	e1a8      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007124:	e1a5      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800712a:	e1a2      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800712c:	58024400 	.word	0x58024400
 8007130:	03d09000 	.word	0x03d09000
 8007134:	003d0900 	.word	0x003d0900
 8007138:	01770000 	.word	0x01770000
 800713c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007144:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007148:	430b      	orrs	r3, r1
 800714a:	d173      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800714c:	4b9c      	ldr	r3, [pc, #624]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800714e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007154:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800715c:	d02f      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007164:	d863      	bhi.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007172:	d012      	beq.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007174:	e05b      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007176:	4b92      	ldr	r3, [pc, #584]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007182:	d107      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007184:	f107 0318 	add.w	r3, r7, #24
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f991 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007192:	e16e      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007198:	e16b      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800719a:	4b89      	ldr	r3, [pc, #548]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a6:	d107      	bne.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a8:	f107 030c 	add.w	r3, r7, #12
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fad3 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b6:	e15c      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071bc:	e159      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071be:	4b80      	ldr	r3, [pc, #512]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071c8:	4b7d      	ldr	r3, [pc, #500]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d10c      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071da:	4b79      	ldr	r3, [pc, #484]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	08db      	lsrs	r3, r3, #3
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	4a77      	ldr	r2, [pc, #476]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80071e6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ec:	e01e      	b.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071ee:	4b74      	ldr	r3, [pc, #464]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fa:	d106      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80071fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007202:	d102      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007204:	4b70      	ldr	r3, [pc, #448]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007208:	e010      	b.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800720a:	4b6d      	ldr	r3, [pc, #436]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007216:	d106      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800721e:	d102      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007220:	4b6a      	ldr	r3, [pc, #424]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007224:	e002      	b.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800722a:	e122      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800722c:	e121      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007232:	e11e      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007238:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800723c:	430b      	orrs	r3, r1
 800723e:	d133      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007240:	4b5f      	ldr	r3, [pc, #380]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007248:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	2b00      	cmp	r3, #0
 800724e:	d004      	beq.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007256:	d012      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007258:	e023      	b.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800725a:	4b59      	ldr	r3, [pc, #356]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007266:	d107      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fbc7 	bl	8007a00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007276:	e0fc      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800727c:	e0f9      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800727e:	4b50      	ldr	r3, [pc, #320]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800728a:	d107      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800728c:	f107 0318 	add.w	r3, r7, #24
 8007290:	4618      	mov	r0, r3
 8007292:	f000 f90d 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800729a:	e0ea      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a0:	e0e7      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a6:	e0e4      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80072a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ac:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80072b0:	430b      	orrs	r3, r1
 80072b2:	f040 808d 	bne.w	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80072b6:	4b42      	ldr	r3, [pc, #264]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80072be:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c6:	d06b      	beq.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ce:	d874      	bhi.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d6:	d056      	beq.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072de:	d86c      	bhi.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072e6:	d03b      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072ee:	d864      	bhi.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f6:	d021      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072fe:	d85c      	bhi.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800730c:	d004      	beq.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800730e:	e054      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007310:	f000 f8b8 	bl	8007484 <HAL_RCCEx_GetD3PCLK1Freq>
 8007314:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007316:	e0ac      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007318:	4b29      	ldr	r3, [pc, #164]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007324:	d107      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007326:	f107 0318 	add.w	r3, r7, #24
 800732a:	4618      	mov	r0, r3
 800732c:	f000 f8c0 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007334:	e09d      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800733a:	e09a      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800733c:	4b20      	ldr	r3, [pc, #128]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007348:	d107      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800734a:	f107 030c 	add.w	r3, r7, #12
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fa02 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007358:	e08b      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800735e:	e088      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007360:	4b17      	ldr	r3, [pc, #92]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b04      	cmp	r3, #4
 800736a:	d109      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800736c:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	08db      	lsrs	r3, r3, #3
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	4a13      	ldr	r2, [pc, #76]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800737e:	e078      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007384:	e075      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007386:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007392:	d102      	bne.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007398:	e06b      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739e:	e068      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ac:	d102      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b2:	e05e      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b8:	e05b      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073be:	e058      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073c0:	58024400 	.word	0x58024400
 80073c4:	03d09000 	.word	0x03d09000
 80073c8:	003d0900 	.word	0x003d0900
 80073cc:	01770000 	.word	0x01770000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80073d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80073d8:	430b      	orrs	r3, r1
 80073da:	d148      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80073dc:	4b27      	ldr	r3, [pc, #156]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ec:	d02a      	beq.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f4:	d838      	bhi.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007402:	d00d      	beq.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007404:	e030      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007406:	4b1d      	ldr	r3, [pc, #116]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800740e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007412:	d102      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007414:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007418:	e02b      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800741e:	e028      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007420:	4b16      	ldr	r3, [pc, #88]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800742c:	d107      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800742e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fae4 	bl	8007a00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800743c:	e019      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007442:	e016      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007444:	4b0d      	ldr	r3, [pc, #52]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007450:	d107      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007452:	f107 0318 	add.w	r3, r7, #24
 8007456:	4618      	mov	r0, r3
 8007458:	f000 f82a 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007460:	e007      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007466:	e004      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800746c:	e001      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007474:	4618      	mov	r0, r3
 8007476:	3740      	adds	r7, #64	; 0x40
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	58024400 	.word	0x58024400
 8007480:	01770000 	.word	0x01770000

08007484 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007488:	f7fd ffd4 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 800748c:	4602      	mov	r2, r0
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	091b      	lsrs	r3, r3, #4
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	4904      	ldr	r1, [pc, #16]	; (80074ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800749a:	5ccb      	ldrb	r3, [r1, r3]
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	58024400 	.word	0x58024400
 80074ac:	0800c160 	.word	0x0800c160

080074b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b089      	sub	sp, #36	; 0x24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074b8:	4ba1      	ldr	r3, [pc, #644]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80074c2:	4b9f      	ldr	r3, [pc, #636]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c6:	0b1b      	lsrs	r3, r3, #12
 80074c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80074ce:	4b9c      	ldr	r3, [pc, #624]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	091b      	lsrs	r3, r3, #4
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80074da:	4b99      	ldr	r3, [pc, #612]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8111 	beq.w	8007720 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b02      	cmp	r3, #2
 8007502:	f000 8083 	beq.w	800760c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b02      	cmp	r3, #2
 800750a:	f200 80a1 	bhi.w	8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d056      	beq.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800751a:	e099      	b.n	8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800751c:	4b88      	ldr	r3, [pc, #544]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d02d      	beq.n	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007528:	4b85      	ldr	r3, [pc, #532]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	08db      	lsrs	r3, r3, #3
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	4a84      	ldr	r2, [pc, #528]	; (8007744 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
 8007538:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	ee07 3a90 	vmov	s15, r3
 8007540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b7b      	ldr	r3, [pc, #492]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007582:	e087      	b.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800774c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b6a      	ldr	r3, [pc, #424]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c6:	e065      	b.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075da:	4b59      	ldr	r3, [pc, #356]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760a:	e043      	b.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007616:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800761a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761e:	4b48      	ldr	r3, [pc, #288]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007632:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800764e:	e021      	b.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800765e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007662:	4b37      	ldr	r3, [pc, #220]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007672:	ed97 6a03 	vldr	s12, [r7, #12]
 8007676:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800767a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007692:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007694:	4b2a      	ldr	r3, [pc, #168]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	0a5b      	lsrs	r3, r3, #9
 800769a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ba:	ee17 2a90 	vmov	r2, s15
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80076c2:	4b1f      	ldr	r3, [pc, #124]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	0c1b      	lsrs	r3, r3, #16
 80076c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e8:	ee17 2a90 	vmov	r2, s15
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80076f0:	4b13      	ldr	r3, [pc, #76]	; (8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	0e1b      	lsrs	r3, r3, #24
 80076f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800770a:	edd7 6a07 	vldr	s13, [r7, #28]
 800770e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007716:	ee17 2a90 	vmov	r2, s15
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800771e:	e008      	b.n	8007732 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	609a      	str	r2, [r3, #8]
}
 8007732:	bf00      	nop
 8007734:	3724      	adds	r7, #36	; 0x24
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	58024400 	.word	0x58024400
 8007744:	03d09000 	.word	0x03d09000
 8007748:	46000000 	.word	0x46000000
 800774c:	4c742400 	.word	0x4c742400
 8007750:	4a742400 	.word	0x4a742400
 8007754:	4bbb8000 	.word	0x4bbb8000

08007758 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007758:	b480      	push	{r7}
 800775a:	b089      	sub	sp, #36	; 0x24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007760:	4ba1      	ldr	r3, [pc, #644]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	f003 0303 	and.w	r3, r3, #3
 8007768:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800776a:	4b9f      	ldr	r3, [pc, #636]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	0d1b      	lsrs	r3, r3, #20
 8007770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007774:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007776:	4b9c      	ldr	r3, [pc, #624]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777a:	0a1b      	lsrs	r3, r3, #8
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007782:	4b99      	ldr	r3, [pc, #612]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007786:	08db      	lsrs	r3, r3, #3
 8007788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	fb02 f303 	mul.w	r3, r2, r3
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8111 	beq.w	80079c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	f000 8083 	beq.w	80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	f200 80a1 	bhi.w	80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d056      	beq.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80077c2:	e099      	b.n	80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077c4:	4b88      	ldr	r3, [pc, #544]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d02d      	beq.n	800782c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077d0:	4b85      	ldr	r3, [pc, #532]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	08db      	lsrs	r3, r3, #3
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	4a84      	ldr	r2, [pc, #528]	; (80079ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80077dc:	fa22 f303 	lsr.w	r3, r2, r3
 80077e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b7b      	ldr	r3, [pc, #492]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a03 	vldr	s12, [r7, #12]
 800780e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800782a:	e087      	b.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b6a      	ldr	r3, [pc, #424]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007852:	eddf 5a67 	vldr	s11, [pc, #412]	; 80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786e:	e065      	b.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b59      	ldr	r3, [pc, #356]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007892:	ed97 6a03 	vldr	s12, [r7, #12]
 8007896:	eddf 5a56 	vldr	s11, [pc, #344]	; 80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b2:	e043      	b.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80078c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c6:	4b48      	ldr	r3, [pc, #288]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f6:	e021      	b.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007902:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790a:	4b37      	ldr	r3, [pc, #220]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	ed97 6a03 	vldr	s12, [r7, #12]
 800791e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800793a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800793c:	4b2a      	ldr	r3, [pc, #168]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	0a5b      	lsrs	r3, r3, #9
 8007942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007956:	edd7 6a07 	vldr	s13, [r7, #28]
 800795a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800795e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007962:	ee17 2a90 	vmov	r2, s15
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800796a:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	0c1b      	lsrs	r3, r3, #16
 8007970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007974:	ee07 3a90 	vmov	s15, r3
 8007978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007980:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007984:	edd7 6a07 	vldr	s13, [r7, #28]
 8007988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800798c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007990:	ee17 2a90 	vmov	r2, s15
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007998:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	0e1b      	lsrs	r3, r3, #24
 800799e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079be:	ee17 2a90 	vmov	r2, s15
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80079c6:	e008      	b.n	80079da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	609a      	str	r2, [r3, #8]
}
 80079da:	bf00      	nop
 80079dc:	3724      	adds	r7, #36	; 0x24
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	58024400 	.word	0x58024400
 80079ec:	03d09000 	.word	0x03d09000
 80079f0:	46000000 	.word	0x46000000
 80079f4:	4c742400 	.word	0x4c742400
 80079f8:	4a742400 	.word	0x4a742400
 80079fc:	4bbb8000 	.word	0x4bbb8000

08007a00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b089      	sub	sp, #36	; 0x24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a08:	4ba0      	ldr	r3, [pc, #640]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	f003 0303 	and.w	r3, r3, #3
 8007a10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007a12:	4b9e      	ldr	r3, [pc, #632]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	091b      	lsrs	r3, r3, #4
 8007a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a1e:	4b9b      	ldr	r3, [pc, #620]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a28:	4b98      	ldr	r3, [pc, #608]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2c:	08db      	lsrs	r3, r3, #3
 8007a2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	fb02 f303 	mul.w	r3, r2, r3
 8007a38:	ee07 3a90 	vmov	s15, r3
 8007a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 8111 	beq.w	8007c6e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	f000 8083 	beq.w	8007b5a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	f200 80a1 	bhi.w	8007b9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d056      	beq.n	8007b16 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007a68:	e099      	b.n	8007b9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a6a:	4b88      	ldr	r3, [pc, #544]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d02d      	beq.n	8007ad2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a76:	4b85      	ldr	r3, [pc, #532]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	08db      	lsrs	r3, r3, #3
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	4a83      	ldr	r2, [pc, #524]	; (8007c90 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007a82:	fa22 f303 	lsr.w	r3, r2, r3
 8007a86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa0:	4b7a      	ldr	r3, [pc, #488]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa8:	ee07 3a90 	vmov	s15, r3
 8007aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007acc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ad0:	e087      	b.n	8007be2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	ee07 3a90 	vmov	s15, r3
 8007ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007adc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae4:	4b69      	ldr	r3, [pc, #420]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aec:	ee07 3a90 	vmov	s15, r3
 8007af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b14:	e065      	b.n	8007be2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	ee07 3a90 	vmov	s15, r3
 8007b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b20:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c9c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b28:	4b58      	ldr	r3, [pc, #352]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b30:	ee07 3a90 	vmov	s15, r3
 8007b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b3c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b58:	e043      	b.n	8007be2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	ee07 3a90 	vmov	s15, r3
 8007b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6c:	4b47      	ldr	r3, [pc, #284]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b74:	ee07 3a90 	vmov	s15, r3
 8007b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b80:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b9c:	e021      	b.n	8007be2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	ee07 3a90 	vmov	s15, r3
 8007ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007c98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb0:	4b36      	ldr	r3, [pc, #216]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb8:	ee07 3a90 	vmov	s15, r3
 8007bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007be0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007be2:	4b2a      	ldr	r3, [pc, #168]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	0a5b      	lsrs	r3, r3, #9
 8007be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bec:	ee07 3a90 	vmov	s15, r3
 8007bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c08:	ee17 2a90 	vmov	r2, s15
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007c10:	4b1e      	ldr	r3, [pc, #120]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c36:	ee17 2a90 	vmov	r2, s15
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007c3e:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	0e1b      	lsrs	r3, r3, #24
 8007c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c48:	ee07 3a90 	vmov	s15, r3
 8007c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c64:	ee17 2a90 	vmov	r2, s15
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007c6c:	e008      	b.n	8007c80 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	609a      	str	r2, [r3, #8]
}
 8007c80:	bf00      	nop
 8007c82:	3724      	adds	r7, #36	; 0x24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	03d09000 	.word	0x03d09000
 8007c94:	46000000 	.word	0x46000000
 8007c98:	4c742400 	.word	0x4c742400
 8007c9c:	4a742400 	.word	0x4a742400
 8007ca0:	4bbb8000 	.word	0x4bbb8000

08007ca4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cb2:	4b53      	ldr	r3, [pc, #332]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d101      	bne.n	8007cc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e099      	b.n	8007df6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007cc2:	4b4f      	ldr	r3, [pc, #316]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a4e      	ldr	r2, [pc, #312]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007cc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cce:	f7f9 fd3b 	bl	8001748 <HAL_GetTick>
 8007cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cd4:	e008      	b.n	8007ce8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cd6:	f7f9 fd37 	bl	8001748 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e086      	b.n	8007df6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ce8:	4b45      	ldr	r3, [pc, #276]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007cf4:	4b42      	ldr	r3, [pc, #264]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	031b      	lsls	r3, r3, #12
 8007d02:	493f      	ldr	r1, [pc, #252]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	628b      	str	r3, [r1, #40]	; 0x28
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	025b      	lsls	r3, r3, #9
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	041b      	lsls	r3, r3, #16
 8007d26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	061b      	lsls	r3, r3, #24
 8007d34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d38:	4931      	ldr	r1, [pc, #196]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d3e:	4b30      	ldr	r3, [pc, #192]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	492d      	ldr	r1, [pc, #180]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d50:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	f023 0220 	bic.w	r2, r3, #32
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	4928      	ldr	r1, [pc, #160]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d62:	4b27      	ldr	r3, [pc, #156]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	4a26      	ldr	r2, [pc, #152]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d68:	f023 0310 	bic.w	r3, r3, #16
 8007d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d6e:	4b24      	ldr	r3, [pc, #144]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <RCCEx_PLL2_Config+0x160>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	69d2      	ldr	r2, [r2, #28]
 8007d7a:	00d2      	lsls	r2, r2, #3
 8007d7c:	4920      	ldr	r1, [pc, #128]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007d82:	4b1f      	ldr	r3, [pc, #124]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	4a1e      	ldr	r2, [pc, #120]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	f043 0310 	orr.w	r3, r3, #16
 8007d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d106      	bne.n	8007da2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007d94:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	4a19      	ldr	r2, [pc, #100]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007d9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007da0:	e00f      	b.n	8007dc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d106      	bne.n	8007db6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007da8:	4b15      	ldr	r3, [pc, #84]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007db4:	e005      	b.n	8007dc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007db6:	4b12      	ldr	r3, [pc, #72]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	4a11      	ldr	r2, [pc, #68]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a0e      	ldr	r2, [pc, #56]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007dc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dce:	f7f9 fcbb 	bl	8001748 <HAL_GetTick>
 8007dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007dd4:	e008      	b.n	8007de8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dd6:	f7f9 fcb7 	bl	8001748 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d901      	bls.n	8007de8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e006      	b.n	8007df6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <RCCEx_PLL2_Config+0x15c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d0f0      	beq.n	8007dd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	58024400 	.word	0x58024400
 8007e04:	ffff0007 	.word	0xffff0007

08007e08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e16:	4b53      	ldr	r3, [pc, #332]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d101      	bne.n	8007e26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e099      	b.n	8007f5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e26:	4b4f      	ldr	r3, [pc, #316]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a4e      	ldr	r2, [pc, #312]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e32:	f7f9 fc89 	bl	8001748 <HAL_GetTick>
 8007e36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e38:	e008      	b.n	8007e4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e3a:	f7f9 fc85 	bl	8001748 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e086      	b.n	8007f5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e4c:	4b45      	ldr	r3, [pc, #276]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f0      	bne.n	8007e3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e58:	4b42      	ldr	r3, [pc, #264]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	051b      	lsls	r3, r3, #20
 8007e66:	493f      	ldr	r1, [pc, #252]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	025b      	lsls	r3, r3, #9
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	041b      	lsls	r3, r3, #16
 8007e8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	061b      	lsls	r3, r3, #24
 8007e98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e9c:	4931      	ldr	r1, [pc, #196]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ea2:	4b30      	ldr	r3, [pc, #192]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	492d      	ldr	r1, [pc, #180]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007eb4:	4b2b      	ldr	r3, [pc, #172]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	4928      	ldr	r1, [pc, #160]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ec6:	4b27      	ldr	r3, [pc, #156]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ed2:	4b24      	ldr	r3, [pc, #144]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ed6:	4b24      	ldr	r3, [pc, #144]	; (8007f68 <RCCEx_PLL3_Config+0x160>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	69d2      	ldr	r2, [r2, #28]
 8007ede:	00d2      	lsls	r2, r2, #3
 8007ee0:	4920      	ldr	r1, [pc, #128]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ee6:	4b1f      	ldr	r3, [pc, #124]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eea:	4a1e      	ldr	r2, [pc, #120]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ef8:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	4a19      	ldr	r2, [pc, #100]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007efe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f04:	e00f      	b.n	8007f26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d106      	bne.n	8007f1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f0c:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4a14      	ldr	r2, [pc, #80]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007f12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f18:	e005      	b.n	8007f26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f1a:	4b12      	ldr	r3, [pc, #72]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	4a11      	ldr	r2, [pc, #68]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a0e      	ldr	r2, [pc, #56]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f32:	f7f9 fc09 	bl	8001748 <HAL_GetTick>
 8007f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f38:	e008      	b.n	8007f4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f3a:	f7f9 fc05 	bl	8001748 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e006      	b.n	8007f5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <RCCEx_PLL3_Config+0x15c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0f0      	beq.n	8007f3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	58024400 	.word	0x58024400
 8007f68:	ffff0007 	.word	0xffff0007

08007f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e049      	b.n	8008012 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f841 	bl	800801a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f000 f9e8 	bl	8008380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	d001      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e054      	b.n	80080f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a26      	ldr	r2, [pc, #152]	; (8008100 <HAL_TIM_Base_Start_IT+0xd0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d022      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008072:	d01d      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a22      	ldr	r2, [pc, #136]	; (8008104 <HAL_TIM_Base_Start_IT+0xd4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d018      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a21      	ldr	r2, [pc, #132]	; (8008108 <HAL_TIM_Base_Start_IT+0xd8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d013      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1f      	ldr	r2, [pc, #124]	; (800810c <HAL_TIM_Base_Start_IT+0xdc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00e      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a1e      	ldr	r2, [pc, #120]	; (8008110 <HAL_TIM_Base_Start_IT+0xe0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d009      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1c      	ldr	r2, [pc, #112]	; (8008114 <HAL_TIM_Base_Start_IT+0xe4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d004      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x80>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a1b      	ldr	r2, [pc, #108]	; (8008118 <HAL_TIM_Base_Start_IT+0xe8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d115      	bne.n	80080dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	4b19      	ldr	r3, [pc, #100]	; (800811c <HAL_TIM_Base_Start_IT+0xec>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b06      	cmp	r3, #6
 80080c0:	d015      	beq.n	80080ee <HAL_TIM_Base_Start_IT+0xbe>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c8:	d011      	beq.n	80080ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0201 	orr.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080da:	e008      	b.n	80080ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0201 	orr.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e000      	b.n	80080f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	40010000 	.word	0x40010000
 8008104:	40000400 	.word	0x40000400
 8008108:	40000800 	.word	0x40000800
 800810c:	40000c00 	.word	0x40000c00
 8008110:	40010400 	.word	0x40010400
 8008114:	40001800 	.word	0x40001800
 8008118:	40014000 	.word	0x40014000
 800811c:	00010007 	.word	0x00010007

08008120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d020      	beq.n	8008184 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01b      	beq.n	8008184 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0202 	mvn.w	r2, #2
 8008154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8e9 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 8008170:	e005      	b.n	800817e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8db 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f8ec 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d020      	beq.n	80081d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01b      	beq.n	80081d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0204 	mvn.w	r2, #4
 80081a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f8c3 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 80081bc:	e005      	b.n	80081ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f8b5 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f8c6 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d020      	beq.n	800821c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01b      	beq.n	800821c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0208 	mvn.w	r2, #8
 80081ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f89d 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 8008208:	e005      	b.n	8008216 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f88f 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f8a0 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 0310 	and.w	r3, r3, #16
 8008222:	2b00      	cmp	r3, #0
 8008224:	d020      	beq.n	8008268 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01b      	beq.n	8008268 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0210 	mvn.w	r2, #16
 8008238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2208      	movs	r2, #8
 800823e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f877 	bl	8008342 <HAL_TIM_IC_CaptureCallback>
 8008254:	e005      	b.n	8008262 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f869 	bl	800832e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f87a 	bl	8008356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00c      	beq.n	800828c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d007      	beq.n	800828c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f06f 0201 	mvn.w	r2, #1
 8008284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7f8 ff6e 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b00      	cmp	r3, #0
 8008294:	d104      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80082b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f913 	bl	80084e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f90b 	bl	80084f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00c      	beq.n	8008302 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f834 	bl	800836a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f06f 0220 	mvn.w	r2, #32
 800831e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8d3 	bl	80084cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a46      	ldr	r2, [pc, #280]	; (80084ac <TIM_Base_SetConfig+0x12c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d013      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839e:	d00f      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a43      	ldr	r2, [pc, #268]	; (80084b0 <TIM_Base_SetConfig+0x130>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a42      	ldr	r2, [pc, #264]	; (80084b4 <TIM_Base_SetConfig+0x134>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a41      	ldr	r2, [pc, #260]	; (80084b8 <TIM_Base_SetConfig+0x138>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a40      	ldr	r2, [pc, #256]	; (80084bc <TIM_Base_SetConfig+0x13c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d108      	bne.n	80083d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a35      	ldr	r2, [pc, #212]	; (80084ac <TIM_Base_SetConfig+0x12c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d01f      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e0:	d01b      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a32      	ldr	r2, [pc, #200]	; (80084b0 <TIM_Base_SetConfig+0x130>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d017      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a31      	ldr	r2, [pc, #196]	; (80084b4 <TIM_Base_SetConfig+0x134>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a30      	ldr	r2, [pc, #192]	; (80084b8 <TIM_Base_SetConfig+0x138>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00f      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2f      	ldr	r2, [pc, #188]	; (80084bc <TIM_Base_SetConfig+0x13c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00b      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2e      	ldr	r2, [pc, #184]	; (80084c0 <TIM_Base_SetConfig+0x140>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d007      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2d      	ldr	r2, [pc, #180]	; (80084c4 <TIM_Base_SetConfig+0x144>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_Base_SetConfig+0x9a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2c      	ldr	r2, [pc, #176]	; (80084c8 <TIM_Base_SetConfig+0x148>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d108      	bne.n	800842c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4313      	orrs	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a16      	ldr	r2, [pc, #88]	; (80084ac <TIM_Base_SetConfig+0x12c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00f      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a18      	ldr	r2, [pc, #96]	; (80084bc <TIM_Base_SetConfig+0x13c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a17      	ldr	r2, [pc, #92]	; (80084c0 <TIM_Base_SetConfig+0x140>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a16      	ldr	r2, [pc, #88]	; (80084c4 <TIM_Base_SetConfig+0x144>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0xf8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <TIM_Base_SetConfig+0x148>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d103      	bne.n	8008480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b01      	cmp	r3, #1
 8008490:	d105      	bne.n	800849e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	f023 0201 	bic.w	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	611a      	str	r2, [r3, #16]
  }
}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40010000 	.word	0x40010000
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40000c00 	.word	0x40000c00
 80084bc:	40010400 	.word	0x40010400
 80084c0:	40014000 	.word	0x40014000
 80084c4:	40014400 	.word	0x40014400
 80084c8:	40014800 	.word	0x40014800

080084cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e042      	b.n	80085a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008520:	2b00      	cmp	r3, #0
 8008522:	d106      	bne.n	8008532 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7f8 ff5b 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2224      	movs	r2, #36	; 0x24
 8008536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0201 	bic.w	r2, r2, #1
 8008548:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fe1e 	bl	8009194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f8b3 	bl	80086c4 <UART_SetConfig>
 800855e:	4603      	mov	r3, r0
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e01b      	b.n	80085a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fe9d 	bl	80092d8 <UART_CheckIdleState>
 800859e:	4603      	mov	r3, r0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08a      	sub	sp, #40	; 0x28
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	4613      	mov	r3, r2
 80085b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d17b      	bne.n	80086ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_UART_Transmit+0x26>
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e074      	b.n	80086bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2221      	movs	r2, #33	; 0x21
 80085de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085e2:	f7f9 f8b1 	bl	8001748 <HAL_GetTick>
 80085e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	88fa      	ldrh	r2, [r7, #6]
 80085ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	88fa      	ldrh	r2, [r7, #6]
 80085f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008600:	d108      	bne.n	8008614 <HAL_UART_Transmit+0x6c>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d104      	bne.n	8008614 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800860a:	2300      	movs	r3, #0
 800860c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	61bb      	str	r3, [r7, #24]
 8008612:	e003      	b.n	800861c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008618:	2300      	movs	r3, #0
 800861a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800861c:	e030      	b.n	8008680 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2200      	movs	r2, #0
 8008626:	2180      	movs	r1, #128	; 0x80
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 feff 	bl	800942c <UART_WaitOnFlagUntilTimeout>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e03d      	b.n	80086bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008654:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	3302      	adds	r3, #2
 800865a:	61bb      	str	r3, [r7, #24]
 800865c:	e007      	b.n	800866e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	781a      	ldrb	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	3301      	adds	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008674:	b29b      	uxth	r3, r3
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008686:	b29b      	uxth	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1c8      	bne.n	800861e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2200      	movs	r2, #0
 8008694:	2140      	movs	r1, #64	; 0x40
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 fec8 	bl	800942c <UART_WaitOnFlagUntilTimeout>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e006      	b.n	80086bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	e000      	b.n	80086bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80086ba:	2302      	movs	r3, #2
  }
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086c8:	b092      	sub	sp, #72	; 0x48
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	431a      	orrs	r2, r3
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	431a      	orrs	r2, r3
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4bbe      	ldr	r3, [pc, #760]	; (80089ec <UART_SetConfig+0x328>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086fc:	430b      	orrs	r3, r1
 80086fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4ab3      	ldr	r2, [pc, #716]	; (80089f0 <UART_SetConfig+0x32c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d004      	beq.n	8008730 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800872c:	4313      	orrs	r3, r2
 800872e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	4baf      	ldr	r3, [pc, #700]	; (80089f4 <UART_SetConfig+0x330>)
 8008738:	4013      	ands	r3, r2
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008740:	430b      	orrs	r3, r1
 8008742:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	f023 010f 	bic.w	r1, r3, #15
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4aa6      	ldr	r2, [pc, #664]	; (80089f8 <UART_SetConfig+0x334>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d177      	bne.n	8008854 <UART_SetConfig+0x190>
 8008764:	4ba5      	ldr	r3, [pc, #660]	; (80089fc <UART_SetConfig+0x338>)
 8008766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800876c:	2b28      	cmp	r3, #40	; 0x28
 800876e:	d86d      	bhi.n	800884c <UART_SetConfig+0x188>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <UART_SetConfig+0xb4>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	0800881d 	.word	0x0800881d
 800877c:	0800884d 	.word	0x0800884d
 8008780:	0800884d 	.word	0x0800884d
 8008784:	0800884d 	.word	0x0800884d
 8008788:	0800884d 	.word	0x0800884d
 800878c:	0800884d 	.word	0x0800884d
 8008790:	0800884d 	.word	0x0800884d
 8008794:	0800884d 	.word	0x0800884d
 8008798:	08008825 	.word	0x08008825
 800879c:	0800884d 	.word	0x0800884d
 80087a0:	0800884d 	.word	0x0800884d
 80087a4:	0800884d 	.word	0x0800884d
 80087a8:	0800884d 	.word	0x0800884d
 80087ac:	0800884d 	.word	0x0800884d
 80087b0:	0800884d 	.word	0x0800884d
 80087b4:	0800884d 	.word	0x0800884d
 80087b8:	0800882d 	.word	0x0800882d
 80087bc:	0800884d 	.word	0x0800884d
 80087c0:	0800884d 	.word	0x0800884d
 80087c4:	0800884d 	.word	0x0800884d
 80087c8:	0800884d 	.word	0x0800884d
 80087cc:	0800884d 	.word	0x0800884d
 80087d0:	0800884d 	.word	0x0800884d
 80087d4:	0800884d 	.word	0x0800884d
 80087d8:	08008835 	.word	0x08008835
 80087dc:	0800884d 	.word	0x0800884d
 80087e0:	0800884d 	.word	0x0800884d
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	0800884d 	.word	0x0800884d
 80087ec:	0800884d 	.word	0x0800884d
 80087f0:	0800884d 	.word	0x0800884d
 80087f4:	0800884d 	.word	0x0800884d
 80087f8:	0800883d 	.word	0x0800883d
 80087fc:	0800884d 	.word	0x0800884d
 8008800:	0800884d 	.word	0x0800884d
 8008804:	0800884d 	.word	0x0800884d
 8008808:	0800884d 	.word	0x0800884d
 800880c:	0800884d 	.word	0x0800884d
 8008810:	0800884d 	.word	0x0800884d
 8008814:	0800884d 	.word	0x0800884d
 8008818:	08008845 	.word	0x08008845
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e222      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008824:	2304      	movs	r3, #4
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e21e      	b.n	8008c6a <UART_SetConfig+0x5a6>
 800882c:	2308      	movs	r3, #8
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008832:	e21a      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008834:	2310      	movs	r3, #16
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883a:	e216      	b.n	8008c6a <UART_SetConfig+0x5a6>
 800883c:	2320      	movs	r3, #32
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e212      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008844:	2340      	movs	r3, #64	; 0x40
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e20e      	b.n	8008c6a <UART_SetConfig+0x5a6>
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e20a      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a69      	ldr	r2, [pc, #420]	; (8008a00 <UART_SetConfig+0x33c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d130      	bne.n	80088c0 <UART_SetConfig+0x1fc>
 800885e:	4b67      	ldr	r3, [pc, #412]	; (80089fc <UART_SetConfig+0x338>)
 8008860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	2b05      	cmp	r3, #5
 8008868:	d826      	bhi.n	80088b8 <UART_SetConfig+0x1f4>
 800886a:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <UART_SetConfig+0x1ac>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008889 	.word	0x08008889
 8008874:	08008891 	.word	0x08008891
 8008878:	08008899 	.word	0x08008899
 800887c:	080088a1 	.word	0x080088a1
 8008880:	080088a9 	.word	0x080088a9
 8008884:	080088b1 	.word	0x080088b1
 8008888:	2300      	movs	r3, #0
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888e:	e1ec      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008896:	e1e8      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889e:	e1e4      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a6:	e1e0      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80088a8:	2320      	movs	r3, #32
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e1dc      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80088b0:	2340      	movs	r3, #64	; 0x40
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e1d8      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80088b8:	2380      	movs	r3, #128	; 0x80
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088be:	e1d4      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a4f      	ldr	r2, [pc, #316]	; (8008a04 <UART_SetConfig+0x340>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d130      	bne.n	800892c <UART_SetConfig+0x268>
 80088ca:	4b4c      	ldr	r3, [pc, #304]	; (80089fc <UART_SetConfig+0x338>)
 80088cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b05      	cmp	r3, #5
 80088d4:	d826      	bhi.n	8008924 <UART_SetConfig+0x260>
 80088d6:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <UART_SetConfig+0x218>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	080088f5 	.word	0x080088f5
 80088e0:	080088fd 	.word	0x080088fd
 80088e4:	08008905 	.word	0x08008905
 80088e8:	0800890d 	.word	0x0800890d
 80088ec:	08008915 	.word	0x08008915
 80088f0:	0800891d 	.word	0x0800891d
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e1b6      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80088fc:	2304      	movs	r3, #4
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e1b2      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008904:	2308      	movs	r3, #8
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e1ae      	b.n	8008c6a <UART_SetConfig+0x5a6>
 800890c:	2310      	movs	r3, #16
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e1aa      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008914:	2320      	movs	r3, #32
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e1a6      	b.n	8008c6a <UART_SetConfig+0x5a6>
 800891c:	2340      	movs	r3, #64	; 0x40
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e1a2      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008924:	2380      	movs	r3, #128	; 0x80
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892a:	e19e      	b.n	8008c6a <UART_SetConfig+0x5a6>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a35      	ldr	r2, [pc, #212]	; (8008a08 <UART_SetConfig+0x344>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d130      	bne.n	8008998 <UART_SetConfig+0x2d4>
 8008936:	4b31      	ldr	r3, [pc, #196]	; (80089fc <UART_SetConfig+0x338>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b05      	cmp	r3, #5
 8008940:	d826      	bhi.n	8008990 <UART_SetConfig+0x2cc>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x284>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008961 	.word	0x08008961
 800894c:	08008969 	.word	0x08008969
 8008950:	08008971 	.word	0x08008971
 8008954:	08008979 	.word	0x08008979
 8008958:	08008981 	.word	0x08008981
 800895c:	08008989 	.word	0x08008989
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008966:	e180      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896e:	e17c      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e178      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e174      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008980:	2320      	movs	r3, #32
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e170      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008988:	2340      	movs	r3, #64	; 0x40
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e16c      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e168      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1b      	ldr	r2, [pc, #108]	; (8008a0c <UART_SetConfig+0x348>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d142      	bne.n	8008a28 <UART_SetConfig+0x364>
 80089a2:	4b16      	ldr	r3, [pc, #88]	; (80089fc <UART_SetConfig+0x338>)
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d838      	bhi.n	8008a20 <UART_SetConfig+0x35c>
 80089ae:	a201      	add	r2, pc, #4	; (adr r2, 80089b4 <UART_SetConfig+0x2f0>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089cd 	.word	0x080089cd
 80089b8:	080089d5 	.word	0x080089d5
 80089bc:	080089dd 	.word	0x080089dd
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	08008a11 	.word	0x08008a11
 80089c8:	08008a19 	.word	0x08008a19
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d2:	e14a      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e146      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e142      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e13e      	b.n	8008c6a <UART_SetConfig+0x5a6>
 80089ec:	cfff69f3 	.word	0xcfff69f3
 80089f0:	58000c00 	.word	0x58000c00
 80089f4:	11fff4ff 	.word	0x11fff4ff
 80089f8:	40011000 	.word	0x40011000
 80089fc:	58024400 	.word	0x58024400
 8008a00:	40004400 	.word	0x40004400
 8008a04:	40004800 	.word	0x40004800
 8008a08:	40004c00 	.word	0x40004c00
 8008a0c:	40005000 	.word	0x40005000
 8008a10:	2320      	movs	r3, #32
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a16:	e128      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008a18:	2340      	movs	r3, #64	; 0x40
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1e:	e124      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008a20:	2380      	movs	r3, #128	; 0x80
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a26:	e120      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4acb      	ldr	r2, [pc, #812]	; (8008d5c <UART_SetConfig+0x698>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d176      	bne.n	8008b20 <UART_SetConfig+0x45c>
 8008a32:	4bcb      	ldr	r3, [pc, #812]	; (8008d60 <UART_SetConfig+0x69c>)
 8008a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a3a:	2b28      	cmp	r3, #40	; 0x28
 8008a3c:	d86c      	bhi.n	8008b18 <UART_SetConfig+0x454>
 8008a3e:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <UART_SetConfig+0x380>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008ae9 	.word	0x08008ae9
 8008a48:	08008b19 	.word	0x08008b19
 8008a4c:	08008b19 	.word	0x08008b19
 8008a50:	08008b19 	.word	0x08008b19
 8008a54:	08008b19 	.word	0x08008b19
 8008a58:	08008b19 	.word	0x08008b19
 8008a5c:	08008b19 	.word	0x08008b19
 8008a60:	08008b19 	.word	0x08008b19
 8008a64:	08008af1 	.word	0x08008af1
 8008a68:	08008b19 	.word	0x08008b19
 8008a6c:	08008b19 	.word	0x08008b19
 8008a70:	08008b19 	.word	0x08008b19
 8008a74:	08008b19 	.word	0x08008b19
 8008a78:	08008b19 	.word	0x08008b19
 8008a7c:	08008b19 	.word	0x08008b19
 8008a80:	08008b19 	.word	0x08008b19
 8008a84:	08008af9 	.word	0x08008af9
 8008a88:	08008b19 	.word	0x08008b19
 8008a8c:	08008b19 	.word	0x08008b19
 8008a90:	08008b19 	.word	0x08008b19
 8008a94:	08008b19 	.word	0x08008b19
 8008a98:	08008b19 	.word	0x08008b19
 8008a9c:	08008b19 	.word	0x08008b19
 8008aa0:	08008b19 	.word	0x08008b19
 8008aa4:	08008b01 	.word	0x08008b01
 8008aa8:	08008b19 	.word	0x08008b19
 8008aac:	08008b19 	.word	0x08008b19
 8008ab0:	08008b19 	.word	0x08008b19
 8008ab4:	08008b19 	.word	0x08008b19
 8008ab8:	08008b19 	.word	0x08008b19
 8008abc:	08008b19 	.word	0x08008b19
 8008ac0:	08008b19 	.word	0x08008b19
 8008ac4:	08008b09 	.word	0x08008b09
 8008ac8:	08008b19 	.word	0x08008b19
 8008acc:	08008b19 	.word	0x08008b19
 8008ad0:	08008b19 	.word	0x08008b19
 8008ad4:	08008b19 	.word	0x08008b19
 8008ad8:	08008b19 	.word	0x08008b19
 8008adc:	08008b19 	.word	0x08008b19
 8008ae0:	08008b19 	.word	0x08008b19
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e0bc      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008af0:	2304      	movs	r3, #4
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af6:	e0b8      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008af8:	2308      	movs	r3, #8
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afe:	e0b4      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b00:	2310      	movs	r3, #16
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b06:	e0b0      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b08:	2320      	movs	r3, #32
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0e:	e0ac      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b10:	2340      	movs	r3, #64	; 0x40
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b16:	e0a8      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b18:	2380      	movs	r3, #128	; 0x80
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1e:	e0a4      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a8f      	ldr	r2, [pc, #572]	; (8008d64 <UART_SetConfig+0x6a0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d130      	bne.n	8008b8c <UART_SetConfig+0x4c8>
 8008b2a:	4b8d      	ldr	r3, [pc, #564]	; (8008d60 <UART_SetConfig+0x69c>)
 8008b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	d826      	bhi.n	8008b84 <UART_SetConfig+0x4c0>
 8008b36:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <UART_SetConfig+0x478>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b55 	.word	0x08008b55
 8008b40:	08008b5d 	.word	0x08008b5d
 8008b44:	08008b65 	.word	0x08008b65
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008b75 	.word	0x08008b75
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	2300      	movs	r3, #0
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5a:	e086      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b62:	e082      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b64:	2308      	movs	r3, #8
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6a:	e07e      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	e07a      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b74:	2320      	movs	r3, #32
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7a:	e076      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b7c:	2340      	movs	r3, #64	; 0x40
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b82:	e072      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b84:	2380      	movs	r3, #128	; 0x80
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8a:	e06e      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a75      	ldr	r2, [pc, #468]	; (8008d68 <UART_SetConfig+0x6a4>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d130      	bne.n	8008bf8 <UART_SetConfig+0x534>
 8008b96:	4b72      	ldr	r3, [pc, #456]	; (8008d60 <UART_SetConfig+0x69c>)
 8008b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	d826      	bhi.n	8008bf0 <UART_SetConfig+0x52c>
 8008ba2:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <UART_SetConfig+0x4e4>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bc9 	.word	0x08008bc9
 8008bb0:	08008bd1 	.word	0x08008bd1
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008be1 	.word	0x08008be1
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc6:	e050      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bce:	e04c      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd6:	e048      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e044      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008be0:	2320      	movs	r3, #32
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be6:	e040      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bee:	e03c      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008bf0:	2380      	movs	r3, #128	; 0x80
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf6:	e038      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a5b      	ldr	r2, [pc, #364]	; (8008d6c <UART_SetConfig+0x6a8>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d130      	bne.n	8008c64 <UART_SetConfig+0x5a0>
 8008c02:	4b57      	ldr	r3, [pc, #348]	; (8008d60 <UART_SetConfig+0x69c>)
 8008c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d826      	bhi.n	8008c5c <UART_SetConfig+0x598>
 8008c0e:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <UART_SetConfig+0x550>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c2d 	.word	0x08008c2d
 8008c18:	08008c35 	.word	0x08008c35
 8008c1c:	08008c3d 	.word	0x08008c3d
 8008c20:	08008c45 	.word	0x08008c45
 8008c24:	08008c4d 	.word	0x08008c4d
 8008c28:	08008c55 	.word	0x08008c55
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c32:	e01a      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008c34:	2304      	movs	r3, #4
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3a:	e016      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c42:	e012      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008c44:	2310      	movs	r3, #16
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4a:	e00e      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c52:	e00a      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5a:	e006      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008c5c:	2380      	movs	r3, #128	; 0x80
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c62:	e002      	b.n	8008c6a <UART_SetConfig+0x5a6>
 8008c64:	2380      	movs	r3, #128	; 0x80
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a3f      	ldr	r2, [pc, #252]	; (8008d6c <UART_SetConfig+0x6a8>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	f040 80f8 	bne.w	8008e66 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	dc46      	bgt.n	8008d0c <UART_SetConfig+0x648>
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	f2c0 8082 	blt.w	8008d88 <UART_SetConfig+0x6c4>
 8008c84:	3b02      	subs	r3, #2
 8008c86:	2b1e      	cmp	r3, #30
 8008c88:	d87e      	bhi.n	8008d88 <UART_SetConfig+0x6c4>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x5cc>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008d13 	.word	0x08008d13
 8008c94:	08008d89 	.word	0x08008d89
 8008c98:	08008d1b 	.word	0x08008d1b
 8008c9c:	08008d89 	.word	0x08008d89
 8008ca0:	08008d89 	.word	0x08008d89
 8008ca4:	08008d89 	.word	0x08008d89
 8008ca8:	08008d2b 	.word	0x08008d2b
 8008cac:	08008d89 	.word	0x08008d89
 8008cb0:	08008d89 	.word	0x08008d89
 8008cb4:	08008d89 	.word	0x08008d89
 8008cb8:	08008d89 	.word	0x08008d89
 8008cbc:	08008d89 	.word	0x08008d89
 8008cc0:	08008d89 	.word	0x08008d89
 8008cc4:	08008d89 	.word	0x08008d89
 8008cc8:	08008d3b 	.word	0x08008d3b
 8008ccc:	08008d89 	.word	0x08008d89
 8008cd0:	08008d89 	.word	0x08008d89
 8008cd4:	08008d89 	.word	0x08008d89
 8008cd8:	08008d89 	.word	0x08008d89
 8008cdc:	08008d89 	.word	0x08008d89
 8008ce0:	08008d89 	.word	0x08008d89
 8008ce4:	08008d89 	.word	0x08008d89
 8008ce8:	08008d89 	.word	0x08008d89
 8008cec:	08008d89 	.word	0x08008d89
 8008cf0:	08008d89 	.word	0x08008d89
 8008cf4:	08008d89 	.word	0x08008d89
 8008cf8:	08008d89 	.word	0x08008d89
 8008cfc:	08008d89 	.word	0x08008d89
 8008d00:	08008d89 	.word	0x08008d89
 8008d04:	08008d89 	.word	0x08008d89
 8008d08:	08008d7b 	.word	0x08008d7b
 8008d0c:	2b40      	cmp	r3, #64	; 0x40
 8008d0e:	d037      	beq.n	8008d80 <UART_SetConfig+0x6bc>
 8008d10:	e03a      	b.n	8008d88 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008d12:	f7fe fbb7 	bl	8007484 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008d18:	e03c      	b.n	8008d94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fbc6 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d28:	e034      	b.n	8008d94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d2a:	f107 0318 	add.w	r3, r7, #24
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fd12 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d38:	e02c      	b.n	8008d94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <UART_SetConfig+0x69c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d016      	beq.n	8008d74 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d46:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <UART_SetConfig+0x69c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	08db      	lsrs	r3, r3, #3
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	4a07      	ldr	r2, [pc, #28]	; (8008d70 <UART_SetConfig+0x6ac>)
 8008d52:	fa22 f303 	lsr.w	r3, r2, r3
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d58:	e01c      	b.n	8008d94 <UART_SetConfig+0x6d0>
 8008d5a:	bf00      	nop
 8008d5c:	40011400 	.word	0x40011400
 8008d60:	58024400 	.word	0x58024400
 8008d64:	40007800 	.word	0x40007800
 8008d68:	40007c00 	.word	0x40007c00
 8008d6c:	58000c00 	.word	0x58000c00
 8008d70:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008d74:	4b9d      	ldr	r3, [pc, #628]	; (8008fec <UART_SetConfig+0x928>)
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d78:	e00c      	b.n	8008d94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d7a:	4b9d      	ldr	r3, [pc, #628]	; (8008ff0 <UART_SetConfig+0x92c>)
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d7e:	e009      	b.n	8008d94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d86:	e005      	b.n	8008d94 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 81de 	beq.w	8009158 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	4a94      	ldr	r2, [pc, #592]	; (8008ff4 <UART_SetConfig+0x930>)
 8008da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da6:	461a      	mov	r2, r3
 8008da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	4413      	add	r3, r2
 8008dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d305      	bcc.n	8008dcc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d903      	bls.n	8008dd4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008dd2:	e1c1      	b.n	8009158 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	60fa      	str	r2, [r7, #12]
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	4a84      	ldr	r2, [pc, #528]	; (8008ff4 <UART_SetConfig+0x930>)
 8008de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	2200      	movs	r2, #0
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	607a      	str	r2, [r7, #4]
 8008dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008df6:	f7f7 facb 	bl	8000390 <__aeabi_uldivmod>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	f04f 0200 	mov.w	r2, #0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	020b      	lsls	r3, r1, #8
 8008e0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e10:	0202      	lsls	r2, r0, #8
 8008e12:	6979      	ldr	r1, [r7, #20]
 8008e14:	6849      	ldr	r1, [r1, #4]
 8008e16:	0849      	lsrs	r1, r1, #1
 8008e18:	2000      	movs	r0, #0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	eb12 0804 	adds.w	r8, r2, r4
 8008e22:	eb43 0905 	adc.w	r9, r3, r5
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	469a      	mov	sl, r3
 8008e2e:	4693      	mov	fp, r2
 8008e30:	4652      	mov	r2, sl
 8008e32:	465b      	mov	r3, fp
 8008e34:	4640      	mov	r0, r8
 8008e36:	4649      	mov	r1, r9
 8008e38:	f7f7 faaa 	bl	8000390 <__aeabi_uldivmod>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4613      	mov	r3, r2
 8008e42:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e4a:	d308      	bcc.n	8008e5e <UART_SetConfig+0x79a>
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e52:	d204      	bcs.n	8008e5e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e5a:	60da      	str	r2, [r3, #12]
 8008e5c:	e17c      	b.n	8009158 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e64:	e178      	b.n	8009158 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e6e:	f040 80c5 	bne.w	8008ffc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008e72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	dc48      	bgt.n	8008f0c <UART_SetConfig+0x848>
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	db7b      	blt.n	8008f76 <UART_SetConfig+0x8b2>
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d879      	bhi.n	8008f76 <UART_SetConfig+0x8b2>
 8008e82:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <UART_SetConfig+0x7c4>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008f13 	.word	0x08008f13
 8008e8c:	08008f1b 	.word	0x08008f1b
 8008e90:	08008f77 	.word	0x08008f77
 8008e94:	08008f77 	.word	0x08008f77
 8008e98:	08008f23 	.word	0x08008f23
 8008e9c:	08008f77 	.word	0x08008f77
 8008ea0:	08008f77 	.word	0x08008f77
 8008ea4:	08008f77 	.word	0x08008f77
 8008ea8:	08008f33 	.word	0x08008f33
 8008eac:	08008f77 	.word	0x08008f77
 8008eb0:	08008f77 	.word	0x08008f77
 8008eb4:	08008f77 	.word	0x08008f77
 8008eb8:	08008f77 	.word	0x08008f77
 8008ebc:	08008f77 	.word	0x08008f77
 8008ec0:	08008f77 	.word	0x08008f77
 8008ec4:	08008f77 	.word	0x08008f77
 8008ec8:	08008f43 	.word	0x08008f43
 8008ecc:	08008f77 	.word	0x08008f77
 8008ed0:	08008f77 	.word	0x08008f77
 8008ed4:	08008f77 	.word	0x08008f77
 8008ed8:	08008f77 	.word	0x08008f77
 8008edc:	08008f77 	.word	0x08008f77
 8008ee0:	08008f77 	.word	0x08008f77
 8008ee4:	08008f77 	.word	0x08008f77
 8008ee8:	08008f77 	.word	0x08008f77
 8008eec:	08008f77 	.word	0x08008f77
 8008ef0:	08008f77 	.word	0x08008f77
 8008ef4:	08008f77 	.word	0x08008f77
 8008ef8:	08008f77 	.word	0x08008f77
 8008efc:	08008f77 	.word	0x08008f77
 8008f00:	08008f77 	.word	0x08008f77
 8008f04:	08008f77 	.word	0x08008f77
 8008f08:	08008f69 	.word	0x08008f69
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	d02e      	beq.n	8008f6e <UART_SetConfig+0x8aa>
 8008f10:	e031      	b.n	8008f76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f12:	f7fc fabf 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8008f16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f18:	e033      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f1a:	f7fc fad1 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 8008f1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f20:	e02f      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fac2 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f30:	e027      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f32:	f107 0318 	add.w	r3, r7, #24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fc0e 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f40:	e01f      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f42:	4b2d      	ldr	r3, [pc, #180]	; (8008ff8 <UART_SetConfig+0x934>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f4e:	4b2a      	ldr	r3, [pc, #168]	; (8008ff8 <UART_SetConfig+0x934>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	08db      	lsrs	r3, r3, #3
 8008f54:	f003 0303 	and.w	r3, r3, #3
 8008f58:	4a24      	ldr	r2, [pc, #144]	; (8008fec <UART_SetConfig+0x928>)
 8008f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f60:	e00f      	b.n	8008f82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f62:	4b22      	ldr	r3, [pc, #136]	; (8008fec <UART_SetConfig+0x928>)
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f66:	e00c      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f68:	4b21      	ldr	r3, [pc, #132]	; (8008ff0 <UART_SetConfig+0x92c>)
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f6c:	e009      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f74:	e005      	b.n	8008f82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 80e7 	beq.w	8009158 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <UART_SetConfig+0x930>)
 8008f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f9c:	005a      	lsls	r2, r3, #1
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	085b      	lsrs	r3, r3, #1
 8008fa4:	441a      	add	r2, r3
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	2b0f      	cmp	r3, #15
 8008fb4:	d916      	bls.n	8008fe4 <UART_SetConfig+0x920>
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fbc:	d212      	bcs.n	8008fe4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f023 030f 	bic.w	r3, r3, #15
 8008fc6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	085b      	lsrs	r3, r3, #1
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008fe0:	60da      	str	r2, [r3, #12]
 8008fe2:	e0b9      	b.n	8009158 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008fea:	e0b5      	b.n	8009158 <UART_SetConfig+0xa94>
 8008fec:	03d09000 	.word	0x03d09000
 8008ff0:	003d0900 	.word	0x003d0900
 8008ff4:	0800c178 	.word	0x0800c178
 8008ff8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ffc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009000:	2b20      	cmp	r3, #32
 8009002:	dc49      	bgt.n	8009098 <UART_SetConfig+0x9d4>
 8009004:	2b00      	cmp	r3, #0
 8009006:	db7c      	blt.n	8009102 <UART_SetConfig+0xa3e>
 8009008:	2b20      	cmp	r3, #32
 800900a:	d87a      	bhi.n	8009102 <UART_SetConfig+0xa3e>
 800900c:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <UART_SetConfig+0x950>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	0800909f 	.word	0x0800909f
 8009018:	080090a7 	.word	0x080090a7
 800901c:	08009103 	.word	0x08009103
 8009020:	08009103 	.word	0x08009103
 8009024:	080090af 	.word	0x080090af
 8009028:	08009103 	.word	0x08009103
 800902c:	08009103 	.word	0x08009103
 8009030:	08009103 	.word	0x08009103
 8009034:	080090bf 	.word	0x080090bf
 8009038:	08009103 	.word	0x08009103
 800903c:	08009103 	.word	0x08009103
 8009040:	08009103 	.word	0x08009103
 8009044:	08009103 	.word	0x08009103
 8009048:	08009103 	.word	0x08009103
 800904c:	08009103 	.word	0x08009103
 8009050:	08009103 	.word	0x08009103
 8009054:	080090cf 	.word	0x080090cf
 8009058:	08009103 	.word	0x08009103
 800905c:	08009103 	.word	0x08009103
 8009060:	08009103 	.word	0x08009103
 8009064:	08009103 	.word	0x08009103
 8009068:	08009103 	.word	0x08009103
 800906c:	08009103 	.word	0x08009103
 8009070:	08009103 	.word	0x08009103
 8009074:	08009103 	.word	0x08009103
 8009078:	08009103 	.word	0x08009103
 800907c:	08009103 	.word	0x08009103
 8009080:	08009103 	.word	0x08009103
 8009084:	08009103 	.word	0x08009103
 8009088:	08009103 	.word	0x08009103
 800908c:	08009103 	.word	0x08009103
 8009090:	08009103 	.word	0x08009103
 8009094:	080090f5 	.word	0x080090f5
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d02e      	beq.n	80090fa <UART_SetConfig+0xa36>
 800909c:	e031      	b.n	8009102 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800909e:	f7fc f9f9 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 80090a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090a4:	e033      	b.n	800910e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090a6:	f7fc fa0b 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 80090aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090ac:	e02f      	b.n	800910e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe f9fc 	bl	80074b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090bc:	e027      	b.n	800910e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090be:	f107 0318 	add.w	r3, r7, #24
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fb48 	bl	8007758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090cc:	e01f      	b.n	800910e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090ce:	4b2d      	ldr	r3, [pc, #180]	; (8009184 <UART_SetConfig+0xac0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d009      	beq.n	80090ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090da:	4b2a      	ldr	r3, [pc, #168]	; (8009184 <UART_SetConfig+0xac0>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	08db      	lsrs	r3, r3, #3
 80090e0:	f003 0303 	and.w	r3, r3, #3
 80090e4:	4a28      	ldr	r2, [pc, #160]	; (8009188 <UART_SetConfig+0xac4>)
 80090e6:	fa22 f303 	lsr.w	r3, r2, r3
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090ec:	e00f      	b.n	800910e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80090ee:	4b26      	ldr	r3, [pc, #152]	; (8009188 <UART_SetConfig+0xac4>)
 80090f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f2:	e00c      	b.n	800910e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090f4:	4b25      	ldr	r3, [pc, #148]	; (800918c <UART_SetConfig+0xac8>)
 80090f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f8:	e009      	b.n	800910e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009100:	e005      	b.n	800910e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800910c:	bf00      	nop
    }

    if (pclk != 0U)
 800910e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d021      	beq.n	8009158 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	4a1d      	ldr	r2, [pc, #116]	; (8009190 <UART_SetConfig+0xacc>)
 800911a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800911e:	461a      	mov	r2, r3
 8009120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009122:	fbb3 f2f2 	udiv	r2, r3, r2
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	085b      	lsrs	r3, r3, #1
 800912c:	441a      	add	r2, r3
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	fbb2 f3f3 	udiv	r3, r2, r3
 8009136:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	2b0f      	cmp	r3, #15
 800913c:	d909      	bls.n	8009152 <UART_SetConfig+0xa8e>
 800913e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009144:	d205      	bcs.n	8009152 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	b29a      	uxth	r2, r3
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60da      	str	r2, [r3, #12]
 8009150:	e002      	b.n	8009158 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2201      	movs	r2, #1
 800915c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2201      	movs	r2, #1
 8009164:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2200      	movs	r2, #0
 800916c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2200      	movs	r2, #0
 8009172:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009174:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009178:	4618      	mov	r0, r3
 800917a:	3748      	adds	r7, #72	; 0x48
 800917c:	46bd      	mov	sp, r7
 800917e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009182:	bf00      	nop
 8009184:	58024400 	.word	0x58024400
 8009188:	03d09000 	.word	0x03d09000
 800918c:	003d0900 	.word	0x003d0900
 8009190:	0800c178 	.word	0x0800c178

08009194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00a      	beq.n	8009246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	f003 0320 	and.w	r3, r3, #32
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00a      	beq.n	8009268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	d01a      	beq.n	80092aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009292:	d10a      	bne.n	80092aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	605a      	str	r2, [r3, #4]
  }
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b098      	sub	sp, #96	; 0x60
 80092dc:	af02      	add	r7, sp, #8
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092e8:	f7f8 fa2e 	bl	8001748 <HAL_GetTick>
 80092ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0308 	and.w	r3, r3, #8
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d12f      	bne.n	800935c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009304:	2200      	movs	r2, #0
 8009306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f88e 	bl	800942c <UART_WaitOnFlagUntilTimeout>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d022      	beq.n	800935c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	e853 3f00 	ldrex	r3, [r3]
 8009322:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800932a:	653b      	str	r3, [r7, #80]	; 0x50
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009334:	647b      	str	r3, [r7, #68]	; 0x44
 8009336:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800933a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e6      	bne.n	8009316 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2220      	movs	r2, #32
 800934c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e063      	b.n	8009424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0304 	and.w	r3, r3, #4
 8009366:	2b04      	cmp	r3, #4
 8009368:	d149      	bne.n	80093fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800936a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009372:	2200      	movs	r2, #0
 8009374:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f857 	bl	800942c <UART_WaitOnFlagUntilTimeout>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d03c      	beq.n	80093fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	623b      	str	r3, [r7, #32]
   return(result);
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a2:	633b      	str	r3, [r7, #48]	; 0x30
 80093a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e6      	bne.n	8009384 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3308      	adds	r3, #8
 80093bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f023 0301 	bic.w	r3, r3, #1
 80093cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093d6:	61fa      	str	r2, [r7, #28]
 80093d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	69b9      	ldr	r1, [r7, #24]
 80093dc:	69fa      	ldr	r2, [r7, #28]
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	617b      	str	r3, [r7, #20]
   return(result);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e5      	bne.n	80093b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2220      	movs	r2, #32
 80093ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e012      	b.n	8009424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2220      	movs	r2, #32
 8009402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3758      	adds	r7, #88	; 0x58
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	4613      	mov	r3, r2
 800943a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800943c:	e04f      	b.n	80094de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d04b      	beq.n	80094de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009446:	f7f8 f97f 	bl	8001748 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	429a      	cmp	r2, r3
 8009454:	d302      	bcc.n	800945c <UART_WaitOnFlagUntilTimeout+0x30>
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e04e      	b.n	80094fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b00      	cmp	r3, #0
 800946c:	d037      	beq.n	80094de <UART_WaitOnFlagUntilTimeout+0xb2>
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b80      	cmp	r3, #128	; 0x80
 8009472:	d034      	beq.n	80094de <UART_WaitOnFlagUntilTimeout+0xb2>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b40      	cmp	r3, #64	; 0x40
 8009478:	d031      	beq.n	80094de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b08      	cmp	r3, #8
 8009486:	d110      	bne.n	80094aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2208      	movs	r2, #8
 800948e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 f839 	bl	8009508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2208      	movs	r2, #8
 800949a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e029      	b.n	80094fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094b8:	d111      	bne.n	80094de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 f81f 	bl	8009508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2220      	movs	r2, #32
 80094ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e00f      	b.n	80094fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69da      	ldr	r2, [r3, #28]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	4013      	ands	r3, r2
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	bf0c      	ite	eq
 80094ee:	2301      	moveq	r3, #1
 80094f0:	2300      	movne	r3, #0
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	461a      	mov	r2, r3
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d0a0      	beq.n	800943e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009508:	b480      	push	{r7}
 800950a:	b095      	sub	sp, #84	; 0x54
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800952e:	643b      	str	r3, [r7, #64]	; 0x40
 8009530:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e6      	bne.n	8009510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3308      	adds	r3, #8
 8009548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	61fb      	str	r3, [r7, #28]
   return(result);
 8009552:	69fa      	ldr	r2, [r7, #28]
 8009554:	4b1e      	ldr	r3, [pc, #120]	; (80095d0 <UART_EndRxTransfer+0xc8>)
 8009556:	4013      	ands	r3, r2
 8009558:	64bb      	str	r3, [r7, #72]	; 0x48
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3308      	adds	r3, #8
 8009560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e5      	bne.n	8009542 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957a:	2b01      	cmp	r3, #1
 800957c:	d118      	bne.n	80095b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	e853 3f00 	ldrex	r3, [r3]
 800958a:	60bb      	str	r3, [r7, #8]
   return(result);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f023 0310 	bic.w	r3, r3, #16
 8009592:	647b      	str	r3, [r7, #68]	; 0x44
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	461a      	mov	r2, r3
 800959a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800959c:	61bb      	str	r3, [r7, #24]
 800959e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	6979      	ldr	r1, [r7, #20]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	613b      	str	r3, [r7, #16]
   return(result);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e6      	bne.n	800957e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80095c4:	bf00      	nop
 80095c6:	3754      	adds	r7, #84	; 0x54
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	effffffe 	.word	0xeffffffe

080095d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d101      	bne.n	80095ea <HAL_UARTEx_DisableFifoMode+0x16>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e027      	b.n	800963a <HAL_UARTEx_DisableFifoMode+0x66>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2224      	movs	r2, #36	; 0x24
 80095f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0201 	bic.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009618:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800965a:	2302      	movs	r3, #2
 800965c:	e02d      	b.n	80096ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2224      	movs	r2, #36	; 0x24
 800966a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0201 	bic.w	r2, r2, #1
 8009684:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f850 	bl	8009740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d101      	bne.n	80096da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096d6:	2302      	movs	r3, #2
 80096d8:	e02d      	b.n	8009736 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2224      	movs	r2, #36	; 0x24
 80096e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0201 	bic.w	r2, r2, #1
 8009700:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f812 	bl	8009740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2220      	movs	r2, #32
 8009728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800974c:	2b00      	cmp	r3, #0
 800974e:	d108      	bne.n	8009762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009760:	e031      	b.n	80097c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009762:	2310      	movs	r3, #16
 8009764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009766:	2310      	movs	r3, #16
 8009768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	0e5b      	lsrs	r3, r3, #25
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0307 	and.w	r3, r3, #7
 8009778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	0f5b      	lsrs	r3, r3, #29
 8009782:	b2db      	uxtb	r3, r3
 8009784:	f003 0307 	and.w	r3, r3, #7
 8009788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	7b3a      	ldrb	r2, [r7, #12]
 800978e:	4911      	ldr	r1, [pc, #68]	; (80097d4 <UARTEx_SetNbDataToProcess+0x94>)
 8009790:	5c8a      	ldrb	r2, [r1, r2]
 8009792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009796:	7b3a      	ldrb	r2, [r7, #12]
 8009798:	490f      	ldr	r1, [pc, #60]	; (80097d8 <UARTEx_SetNbDataToProcess+0x98>)
 800979a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800979c:	fb93 f3f2 	sdiv	r3, r3, r2
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	7b7a      	ldrb	r2, [r7, #13]
 80097ac:	4909      	ldr	r1, [pc, #36]	; (80097d4 <UARTEx_SetNbDataToProcess+0x94>)
 80097ae:	5c8a      	ldrb	r2, [r1, r2]
 80097b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097b4:	7b7a      	ldrb	r2, [r7, #13]
 80097b6:	4908      	ldr	r1, [pc, #32]	; (80097d8 <UARTEx_SetNbDataToProcess+0x98>)
 80097b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80097be:	b29a      	uxth	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097c6:	bf00      	nop
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	0800c190 	.word	0x0800c190
 80097d8:	0800c198 	.word	0x0800c198

080097dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80097ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ee:	2b84      	cmp	r3, #132	; 0x84
 80097f0:	d005      	beq.n	80097fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80097f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	3303      	adds	r3, #3
 80097fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80097fe:	68fb      	ldr	r3, [r7, #12]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009810:	f000 feda 	bl	800a5c8 <vTaskStartScheduler>
  
  return osOK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	bd80      	pop	{r7, pc}

0800981a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800981a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800981c:	b089      	sub	sp, #36	; 0x24
 800981e:	af04      	add	r7, sp, #16
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d020      	beq.n	800986e <osThreadCreate+0x54>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d01c      	beq.n	800986e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685c      	ldr	r4, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681d      	ldr	r5, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691e      	ldr	r6, [r3, #16]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff ffc8 	bl	80097dc <makeFreeRtosPriority>
 800984c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009856:	9202      	str	r2, [sp, #8]
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	9100      	str	r1, [sp, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	4632      	mov	r2, r6
 8009860:	4629      	mov	r1, r5
 8009862:	4620      	mov	r0, r4
 8009864:	f000 fce8 	bl	800a238 <xTaskCreateStatic>
 8009868:	4603      	mov	r3, r0
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e01c      	b.n	80098a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685c      	ldr	r4, [r3, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800987a:	b29e      	uxth	r6, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff ffaa 	bl	80097dc <makeFreeRtosPriority>
 8009888:	4602      	mov	r2, r0
 800988a:	f107 030c 	add.w	r3, r7, #12
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	9200      	str	r2, [sp, #0]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	4632      	mov	r2, r6
 8009896:	4629      	mov	r1, r5
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fd2a 	bl	800a2f2 <xTaskCreate>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d001      	beq.n	80098a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80098a4:	2300      	movs	r3, #0
 80098a6:	e000      	b.n	80098aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80098a8:	68fb      	ldr	r3, [r7, #12]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <osDelay+0x16>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	e000      	b.n	80098ca <osDelay+0x18>
 80098c8:	2301      	movs	r3, #1
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fe48 	bl	800a560 <vTaskDelay>
  
  return osOK;
 80098d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	; 0x28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098e8:	f000 fece 	bl	800a688 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098ec:	4b5b      	ldr	r3, [pc, #364]	; (8009a5c <pvPortMalloc+0x180>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098f4:	f000 f920 	bl	8009b38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098f8:	4b59      	ldr	r3, [pc, #356]	; (8009a60 <pvPortMalloc+0x184>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4013      	ands	r3, r2
 8009900:	2b00      	cmp	r3, #0
 8009902:	f040 8093 	bne.w	8009a2c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01d      	beq.n	8009948 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800990c:	2208      	movs	r2, #8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4413      	add	r3, r2
 8009912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b00      	cmp	r3, #0
 800991c:	d014      	beq.n	8009948 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f023 0307 	bic.w	r3, r3, #7
 8009924:	3308      	adds	r3, #8
 8009926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d06e      	beq.n	8009a2c <pvPortMalloc+0x150>
 800994e:	4b45      	ldr	r3, [pc, #276]	; (8009a64 <pvPortMalloc+0x188>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	429a      	cmp	r2, r3
 8009956:	d869      	bhi.n	8009a2c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009958:	4b43      	ldr	r3, [pc, #268]	; (8009a68 <pvPortMalloc+0x18c>)
 800995a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800995c:	4b42      	ldr	r3, [pc, #264]	; (8009a68 <pvPortMalloc+0x18c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009962:	e004      	b.n	800996e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	429a      	cmp	r2, r3
 8009976:	d903      	bls.n	8009980 <pvPortMalloc+0xa4>
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1f1      	bne.n	8009964 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009980:	4b36      	ldr	r3, [pc, #216]	; (8009a5c <pvPortMalloc+0x180>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009986:	429a      	cmp	r2, r3
 8009988:	d050      	beq.n	8009a2c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2208      	movs	r2, #8
 8009990:	4413      	add	r3, r2
 8009992:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	1ad2      	subs	r2, r2, r3
 80099a4:	2308      	movs	r3, #8
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d91f      	bls.n	80099ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4413      	add	r3, r2
 80099b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00a      	beq.n	80099d4 <pvPortMalloc+0xf8>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	613b      	str	r3, [r7, #16]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	1ad2      	subs	r2, r2, r3
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099e6:	69b8      	ldr	r0, [r7, #24]
 80099e8:	f000 f908 	bl	8009bfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099ec:	4b1d      	ldr	r3, [pc, #116]	; (8009a64 <pvPortMalloc+0x188>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	4a1b      	ldr	r2, [pc, #108]	; (8009a64 <pvPortMalloc+0x188>)
 80099f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099fa:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <pvPortMalloc+0x188>)
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	4b1b      	ldr	r3, [pc, #108]	; (8009a6c <pvPortMalloc+0x190>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d203      	bcs.n	8009a0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a06:	4b17      	ldr	r3, [pc, #92]	; (8009a64 <pvPortMalloc+0x188>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a18      	ldr	r2, [pc, #96]	; (8009a6c <pvPortMalloc+0x190>)
 8009a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <pvPortMalloc+0x184>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	431a      	orrs	r2, r3
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a22:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <pvPortMalloc+0x194>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3301      	adds	r3, #1
 8009a28:	4a11      	ldr	r2, [pc, #68]	; (8009a70 <pvPortMalloc+0x194>)
 8009a2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a2c:	f000 fe3a 	bl	800a6a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	f003 0307 	and.w	r3, r3, #7
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <pvPortMalloc+0x174>
	__asm volatile
 8009a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3e:	f383 8811 	msr	BASEPRI, r3
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	f3bf 8f4f 	dsb	sy
 8009a4a:	60fb      	str	r3, [r7, #12]
}
 8009a4c:	bf00      	nop
 8009a4e:	e7fe      	b.n	8009a4e <pvPortMalloc+0x172>
	return pvReturn;
 8009a50:	69fb      	ldr	r3, [r7, #28]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3728      	adds	r7, #40	; 0x28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	24004174 	.word	0x24004174
 8009a60:	24004188 	.word	0x24004188
 8009a64:	24004178 	.word	0x24004178
 8009a68:	2400416c 	.word	0x2400416c
 8009a6c:	2400417c 	.word	0x2400417c
 8009a70:	24004180 	.word	0x24004180

08009a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d04d      	beq.n	8009b22 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a86:	2308      	movs	r3, #8
 8009a88:	425b      	negs	r3, r3
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	4b24      	ldr	r3, [pc, #144]	; (8009b2c <vPortFree+0xb8>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10a      	bne.n	8009ab8 <vPortFree+0x44>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	60fb      	str	r3, [r7, #12]
}
 8009ab4:	bf00      	nop
 8009ab6:	e7fe      	b.n	8009ab6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00a      	beq.n	8009ad6 <vPortFree+0x62>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	60bb      	str	r3, [r7, #8]
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	4b14      	ldr	r3, [pc, #80]	; (8009b2c <vPortFree+0xb8>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4013      	ands	r3, r2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01e      	beq.n	8009b22 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d11a      	bne.n	8009b22 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <vPortFree+0xb8>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	43db      	mvns	r3, r3
 8009af6:	401a      	ands	r2, r3
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009afc:	f000 fdc4 	bl	800a688 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <vPortFree+0xbc>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4413      	add	r3, r2
 8009b0a:	4a09      	ldr	r2, [pc, #36]	; (8009b30 <vPortFree+0xbc>)
 8009b0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b0e:	6938      	ldr	r0, [r7, #16]
 8009b10:	f000 f874 	bl	8009bfc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b14:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <vPortFree+0xc0>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	4a06      	ldr	r2, [pc, #24]	; (8009b34 <vPortFree+0xc0>)
 8009b1c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b1e:	f000 fdc1 	bl	800a6a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b22:	bf00      	nop
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	24004188 	.word	0x24004188
 8009b30:	24004178 	.word	0x24004178
 8009b34:	24004184 	.word	0x24004184

08009b38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b44:	4b27      	ldr	r3, [pc, #156]	; (8009be4 <prvHeapInit+0xac>)
 8009b46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00c      	beq.n	8009b6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3307      	adds	r3, #7
 8009b56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0307 	bic.w	r3, r3, #7
 8009b5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	4a1f      	ldr	r2, [pc, #124]	; (8009be4 <prvHeapInit+0xac>)
 8009b68:	4413      	add	r3, r2
 8009b6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b70:	4a1d      	ldr	r2, [pc, #116]	; (8009be8 <prvHeapInit+0xb0>)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b76:	4b1c      	ldr	r3, [pc, #112]	; (8009be8 <prvHeapInit+0xb0>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	4413      	add	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b84:	2208      	movs	r2, #8
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f023 0307 	bic.w	r3, r3, #7
 8009b92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4a15      	ldr	r2, [pc, #84]	; (8009bec <prvHeapInit+0xb4>)
 8009b98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b9a:	4b14      	ldr	r3, [pc, #80]	; (8009bec <prvHeapInit+0xb4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ba2:	4b12      	ldr	r3, [pc, #72]	; (8009bec <prvHeapInit+0xb4>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	1ad2      	subs	r2, r2, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <prvHeapInit+0xb4>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4a0a      	ldr	r2, [pc, #40]	; (8009bf0 <prvHeapInit+0xb8>)
 8009bc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <prvHeapInit+0xbc>)
 8009bce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bd0:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <prvHeapInit+0xc0>)
 8009bd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009bd6:	601a      	str	r2, [r3, #0]
}
 8009bd8:	bf00      	nop
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	2400056c 	.word	0x2400056c
 8009be8:	2400416c 	.word	0x2400416c
 8009bec:	24004174 	.word	0x24004174
 8009bf0:	2400417c 	.word	0x2400417c
 8009bf4:	24004178 	.word	0x24004178
 8009bf8:	24004188 	.word	0x24004188

08009bfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c04:	4b28      	ldr	r3, [pc, #160]	; (8009ca8 <prvInsertBlockIntoFreeList+0xac>)
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	e002      	b.n	8009c10 <prvInsertBlockIntoFreeList+0x14>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d8f7      	bhi.n	8009c0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	4413      	add	r3, r2
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d108      	bne.n	8009c3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	441a      	add	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	441a      	add	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d118      	bne.n	8009c84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b15      	ldr	r3, [pc, #84]	; (8009cac <prvInsertBlockIntoFreeList+0xb0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d00d      	beq.n	8009c7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	441a      	add	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	e008      	b.n	8009c8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c7a:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <prvInsertBlockIntoFreeList+0xb0>)
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	e003      	b.n	8009c8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d002      	beq.n	8009c9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	2400416c 	.word	0x2400416c
 8009cac:	24004174 	.word	0x24004174

08009cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f103 0208 	add.w	r2, r3, #8
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f103 0208 	add.w	r2, r3, #8
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f103 0208 	add.w	r2, r3, #8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cfe:	bf00      	nop
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	601a      	str	r2, [r3, #0]
}
 8009d46:	bf00      	nop
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d52:	b480      	push	{r7}
 8009d54:	b085      	sub	sp, #20
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d68:	d103      	bne.n	8009d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	e00c      	b.n	8009d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3308      	adds	r3, #8
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	e002      	b.n	8009d80 <vListInsert+0x2e>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d2f6      	bcs.n	8009d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]
}
 8009db8:	bf00      	nop
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	6892      	ldr	r2, [r2, #8]
 8009dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6852      	ldr	r2, [r2, #4]
 8009de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d103      	bne.n	8009df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	1e5a      	subs	r2, r3, #1
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3b04      	subs	r3, #4
 8009e28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3b04      	subs	r3, #4
 8009e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f023 0201 	bic.w	r2, r3, #1
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3b04      	subs	r3, #4
 8009e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e48:	4a0c      	ldr	r2, [pc, #48]	; (8009e7c <pxPortInitialiseStack+0x64>)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3b14      	subs	r3, #20
 8009e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f06f 0202 	mvn.w	r2, #2
 8009e66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3b20      	subs	r3, #32
 8009e6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	08009e81 	.word	0x08009e81

08009e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <prvTaskExitError+0x54>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e92:	d00a      	beq.n	8009eaa <prvTaskExitError+0x2a>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	60fb      	str	r3, [r7, #12]
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <prvTaskExitError+0x28>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	60bb      	str	r3, [r7, #8]
}
 8009ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ebe:	bf00      	nop
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0fc      	beq.n	8009ec0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	24000014 	.word	0x24000014
	...

08009ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ee0:	4b07      	ldr	r3, [pc, #28]	; (8009f00 <pxCurrentTCBConst2>)
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	f380 8809 	msr	PSP, r0
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	4770      	bx	lr
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst2>:
 8009f00:	24004194 	.word	0x24004194
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f08:	4808      	ldr	r0, [pc, #32]	; (8009f2c <prvPortStartFirstTask+0x24>)
 8009f0a:	6800      	ldr	r0, [r0, #0]
 8009f0c:	6800      	ldr	r0, [r0, #0]
 8009f0e:	f380 8808 	msr	MSP, r0
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8814 	msr	CONTROL, r0
 8009f1a:	b662      	cpsie	i
 8009f1c:	b661      	cpsie	f
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	df00      	svc	0
 8009f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f2a:	bf00      	nop
 8009f2c:	e000ed08 	.word	0xe000ed08

08009f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f36:	4b46      	ldr	r3, [pc, #280]	; (800a050 <xPortStartScheduler+0x120>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a46      	ldr	r2, [pc, #280]	; (800a054 <xPortStartScheduler+0x124>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10a      	bne.n	8009f56 <xPortStartScheduler+0x26>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	613b      	str	r3, [r7, #16]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f56:	4b3e      	ldr	r3, [pc, #248]	; (800a050 <xPortStartScheduler+0x120>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a3f      	ldr	r2, [pc, #252]	; (800a058 <xPortStartScheduler+0x128>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d10a      	bne.n	8009f76 <xPortStartScheduler+0x46>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	60fb      	str	r3, [r7, #12]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f76:	4b39      	ldr	r3, [pc, #228]	; (800a05c <xPortStartScheduler+0x12c>)
 8009f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	22ff      	movs	r2, #255	; 0xff
 8009f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	4b31      	ldr	r3, [pc, #196]	; (800a060 <xPortStartScheduler+0x130>)
 8009f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f9e:	4b31      	ldr	r3, [pc, #196]	; (800a064 <xPortStartScheduler+0x134>)
 8009fa0:	2207      	movs	r2, #7
 8009fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fa4:	e009      	b.n	8009fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009fa6:	4b2f      	ldr	r3, [pc, #188]	; (800a064 <xPortStartScheduler+0x134>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	4a2d      	ldr	r2, [pc, #180]	; (800a064 <xPortStartScheduler+0x134>)
 8009fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fc2:	2b80      	cmp	r3, #128	; 0x80
 8009fc4:	d0ef      	beq.n	8009fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fc6:	4b27      	ldr	r3, [pc, #156]	; (800a064 <xPortStartScheduler+0x134>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f1c3 0307 	rsb	r3, r3, #7
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d00a      	beq.n	8009fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	60bb      	str	r3, [r7, #8]
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fe8:	4b1e      	ldr	r3, [pc, #120]	; (800a064 <xPortStartScheduler+0x134>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	021b      	lsls	r3, r3, #8
 8009fee:	4a1d      	ldr	r2, [pc, #116]	; (800a064 <xPortStartScheduler+0x134>)
 8009ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <xPortStartScheduler+0x134>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ffa:	4a1a      	ldr	r2, [pc, #104]	; (800a064 <xPortStartScheduler+0x134>)
 8009ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	b2da      	uxtb	r2, r3
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a006:	4b18      	ldr	r3, [pc, #96]	; (800a068 <xPortStartScheduler+0x138>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a17      	ldr	r2, [pc, #92]	; (800a068 <xPortStartScheduler+0x138>)
 800a00c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a012:	4b15      	ldr	r3, [pc, #84]	; (800a068 <xPortStartScheduler+0x138>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a14      	ldr	r2, [pc, #80]	; (800a068 <xPortStartScheduler+0x138>)
 800a018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a01c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a01e:	f000 f8dd 	bl	800a1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a022:	4b12      	ldr	r3, [pc, #72]	; (800a06c <xPortStartScheduler+0x13c>)
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a028:	f000 f8fc 	bl	800a224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a02c:	4b10      	ldr	r3, [pc, #64]	; (800a070 <xPortStartScheduler+0x140>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a0f      	ldr	r2, [pc, #60]	; (800a070 <xPortStartScheduler+0x140>)
 800a032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a038:	f7ff ff66 	bl	8009f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a03c:	f000 fc86 	bl	800a94c <vTaskSwitchContext>
	prvTaskExitError();
 800a040:	f7ff ff1e 	bl	8009e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	e000ed00 	.word	0xe000ed00
 800a054:	410fc271 	.word	0x410fc271
 800a058:	410fc270 	.word	0x410fc270
 800a05c:	e000e400 	.word	0xe000e400
 800a060:	2400418c 	.word	0x2400418c
 800a064:	24004190 	.word	0x24004190
 800a068:	e000ed20 	.word	0xe000ed20
 800a06c:	24000014 	.word	0x24000014
 800a070:	e000ef34 	.word	0xe000ef34

0800a074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	607b      	str	r3, [r7, #4]
}
 800a08c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a08e:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <vPortEnterCritical+0x58>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3301      	adds	r3, #1
 800a094:	4a0d      	ldr	r2, [pc, #52]	; (800a0cc <vPortEnterCritical+0x58>)
 800a096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a098:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <vPortEnterCritical+0x58>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d10f      	bne.n	800a0c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <vPortEnterCritical+0x5c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	603b      	str	r3, [r7, #0]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <vPortEnterCritical+0x4a>
	}
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	24000014 	.word	0x24000014
 800a0d0:	e000ed04 	.word	0xe000ed04

0800a0d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0da:	4b12      	ldr	r3, [pc, #72]	; (800a124 <vPortExitCritical+0x50>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10a      	bne.n	800a0f8 <vPortExitCritical+0x24>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	607b      	str	r3, [r7, #4]
}
 800a0f4:	bf00      	nop
 800a0f6:	e7fe      	b.n	800a0f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0f8:	4b0a      	ldr	r3, [pc, #40]	; (800a124 <vPortExitCritical+0x50>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	4a09      	ldr	r2, [pc, #36]	; (800a124 <vPortExitCritical+0x50>)
 800a100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a102:	4b08      	ldr	r3, [pc, #32]	; (800a124 <vPortExitCritical+0x50>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d105      	bne.n	800a116 <vPortExitCritical+0x42>
 800a10a:	2300      	movs	r3, #0
 800a10c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	24000014 	.word	0x24000014
	...

0800a130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a130:	f3ef 8009 	mrs	r0, PSP
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4b15      	ldr	r3, [pc, #84]	; (800a190 <pxCurrentTCBConst>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	f01e 0f10 	tst.w	lr, #16
 800a140:	bf08      	it	eq
 800a142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	6010      	str	r0, [r2, #0]
 800a14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a150:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a154:	f380 8811 	msr	BASEPRI, r0
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f000 fbf4 	bl	800a94c <vTaskSwitchContext>
 800a164:	f04f 0000 	mov.w	r0, #0
 800a168:	f380 8811 	msr	BASEPRI, r0
 800a16c:	bc09      	pop	{r0, r3}
 800a16e:	6819      	ldr	r1, [r3, #0]
 800a170:	6808      	ldr	r0, [r1, #0]
 800a172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a176:	f01e 0f10 	tst.w	lr, #16
 800a17a:	bf08      	it	eq
 800a17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a180:	f380 8809 	msr	PSP, r0
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w

0800a190 <pxCurrentTCBConst>:
 800a190:	24004194 	.word	0x24004194
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f000 fb13 	bl	800a7dc <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <SysTick_Handler+0x40>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f383 8811 	msr	BASEPRI, r3
}
 800a1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <vPortSetupTimerInterrupt+0x38>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <vPortSetupTimerInterrupt+0x3c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a0a      	ldr	r2, [pc, #40]	; (800a21c <vPortSetupTimerInterrupt+0x40>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	099b      	lsrs	r3, r3, #6
 800a1f8:	4a09      	ldr	r2, [pc, #36]	; (800a220 <vPortSetupTimerInterrupt+0x44>)
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1fe:	4b04      	ldr	r3, [pc, #16]	; (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000e010 	.word	0xe000e010
 800a214:	e000e018 	.word	0xe000e018
 800a218:	24000000 	.word	0x24000000
 800a21c:	10624dd3 	.word	0x10624dd3
 800a220:	e000e014 	.word	0xe000e014

0800a224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a234 <vPortEnableVFP+0x10>
 800a228:	6801      	ldr	r1, [r0, #0]
 800a22a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a22e:	6001      	str	r1, [r0, #0]
 800a230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a232:	bf00      	nop
 800a234:	e000ed88 	.word	0xe000ed88

0800a238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b08e      	sub	sp, #56	; 0x38
 800a23c:	af04      	add	r7, sp, #16
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10a      	bne.n	800a262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	623b      	str	r3, [r7, #32]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xTaskCreateStatic+0x46>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	61fb      	str	r3, [r7, #28]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a27e:	2354      	movs	r3, #84	; 0x54
 800a280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	2b54      	cmp	r3, #84	; 0x54
 800a286:	d00a      	beq.n	800a29e <xTaskCreateStatic+0x66>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	61bb      	str	r3, [r7, #24]
}
 800a29a:	bf00      	nop
 800a29c:	e7fe      	b.n	800a29c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a29e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d01e      	beq.n	800a2e4 <xTaskCreateStatic+0xac>
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d01b      	beq.n	800a2e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9303      	str	r3, [sp, #12]
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	9302      	str	r3, [sp, #8]
 800a2c6:	f107 0314 	add.w	r3, r7, #20
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	68b9      	ldr	r1, [r7, #8]
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f000 f850 	bl	800a37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2de:	f000 f8d5 	bl	800a48c <prvAddNewTaskToReadyList>
 800a2e2:	e001      	b.n	800a2e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2e8:	697b      	ldr	r3, [r7, #20]
	}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3728      	adds	r7, #40	; 0x28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b08c      	sub	sp, #48	; 0x30
 800a2f6:	af04      	add	r7, sp, #16
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	603b      	str	r3, [r7, #0]
 800a2fe:	4613      	mov	r3, r2
 800a300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff fae8 	bl	80098dc <pvPortMalloc>
 800a30c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00e      	beq.n	800a332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a314:	2054      	movs	r0, #84	; 0x54
 800a316:	f7ff fae1 	bl	80098dc <pvPortMalloc>
 800a31a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	631a      	str	r2, [r3, #48]	; 0x30
 800a328:	e005      	b.n	800a336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a32a:	6978      	ldr	r0, [r7, #20]
 800a32c:	f7ff fba2 	bl	8009a74 <vPortFree>
 800a330:	e001      	b.n	800a336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a332:	2300      	movs	r3, #0
 800a334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d017      	beq.n	800a36c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a344:	88fa      	ldrh	r2, [r7, #6]
 800a346:	2300      	movs	r3, #0
 800a348:	9303      	str	r3, [sp, #12]
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	9302      	str	r3, [sp, #8]
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	9301      	str	r3, [sp, #4]
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	68b9      	ldr	r1, [r7, #8]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 f80e 	bl	800a37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a360:	69f8      	ldr	r0, [r7, #28]
 800a362:	f000 f893 	bl	800a48c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a366:	2301      	movs	r3, #1
 800a368:	61bb      	str	r3, [r7, #24]
 800a36a:	e002      	b.n	800a372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a36c:	f04f 33ff 	mov.w	r3, #4294967295
 800a370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a372:	69bb      	ldr	r3, [r7, #24]
	}
 800a374:	4618      	mov	r0, r3
 800a376:	3720      	adds	r7, #32
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a394:	440b      	add	r3, r1
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	f023 0307 	bic.w	r3, r3, #7
 800a3a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	617b      	str	r3, [r7, #20]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d01f      	beq.n	800a40a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	61fb      	str	r3, [r7, #28]
 800a3ce:	e012      	b.n	800a3f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	7819      	ldrb	r1, [r3, #0]
 800a3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	4413      	add	r3, r2
 800a3de:	3334      	adds	r3, #52	; 0x34
 800a3e0:	460a      	mov	r2, r1
 800a3e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d006      	beq.n	800a3fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	61fb      	str	r3, [r7, #28]
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	2b0f      	cmp	r3, #15
 800a3fa:	d9e9      	bls.n	800a3d0 <prvInitialiseNewTask+0x54>
 800a3fc:	e000      	b.n	800a400 <prvInitialiseNewTask+0x84>
			{
				break;
 800a3fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a408:	e003      	b.n	800a412 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	2b06      	cmp	r3, #6
 800a416:	d901      	bls.n	800a41c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a418:	2306      	movs	r3, #6
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a420:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a426:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	2200      	movs	r2, #0
 800a42c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	3304      	adds	r3, #4
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff fc5c 	bl	8009cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	3318      	adds	r3, #24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff fc57 	bl	8009cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a446:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	f1c3 0207 	rsb	r2, r3, #7
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a456:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	2200      	movs	r2, #0
 800a45c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	68f9      	ldr	r1, [r7, #12]
 800a46a:	69b8      	ldr	r0, [r7, #24]
 800a46c:	f7ff fcd4 	bl	8009e18 <pxPortInitialiseStack>
 800a470:	4602      	mov	r2, r0
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a482:	bf00      	nop
 800a484:	3720      	adds	r7, #32
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a494:	f7ff fdee 	bl	800a074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a498:	4b2a      	ldr	r3, [pc, #168]	; (800a544 <prvAddNewTaskToReadyList+0xb8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3301      	adds	r3, #1
 800a49e:	4a29      	ldr	r2, [pc, #164]	; (800a544 <prvAddNewTaskToReadyList+0xb8>)
 800a4a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4a2:	4b29      	ldr	r3, [pc, #164]	; (800a548 <prvAddNewTaskToReadyList+0xbc>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d109      	bne.n	800a4be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4aa:	4a27      	ldr	r2, [pc, #156]	; (800a548 <prvAddNewTaskToReadyList+0xbc>)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4b0:	4b24      	ldr	r3, [pc, #144]	; (800a544 <prvAddNewTaskToReadyList+0xb8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d110      	bne.n	800a4da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4b8:	f000 fabc 	bl	800aa34 <prvInitialiseTaskLists>
 800a4bc:	e00d      	b.n	800a4da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4be:	4b23      	ldr	r3, [pc, #140]	; (800a54c <prvAddNewTaskToReadyList+0xc0>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d109      	bne.n	800a4da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4c6:	4b20      	ldr	r3, [pc, #128]	; (800a548 <prvAddNewTaskToReadyList+0xbc>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d802      	bhi.n	800a4da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4d4:	4a1c      	ldr	r2, [pc, #112]	; (800a548 <prvAddNewTaskToReadyList+0xbc>)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4da:	4b1d      	ldr	r3, [pc, #116]	; (800a550 <prvAddNewTaskToReadyList+0xc4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	4a1b      	ldr	r2, [pc, #108]	; (800a550 <prvAddNewTaskToReadyList+0xc4>)
 800a4e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	409a      	lsls	r2, r3
 800a4ec:	4b19      	ldr	r3, [pc, #100]	; (800a554 <prvAddNewTaskToReadyList+0xc8>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	4a18      	ldr	r2, [pc, #96]	; (800a554 <prvAddNewTaskToReadyList+0xc8>)
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4a15      	ldr	r2, [pc, #84]	; (800a558 <prvAddNewTaskToReadyList+0xcc>)
 800a504:	441a      	add	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	3304      	adds	r3, #4
 800a50a:	4619      	mov	r1, r3
 800a50c:	4610      	mov	r0, r2
 800a50e:	f7ff fbfc 	bl	8009d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a512:	f7ff fddf 	bl	800a0d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a516:	4b0d      	ldr	r3, [pc, #52]	; (800a54c <prvAddNewTaskToReadyList+0xc0>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00e      	beq.n	800a53c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a51e:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <prvAddNewTaskToReadyList+0xbc>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	429a      	cmp	r2, r3
 800a52a:	d207      	bcs.n	800a53c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a52c:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <prvAddNewTaskToReadyList+0xd0>)
 800a52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	24004294 	.word	0x24004294
 800a548:	24004194 	.word	0x24004194
 800a54c:	240042a0 	.word	0x240042a0
 800a550:	240042b0 	.word	0x240042b0
 800a554:	2400429c 	.word	0x2400429c
 800a558:	24004198 	.word	0x24004198
 800a55c:	e000ed04 	.word	0xe000ed04

0800a560 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d017      	beq.n	800a5a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a572:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <vTaskDelay+0x60>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <vTaskDelay+0x30>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	60bb      	str	r3, [r7, #8]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a590:	f000 f87a 	bl	800a688 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a594:	2100      	movs	r1, #0
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fb0a 	bl	800abb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a59c:	f000 f882 	bl	800a6a4 <xTaskResumeAll>
 800a5a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d107      	bne.n	800a5b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a5a8:	4b06      	ldr	r3, [pc, #24]	; (800a5c4 <vTaskDelay+0x64>)
 800a5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5b8:	bf00      	nop
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	240042bc 	.word	0x240042bc
 800a5c4:	e000ed04 	.word	0xe000ed04

0800a5c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08a      	sub	sp, #40	; 0x28
 800a5cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5d6:	463a      	mov	r2, r7
 800a5d8:	1d39      	adds	r1, r7, #4
 800a5da:	f107 0308 	add.w	r3, r7, #8
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f6 f9e6 	bl	80009b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5e4:	6839      	ldr	r1, [r7, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	9202      	str	r2, [sp, #8]
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	460a      	mov	r2, r1
 800a5f6:	491e      	ldr	r1, [pc, #120]	; (800a670 <vTaskStartScheduler+0xa8>)
 800a5f8:	481e      	ldr	r0, [pc, #120]	; (800a674 <vTaskStartScheduler+0xac>)
 800a5fa:	f7ff fe1d 	bl	800a238 <xTaskCreateStatic>
 800a5fe:	4603      	mov	r3, r0
 800a600:	4a1d      	ldr	r2, [pc, #116]	; (800a678 <vTaskStartScheduler+0xb0>)
 800a602:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a604:	4b1c      	ldr	r3, [pc, #112]	; (800a678 <vTaskStartScheduler+0xb0>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a60c:	2301      	movs	r3, #1
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	e001      	b.n	800a616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a612:	2300      	movs	r3, #0
 800a614:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d116      	bne.n	800a64a <vTaskStartScheduler+0x82>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	613b      	str	r3, [r7, #16]
}
 800a62e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a630:	4b12      	ldr	r3, [pc, #72]	; (800a67c <vTaskStartScheduler+0xb4>)
 800a632:	f04f 32ff 	mov.w	r2, #4294967295
 800a636:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a638:	4b11      	ldr	r3, [pc, #68]	; (800a680 <vTaskStartScheduler+0xb8>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a63e:	4b11      	ldr	r3, [pc, #68]	; (800a684 <vTaskStartScheduler+0xbc>)
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a644:	f7ff fc74 	bl	8009f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a648:	e00e      	b.n	800a668 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a650:	d10a      	bne.n	800a668 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	60fb      	str	r3, [r7, #12]
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <vTaskStartScheduler+0x9e>
}
 800a668:	bf00      	nop
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	0800c158 	.word	0x0800c158
 800a674:	0800aa05 	.word	0x0800aa05
 800a678:	240042b8 	.word	0x240042b8
 800a67c:	240042b4 	.word	0x240042b4
 800a680:	240042a0 	.word	0x240042a0
 800a684:	24004298 	.word	0x24004298

0800a688 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a688:	b480      	push	{r7}
 800a68a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a68c:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <vTaskSuspendAll+0x18>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3301      	adds	r3, #1
 800a692:	4a03      	ldr	r2, [pc, #12]	; (800a6a0 <vTaskSuspendAll+0x18>)
 800a694:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a696:	bf00      	nop
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	240042bc 	.word	0x240042bc

0800a6a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6b2:	4b41      	ldr	r3, [pc, #260]	; (800a7b8 <xTaskResumeAll+0x114>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10a      	bne.n	800a6d0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	603b      	str	r3, [r7, #0]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6d0:	f7ff fcd0 	bl	800a074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6d4:	4b38      	ldr	r3, [pc, #224]	; (800a7b8 <xTaskResumeAll+0x114>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	4a37      	ldr	r2, [pc, #220]	; (800a7b8 <xTaskResumeAll+0x114>)
 800a6dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6de:	4b36      	ldr	r3, [pc, #216]	; (800a7b8 <xTaskResumeAll+0x114>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d161      	bne.n	800a7aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6e6:	4b35      	ldr	r3, [pc, #212]	; (800a7bc <xTaskResumeAll+0x118>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d05d      	beq.n	800a7aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6ee:	e02e      	b.n	800a74e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f0:	4b33      	ldr	r3, [pc, #204]	; (800a7c0 <xTaskResumeAll+0x11c>)
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3318      	adds	r3, #24
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fb61 	bl	8009dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3304      	adds	r3, #4
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fb5c 	bl	8009dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	2201      	movs	r2, #1
 800a712:	409a      	lsls	r2, r3
 800a714:	4b2b      	ldr	r3, [pc, #172]	; (800a7c4 <xTaskResumeAll+0x120>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4313      	orrs	r3, r2
 800a71a:	4a2a      	ldr	r2, [pc, #168]	; (800a7c4 <xTaskResumeAll+0x120>)
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a722:	4613      	mov	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4a27      	ldr	r2, [pc, #156]	; (800a7c8 <xTaskResumeAll+0x124>)
 800a72c:	441a      	add	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	3304      	adds	r3, #4
 800a732:	4619      	mov	r1, r3
 800a734:	4610      	mov	r0, r2
 800a736:	f7ff fae8 	bl	8009d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73e:	4b23      	ldr	r3, [pc, #140]	; (800a7cc <xTaskResumeAll+0x128>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a744:	429a      	cmp	r2, r3
 800a746:	d302      	bcc.n	800a74e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a748:	4b21      	ldr	r3, [pc, #132]	; (800a7d0 <xTaskResumeAll+0x12c>)
 800a74a:	2201      	movs	r2, #1
 800a74c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a74e:	4b1c      	ldr	r3, [pc, #112]	; (800a7c0 <xTaskResumeAll+0x11c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1cc      	bne.n	800a6f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a75c:	f000 fa08 	bl	800ab70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a760:	4b1c      	ldr	r3, [pc, #112]	; (800a7d4 <xTaskResumeAll+0x130>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d010      	beq.n	800a78e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a76c:	f000 f836 	bl	800a7dc <xTaskIncrementTick>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d002      	beq.n	800a77c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a776:	4b16      	ldr	r3, [pc, #88]	; (800a7d0 <xTaskResumeAll+0x12c>)
 800a778:	2201      	movs	r2, #1
 800a77a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3b01      	subs	r3, #1
 800a780:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1f1      	bne.n	800a76c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a788:	4b12      	ldr	r3, [pc, #72]	; (800a7d4 <xTaskResumeAll+0x130>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a78e:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <xTaskResumeAll+0x12c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d009      	beq.n	800a7aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a796:	2301      	movs	r3, #1
 800a798:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a79a:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <xTaskResumeAll+0x134>)
 800a79c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7aa:	f7ff fc93 	bl	800a0d4 <vPortExitCritical>

	return xAlreadyYielded;
 800a7ae:	68bb      	ldr	r3, [r7, #8]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	240042bc 	.word	0x240042bc
 800a7bc:	24004294 	.word	0x24004294
 800a7c0:	24004254 	.word	0x24004254
 800a7c4:	2400429c 	.word	0x2400429c
 800a7c8:	24004198 	.word	0x24004198
 800a7cc:	24004194 	.word	0x24004194
 800a7d0:	240042a8 	.word	0x240042a8
 800a7d4:	240042a4 	.word	0x240042a4
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7e6:	4b4e      	ldr	r3, [pc, #312]	; (800a920 <xTaskIncrementTick+0x144>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f040 808e 	bne.w	800a90c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7f0:	4b4c      	ldr	r3, [pc, #304]	; (800a924 <xTaskIncrementTick+0x148>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7f8:	4a4a      	ldr	r2, [pc, #296]	; (800a924 <xTaskIncrementTick+0x148>)
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d120      	bne.n	800a846 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a804:	4b48      	ldr	r3, [pc, #288]	; (800a928 <xTaskIncrementTick+0x14c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <xTaskIncrementTick+0x48>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	603b      	str	r3, [r7, #0]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <xTaskIncrementTick+0x46>
 800a824:	4b40      	ldr	r3, [pc, #256]	; (800a928 <xTaskIncrementTick+0x14c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	4b40      	ldr	r3, [pc, #256]	; (800a92c <xTaskIncrementTick+0x150>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a3e      	ldr	r2, [pc, #248]	; (800a928 <xTaskIncrementTick+0x14c>)
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	4a3e      	ldr	r2, [pc, #248]	; (800a92c <xTaskIncrementTick+0x150>)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	4b3d      	ldr	r3, [pc, #244]	; (800a930 <xTaskIncrementTick+0x154>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	4a3c      	ldr	r2, [pc, #240]	; (800a930 <xTaskIncrementTick+0x154>)
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	f000 f995 	bl	800ab70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a846:	4b3b      	ldr	r3, [pc, #236]	; (800a934 <xTaskIncrementTick+0x158>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d348      	bcc.n	800a8e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a850:	4b35      	ldr	r3, [pc, #212]	; (800a928 <xTaskIncrementTick+0x14c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d104      	bne.n	800a864 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85a:	4b36      	ldr	r3, [pc, #216]	; (800a934 <xTaskIncrementTick+0x158>)
 800a85c:	f04f 32ff 	mov.w	r2, #4294967295
 800a860:	601a      	str	r2, [r3, #0]
					break;
 800a862:	e03e      	b.n	800a8e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a864:	4b30      	ldr	r3, [pc, #192]	; (800a928 <xTaskIncrementTick+0x14c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d203      	bcs.n	800a884 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a87c:	4a2d      	ldr	r2, [pc, #180]	; (800a934 <xTaskIncrementTick+0x158>)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a882:	e02e      	b.n	800a8e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	3304      	adds	r3, #4
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff fa9b 	bl	8009dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	3318      	adds	r3, #24
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff fa92 	bl	8009dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	409a      	lsls	r2, r3
 800a8a8:	4b23      	ldr	r3, [pc, #140]	; (800a938 <xTaskIncrementTick+0x15c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	4a22      	ldr	r2, [pc, #136]	; (800a938 <xTaskIncrementTick+0x15c>)
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4a1f      	ldr	r2, [pc, #124]	; (800a93c <xTaskIncrementTick+0x160>)
 800a8c0:	441a      	add	r2, r3
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f7ff fa1e 	bl	8009d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	4b1b      	ldr	r3, [pc, #108]	; (800a940 <xTaskIncrementTick+0x164>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d3b9      	bcc.n	800a850 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8e0:	e7b6      	b.n	800a850 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8e2:	4b17      	ldr	r3, [pc, #92]	; (800a940 <xTaskIncrementTick+0x164>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e8:	4914      	ldr	r1, [pc, #80]	; (800a93c <xTaskIncrementTick+0x160>)
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	440b      	add	r3, r1
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d901      	bls.n	800a8fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8fe:	4b11      	ldr	r3, [pc, #68]	; (800a944 <xTaskIncrementTick+0x168>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d007      	beq.n	800a916 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a906:	2301      	movs	r3, #1
 800a908:	617b      	str	r3, [r7, #20]
 800a90a:	e004      	b.n	800a916 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a90c:	4b0e      	ldr	r3, [pc, #56]	; (800a948 <xTaskIncrementTick+0x16c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	4a0d      	ldr	r2, [pc, #52]	; (800a948 <xTaskIncrementTick+0x16c>)
 800a914:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a916:	697b      	ldr	r3, [r7, #20]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	240042bc 	.word	0x240042bc
 800a924:	24004298 	.word	0x24004298
 800a928:	2400424c 	.word	0x2400424c
 800a92c:	24004250 	.word	0x24004250
 800a930:	240042ac 	.word	0x240042ac
 800a934:	240042b4 	.word	0x240042b4
 800a938:	2400429c 	.word	0x2400429c
 800a93c:	24004198 	.word	0x24004198
 800a940:	24004194 	.word	0x24004194
 800a944:	240042a8 	.word	0x240042a8
 800a948:	240042a4 	.word	0x240042a4

0800a94c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a952:	4b27      	ldr	r3, [pc, #156]	; (800a9f0 <vTaskSwitchContext+0xa4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a95a:	4b26      	ldr	r3, [pc, #152]	; (800a9f4 <vTaskSwitchContext+0xa8>)
 800a95c:	2201      	movs	r2, #1
 800a95e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a960:	e03f      	b.n	800a9e2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a962:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <vTaskSwitchContext+0xa8>)
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a968:	4b23      	ldr	r3, [pc, #140]	; (800a9f8 <vTaskSwitchContext+0xac>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	fab3 f383 	clz	r3, r3
 800a974:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	f1c3 031f 	rsb	r3, r3, #31
 800a97c:	617b      	str	r3, [r7, #20]
 800a97e:	491f      	ldr	r1, [pc, #124]	; (800a9fc <vTaskSwitchContext+0xb0>)
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	440b      	add	r3, r1
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	607b      	str	r3, [r7, #4]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <vTaskSwitchContext+0x5a>
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4a12      	ldr	r2, [pc, #72]	; (800a9fc <vTaskSwitchContext+0xb0>)
 800a9b4:	4413      	add	r3, r2
 800a9b6:	613b      	str	r3, [r7, #16]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	605a      	str	r2, [r3, #4]
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d104      	bne.n	800a9d8 <vTaskSwitchContext+0x8c>
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	685a      	ldr	r2, [r3, #4]
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	605a      	str	r2, [r3, #4]
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	4a08      	ldr	r2, [pc, #32]	; (800aa00 <vTaskSwitchContext+0xb4>)
 800a9e0:	6013      	str	r3, [r2, #0]
}
 800a9e2:	bf00      	nop
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	240042bc 	.word	0x240042bc
 800a9f4:	240042a8 	.word	0x240042a8
 800a9f8:	2400429c 	.word	0x2400429c
 800a9fc:	24004198 	.word	0x24004198
 800aa00:	24004194 	.word	0x24004194

0800aa04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa0c:	f000 f852 	bl	800aab4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa10:	4b06      	ldr	r3, [pc, #24]	; (800aa2c <prvIdleTask+0x28>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d9f9      	bls.n	800aa0c <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa18:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <prvIdleTask+0x2c>)
 800aa1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa1e:	601a      	str	r2, [r3, #0]
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa28:	e7f0      	b.n	800aa0c <prvIdleTask+0x8>
 800aa2a:	bf00      	nop
 800aa2c:	24004198 	.word	0x24004198
 800aa30:	e000ed04 	.word	0xe000ed04

0800aa34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	607b      	str	r3, [r7, #4]
 800aa3e:	e00c      	b.n	800aa5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4a12      	ldr	r2, [pc, #72]	; (800aa94 <prvInitialiseTaskLists+0x60>)
 800aa4c:	4413      	add	r3, r2
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff f92e 	bl	8009cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	3301      	adds	r3, #1
 800aa58:	607b      	str	r3, [r7, #4]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b06      	cmp	r3, #6
 800aa5e:	d9ef      	bls.n	800aa40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa60:	480d      	ldr	r0, [pc, #52]	; (800aa98 <prvInitialiseTaskLists+0x64>)
 800aa62:	f7ff f925 	bl	8009cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa66:	480d      	ldr	r0, [pc, #52]	; (800aa9c <prvInitialiseTaskLists+0x68>)
 800aa68:	f7ff f922 	bl	8009cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa6c:	480c      	ldr	r0, [pc, #48]	; (800aaa0 <prvInitialiseTaskLists+0x6c>)
 800aa6e:	f7ff f91f 	bl	8009cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa72:	480c      	ldr	r0, [pc, #48]	; (800aaa4 <prvInitialiseTaskLists+0x70>)
 800aa74:	f7ff f91c 	bl	8009cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa78:	480b      	ldr	r0, [pc, #44]	; (800aaa8 <prvInitialiseTaskLists+0x74>)
 800aa7a:	f7ff f919 	bl	8009cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa7e:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <prvInitialiseTaskLists+0x78>)
 800aa80:	4a05      	ldr	r2, [pc, #20]	; (800aa98 <prvInitialiseTaskLists+0x64>)
 800aa82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa84:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <prvInitialiseTaskLists+0x7c>)
 800aa86:	4a05      	ldr	r2, [pc, #20]	; (800aa9c <prvInitialiseTaskLists+0x68>)
 800aa88:	601a      	str	r2, [r3, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	24004198 	.word	0x24004198
 800aa98:	24004224 	.word	0x24004224
 800aa9c:	24004238 	.word	0x24004238
 800aaa0:	24004254 	.word	0x24004254
 800aaa4:	24004268 	.word	0x24004268
 800aaa8:	24004280 	.word	0x24004280
 800aaac:	2400424c 	.word	0x2400424c
 800aab0:	24004250 	.word	0x24004250

0800aab4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaba:	e019      	b.n	800aaf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aabc:	f7ff fada 	bl	800a074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac0:	4b10      	ldr	r3, [pc, #64]	; (800ab04 <prvCheckTasksWaitingTermination+0x50>)
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	3304      	adds	r3, #4
 800aacc:	4618      	mov	r0, r3
 800aace:	f7ff f979 	bl	8009dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aad2:	4b0d      	ldr	r3, [pc, #52]	; (800ab08 <prvCheckTasksWaitingTermination+0x54>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	4a0b      	ldr	r2, [pc, #44]	; (800ab08 <prvCheckTasksWaitingTermination+0x54>)
 800aada:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aadc:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <prvCheckTasksWaitingTermination+0x58>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	4a0a      	ldr	r2, [pc, #40]	; (800ab0c <prvCheckTasksWaitingTermination+0x58>)
 800aae4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aae6:	f7ff faf5 	bl	800a0d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f810 	bl	800ab10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaf0:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <prvCheckTasksWaitingTermination+0x58>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e1      	bne.n	800aabc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	24004268 	.word	0x24004268
 800ab08:	24004294 	.word	0x24004294
 800ab0c:	2400427c 	.word	0x2400427c

0800ab10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d108      	bne.n	800ab34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe ffa4 	bl	8009a74 <vPortFree>
				vPortFree( pxTCB );
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7fe ffa1 	bl	8009a74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab32:	e018      	b.n	800ab66 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d103      	bne.n	800ab46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7fe ff98 	bl	8009a74 <vPortFree>
	}
 800ab44:	e00f      	b.n	800ab66 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d00a      	beq.n	800ab66 <prvDeleteTCB+0x56>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	60fb      	str	r3, [r7, #12]
}
 800ab62:	bf00      	nop
 800ab64:	e7fe      	b.n	800ab64 <prvDeleteTCB+0x54>
	}
 800ab66:	bf00      	nop
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
	...

0800ab70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab76:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <prvResetNextTaskUnblockTime+0x38>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d104      	bne.n	800ab8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab80:	4b0a      	ldr	r3, [pc, #40]	; (800abac <prvResetNextTaskUnblockTime+0x3c>)
 800ab82:	f04f 32ff 	mov.w	r2, #4294967295
 800ab86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab88:	e008      	b.n	800ab9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab8a:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <prvResetNextTaskUnblockTime+0x38>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	4a04      	ldr	r2, [pc, #16]	; (800abac <prvResetNextTaskUnblockTime+0x3c>)
 800ab9a:	6013      	str	r3, [r2, #0]
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	2400424c 	.word	0x2400424c
 800abac:	240042b4 	.word	0x240042b4

0800abb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abba:	4b29      	ldr	r3, [pc, #164]	; (800ac60 <prvAddCurrentTaskToDelayedList+0xb0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abc0:	4b28      	ldr	r3, [pc, #160]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff f8fc 	bl	8009dc4 <uxListRemove>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10b      	bne.n	800abea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800abd2:	4b24      	ldr	r3, [pc, #144]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	2201      	movs	r2, #1
 800abda:	fa02 f303 	lsl.w	r3, r2, r3
 800abde:	43da      	mvns	r2, r3
 800abe0:	4b21      	ldr	r3, [pc, #132]	; (800ac68 <prvAddCurrentTaskToDelayedList+0xb8>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4013      	ands	r3, r2
 800abe6:	4a20      	ldr	r2, [pc, #128]	; (800ac68 <prvAddCurrentTaskToDelayedList+0xb8>)
 800abe8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf0:	d10a      	bne.n	800ac08 <prvAddCurrentTaskToDelayedList+0x58>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d007      	beq.n	800ac08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abf8:	4b1a      	ldr	r3, [pc, #104]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4619      	mov	r1, r3
 800ac00:	481a      	ldr	r0, [pc, #104]	; (800ac6c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ac02:	f7ff f882 	bl	8009d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac06:	e026      	b.n	800ac56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac10:	4b14      	ldr	r3, [pc, #80]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d209      	bcs.n	800ac34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac20:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	4b0f      	ldr	r3, [pc, #60]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	f7ff f890 	bl	8009d52 <vListInsert>
}
 800ac32:	e010      	b.n	800ac56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac34:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4619      	mov	r1, r3
 800ac40:	4610      	mov	r0, r2
 800ac42:	f7ff f886 	bl	8009d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac46:	4b0c      	ldr	r3, [pc, #48]	; (800ac78 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d202      	bcs.n	800ac56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ac50:	4a09      	ldr	r2, [pc, #36]	; (800ac78 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	6013      	str	r3, [r2, #0]
}
 800ac56:	bf00      	nop
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	24004298 	.word	0x24004298
 800ac64:	24004194 	.word	0x24004194
 800ac68:	2400429c 	.word	0x2400429c
 800ac6c:	24004280 	.word	0x24004280
 800ac70:	24004250 	.word	0x24004250
 800ac74:	2400424c 	.word	0x2400424c
 800ac78:	240042b4 	.word	0x240042b4

0800ac7c <__errno>:
 800ac7c:	4b01      	ldr	r3, [pc, #4]	; (800ac84 <__errno+0x8>)
 800ac7e:	6818      	ldr	r0, [r3, #0]
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	24000018 	.word	0x24000018

0800ac88 <__libc_init_array>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	4d0d      	ldr	r5, [pc, #52]	; (800acc0 <__libc_init_array+0x38>)
 800ac8c:	4c0d      	ldr	r4, [pc, #52]	; (800acc4 <__libc_init_array+0x3c>)
 800ac8e:	1b64      	subs	r4, r4, r5
 800ac90:	10a4      	asrs	r4, r4, #2
 800ac92:	2600      	movs	r6, #0
 800ac94:	42a6      	cmp	r6, r4
 800ac96:	d109      	bne.n	800acac <__libc_init_array+0x24>
 800ac98:	4d0b      	ldr	r5, [pc, #44]	; (800acc8 <__libc_init_array+0x40>)
 800ac9a:	4c0c      	ldr	r4, [pc, #48]	; (800accc <__libc_init_array+0x44>)
 800ac9c:	f001 fa20 	bl	800c0e0 <_init>
 800aca0:	1b64      	subs	r4, r4, r5
 800aca2:	10a4      	asrs	r4, r4, #2
 800aca4:	2600      	movs	r6, #0
 800aca6:	42a6      	cmp	r6, r4
 800aca8:	d105      	bne.n	800acb6 <__libc_init_array+0x2e>
 800acaa:	bd70      	pop	{r4, r5, r6, pc}
 800acac:	f855 3b04 	ldr.w	r3, [r5], #4
 800acb0:	4798      	blx	r3
 800acb2:	3601      	adds	r6, #1
 800acb4:	e7ee      	b.n	800ac94 <__libc_init_array+0xc>
 800acb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acba:	4798      	blx	r3
 800acbc:	3601      	adds	r6, #1
 800acbe:	e7f2      	b.n	800aca6 <__libc_init_array+0x1e>
 800acc0:	0800c5ac 	.word	0x0800c5ac
 800acc4:	0800c5ac 	.word	0x0800c5ac
 800acc8:	0800c5ac 	.word	0x0800c5ac
 800accc:	0800c5b0 	.word	0x0800c5b0

0800acd0 <memcpy>:
 800acd0:	440a      	add	r2, r1
 800acd2:	4291      	cmp	r1, r2
 800acd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800acd8:	d100      	bne.n	800acdc <memcpy+0xc>
 800acda:	4770      	bx	lr
 800acdc:	b510      	push	{r4, lr}
 800acde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ace2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ace6:	4291      	cmp	r1, r2
 800ace8:	d1f9      	bne.n	800acde <memcpy+0xe>
 800acea:	bd10      	pop	{r4, pc}

0800acec <memset>:
 800acec:	4402      	add	r2, r0
 800acee:	4603      	mov	r3, r0
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d100      	bne.n	800acf6 <memset+0xa>
 800acf4:	4770      	bx	lr
 800acf6:	f803 1b01 	strb.w	r1, [r3], #1
 800acfa:	e7f9      	b.n	800acf0 <memset+0x4>

0800acfc <_vsniprintf_r>:
 800acfc:	b530      	push	{r4, r5, lr}
 800acfe:	4614      	mov	r4, r2
 800ad00:	2c00      	cmp	r4, #0
 800ad02:	b09b      	sub	sp, #108	; 0x6c
 800ad04:	4605      	mov	r5, r0
 800ad06:	461a      	mov	r2, r3
 800ad08:	da05      	bge.n	800ad16 <_vsniprintf_r+0x1a>
 800ad0a:	238b      	movs	r3, #139	; 0x8b
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad12:	b01b      	add	sp, #108	; 0x6c
 800ad14:	bd30      	pop	{r4, r5, pc}
 800ad16:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ad1e:	bf14      	ite	ne
 800ad20:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad24:	4623      	moveq	r3, r4
 800ad26:	9302      	str	r3, [sp, #8]
 800ad28:	9305      	str	r3, [sp, #20]
 800ad2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad2e:	9100      	str	r1, [sp, #0]
 800ad30:	9104      	str	r1, [sp, #16]
 800ad32:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ad36:	4669      	mov	r1, sp
 800ad38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad3a:	f000 f875 	bl	800ae28 <_svfiprintf_r>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	bfbc      	itt	lt
 800ad42:	238b      	movlt	r3, #139	; 0x8b
 800ad44:	602b      	strlt	r3, [r5, #0]
 800ad46:	2c00      	cmp	r4, #0
 800ad48:	d0e3      	beq.n	800ad12 <_vsniprintf_r+0x16>
 800ad4a:	9b00      	ldr	r3, [sp, #0]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e7df      	b.n	800ad12 <_vsniprintf_r+0x16>
	...

0800ad54 <vsniprintf>:
 800ad54:	b507      	push	{r0, r1, r2, lr}
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	460a      	mov	r2, r1
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	4803      	ldr	r0, [pc, #12]	; (800ad6c <vsniprintf+0x18>)
 800ad60:	6800      	ldr	r0, [r0, #0]
 800ad62:	f7ff ffcb 	bl	800acfc <_vsniprintf_r>
 800ad66:	b003      	add	sp, #12
 800ad68:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad6c:	24000018 	.word	0x24000018

0800ad70 <__ssputs_r>:
 800ad70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad74:	688e      	ldr	r6, [r1, #8]
 800ad76:	429e      	cmp	r6, r3
 800ad78:	4682      	mov	sl, r0
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	4690      	mov	r8, r2
 800ad7e:	461f      	mov	r7, r3
 800ad80:	d838      	bhi.n	800adf4 <__ssputs_r+0x84>
 800ad82:	898a      	ldrh	r2, [r1, #12]
 800ad84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad88:	d032      	beq.n	800adf0 <__ssputs_r+0x80>
 800ad8a:	6825      	ldr	r5, [r4, #0]
 800ad8c:	6909      	ldr	r1, [r1, #16]
 800ad8e:	eba5 0901 	sub.w	r9, r5, r1
 800ad92:	6965      	ldr	r5, [r4, #20]
 800ad94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	444b      	add	r3, r9
 800ada0:	106d      	asrs	r5, r5, #1
 800ada2:	429d      	cmp	r5, r3
 800ada4:	bf38      	it	cc
 800ada6:	461d      	movcc	r5, r3
 800ada8:	0553      	lsls	r3, r2, #21
 800adaa:	d531      	bpl.n	800ae10 <__ssputs_r+0xa0>
 800adac:	4629      	mov	r1, r5
 800adae:	f000 fb55 	bl	800b45c <_malloc_r>
 800adb2:	4606      	mov	r6, r0
 800adb4:	b950      	cbnz	r0, 800adcc <__ssputs_r+0x5c>
 800adb6:	230c      	movs	r3, #12
 800adb8:	f8ca 3000 	str.w	r3, [sl]
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	f04f 30ff 	mov.w	r0, #4294967295
 800adc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adcc:	6921      	ldr	r1, [r4, #16]
 800adce:	464a      	mov	r2, r9
 800add0:	f7ff ff7e 	bl	800acd0 <memcpy>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adde:	81a3      	strh	r3, [r4, #12]
 800ade0:	6126      	str	r6, [r4, #16]
 800ade2:	6165      	str	r5, [r4, #20]
 800ade4:	444e      	add	r6, r9
 800ade6:	eba5 0509 	sub.w	r5, r5, r9
 800adea:	6026      	str	r6, [r4, #0]
 800adec:	60a5      	str	r5, [r4, #8]
 800adee:	463e      	mov	r6, r7
 800adf0:	42be      	cmp	r6, r7
 800adf2:	d900      	bls.n	800adf6 <__ssputs_r+0x86>
 800adf4:	463e      	mov	r6, r7
 800adf6:	6820      	ldr	r0, [r4, #0]
 800adf8:	4632      	mov	r2, r6
 800adfa:	4641      	mov	r1, r8
 800adfc:	f000 faa8 	bl	800b350 <memmove>
 800ae00:	68a3      	ldr	r3, [r4, #8]
 800ae02:	1b9b      	subs	r3, r3, r6
 800ae04:	60a3      	str	r3, [r4, #8]
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4433      	add	r3, r6
 800ae0a:	6023      	str	r3, [r4, #0]
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	e7db      	b.n	800adc8 <__ssputs_r+0x58>
 800ae10:	462a      	mov	r2, r5
 800ae12:	f000 fb97 	bl	800b544 <_realloc_r>
 800ae16:	4606      	mov	r6, r0
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d1e1      	bne.n	800ade0 <__ssputs_r+0x70>
 800ae1c:	6921      	ldr	r1, [r4, #16]
 800ae1e:	4650      	mov	r0, sl
 800ae20:	f000 fab0 	bl	800b384 <_free_r>
 800ae24:	e7c7      	b.n	800adb6 <__ssputs_r+0x46>
	...

0800ae28 <_svfiprintf_r>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	4698      	mov	r8, r3
 800ae2e:	898b      	ldrh	r3, [r1, #12]
 800ae30:	061b      	lsls	r3, r3, #24
 800ae32:	b09d      	sub	sp, #116	; 0x74
 800ae34:	4607      	mov	r7, r0
 800ae36:	460d      	mov	r5, r1
 800ae38:	4614      	mov	r4, r2
 800ae3a:	d50e      	bpl.n	800ae5a <_svfiprintf_r+0x32>
 800ae3c:	690b      	ldr	r3, [r1, #16]
 800ae3e:	b963      	cbnz	r3, 800ae5a <_svfiprintf_r+0x32>
 800ae40:	2140      	movs	r1, #64	; 0x40
 800ae42:	f000 fb0b 	bl	800b45c <_malloc_r>
 800ae46:	6028      	str	r0, [r5, #0]
 800ae48:	6128      	str	r0, [r5, #16]
 800ae4a:	b920      	cbnz	r0, 800ae56 <_svfiprintf_r+0x2e>
 800ae4c:	230c      	movs	r3, #12
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	e0d1      	b.n	800affa <_svfiprintf_r+0x1d2>
 800ae56:	2340      	movs	r3, #64	; 0x40
 800ae58:	616b      	str	r3, [r5, #20]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5e:	2320      	movs	r3, #32
 800ae60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae68:	2330      	movs	r3, #48	; 0x30
 800ae6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b014 <_svfiprintf_r+0x1ec>
 800ae6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae72:	f04f 0901 	mov.w	r9, #1
 800ae76:	4623      	mov	r3, r4
 800ae78:	469a      	mov	sl, r3
 800ae7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae7e:	b10a      	cbz	r2, 800ae84 <_svfiprintf_r+0x5c>
 800ae80:	2a25      	cmp	r2, #37	; 0x25
 800ae82:	d1f9      	bne.n	800ae78 <_svfiprintf_r+0x50>
 800ae84:	ebba 0b04 	subs.w	fp, sl, r4
 800ae88:	d00b      	beq.n	800aea2 <_svfiprintf_r+0x7a>
 800ae8a:	465b      	mov	r3, fp
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4629      	mov	r1, r5
 800ae90:	4638      	mov	r0, r7
 800ae92:	f7ff ff6d 	bl	800ad70 <__ssputs_r>
 800ae96:	3001      	adds	r0, #1
 800ae98:	f000 80aa 	beq.w	800aff0 <_svfiprintf_r+0x1c8>
 800ae9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae9e:	445a      	add	r2, fp
 800aea0:	9209      	str	r2, [sp, #36]	; 0x24
 800aea2:	f89a 3000 	ldrb.w	r3, [sl]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 80a2 	beq.w	800aff0 <_svfiprintf_r+0x1c8>
 800aeac:	2300      	movs	r3, #0
 800aeae:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeb6:	f10a 0a01 	add.w	sl, sl, #1
 800aeba:	9304      	str	r3, [sp, #16]
 800aebc:	9307      	str	r3, [sp, #28]
 800aebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aec2:	931a      	str	r3, [sp, #104]	; 0x68
 800aec4:	4654      	mov	r4, sl
 800aec6:	2205      	movs	r2, #5
 800aec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aecc:	4851      	ldr	r0, [pc, #324]	; (800b014 <_svfiprintf_r+0x1ec>)
 800aece:	f7f5 fa0f 	bl	80002f0 <memchr>
 800aed2:	9a04      	ldr	r2, [sp, #16]
 800aed4:	b9d8      	cbnz	r0, 800af0e <_svfiprintf_r+0xe6>
 800aed6:	06d0      	lsls	r0, r2, #27
 800aed8:	bf44      	itt	mi
 800aeda:	2320      	movmi	r3, #32
 800aedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aee0:	0711      	lsls	r1, r2, #28
 800aee2:	bf44      	itt	mi
 800aee4:	232b      	movmi	r3, #43	; 0x2b
 800aee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeea:	f89a 3000 	ldrb.w	r3, [sl]
 800aeee:	2b2a      	cmp	r3, #42	; 0x2a
 800aef0:	d015      	beq.n	800af1e <_svfiprintf_r+0xf6>
 800aef2:	9a07      	ldr	r2, [sp, #28]
 800aef4:	4654      	mov	r4, sl
 800aef6:	2000      	movs	r0, #0
 800aef8:	f04f 0c0a 	mov.w	ip, #10
 800aefc:	4621      	mov	r1, r4
 800aefe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af02:	3b30      	subs	r3, #48	; 0x30
 800af04:	2b09      	cmp	r3, #9
 800af06:	d94e      	bls.n	800afa6 <_svfiprintf_r+0x17e>
 800af08:	b1b0      	cbz	r0, 800af38 <_svfiprintf_r+0x110>
 800af0a:	9207      	str	r2, [sp, #28]
 800af0c:	e014      	b.n	800af38 <_svfiprintf_r+0x110>
 800af0e:	eba0 0308 	sub.w	r3, r0, r8
 800af12:	fa09 f303 	lsl.w	r3, r9, r3
 800af16:	4313      	orrs	r3, r2
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	46a2      	mov	sl, r4
 800af1c:	e7d2      	b.n	800aec4 <_svfiprintf_r+0x9c>
 800af1e:	9b03      	ldr	r3, [sp, #12]
 800af20:	1d19      	adds	r1, r3, #4
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	9103      	str	r1, [sp, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	bfbb      	ittet	lt
 800af2a:	425b      	neglt	r3, r3
 800af2c:	f042 0202 	orrlt.w	r2, r2, #2
 800af30:	9307      	strge	r3, [sp, #28]
 800af32:	9307      	strlt	r3, [sp, #28]
 800af34:	bfb8      	it	lt
 800af36:	9204      	strlt	r2, [sp, #16]
 800af38:	7823      	ldrb	r3, [r4, #0]
 800af3a:	2b2e      	cmp	r3, #46	; 0x2e
 800af3c:	d10c      	bne.n	800af58 <_svfiprintf_r+0x130>
 800af3e:	7863      	ldrb	r3, [r4, #1]
 800af40:	2b2a      	cmp	r3, #42	; 0x2a
 800af42:	d135      	bne.n	800afb0 <_svfiprintf_r+0x188>
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	1d1a      	adds	r2, r3, #4
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	9203      	str	r2, [sp, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	bfb8      	it	lt
 800af50:	f04f 33ff 	movlt.w	r3, #4294967295
 800af54:	3402      	adds	r4, #2
 800af56:	9305      	str	r3, [sp, #20]
 800af58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b024 <_svfiprintf_r+0x1fc>
 800af5c:	7821      	ldrb	r1, [r4, #0]
 800af5e:	2203      	movs	r2, #3
 800af60:	4650      	mov	r0, sl
 800af62:	f7f5 f9c5 	bl	80002f0 <memchr>
 800af66:	b140      	cbz	r0, 800af7a <_svfiprintf_r+0x152>
 800af68:	2340      	movs	r3, #64	; 0x40
 800af6a:	eba0 000a 	sub.w	r0, r0, sl
 800af6e:	fa03 f000 	lsl.w	r0, r3, r0
 800af72:	9b04      	ldr	r3, [sp, #16]
 800af74:	4303      	orrs	r3, r0
 800af76:	3401      	adds	r4, #1
 800af78:	9304      	str	r3, [sp, #16]
 800af7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af7e:	4826      	ldr	r0, [pc, #152]	; (800b018 <_svfiprintf_r+0x1f0>)
 800af80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af84:	2206      	movs	r2, #6
 800af86:	f7f5 f9b3 	bl	80002f0 <memchr>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d038      	beq.n	800b000 <_svfiprintf_r+0x1d8>
 800af8e:	4b23      	ldr	r3, [pc, #140]	; (800b01c <_svfiprintf_r+0x1f4>)
 800af90:	bb1b      	cbnz	r3, 800afda <_svfiprintf_r+0x1b2>
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	3307      	adds	r3, #7
 800af96:	f023 0307 	bic.w	r3, r3, #7
 800af9a:	3308      	adds	r3, #8
 800af9c:	9303      	str	r3, [sp, #12]
 800af9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa0:	4433      	add	r3, r6
 800afa2:	9309      	str	r3, [sp, #36]	; 0x24
 800afa4:	e767      	b.n	800ae76 <_svfiprintf_r+0x4e>
 800afa6:	fb0c 3202 	mla	r2, ip, r2, r3
 800afaa:	460c      	mov	r4, r1
 800afac:	2001      	movs	r0, #1
 800afae:	e7a5      	b.n	800aefc <_svfiprintf_r+0xd4>
 800afb0:	2300      	movs	r3, #0
 800afb2:	3401      	adds	r4, #1
 800afb4:	9305      	str	r3, [sp, #20]
 800afb6:	4619      	mov	r1, r3
 800afb8:	f04f 0c0a 	mov.w	ip, #10
 800afbc:	4620      	mov	r0, r4
 800afbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afc2:	3a30      	subs	r2, #48	; 0x30
 800afc4:	2a09      	cmp	r2, #9
 800afc6:	d903      	bls.n	800afd0 <_svfiprintf_r+0x1a8>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d0c5      	beq.n	800af58 <_svfiprintf_r+0x130>
 800afcc:	9105      	str	r1, [sp, #20]
 800afce:	e7c3      	b.n	800af58 <_svfiprintf_r+0x130>
 800afd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800afd4:	4604      	mov	r4, r0
 800afd6:	2301      	movs	r3, #1
 800afd8:	e7f0      	b.n	800afbc <_svfiprintf_r+0x194>
 800afda:	ab03      	add	r3, sp, #12
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	462a      	mov	r2, r5
 800afe0:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <_svfiprintf_r+0x1f8>)
 800afe2:	a904      	add	r1, sp, #16
 800afe4:	4638      	mov	r0, r7
 800afe6:	f3af 8000 	nop.w
 800afea:	1c42      	adds	r2, r0, #1
 800afec:	4606      	mov	r6, r0
 800afee:	d1d6      	bne.n	800af9e <_svfiprintf_r+0x176>
 800aff0:	89ab      	ldrh	r3, [r5, #12]
 800aff2:	065b      	lsls	r3, r3, #25
 800aff4:	f53f af2c 	bmi.w	800ae50 <_svfiprintf_r+0x28>
 800aff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800affa:	b01d      	add	sp, #116	; 0x74
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b000:	ab03      	add	r3, sp, #12
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	462a      	mov	r2, r5
 800b006:	4b06      	ldr	r3, [pc, #24]	; (800b020 <_svfiprintf_r+0x1f8>)
 800b008:	a904      	add	r1, sp, #16
 800b00a:	4638      	mov	r0, r7
 800b00c:	f000 f87a 	bl	800b104 <_printf_i>
 800b010:	e7eb      	b.n	800afea <_svfiprintf_r+0x1c2>
 800b012:	bf00      	nop
 800b014:	0800c1a0 	.word	0x0800c1a0
 800b018:	0800c1aa 	.word	0x0800c1aa
 800b01c:	00000000 	.word	0x00000000
 800b020:	0800ad71 	.word	0x0800ad71
 800b024:	0800c1a6 	.word	0x0800c1a6

0800b028 <_printf_common>:
 800b028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b02c:	4616      	mov	r6, r2
 800b02e:	4699      	mov	r9, r3
 800b030:	688a      	ldr	r2, [r1, #8]
 800b032:	690b      	ldr	r3, [r1, #16]
 800b034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b038:	4293      	cmp	r3, r2
 800b03a:	bfb8      	it	lt
 800b03c:	4613      	movlt	r3, r2
 800b03e:	6033      	str	r3, [r6, #0]
 800b040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b044:	4607      	mov	r7, r0
 800b046:	460c      	mov	r4, r1
 800b048:	b10a      	cbz	r2, 800b04e <_printf_common+0x26>
 800b04a:	3301      	adds	r3, #1
 800b04c:	6033      	str	r3, [r6, #0]
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	0699      	lsls	r1, r3, #26
 800b052:	bf42      	ittt	mi
 800b054:	6833      	ldrmi	r3, [r6, #0]
 800b056:	3302      	addmi	r3, #2
 800b058:	6033      	strmi	r3, [r6, #0]
 800b05a:	6825      	ldr	r5, [r4, #0]
 800b05c:	f015 0506 	ands.w	r5, r5, #6
 800b060:	d106      	bne.n	800b070 <_printf_common+0x48>
 800b062:	f104 0a19 	add.w	sl, r4, #25
 800b066:	68e3      	ldr	r3, [r4, #12]
 800b068:	6832      	ldr	r2, [r6, #0]
 800b06a:	1a9b      	subs	r3, r3, r2
 800b06c:	42ab      	cmp	r3, r5
 800b06e:	dc26      	bgt.n	800b0be <_printf_common+0x96>
 800b070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b074:	1e13      	subs	r3, r2, #0
 800b076:	6822      	ldr	r2, [r4, #0]
 800b078:	bf18      	it	ne
 800b07a:	2301      	movne	r3, #1
 800b07c:	0692      	lsls	r2, r2, #26
 800b07e:	d42b      	bmi.n	800b0d8 <_printf_common+0xb0>
 800b080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b084:	4649      	mov	r1, r9
 800b086:	4638      	mov	r0, r7
 800b088:	47c0      	blx	r8
 800b08a:	3001      	adds	r0, #1
 800b08c:	d01e      	beq.n	800b0cc <_printf_common+0xa4>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	68e5      	ldr	r5, [r4, #12]
 800b092:	6832      	ldr	r2, [r6, #0]
 800b094:	f003 0306 	and.w	r3, r3, #6
 800b098:	2b04      	cmp	r3, #4
 800b09a:	bf08      	it	eq
 800b09c:	1aad      	subeq	r5, r5, r2
 800b09e:	68a3      	ldr	r3, [r4, #8]
 800b0a0:	6922      	ldr	r2, [r4, #16]
 800b0a2:	bf0c      	ite	eq
 800b0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0a8:	2500      	movne	r5, #0
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	bfc4      	itt	gt
 800b0ae:	1a9b      	subgt	r3, r3, r2
 800b0b0:	18ed      	addgt	r5, r5, r3
 800b0b2:	2600      	movs	r6, #0
 800b0b4:	341a      	adds	r4, #26
 800b0b6:	42b5      	cmp	r5, r6
 800b0b8:	d11a      	bne.n	800b0f0 <_printf_common+0xc8>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	e008      	b.n	800b0d0 <_printf_common+0xa8>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	4652      	mov	r2, sl
 800b0c2:	4649      	mov	r1, r9
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	47c0      	blx	r8
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d103      	bne.n	800b0d4 <_printf_common+0xac>
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d4:	3501      	adds	r5, #1
 800b0d6:	e7c6      	b.n	800b066 <_printf_common+0x3e>
 800b0d8:	18e1      	adds	r1, r4, r3
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	2030      	movs	r0, #48	; 0x30
 800b0de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0e2:	4422      	add	r2, r4
 800b0e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0ec:	3302      	adds	r3, #2
 800b0ee:	e7c7      	b.n	800b080 <_printf_common+0x58>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	47c0      	blx	r8
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	d0e6      	beq.n	800b0cc <_printf_common+0xa4>
 800b0fe:	3601      	adds	r6, #1
 800b100:	e7d9      	b.n	800b0b6 <_printf_common+0x8e>
	...

0800b104 <_printf_i>:
 800b104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b108:	7e0f      	ldrb	r7, [r1, #24]
 800b10a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b10c:	2f78      	cmp	r7, #120	; 0x78
 800b10e:	4691      	mov	r9, r2
 800b110:	4680      	mov	r8, r0
 800b112:	460c      	mov	r4, r1
 800b114:	469a      	mov	sl, r3
 800b116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b11a:	d807      	bhi.n	800b12c <_printf_i+0x28>
 800b11c:	2f62      	cmp	r7, #98	; 0x62
 800b11e:	d80a      	bhi.n	800b136 <_printf_i+0x32>
 800b120:	2f00      	cmp	r7, #0
 800b122:	f000 80d8 	beq.w	800b2d6 <_printf_i+0x1d2>
 800b126:	2f58      	cmp	r7, #88	; 0x58
 800b128:	f000 80a3 	beq.w	800b272 <_printf_i+0x16e>
 800b12c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b134:	e03a      	b.n	800b1ac <_printf_i+0xa8>
 800b136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b13a:	2b15      	cmp	r3, #21
 800b13c:	d8f6      	bhi.n	800b12c <_printf_i+0x28>
 800b13e:	a101      	add	r1, pc, #4	; (adr r1, 800b144 <_printf_i+0x40>)
 800b140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b144:	0800b19d 	.word	0x0800b19d
 800b148:	0800b1b1 	.word	0x0800b1b1
 800b14c:	0800b12d 	.word	0x0800b12d
 800b150:	0800b12d 	.word	0x0800b12d
 800b154:	0800b12d 	.word	0x0800b12d
 800b158:	0800b12d 	.word	0x0800b12d
 800b15c:	0800b1b1 	.word	0x0800b1b1
 800b160:	0800b12d 	.word	0x0800b12d
 800b164:	0800b12d 	.word	0x0800b12d
 800b168:	0800b12d 	.word	0x0800b12d
 800b16c:	0800b12d 	.word	0x0800b12d
 800b170:	0800b2bd 	.word	0x0800b2bd
 800b174:	0800b1e1 	.word	0x0800b1e1
 800b178:	0800b29f 	.word	0x0800b29f
 800b17c:	0800b12d 	.word	0x0800b12d
 800b180:	0800b12d 	.word	0x0800b12d
 800b184:	0800b2df 	.word	0x0800b2df
 800b188:	0800b12d 	.word	0x0800b12d
 800b18c:	0800b1e1 	.word	0x0800b1e1
 800b190:	0800b12d 	.word	0x0800b12d
 800b194:	0800b12d 	.word	0x0800b12d
 800b198:	0800b2a7 	.word	0x0800b2a7
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	1d1a      	adds	r2, r3, #4
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	602a      	str	r2, [r5, #0]
 800b1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e0a3      	b.n	800b2f8 <_printf_i+0x1f4>
 800b1b0:	6820      	ldr	r0, [r4, #0]
 800b1b2:	6829      	ldr	r1, [r5, #0]
 800b1b4:	0606      	lsls	r6, r0, #24
 800b1b6:	f101 0304 	add.w	r3, r1, #4
 800b1ba:	d50a      	bpl.n	800b1d2 <_printf_i+0xce>
 800b1bc:	680e      	ldr	r6, [r1, #0]
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	2e00      	cmp	r6, #0
 800b1c2:	da03      	bge.n	800b1cc <_printf_i+0xc8>
 800b1c4:	232d      	movs	r3, #45	; 0x2d
 800b1c6:	4276      	negs	r6, r6
 800b1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1cc:	485e      	ldr	r0, [pc, #376]	; (800b348 <_printf_i+0x244>)
 800b1ce:	230a      	movs	r3, #10
 800b1d0:	e019      	b.n	800b206 <_printf_i+0x102>
 800b1d2:	680e      	ldr	r6, [r1, #0]
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1da:	bf18      	it	ne
 800b1dc:	b236      	sxthne	r6, r6
 800b1de:	e7ef      	b.n	800b1c0 <_printf_i+0xbc>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	6820      	ldr	r0, [r4, #0]
 800b1e4:	1d19      	adds	r1, r3, #4
 800b1e6:	6029      	str	r1, [r5, #0]
 800b1e8:	0601      	lsls	r1, r0, #24
 800b1ea:	d501      	bpl.n	800b1f0 <_printf_i+0xec>
 800b1ec:	681e      	ldr	r6, [r3, #0]
 800b1ee:	e002      	b.n	800b1f6 <_printf_i+0xf2>
 800b1f0:	0646      	lsls	r6, r0, #25
 800b1f2:	d5fb      	bpl.n	800b1ec <_printf_i+0xe8>
 800b1f4:	881e      	ldrh	r6, [r3, #0]
 800b1f6:	4854      	ldr	r0, [pc, #336]	; (800b348 <_printf_i+0x244>)
 800b1f8:	2f6f      	cmp	r7, #111	; 0x6f
 800b1fa:	bf0c      	ite	eq
 800b1fc:	2308      	moveq	r3, #8
 800b1fe:	230a      	movne	r3, #10
 800b200:	2100      	movs	r1, #0
 800b202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b206:	6865      	ldr	r5, [r4, #4]
 800b208:	60a5      	str	r5, [r4, #8]
 800b20a:	2d00      	cmp	r5, #0
 800b20c:	bfa2      	ittt	ge
 800b20e:	6821      	ldrge	r1, [r4, #0]
 800b210:	f021 0104 	bicge.w	r1, r1, #4
 800b214:	6021      	strge	r1, [r4, #0]
 800b216:	b90e      	cbnz	r6, 800b21c <_printf_i+0x118>
 800b218:	2d00      	cmp	r5, #0
 800b21a:	d04d      	beq.n	800b2b8 <_printf_i+0x1b4>
 800b21c:	4615      	mov	r5, r2
 800b21e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b222:	fb03 6711 	mls	r7, r3, r1, r6
 800b226:	5dc7      	ldrb	r7, [r0, r7]
 800b228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b22c:	4637      	mov	r7, r6
 800b22e:	42bb      	cmp	r3, r7
 800b230:	460e      	mov	r6, r1
 800b232:	d9f4      	bls.n	800b21e <_printf_i+0x11a>
 800b234:	2b08      	cmp	r3, #8
 800b236:	d10b      	bne.n	800b250 <_printf_i+0x14c>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	07de      	lsls	r6, r3, #31
 800b23c:	d508      	bpl.n	800b250 <_printf_i+0x14c>
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	6861      	ldr	r1, [r4, #4]
 800b242:	4299      	cmp	r1, r3
 800b244:	bfde      	ittt	le
 800b246:	2330      	movle	r3, #48	; 0x30
 800b248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b24c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b250:	1b52      	subs	r2, r2, r5
 800b252:	6122      	str	r2, [r4, #16]
 800b254:	f8cd a000 	str.w	sl, [sp]
 800b258:	464b      	mov	r3, r9
 800b25a:	aa03      	add	r2, sp, #12
 800b25c:	4621      	mov	r1, r4
 800b25e:	4640      	mov	r0, r8
 800b260:	f7ff fee2 	bl	800b028 <_printf_common>
 800b264:	3001      	adds	r0, #1
 800b266:	d14c      	bne.n	800b302 <_printf_i+0x1fe>
 800b268:	f04f 30ff 	mov.w	r0, #4294967295
 800b26c:	b004      	add	sp, #16
 800b26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b272:	4835      	ldr	r0, [pc, #212]	; (800b348 <_printf_i+0x244>)
 800b274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b278:	6829      	ldr	r1, [r5, #0]
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b280:	6029      	str	r1, [r5, #0]
 800b282:	061d      	lsls	r5, r3, #24
 800b284:	d514      	bpl.n	800b2b0 <_printf_i+0x1ac>
 800b286:	07df      	lsls	r7, r3, #31
 800b288:	bf44      	itt	mi
 800b28a:	f043 0320 	orrmi.w	r3, r3, #32
 800b28e:	6023      	strmi	r3, [r4, #0]
 800b290:	b91e      	cbnz	r6, 800b29a <_printf_i+0x196>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	f023 0320 	bic.w	r3, r3, #32
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	2310      	movs	r3, #16
 800b29c:	e7b0      	b.n	800b200 <_printf_i+0xfc>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	f043 0320 	orr.w	r3, r3, #32
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	2378      	movs	r3, #120	; 0x78
 800b2a8:	4828      	ldr	r0, [pc, #160]	; (800b34c <_printf_i+0x248>)
 800b2aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2ae:	e7e3      	b.n	800b278 <_printf_i+0x174>
 800b2b0:	0659      	lsls	r1, r3, #25
 800b2b2:	bf48      	it	mi
 800b2b4:	b2b6      	uxthmi	r6, r6
 800b2b6:	e7e6      	b.n	800b286 <_printf_i+0x182>
 800b2b8:	4615      	mov	r5, r2
 800b2ba:	e7bb      	b.n	800b234 <_printf_i+0x130>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	6826      	ldr	r6, [r4, #0]
 800b2c0:	6961      	ldr	r1, [r4, #20]
 800b2c2:	1d18      	adds	r0, r3, #4
 800b2c4:	6028      	str	r0, [r5, #0]
 800b2c6:	0635      	lsls	r5, r6, #24
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	d501      	bpl.n	800b2d0 <_printf_i+0x1cc>
 800b2cc:	6019      	str	r1, [r3, #0]
 800b2ce:	e002      	b.n	800b2d6 <_printf_i+0x1d2>
 800b2d0:	0670      	lsls	r0, r6, #25
 800b2d2:	d5fb      	bpl.n	800b2cc <_printf_i+0x1c8>
 800b2d4:	8019      	strh	r1, [r3, #0]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	6123      	str	r3, [r4, #16]
 800b2da:	4615      	mov	r5, r2
 800b2dc:	e7ba      	b.n	800b254 <_printf_i+0x150>
 800b2de:	682b      	ldr	r3, [r5, #0]
 800b2e0:	1d1a      	adds	r2, r3, #4
 800b2e2:	602a      	str	r2, [r5, #0]
 800b2e4:	681d      	ldr	r5, [r3, #0]
 800b2e6:	6862      	ldr	r2, [r4, #4]
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f7f5 f800 	bl	80002f0 <memchr>
 800b2f0:	b108      	cbz	r0, 800b2f6 <_printf_i+0x1f2>
 800b2f2:	1b40      	subs	r0, r0, r5
 800b2f4:	6060      	str	r0, [r4, #4]
 800b2f6:	6863      	ldr	r3, [r4, #4]
 800b2f8:	6123      	str	r3, [r4, #16]
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b300:	e7a8      	b.n	800b254 <_printf_i+0x150>
 800b302:	6923      	ldr	r3, [r4, #16]
 800b304:	462a      	mov	r2, r5
 800b306:	4649      	mov	r1, r9
 800b308:	4640      	mov	r0, r8
 800b30a:	47d0      	blx	sl
 800b30c:	3001      	adds	r0, #1
 800b30e:	d0ab      	beq.n	800b268 <_printf_i+0x164>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	079b      	lsls	r3, r3, #30
 800b314:	d413      	bmi.n	800b33e <_printf_i+0x23a>
 800b316:	68e0      	ldr	r0, [r4, #12]
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	4298      	cmp	r0, r3
 800b31c:	bfb8      	it	lt
 800b31e:	4618      	movlt	r0, r3
 800b320:	e7a4      	b.n	800b26c <_printf_i+0x168>
 800b322:	2301      	movs	r3, #1
 800b324:	4632      	mov	r2, r6
 800b326:	4649      	mov	r1, r9
 800b328:	4640      	mov	r0, r8
 800b32a:	47d0      	blx	sl
 800b32c:	3001      	adds	r0, #1
 800b32e:	d09b      	beq.n	800b268 <_printf_i+0x164>
 800b330:	3501      	adds	r5, #1
 800b332:	68e3      	ldr	r3, [r4, #12]
 800b334:	9903      	ldr	r1, [sp, #12]
 800b336:	1a5b      	subs	r3, r3, r1
 800b338:	42ab      	cmp	r3, r5
 800b33a:	dcf2      	bgt.n	800b322 <_printf_i+0x21e>
 800b33c:	e7eb      	b.n	800b316 <_printf_i+0x212>
 800b33e:	2500      	movs	r5, #0
 800b340:	f104 0619 	add.w	r6, r4, #25
 800b344:	e7f5      	b.n	800b332 <_printf_i+0x22e>
 800b346:	bf00      	nop
 800b348:	0800c1b1 	.word	0x0800c1b1
 800b34c:	0800c1c2 	.word	0x0800c1c2

0800b350 <memmove>:
 800b350:	4288      	cmp	r0, r1
 800b352:	b510      	push	{r4, lr}
 800b354:	eb01 0402 	add.w	r4, r1, r2
 800b358:	d902      	bls.n	800b360 <memmove+0x10>
 800b35a:	4284      	cmp	r4, r0
 800b35c:	4623      	mov	r3, r4
 800b35e:	d807      	bhi.n	800b370 <memmove+0x20>
 800b360:	1e43      	subs	r3, r0, #1
 800b362:	42a1      	cmp	r1, r4
 800b364:	d008      	beq.n	800b378 <memmove+0x28>
 800b366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b36a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b36e:	e7f8      	b.n	800b362 <memmove+0x12>
 800b370:	4402      	add	r2, r0
 800b372:	4601      	mov	r1, r0
 800b374:	428a      	cmp	r2, r1
 800b376:	d100      	bne.n	800b37a <memmove+0x2a>
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b37e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b382:	e7f7      	b.n	800b374 <memmove+0x24>

0800b384 <_free_r>:
 800b384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b386:	2900      	cmp	r1, #0
 800b388:	d044      	beq.n	800b414 <_free_r+0x90>
 800b38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38e:	9001      	str	r0, [sp, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	f1a1 0404 	sub.w	r4, r1, #4
 800b396:	bfb8      	it	lt
 800b398:	18e4      	addlt	r4, r4, r3
 800b39a:	f000 f913 	bl	800b5c4 <__malloc_lock>
 800b39e:	4a1e      	ldr	r2, [pc, #120]	; (800b418 <_free_r+0x94>)
 800b3a0:	9801      	ldr	r0, [sp, #4]
 800b3a2:	6813      	ldr	r3, [r2, #0]
 800b3a4:	b933      	cbnz	r3, 800b3b4 <_free_r+0x30>
 800b3a6:	6063      	str	r3, [r4, #4]
 800b3a8:	6014      	str	r4, [r2, #0]
 800b3aa:	b003      	add	sp, #12
 800b3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3b0:	f000 b90e 	b.w	800b5d0 <__malloc_unlock>
 800b3b4:	42a3      	cmp	r3, r4
 800b3b6:	d908      	bls.n	800b3ca <_free_r+0x46>
 800b3b8:	6825      	ldr	r5, [r4, #0]
 800b3ba:	1961      	adds	r1, r4, r5
 800b3bc:	428b      	cmp	r3, r1
 800b3be:	bf01      	itttt	eq
 800b3c0:	6819      	ldreq	r1, [r3, #0]
 800b3c2:	685b      	ldreq	r3, [r3, #4]
 800b3c4:	1949      	addeq	r1, r1, r5
 800b3c6:	6021      	streq	r1, [r4, #0]
 800b3c8:	e7ed      	b.n	800b3a6 <_free_r+0x22>
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	b10b      	cbz	r3, 800b3d4 <_free_r+0x50>
 800b3d0:	42a3      	cmp	r3, r4
 800b3d2:	d9fa      	bls.n	800b3ca <_free_r+0x46>
 800b3d4:	6811      	ldr	r1, [r2, #0]
 800b3d6:	1855      	adds	r5, r2, r1
 800b3d8:	42a5      	cmp	r5, r4
 800b3da:	d10b      	bne.n	800b3f4 <_free_r+0x70>
 800b3dc:	6824      	ldr	r4, [r4, #0]
 800b3de:	4421      	add	r1, r4
 800b3e0:	1854      	adds	r4, r2, r1
 800b3e2:	42a3      	cmp	r3, r4
 800b3e4:	6011      	str	r1, [r2, #0]
 800b3e6:	d1e0      	bne.n	800b3aa <_free_r+0x26>
 800b3e8:	681c      	ldr	r4, [r3, #0]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	6053      	str	r3, [r2, #4]
 800b3ee:	4421      	add	r1, r4
 800b3f0:	6011      	str	r1, [r2, #0]
 800b3f2:	e7da      	b.n	800b3aa <_free_r+0x26>
 800b3f4:	d902      	bls.n	800b3fc <_free_r+0x78>
 800b3f6:	230c      	movs	r3, #12
 800b3f8:	6003      	str	r3, [r0, #0]
 800b3fa:	e7d6      	b.n	800b3aa <_free_r+0x26>
 800b3fc:	6825      	ldr	r5, [r4, #0]
 800b3fe:	1961      	adds	r1, r4, r5
 800b400:	428b      	cmp	r3, r1
 800b402:	bf04      	itt	eq
 800b404:	6819      	ldreq	r1, [r3, #0]
 800b406:	685b      	ldreq	r3, [r3, #4]
 800b408:	6063      	str	r3, [r4, #4]
 800b40a:	bf04      	itt	eq
 800b40c:	1949      	addeq	r1, r1, r5
 800b40e:	6021      	streq	r1, [r4, #0]
 800b410:	6054      	str	r4, [r2, #4]
 800b412:	e7ca      	b.n	800b3aa <_free_r+0x26>
 800b414:	b003      	add	sp, #12
 800b416:	bd30      	pop	{r4, r5, pc}
 800b418:	240042c0 	.word	0x240042c0

0800b41c <sbrk_aligned>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	4e0e      	ldr	r6, [pc, #56]	; (800b458 <sbrk_aligned+0x3c>)
 800b420:	460c      	mov	r4, r1
 800b422:	6831      	ldr	r1, [r6, #0]
 800b424:	4605      	mov	r5, r0
 800b426:	b911      	cbnz	r1, 800b42e <sbrk_aligned+0x12>
 800b428:	f000 f8bc 	bl	800b5a4 <_sbrk_r>
 800b42c:	6030      	str	r0, [r6, #0]
 800b42e:	4621      	mov	r1, r4
 800b430:	4628      	mov	r0, r5
 800b432:	f000 f8b7 	bl	800b5a4 <_sbrk_r>
 800b436:	1c43      	adds	r3, r0, #1
 800b438:	d00a      	beq.n	800b450 <sbrk_aligned+0x34>
 800b43a:	1cc4      	adds	r4, r0, #3
 800b43c:	f024 0403 	bic.w	r4, r4, #3
 800b440:	42a0      	cmp	r0, r4
 800b442:	d007      	beq.n	800b454 <sbrk_aligned+0x38>
 800b444:	1a21      	subs	r1, r4, r0
 800b446:	4628      	mov	r0, r5
 800b448:	f000 f8ac 	bl	800b5a4 <_sbrk_r>
 800b44c:	3001      	adds	r0, #1
 800b44e:	d101      	bne.n	800b454 <sbrk_aligned+0x38>
 800b450:	f04f 34ff 	mov.w	r4, #4294967295
 800b454:	4620      	mov	r0, r4
 800b456:	bd70      	pop	{r4, r5, r6, pc}
 800b458:	240042c4 	.word	0x240042c4

0800b45c <_malloc_r>:
 800b45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b460:	1ccd      	adds	r5, r1, #3
 800b462:	f025 0503 	bic.w	r5, r5, #3
 800b466:	3508      	adds	r5, #8
 800b468:	2d0c      	cmp	r5, #12
 800b46a:	bf38      	it	cc
 800b46c:	250c      	movcc	r5, #12
 800b46e:	2d00      	cmp	r5, #0
 800b470:	4607      	mov	r7, r0
 800b472:	db01      	blt.n	800b478 <_malloc_r+0x1c>
 800b474:	42a9      	cmp	r1, r5
 800b476:	d905      	bls.n	800b484 <_malloc_r+0x28>
 800b478:	230c      	movs	r3, #12
 800b47a:	603b      	str	r3, [r7, #0]
 800b47c:	2600      	movs	r6, #0
 800b47e:	4630      	mov	r0, r6
 800b480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b484:	4e2e      	ldr	r6, [pc, #184]	; (800b540 <_malloc_r+0xe4>)
 800b486:	f000 f89d 	bl	800b5c4 <__malloc_lock>
 800b48a:	6833      	ldr	r3, [r6, #0]
 800b48c:	461c      	mov	r4, r3
 800b48e:	bb34      	cbnz	r4, 800b4de <_malloc_r+0x82>
 800b490:	4629      	mov	r1, r5
 800b492:	4638      	mov	r0, r7
 800b494:	f7ff ffc2 	bl	800b41c <sbrk_aligned>
 800b498:	1c43      	adds	r3, r0, #1
 800b49a:	4604      	mov	r4, r0
 800b49c:	d14d      	bne.n	800b53a <_malloc_r+0xde>
 800b49e:	6834      	ldr	r4, [r6, #0]
 800b4a0:	4626      	mov	r6, r4
 800b4a2:	2e00      	cmp	r6, #0
 800b4a4:	d140      	bne.n	800b528 <_malloc_r+0xcc>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	4631      	mov	r1, r6
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	eb04 0803 	add.w	r8, r4, r3
 800b4b0:	f000 f878 	bl	800b5a4 <_sbrk_r>
 800b4b4:	4580      	cmp	r8, r0
 800b4b6:	d13a      	bne.n	800b52e <_malloc_r+0xd2>
 800b4b8:	6821      	ldr	r1, [r4, #0]
 800b4ba:	3503      	adds	r5, #3
 800b4bc:	1a6d      	subs	r5, r5, r1
 800b4be:	f025 0503 	bic.w	r5, r5, #3
 800b4c2:	3508      	adds	r5, #8
 800b4c4:	2d0c      	cmp	r5, #12
 800b4c6:	bf38      	it	cc
 800b4c8:	250c      	movcc	r5, #12
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	4638      	mov	r0, r7
 800b4ce:	f7ff ffa5 	bl	800b41c <sbrk_aligned>
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	d02b      	beq.n	800b52e <_malloc_r+0xd2>
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	442b      	add	r3, r5
 800b4da:	6023      	str	r3, [r4, #0]
 800b4dc:	e00e      	b.n	800b4fc <_malloc_r+0xa0>
 800b4de:	6822      	ldr	r2, [r4, #0]
 800b4e0:	1b52      	subs	r2, r2, r5
 800b4e2:	d41e      	bmi.n	800b522 <_malloc_r+0xc6>
 800b4e4:	2a0b      	cmp	r2, #11
 800b4e6:	d916      	bls.n	800b516 <_malloc_r+0xba>
 800b4e8:	1961      	adds	r1, r4, r5
 800b4ea:	42a3      	cmp	r3, r4
 800b4ec:	6025      	str	r5, [r4, #0]
 800b4ee:	bf18      	it	ne
 800b4f0:	6059      	strne	r1, [r3, #4]
 800b4f2:	6863      	ldr	r3, [r4, #4]
 800b4f4:	bf08      	it	eq
 800b4f6:	6031      	streq	r1, [r6, #0]
 800b4f8:	5162      	str	r2, [r4, r5]
 800b4fa:	604b      	str	r3, [r1, #4]
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	f104 060b 	add.w	r6, r4, #11
 800b502:	f000 f865 	bl	800b5d0 <__malloc_unlock>
 800b506:	f026 0607 	bic.w	r6, r6, #7
 800b50a:	1d23      	adds	r3, r4, #4
 800b50c:	1af2      	subs	r2, r6, r3
 800b50e:	d0b6      	beq.n	800b47e <_malloc_r+0x22>
 800b510:	1b9b      	subs	r3, r3, r6
 800b512:	50a3      	str	r3, [r4, r2]
 800b514:	e7b3      	b.n	800b47e <_malloc_r+0x22>
 800b516:	6862      	ldr	r2, [r4, #4]
 800b518:	42a3      	cmp	r3, r4
 800b51a:	bf0c      	ite	eq
 800b51c:	6032      	streq	r2, [r6, #0]
 800b51e:	605a      	strne	r2, [r3, #4]
 800b520:	e7ec      	b.n	800b4fc <_malloc_r+0xa0>
 800b522:	4623      	mov	r3, r4
 800b524:	6864      	ldr	r4, [r4, #4]
 800b526:	e7b2      	b.n	800b48e <_malloc_r+0x32>
 800b528:	4634      	mov	r4, r6
 800b52a:	6876      	ldr	r6, [r6, #4]
 800b52c:	e7b9      	b.n	800b4a2 <_malloc_r+0x46>
 800b52e:	230c      	movs	r3, #12
 800b530:	603b      	str	r3, [r7, #0]
 800b532:	4638      	mov	r0, r7
 800b534:	f000 f84c 	bl	800b5d0 <__malloc_unlock>
 800b538:	e7a1      	b.n	800b47e <_malloc_r+0x22>
 800b53a:	6025      	str	r5, [r4, #0]
 800b53c:	e7de      	b.n	800b4fc <_malloc_r+0xa0>
 800b53e:	bf00      	nop
 800b540:	240042c0 	.word	0x240042c0

0800b544 <_realloc_r>:
 800b544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b548:	4680      	mov	r8, r0
 800b54a:	4614      	mov	r4, r2
 800b54c:	460e      	mov	r6, r1
 800b54e:	b921      	cbnz	r1, 800b55a <_realloc_r+0x16>
 800b550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b554:	4611      	mov	r1, r2
 800b556:	f7ff bf81 	b.w	800b45c <_malloc_r>
 800b55a:	b92a      	cbnz	r2, 800b568 <_realloc_r+0x24>
 800b55c:	f7ff ff12 	bl	800b384 <_free_r>
 800b560:	4625      	mov	r5, r4
 800b562:	4628      	mov	r0, r5
 800b564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b568:	f000 f838 	bl	800b5dc <_malloc_usable_size_r>
 800b56c:	4284      	cmp	r4, r0
 800b56e:	4607      	mov	r7, r0
 800b570:	d802      	bhi.n	800b578 <_realloc_r+0x34>
 800b572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b576:	d812      	bhi.n	800b59e <_realloc_r+0x5a>
 800b578:	4621      	mov	r1, r4
 800b57a:	4640      	mov	r0, r8
 800b57c:	f7ff ff6e 	bl	800b45c <_malloc_r>
 800b580:	4605      	mov	r5, r0
 800b582:	2800      	cmp	r0, #0
 800b584:	d0ed      	beq.n	800b562 <_realloc_r+0x1e>
 800b586:	42bc      	cmp	r4, r7
 800b588:	4622      	mov	r2, r4
 800b58a:	4631      	mov	r1, r6
 800b58c:	bf28      	it	cs
 800b58e:	463a      	movcs	r2, r7
 800b590:	f7ff fb9e 	bl	800acd0 <memcpy>
 800b594:	4631      	mov	r1, r6
 800b596:	4640      	mov	r0, r8
 800b598:	f7ff fef4 	bl	800b384 <_free_r>
 800b59c:	e7e1      	b.n	800b562 <_realloc_r+0x1e>
 800b59e:	4635      	mov	r5, r6
 800b5a0:	e7df      	b.n	800b562 <_realloc_r+0x1e>
	...

0800b5a4 <_sbrk_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4d06      	ldr	r5, [pc, #24]	; (800b5c0 <_sbrk_r+0x1c>)
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	4608      	mov	r0, r1
 800b5ae:	602b      	str	r3, [r5, #0]
 800b5b0:	f7f6 f81a 	bl	80015e8 <_sbrk>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_sbrk_r+0x1a>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_sbrk_r+0x1a>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	240042c8 	.word	0x240042c8

0800b5c4 <__malloc_lock>:
 800b5c4:	4801      	ldr	r0, [pc, #4]	; (800b5cc <__malloc_lock+0x8>)
 800b5c6:	f000 b811 	b.w	800b5ec <__retarget_lock_acquire_recursive>
 800b5ca:	bf00      	nop
 800b5cc:	240042cc 	.word	0x240042cc

0800b5d0 <__malloc_unlock>:
 800b5d0:	4801      	ldr	r0, [pc, #4]	; (800b5d8 <__malloc_unlock+0x8>)
 800b5d2:	f000 b80c 	b.w	800b5ee <__retarget_lock_release_recursive>
 800b5d6:	bf00      	nop
 800b5d8:	240042cc 	.word	0x240042cc

0800b5dc <_malloc_usable_size_r>:
 800b5dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5e0:	1f18      	subs	r0, r3, #4
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	bfbc      	itt	lt
 800b5e6:	580b      	ldrlt	r3, [r1, r0]
 800b5e8:	18c0      	addlt	r0, r0, r3
 800b5ea:	4770      	bx	lr

0800b5ec <__retarget_lock_acquire_recursive>:
 800b5ec:	4770      	bx	lr

0800b5ee <__retarget_lock_release_recursive>:
 800b5ee:	4770      	bx	lr

0800b5f0 <tanf>:
 800b5f0:	ee10 3a10 	vmov	r3, s0
 800b5f4:	b507      	push	{r0, r1, r2, lr}
 800b5f6:	4a12      	ldr	r2, [pc, #72]	; (800b640 <tanf+0x50>)
 800b5f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	dc07      	bgt.n	800b610 <tanf+0x20>
 800b600:	eddf 0a10 	vldr	s1, [pc, #64]	; 800b644 <tanf+0x54>
 800b604:	2001      	movs	r0, #1
 800b606:	b003      	add	sp, #12
 800b608:	f85d eb04 	ldr.w	lr, [sp], #4
 800b60c:	f000 bbce 	b.w	800bdac <__kernel_tanf>
 800b610:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b614:	db04      	blt.n	800b620 <tanf+0x30>
 800b616:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b61a:	b003      	add	sp, #12
 800b61c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b620:	4668      	mov	r0, sp
 800b622:	f000 f811 	bl	800b648 <__ieee754_rem_pio2f>
 800b626:	0040      	lsls	r0, r0, #1
 800b628:	f000 0002 	and.w	r0, r0, #2
 800b62c:	eddd 0a01 	vldr	s1, [sp, #4]
 800b630:	ed9d 0a00 	vldr	s0, [sp]
 800b634:	f1c0 0001 	rsb	r0, r0, #1
 800b638:	f000 fbb8 	bl	800bdac <__kernel_tanf>
 800b63c:	e7ed      	b.n	800b61a <tanf+0x2a>
 800b63e:	bf00      	nop
 800b640:	3f490fda 	.word	0x3f490fda
 800b644:	00000000 	.word	0x00000000

0800b648 <__ieee754_rem_pio2f>:
 800b648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b64a:	ee10 6a10 	vmov	r6, s0
 800b64e:	4b8e      	ldr	r3, [pc, #568]	; (800b888 <__ieee754_rem_pio2f+0x240>)
 800b650:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b654:	429d      	cmp	r5, r3
 800b656:	b087      	sub	sp, #28
 800b658:	eef0 7a40 	vmov.f32	s15, s0
 800b65c:	4604      	mov	r4, r0
 800b65e:	dc05      	bgt.n	800b66c <__ieee754_rem_pio2f+0x24>
 800b660:	2300      	movs	r3, #0
 800b662:	ed80 0a00 	vstr	s0, [r0]
 800b666:	6043      	str	r3, [r0, #4]
 800b668:	2000      	movs	r0, #0
 800b66a:	e01a      	b.n	800b6a2 <__ieee754_rem_pio2f+0x5a>
 800b66c:	4b87      	ldr	r3, [pc, #540]	; (800b88c <__ieee754_rem_pio2f+0x244>)
 800b66e:	429d      	cmp	r5, r3
 800b670:	dc46      	bgt.n	800b700 <__ieee754_rem_pio2f+0xb8>
 800b672:	2e00      	cmp	r6, #0
 800b674:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b890 <__ieee754_rem_pio2f+0x248>
 800b678:	4b86      	ldr	r3, [pc, #536]	; (800b894 <__ieee754_rem_pio2f+0x24c>)
 800b67a:	f025 050f 	bic.w	r5, r5, #15
 800b67e:	dd1f      	ble.n	800b6c0 <__ieee754_rem_pio2f+0x78>
 800b680:	429d      	cmp	r5, r3
 800b682:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b686:	d00e      	beq.n	800b6a6 <__ieee754_rem_pio2f+0x5e>
 800b688:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b898 <__ieee754_rem_pio2f+0x250>
 800b68c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b690:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b694:	ed80 0a00 	vstr	s0, [r0]
 800b698:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b69c:	2001      	movs	r0, #1
 800b69e:	edc4 7a01 	vstr	s15, [r4, #4]
 800b6a2:	b007      	add	sp, #28
 800b6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b89c <__ieee754_rem_pio2f+0x254>
 800b6aa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b8a0 <__ieee754_rem_pio2f+0x258>
 800b6ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b6b2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b6b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b6ba:	edc0 6a00 	vstr	s13, [r0]
 800b6be:	e7eb      	b.n	800b698 <__ieee754_rem_pio2f+0x50>
 800b6c0:	429d      	cmp	r5, r3
 800b6c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b6c6:	d00e      	beq.n	800b6e6 <__ieee754_rem_pio2f+0x9e>
 800b6c8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b898 <__ieee754_rem_pio2f+0x250>
 800b6cc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b6d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b6d4:	ed80 0a00 	vstr	s0, [r0]
 800b6d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e0:	edc4 7a01 	vstr	s15, [r4, #4]
 800b6e4:	e7dd      	b.n	800b6a2 <__ieee754_rem_pio2f+0x5a>
 800b6e6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b89c <__ieee754_rem_pio2f+0x254>
 800b6ea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b8a0 <__ieee754_rem_pio2f+0x258>
 800b6ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b6f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b6f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b6fa:	edc0 6a00 	vstr	s13, [r0]
 800b6fe:	e7eb      	b.n	800b6d8 <__ieee754_rem_pio2f+0x90>
 800b700:	4b68      	ldr	r3, [pc, #416]	; (800b8a4 <__ieee754_rem_pio2f+0x25c>)
 800b702:	429d      	cmp	r5, r3
 800b704:	dc72      	bgt.n	800b7ec <__ieee754_rem_pio2f+0x1a4>
 800b706:	f000 fc31 	bl	800bf6c <fabsf>
 800b70a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b8a8 <__ieee754_rem_pio2f+0x260>
 800b70e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b712:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b71a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b71e:	ee17 0a90 	vmov	r0, s15
 800b722:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b890 <__ieee754_rem_pio2f+0x248>
 800b726:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b72a:	281f      	cmp	r0, #31
 800b72c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b898 <__ieee754_rem_pio2f+0x250>
 800b730:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b734:	eeb1 6a47 	vneg.f32	s12, s14
 800b738:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b73c:	ee16 2a90 	vmov	r2, s13
 800b740:	dc1c      	bgt.n	800b77c <__ieee754_rem_pio2f+0x134>
 800b742:	495a      	ldr	r1, [pc, #360]	; (800b8ac <__ieee754_rem_pio2f+0x264>)
 800b744:	1e47      	subs	r7, r0, #1
 800b746:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b74a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b74e:	428b      	cmp	r3, r1
 800b750:	d014      	beq.n	800b77c <__ieee754_rem_pio2f+0x134>
 800b752:	6022      	str	r2, [r4, #0]
 800b754:	ed94 7a00 	vldr	s14, [r4]
 800b758:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b75c:	2e00      	cmp	r6, #0
 800b75e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b762:	ed84 0a01 	vstr	s0, [r4, #4]
 800b766:	da9c      	bge.n	800b6a2 <__ieee754_rem_pio2f+0x5a>
 800b768:	eeb1 7a47 	vneg.f32	s14, s14
 800b76c:	eeb1 0a40 	vneg.f32	s0, s0
 800b770:	ed84 7a00 	vstr	s14, [r4]
 800b774:	ed84 0a01 	vstr	s0, [r4, #4]
 800b778:	4240      	negs	r0, r0
 800b77a:	e792      	b.n	800b6a2 <__ieee754_rem_pio2f+0x5a>
 800b77c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b780:	15eb      	asrs	r3, r5, #23
 800b782:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b786:	2d08      	cmp	r5, #8
 800b788:	dde3      	ble.n	800b752 <__ieee754_rem_pio2f+0x10a>
 800b78a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b89c <__ieee754_rem_pio2f+0x254>
 800b78e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b8a0 <__ieee754_rem_pio2f+0x258>
 800b792:	eef0 6a40 	vmov.f32	s13, s0
 800b796:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b79a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b79e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b7a2:	eef0 7a40 	vmov.f32	s15, s0
 800b7a6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b7aa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b7ae:	ee15 2a90 	vmov	r2, s11
 800b7b2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b7b6:	1a5b      	subs	r3, r3, r1
 800b7b8:	2b19      	cmp	r3, #25
 800b7ba:	dc04      	bgt.n	800b7c6 <__ieee754_rem_pio2f+0x17e>
 800b7bc:	edc4 5a00 	vstr	s11, [r4]
 800b7c0:	eeb0 0a66 	vmov.f32	s0, s13
 800b7c4:	e7c6      	b.n	800b754 <__ieee754_rem_pio2f+0x10c>
 800b7c6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b8b0 <__ieee754_rem_pio2f+0x268>
 800b7ca:	eeb0 0a66 	vmov.f32	s0, s13
 800b7ce:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b7d2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b7d6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b8b4 <__ieee754_rem_pio2f+0x26c>
 800b7da:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b7de:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b7e2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b7e6:	ed84 7a00 	vstr	s14, [r4]
 800b7ea:	e7b3      	b.n	800b754 <__ieee754_rem_pio2f+0x10c>
 800b7ec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b7f0:	db06      	blt.n	800b800 <__ieee754_rem_pio2f+0x1b8>
 800b7f2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b7f6:	edc0 7a01 	vstr	s15, [r0, #4]
 800b7fa:	edc0 7a00 	vstr	s15, [r0]
 800b7fe:	e733      	b.n	800b668 <__ieee754_rem_pio2f+0x20>
 800b800:	15ea      	asrs	r2, r5, #23
 800b802:	3a86      	subs	r2, #134	; 0x86
 800b804:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b808:	ee07 3a90 	vmov	s15, r3
 800b80c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b810:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b8b8 <__ieee754_rem_pio2f+0x270>
 800b814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b81c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b824:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b828:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b82c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b830:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b834:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b838:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b840:	edcd 7a05 	vstr	s15, [sp, #20]
 800b844:	d11e      	bne.n	800b884 <__ieee754_rem_pio2f+0x23c>
 800b846:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84e:	bf14      	ite	ne
 800b850:	2302      	movne	r3, #2
 800b852:	2301      	moveq	r3, #1
 800b854:	4919      	ldr	r1, [pc, #100]	; (800b8bc <__ieee754_rem_pio2f+0x274>)
 800b856:	9101      	str	r1, [sp, #4]
 800b858:	2102      	movs	r1, #2
 800b85a:	9100      	str	r1, [sp, #0]
 800b85c:	a803      	add	r0, sp, #12
 800b85e:	4621      	mov	r1, r4
 800b860:	f000 f82e 	bl	800b8c0 <__kernel_rem_pio2f>
 800b864:	2e00      	cmp	r6, #0
 800b866:	f6bf af1c 	bge.w	800b6a2 <__ieee754_rem_pio2f+0x5a>
 800b86a:	edd4 7a00 	vldr	s15, [r4]
 800b86e:	eef1 7a67 	vneg.f32	s15, s15
 800b872:	edc4 7a00 	vstr	s15, [r4]
 800b876:	edd4 7a01 	vldr	s15, [r4, #4]
 800b87a:	eef1 7a67 	vneg.f32	s15, s15
 800b87e:	edc4 7a01 	vstr	s15, [r4, #4]
 800b882:	e779      	b.n	800b778 <__ieee754_rem_pio2f+0x130>
 800b884:	2303      	movs	r3, #3
 800b886:	e7e5      	b.n	800b854 <__ieee754_rem_pio2f+0x20c>
 800b888:	3f490fd8 	.word	0x3f490fd8
 800b88c:	4016cbe3 	.word	0x4016cbe3
 800b890:	3fc90f80 	.word	0x3fc90f80
 800b894:	3fc90fd0 	.word	0x3fc90fd0
 800b898:	37354443 	.word	0x37354443
 800b89c:	37354400 	.word	0x37354400
 800b8a0:	2e85a308 	.word	0x2e85a308
 800b8a4:	43490f80 	.word	0x43490f80
 800b8a8:	3f22f984 	.word	0x3f22f984
 800b8ac:	0800c1d4 	.word	0x0800c1d4
 800b8b0:	2e85a300 	.word	0x2e85a300
 800b8b4:	248d3132 	.word	0x248d3132
 800b8b8:	43800000 	.word	0x43800000
 800b8bc:	0800c254 	.word	0x0800c254

0800b8c0 <__kernel_rem_pio2f>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	ed2d 8b04 	vpush	{d8-d9}
 800b8c8:	b0d9      	sub	sp, #356	; 0x164
 800b8ca:	4688      	mov	r8, r1
 800b8cc:	9002      	str	r0, [sp, #8]
 800b8ce:	49bb      	ldr	r1, [pc, #748]	; (800bbbc <__kernel_rem_pio2f+0x2fc>)
 800b8d0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b8d8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b8dc:	1e59      	subs	r1, r3, #1
 800b8de:	1d13      	adds	r3, r2, #4
 800b8e0:	db27      	blt.n	800b932 <__kernel_rem_pio2f+0x72>
 800b8e2:	f1b2 0b03 	subs.w	fp, r2, #3
 800b8e6:	bf48      	it	mi
 800b8e8:	f102 0b04 	addmi.w	fp, r2, #4
 800b8ec:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b8f0:	1c45      	adds	r5, r0, #1
 800b8f2:	00ec      	lsls	r4, r5, #3
 800b8f4:	1a47      	subs	r7, r0, r1
 800b8f6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800bbcc <__kernel_rem_pio2f+0x30c>
 800b8fa:	9403      	str	r4, [sp, #12]
 800b8fc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b900:	eb0a 0c01 	add.w	ip, sl, r1
 800b904:	ae1c      	add	r6, sp, #112	; 0x70
 800b906:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b90a:	2400      	movs	r4, #0
 800b90c:	4564      	cmp	r4, ip
 800b90e:	dd12      	ble.n	800b936 <__kernel_rem_pio2f+0x76>
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	ac1c      	add	r4, sp, #112	; 0x70
 800b914:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b918:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b91c:	f04f 0c00 	mov.w	ip, #0
 800b920:	45d4      	cmp	ip, sl
 800b922:	dc27      	bgt.n	800b974 <__kernel_rem_pio2f+0xb4>
 800b924:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b928:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800bbcc <__kernel_rem_pio2f+0x30c>
 800b92c:	4627      	mov	r7, r4
 800b92e:	2600      	movs	r6, #0
 800b930:	e016      	b.n	800b960 <__kernel_rem_pio2f+0xa0>
 800b932:	2000      	movs	r0, #0
 800b934:	e7dc      	b.n	800b8f0 <__kernel_rem_pio2f+0x30>
 800b936:	42e7      	cmn	r7, r4
 800b938:	bf5d      	ittte	pl
 800b93a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b93e:	ee07 3a90 	vmovpl	s15, r3
 800b942:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b946:	eef0 7a47 	vmovmi.f32	s15, s14
 800b94a:	ece6 7a01 	vstmia	r6!, {s15}
 800b94e:	3401      	adds	r4, #1
 800b950:	e7dc      	b.n	800b90c <__kernel_rem_pio2f+0x4c>
 800b952:	ecf9 6a01 	vldmia	r9!, {s13}
 800b956:	ed97 7a00 	vldr	s14, [r7]
 800b95a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b95e:	3601      	adds	r6, #1
 800b960:	428e      	cmp	r6, r1
 800b962:	f1a7 0704 	sub.w	r7, r7, #4
 800b966:	ddf4      	ble.n	800b952 <__kernel_rem_pio2f+0x92>
 800b968:	eceb 7a01 	vstmia	fp!, {s15}
 800b96c:	f10c 0c01 	add.w	ip, ip, #1
 800b970:	3404      	adds	r4, #4
 800b972:	e7d5      	b.n	800b920 <__kernel_rem_pio2f+0x60>
 800b974:	ab08      	add	r3, sp, #32
 800b976:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b97a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800bbc8 <__kernel_rem_pio2f+0x308>
 800b97e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800bbc4 <__kernel_rem_pio2f+0x304>
 800b982:	9304      	str	r3, [sp, #16]
 800b984:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b988:	4656      	mov	r6, sl
 800b98a:	00b3      	lsls	r3, r6, #2
 800b98c:	9305      	str	r3, [sp, #20]
 800b98e:	ab58      	add	r3, sp, #352	; 0x160
 800b990:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b994:	ac08      	add	r4, sp, #32
 800b996:	ab44      	add	r3, sp, #272	; 0x110
 800b998:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b99c:	46a4      	mov	ip, r4
 800b99e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b9a2:	4637      	mov	r7, r6
 800b9a4:	2f00      	cmp	r7, #0
 800b9a6:	f1a0 0004 	sub.w	r0, r0, #4
 800b9aa:	dc4f      	bgt.n	800ba4c <__kernel_rem_pio2f+0x18c>
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b9b2:	f000 fb25 	bl	800c000 <scalbnf>
 800b9b6:	eeb0 8a40 	vmov.f32	s16, s0
 800b9ba:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b9be:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b9c2:	f000 fadb 	bl	800bf7c <floorf>
 800b9c6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b9ca:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b9ce:	2d00      	cmp	r5, #0
 800b9d0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b9d4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b9d8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b9dc:	ee17 9a90 	vmov	r9, s15
 800b9e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b9e4:	dd44      	ble.n	800ba70 <__kernel_rem_pio2f+0x1b0>
 800b9e6:	f106 3cff 	add.w	ip, r6, #4294967295
 800b9ea:	ab08      	add	r3, sp, #32
 800b9ec:	f1c5 0e08 	rsb	lr, r5, #8
 800b9f0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b9f4:	fa47 f00e 	asr.w	r0, r7, lr
 800b9f8:	4481      	add	r9, r0
 800b9fa:	fa00 f00e 	lsl.w	r0, r0, lr
 800b9fe:	1a3f      	subs	r7, r7, r0
 800ba00:	f1c5 0007 	rsb	r0, r5, #7
 800ba04:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800ba08:	4107      	asrs	r7, r0
 800ba0a:	2f00      	cmp	r7, #0
 800ba0c:	dd3f      	ble.n	800ba8e <__kernel_rem_pio2f+0x1ce>
 800ba0e:	f04f 0e00 	mov.w	lr, #0
 800ba12:	f109 0901 	add.w	r9, r9, #1
 800ba16:	4673      	mov	r3, lr
 800ba18:	4576      	cmp	r6, lr
 800ba1a:	dc6b      	bgt.n	800baf4 <__kernel_rem_pio2f+0x234>
 800ba1c:	2d00      	cmp	r5, #0
 800ba1e:	dd04      	ble.n	800ba2a <__kernel_rem_pio2f+0x16a>
 800ba20:	2d01      	cmp	r5, #1
 800ba22:	d078      	beq.n	800bb16 <__kernel_rem_pio2f+0x256>
 800ba24:	2d02      	cmp	r5, #2
 800ba26:	f000 8081 	beq.w	800bb2c <__kernel_rem_pio2f+0x26c>
 800ba2a:	2f02      	cmp	r7, #2
 800ba2c:	d12f      	bne.n	800ba8e <__kernel_rem_pio2f+0x1ce>
 800ba2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba32:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ba36:	b353      	cbz	r3, 800ba8e <__kernel_rem_pio2f+0x1ce>
 800ba38:	4628      	mov	r0, r5
 800ba3a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800ba3e:	f000 fadf 	bl	800c000 <scalbnf>
 800ba42:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800ba46:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ba4a:	e020      	b.n	800ba8e <__kernel_rem_pio2f+0x1ce>
 800ba4c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ba50:	3f01      	subs	r7, #1
 800ba52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba5a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ba5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba62:	ecac 0a01 	vstmia	ip!, {s0}
 800ba66:	ed90 0a00 	vldr	s0, [r0]
 800ba6a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ba6e:	e799      	b.n	800b9a4 <__kernel_rem_pio2f+0xe4>
 800ba70:	d105      	bne.n	800ba7e <__kernel_rem_pio2f+0x1be>
 800ba72:	1e70      	subs	r0, r6, #1
 800ba74:	ab08      	add	r3, sp, #32
 800ba76:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ba7a:	11ff      	asrs	r7, r7, #7
 800ba7c:	e7c5      	b.n	800ba0a <__kernel_rem_pio2f+0x14a>
 800ba7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ba86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba8a:	da31      	bge.n	800baf0 <__kernel_rem_pio2f+0x230>
 800ba8c:	2700      	movs	r7, #0
 800ba8e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ba92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba96:	f040 809b 	bne.w	800bbd0 <__kernel_rem_pio2f+0x310>
 800ba9a:	1e74      	subs	r4, r6, #1
 800ba9c:	46a4      	mov	ip, r4
 800ba9e:	2000      	movs	r0, #0
 800baa0:	45d4      	cmp	ip, sl
 800baa2:	da4a      	bge.n	800bb3a <__kernel_rem_pio2f+0x27a>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d07a      	beq.n	800bb9e <__kernel_rem_pio2f+0x2de>
 800baa8:	ab08      	add	r3, sp, #32
 800baaa:	3d08      	subs	r5, #8
 800baac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 8081 	beq.w	800bbb8 <__kernel_rem_pio2f+0x2f8>
 800bab6:	4628      	mov	r0, r5
 800bab8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800babc:	00a5      	lsls	r5, r4, #2
 800babe:	f000 fa9f 	bl	800c000 <scalbnf>
 800bac2:	aa44      	add	r2, sp, #272	; 0x110
 800bac4:	1d2b      	adds	r3, r5, #4
 800bac6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800bbc8 <__kernel_rem_pio2f+0x308>
 800baca:	18d1      	adds	r1, r2, r3
 800bacc:	4622      	mov	r2, r4
 800bace:	2a00      	cmp	r2, #0
 800bad0:	f280 80ae 	bge.w	800bc30 <__kernel_rem_pio2f+0x370>
 800bad4:	4622      	mov	r2, r4
 800bad6:	2a00      	cmp	r2, #0
 800bad8:	f2c0 80cc 	blt.w	800bc74 <__kernel_rem_pio2f+0x3b4>
 800badc:	a944      	add	r1, sp, #272	; 0x110
 800bade:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800bae2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800bbc0 <__kernel_rem_pio2f+0x300>
 800bae6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800bbcc <__kernel_rem_pio2f+0x30c>
 800baea:	2000      	movs	r0, #0
 800baec:	1aa1      	subs	r1, r4, r2
 800baee:	e0b6      	b.n	800bc5e <__kernel_rem_pio2f+0x39e>
 800baf0:	2702      	movs	r7, #2
 800baf2:	e78c      	b.n	800ba0e <__kernel_rem_pio2f+0x14e>
 800baf4:	6820      	ldr	r0, [r4, #0]
 800baf6:	b94b      	cbnz	r3, 800bb0c <__kernel_rem_pio2f+0x24c>
 800baf8:	b118      	cbz	r0, 800bb02 <__kernel_rem_pio2f+0x242>
 800bafa:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800bafe:	6020      	str	r0, [r4, #0]
 800bb00:	2001      	movs	r0, #1
 800bb02:	f10e 0e01 	add.w	lr, lr, #1
 800bb06:	3404      	adds	r4, #4
 800bb08:	4603      	mov	r3, r0
 800bb0a:	e785      	b.n	800ba18 <__kernel_rem_pio2f+0x158>
 800bb0c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800bb10:	6020      	str	r0, [r4, #0]
 800bb12:	4618      	mov	r0, r3
 800bb14:	e7f5      	b.n	800bb02 <__kernel_rem_pio2f+0x242>
 800bb16:	1e74      	subs	r4, r6, #1
 800bb18:	a808      	add	r0, sp, #32
 800bb1a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bb1e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800bb22:	f10d 0c20 	add.w	ip, sp, #32
 800bb26:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800bb2a:	e77e      	b.n	800ba2a <__kernel_rem_pio2f+0x16a>
 800bb2c:	1e74      	subs	r4, r6, #1
 800bb2e:	a808      	add	r0, sp, #32
 800bb30:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bb34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800bb38:	e7f3      	b.n	800bb22 <__kernel_rem_pio2f+0x262>
 800bb3a:	ab08      	add	r3, sp, #32
 800bb3c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bb40:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb44:	4318      	orrs	r0, r3
 800bb46:	e7ab      	b.n	800baa0 <__kernel_rem_pio2f+0x1e0>
 800bb48:	f10c 0c01 	add.w	ip, ip, #1
 800bb4c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800bb50:	2c00      	cmp	r4, #0
 800bb52:	d0f9      	beq.n	800bb48 <__kernel_rem_pio2f+0x288>
 800bb54:	9b05      	ldr	r3, [sp, #20]
 800bb56:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bb5a:	eb0d 0003 	add.w	r0, sp, r3
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	18f4      	adds	r4, r6, r3
 800bb62:	ab1c      	add	r3, sp, #112	; 0x70
 800bb64:	1c77      	adds	r7, r6, #1
 800bb66:	384c      	subs	r0, #76	; 0x4c
 800bb68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb6c:	4466      	add	r6, ip
 800bb6e:	42be      	cmp	r6, r7
 800bb70:	f6ff af0b 	blt.w	800b98a <__kernel_rem_pio2f+0xca>
 800bb74:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800bb78:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bb7c:	ee07 3a90 	vmov	s15, r3
 800bb80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb84:	f04f 0c00 	mov.w	ip, #0
 800bb88:	ece4 7a01 	vstmia	r4!, {s15}
 800bb8c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bbcc <__kernel_rem_pio2f+0x30c>
 800bb90:	46a1      	mov	r9, r4
 800bb92:	458c      	cmp	ip, r1
 800bb94:	dd07      	ble.n	800bba6 <__kernel_rem_pio2f+0x2e6>
 800bb96:	ece0 7a01 	vstmia	r0!, {s15}
 800bb9a:	3701      	adds	r7, #1
 800bb9c:	e7e7      	b.n	800bb6e <__kernel_rem_pio2f+0x2ae>
 800bb9e:	9804      	ldr	r0, [sp, #16]
 800bba0:	f04f 0c01 	mov.w	ip, #1
 800bba4:	e7d2      	b.n	800bb4c <__kernel_rem_pio2f+0x28c>
 800bba6:	ecfe 6a01 	vldmia	lr!, {s13}
 800bbaa:	ed39 7a01 	vldmdb	r9!, {s14}
 800bbae:	f10c 0c01 	add.w	ip, ip, #1
 800bbb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bbb6:	e7ec      	b.n	800bb92 <__kernel_rem_pio2f+0x2d2>
 800bbb8:	3c01      	subs	r4, #1
 800bbba:	e775      	b.n	800baa8 <__kernel_rem_pio2f+0x1e8>
 800bbbc:	0800c598 	.word	0x0800c598
 800bbc0:	0800c56c 	.word	0x0800c56c
 800bbc4:	43800000 	.word	0x43800000
 800bbc8:	3b800000 	.word	0x3b800000
 800bbcc:	00000000 	.word	0x00000000
 800bbd0:	9b03      	ldr	r3, [sp, #12]
 800bbd2:	eeb0 0a48 	vmov.f32	s0, s16
 800bbd6:	1a98      	subs	r0, r3, r2
 800bbd8:	f000 fa12 	bl	800c000 <scalbnf>
 800bbdc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bbc4 <__kernel_rem_pio2f+0x304>
 800bbe0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe8:	db19      	blt.n	800bc1e <__kernel_rem_pio2f+0x35e>
 800bbea:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bbc8 <__kernel_rem_pio2f+0x308>
 800bbee:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bbf2:	aa08      	add	r2, sp, #32
 800bbf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbf8:	1c74      	adds	r4, r6, #1
 800bbfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbfe:	3508      	adds	r5, #8
 800bc00:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bc04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc0c:	ee10 3a10 	vmov	r3, s0
 800bc10:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bc14:	ee17 3a90 	vmov	r3, s15
 800bc18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bc1c:	e74b      	b.n	800bab6 <__kernel_rem_pio2f+0x1f6>
 800bc1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc22:	aa08      	add	r2, sp, #32
 800bc24:	ee10 3a10 	vmov	r3, s0
 800bc28:	4634      	mov	r4, r6
 800bc2a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bc2e:	e742      	b.n	800bab6 <__kernel_rem_pio2f+0x1f6>
 800bc30:	a808      	add	r0, sp, #32
 800bc32:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800bc36:	9001      	str	r0, [sp, #4]
 800bc38:	ee07 0a90 	vmov	s15, r0
 800bc3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc40:	3a01      	subs	r2, #1
 800bc42:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bc46:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bc4a:	ed61 7a01 	vstmdb	r1!, {s15}
 800bc4e:	e73e      	b.n	800bace <__kernel_rem_pio2f+0x20e>
 800bc50:	ecfc 6a01 	vldmia	ip!, {s13}
 800bc54:	ecb6 7a01 	vldmia	r6!, {s14}
 800bc58:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	4550      	cmp	r0, sl
 800bc60:	dc01      	bgt.n	800bc66 <__kernel_rem_pio2f+0x3a6>
 800bc62:	4288      	cmp	r0, r1
 800bc64:	ddf4      	ble.n	800bc50 <__kernel_rem_pio2f+0x390>
 800bc66:	a858      	add	r0, sp, #352	; 0x160
 800bc68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc6c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bc70:	3a01      	subs	r2, #1
 800bc72:	e730      	b.n	800bad6 <__kernel_rem_pio2f+0x216>
 800bc74:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800bc76:	2a02      	cmp	r2, #2
 800bc78:	dc09      	bgt.n	800bc8e <__kernel_rem_pio2f+0x3ce>
 800bc7a:	2a00      	cmp	r2, #0
 800bc7c:	dc2a      	bgt.n	800bcd4 <__kernel_rem_pio2f+0x414>
 800bc7e:	d043      	beq.n	800bd08 <__kernel_rem_pio2f+0x448>
 800bc80:	f009 0007 	and.w	r0, r9, #7
 800bc84:	b059      	add	sp, #356	; 0x164
 800bc86:	ecbd 8b04 	vpop	{d8-d9}
 800bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d1f5      	bne.n	800bc80 <__kernel_rem_pio2f+0x3c0>
 800bc94:	ab30      	add	r3, sp, #192	; 0xc0
 800bc96:	442b      	add	r3, r5
 800bc98:	461a      	mov	r2, r3
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f1a1 0104 	sub.w	r1, r1, #4
 800bca4:	dc51      	bgt.n	800bd4a <__kernel_rem_pio2f+0x48a>
 800bca6:	4621      	mov	r1, r4
 800bca8:	2901      	cmp	r1, #1
 800bcaa:	f1a2 0204 	sub.w	r2, r2, #4
 800bcae:	dc5c      	bgt.n	800bd6a <__kernel_rem_pio2f+0x4aa>
 800bcb0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800bbcc <__kernel_rem_pio2f+0x30c>
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	2c01      	cmp	r4, #1
 800bcb8:	dc67      	bgt.n	800bd8a <__kernel_rem_pio2f+0x4ca>
 800bcba:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800bcbe:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800bcc2:	2f00      	cmp	r7, #0
 800bcc4:	d167      	bne.n	800bd96 <__kernel_rem_pio2f+0x4d6>
 800bcc6:	edc8 6a00 	vstr	s13, [r8]
 800bcca:	ed88 7a01 	vstr	s14, [r8, #4]
 800bcce:	edc8 7a02 	vstr	s15, [r8, #8]
 800bcd2:	e7d5      	b.n	800bc80 <__kernel_rem_pio2f+0x3c0>
 800bcd4:	aa30      	add	r2, sp, #192	; 0xc0
 800bcd6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800bbcc <__kernel_rem_pio2f+0x30c>
 800bcda:	4413      	add	r3, r2
 800bcdc:	4622      	mov	r2, r4
 800bcde:	2a00      	cmp	r2, #0
 800bce0:	da24      	bge.n	800bd2c <__kernel_rem_pio2f+0x46c>
 800bce2:	b34f      	cbz	r7, 800bd38 <__kernel_rem_pio2f+0x478>
 800bce4:	eef1 7a47 	vneg.f32	s15, s14
 800bce8:	edc8 7a00 	vstr	s15, [r8]
 800bcec:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800bcf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcf4:	aa31      	add	r2, sp, #196	; 0xc4
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	429c      	cmp	r4, r3
 800bcfa:	da20      	bge.n	800bd3e <__kernel_rem_pio2f+0x47e>
 800bcfc:	b10f      	cbz	r7, 800bd02 <__kernel_rem_pio2f+0x442>
 800bcfe:	eef1 7a67 	vneg.f32	s15, s15
 800bd02:	edc8 7a01 	vstr	s15, [r8, #4]
 800bd06:	e7bb      	b.n	800bc80 <__kernel_rem_pio2f+0x3c0>
 800bd08:	aa30      	add	r2, sp, #192	; 0xc0
 800bd0a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800bbcc <__kernel_rem_pio2f+0x30c>
 800bd0e:	4413      	add	r3, r2
 800bd10:	2c00      	cmp	r4, #0
 800bd12:	da05      	bge.n	800bd20 <__kernel_rem_pio2f+0x460>
 800bd14:	b10f      	cbz	r7, 800bd1a <__kernel_rem_pio2f+0x45a>
 800bd16:	eef1 7a67 	vneg.f32	s15, s15
 800bd1a:	edc8 7a00 	vstr	s15, [r8]
 800bd1e:	e7af      	b.n	800bc80 <__kernel_rem_pio2f+0x3c0>
 800bd20:	ed33 7a01 	vldmdb	r3!, {s14}
 800bd24:	3c01      	subs	r4, #1
 800bd26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd2a:	e7f1      	b.n	800bd10 <__kernel_rem_pio2f+0x450>
 800bd2c:	ed73 7a01 	vldmdb	r3!, {s15}
 800bd30:	3a01      	subs	r2, #1
 800bd32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd36:	e7d2      	b.n	800bcde <__kernel_rem_pio2f+0x41e>
 800bd38:	eef0 7a47 	vmov.f32	s15, s14
 800bd3c:	e7d4      	b.n	800bce8 <__kernel_rem_pio2f+0x428>
 800bd3e:	ecb2 7a01 	vldmia	r2!, {s14}
 800bd42:	3301      	adds	r3, #1
 800bd44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd48:	e7d6      	b.n	800bcf8 <__kernel_rem_pio2f+0x438>
 800bd4a:	edd1 7a00 	vldr	s15, [r1]
 800bd4e:	edd1 6a01 	vldr	s13, [r1, #4]
 800bd52:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bd56:	3801      	subs	r0, #1
 800bd58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd5c:	ed81 7a00 	vstr	s14, [r1]
 800bd60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd64:	edc1 7a01 	vstr	s15, [r1, #4]
 800bd68:	e799      	b.n	800bc9e <__kernel_rem_pio2f+0x3de>
 800bd6a:	edd2 7a00 	vldr	s15, [r2]
 800bd6e:	edd2 6a01 	vldr	s13, [r2, #4]
 800bd72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bd76:	3901      	subs	r1, #1
 800bd78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd7c:	ed82 7a00 	vstr	s14, [r2]
 800bd80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd84:	edc2 7a01 	vstr	s15, [r2, #4]
 800bd88:	e78e      	b.n	800bca8 <__kernel_rem_pio2f+0x3e8>
 800bd8a:	ed33 7a01 	vldmdb	r3!, {s14}
 800bd8e:	3c01      	subs	r4, #1
 800bd90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd94:	e78f      	b.n	800bcb6 <__kernel_rem_pio2f+0x3f6>
 800bd96:	eef1 6a66 	vneg.f32	s13, s13
 800bd9a:	eeb1 7a47 	vneg.f32	s14, s14
 800bd9e:	edc8 6a00 	vstr	s13, [r8]
 800bda2:	ed88 7a01 	vstr	s14, [r8, #4]
 800bda6:	eef1 7a67 	vneg.f32	s15, s15
 800bdaa:	e790      	b.n	800bcce <__kernel_rem_pio2f+0x40e>

0800bdac <__kernel_tanf>:
 800bdac:	b508      	push	{r3, lr}
 800bdae:	ee10 3a10 	vmov	r3, s0
 800bdb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bdb6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800bdba:	eef0 7a40 	vmov.f32	s15, s0
 800bdbe:	da17      	bge.n	800bdf0 <__kernel_tanf+0x44>
 800bdc0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800bdc4:	ee17 1a10 	vmov	r1, s14
 800bdc8:	bb41      	cbnz	r1, 800be1c <__kernel_tanf+0x70>
 800bdca:	1c43      	adds	r3, r0, #1
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	d108      	bne.n	800bde2 <__kernel_tanf+0x36>
 800bdd0:	f000 f8cc 	bl	800bf6c <fabsf>
 800bdd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdd8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bddc:	eeb0 0a67 	vmov.f32	s0, s15
 800bde0:	bd08      	pop	{r3, pc}
 800bde2:	2801      	cmp	r0, #1
 800bde4:	d0fa      	beq.n	800bddc <__kernel_tanf+0x30>
 800bde6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bdea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bdee:	e7f5      	b.n	800bddc <__kernel_tanf+0x30>
 800bdf0:	494c      	ldr	r1, [pc, #304]	; (800bf24 <__kernel_tanf+0x178>)
 800bdf2:	428a      	cmp	r2, r1
 800bdf4:	db12      	blt.n	800be1c <__kernel_tanf+0x70>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	bfb8      	it	lt
 800bdfa:	eef1 7a40 	vneglt.f32	s15, s0
 800bdfe:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800bf28 <__kernel_tanf+0x17c>
 800be02:	ee70 7a67 	vsub.f32	s15, s0, s15
 800be06:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800bf2c <__kernel_tanf+0x180>
 800be0a:	bfb8      	it	lt
 800be0c:	eef1 0a60 	vneglt.f32	s1, s1
 800be10:	ee70 0a60 	vsub.f32	s1, s0, s1
 800be14:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800be18:	eddf 0a45 	vldr	s1, [pc, #276]	; 800bf30 <__kernel_tanf+0x184>
 800be1c:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf34 <__kernel_tanf+0x188>
 800be20:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800bf38 <__kernel_tanf+0x18c>
 800be24:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800bf3c <__kernel_tanf+0x190>
 800be28:	493e      	ldr	r1, [pc, #248]	; (800bf24 <__kernel_tanf+0x178>)
 800be2a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800be2e:	428a      	cmp	r2, r1
 800be30:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800be34:	eea7 6a25 	vfma.f32	s12, s14, s11
 800be38:	eddf 5a41 	vldr	s11, [pc, #260]	; 800bf40 <__kernel_tanf+0x194>
 800be3c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800be40:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800bf44 <__kernel_tanf+0x198>
 800be44:	eea5 6a87 	vfma.f32	s12, s11, s14
 800be48:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bf48 <__kernel_tanf+0x19c>
 800be4c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800be50:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800bf4c <__kernel_tanf+0x1a0>
 800be54:	eea5 6a87 	vfma.f32	s12, s11, s14
 800be58:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800bf50 <__kernel_tanf+0x1a4>
 800be5c:	eee7 5a05 	vfma.f32	s11, s14, s10
 800be60:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800bf54 <__kernel_tanf+0x1a8>
 800be64:	eea5 5a87 	vfma.f32	s10, s11, s14
 800be68:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800bf58 <__kernel_tanf+0x1ac>
 800be6c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800be70:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800bf5c <__kernel_tanf+0x1b0>
 800be74:	eea5 5a87 	vfma.f32	s10, s11, s14
 800be78:	eddf 5a39 	vldr	s11, [pc, #228]	; 800bf60 <__kernel_tanf+0x1b4>
 800be7c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800be80:	eeb0 7a46 	vmov.f32	s14, s12
 800be84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800be88:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800be8c:	eeb0 6a60 	vmov.f32	s12, s1
 800be90:	eea7 6a05 	vfma.f32	s12, s14, s10
 800be94:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800bf64 <__kernel_tanf+0x1b8>
 800be98:	eee6 0a26 	vfma.f32	s1, s12, s13
 800be9c:	eee5 0a07 	vfma.f32	s1, s10, s14
 800bea0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800bea4:	db1d      	blt.n	800bee2 <__kernel_tanf+0x136>
 800bea6:	ee06 0a90 	vmov	s13, r0
 800beaa:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800beae:	ee27 6a07 	vmul.f32	s12, s14, s14
 800beb2:	ee37 7a00 	vadd.f32	s14, s14, s0
 800beb6:	179b      	asrs	r3, r3, #30
 800beb8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800bebc:	f003 0302 	and.w	r3, r3, #2
 800bec0:	f1c3 0301 	rsb	r3, r3, #1
 800bec4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bec8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800becc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bed0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bed4:	ee07 3a90 	vmov	s15, r3
 800bed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bedc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bee0:	e77c      	b.n	800bddc <__kernel_tanf+0x30>
 800bee2:	2801      	cmp	r0, #1
 800bee4:	d01b      	beq.n	800bf1e <__kernel_tanf+0x172>
 800bee6:	4b20      	ldr	r3, [pc, #128]	; (800bf68 <__kernel_tanf+0x1bc>)
 800bee8:	ee17 2a10 	vmov	r2, s14
 800beec:	401a      	ands	r2, r3
 800beee:	ee06 2a10 	vmov	s12, r2
 800bef2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bef6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800befa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800befe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bf02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf06:	ee16 2a90 	vmov	r2, s13
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	ee07 3a90 	vmov	s15, r3
 800bf10:	eea6 7a27 	vfma.f32	s14, s12, s15
 800bf14:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800bf18:	eee7 7a26 	vfma.f32	s15, s14, s13
 800bf1c:	e75e      	b.n	800bddc <__kernel_tanf+0x30>
 800bf1e:	eef0 7a47 	vmov.f32	s15, s14
 800bf22:	e75b      	b.n	800bddc <__kernel_tanf+0x30>
 800bf24:	3f2ca140 	.word	0x3f2ca140
 800bf28:	3f490fda 	.word	0x3f490fda
 800bf2c:	33222168 	.word	0x33222168
 800bf30:	00000000 	.word	0x00000000
 800bf34:	b79bae5f 	.word	0xb79bae5f
 800bf38:	38a3f445 	.word	0x38a3f445
 800bf3c:	37d95384 	.word	0x37d95384
 800bf40:	3a1a26c8 	.word	0x3a1a26c8
 800bf44:	3b6b6916 	.word	0x3b6b6916
 800bf48:	3cb327a4 	.word	0x3cb327a4
 800bf4c:	3e088889 	.word	0x3e088889
 800bf50:	3895c07a 	.word	0x3895c07a
 800bf54:	398137b9 	.word	0x398137b9
 800bf58:	3abede48 	.word	0x3abede48
 800bf5c:	3c11371f 	.word	0x3c11371f
 800bf60:	3d5d0dd1 	.word	0x3d5d0dd1
 800bf64:	3eaaaaab 	.word	0x3eaaaaab
 800bf68:	fffff000 	.word	0xfffff000

0800bf6c <fabsf>:
 800bf6c:	ee10 3a10 	vmov	r3, s0
 800bf70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf74:	ee00 3a10 	vmov	s0, r3
 800bf78:	4770      	bx	lr
	...

0800bf7c <floorf>:
 800bf7c:	ee10 3a10 	vmov	r3, s0
 800bf80:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bf84:	3a7f      	subs	r2, #127	; 0x7f
 800bf86:	2a16      	cmp	r2, #22
 800bf88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf8c:	dc2a      	bgt.n	800bfe4 <floorf+0x68>
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	da11      	bge.n	800bfb6 <floorf+0x3a>
 800bf92:	eddf 7a18 	vldr	s15, [pc, #96]	; 800bff4 <floorf+0x78>
 800bf96:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bf9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa2:	dd05      	ble.n	800bfb0 <floorf+0x34>
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	da23      	bge.n	800bff0 <floorf+0x74>
 800bfa8:	4a13      	ldr	r2, [pc, #76]	; (800bff8 <floorf+0x7c>)
 800bfaa:	2900      	cmp	r1, #0
 800bfac:	bf18      	it	ne
 800bfae:	4613      	movne	r3, r2
 800bfb0:	ee00 3a10 	vmov	s0, r3
 800bfb4:	4770      	bx	lr
 800bfb6:	4911      	ldr	r1, [pc, #68]	; (800bffc <floorf+0x80>)
 800bfb8:	4111      	asrs	r1, r2
 800bfba:	420b      	tst	r3, r1
 800bfbc:	d0fa      	beq.n	800bfb4 <floorf+0x38>
 800bfbe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800bff4 <floorf+0x78>
 800bfc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bfc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfce:	ddef      	ble.n	800bfb0 <floorf+0x34>
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	bfbe      	ittt	lt
 800bfd4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800bfd8:	fa40 f202 	asrlt.w	r2, r0, r2
 800bfdc:	189b      	addlt	r3, r3, r2
 800bfde:	ea23 0301 	bic.w	r3, r3, r1
 800bfe2:	e7e5      	b.n	800bfb0 <floorf+0x34>
 800bfe4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bfe8:	d3e4      	bcc.n	800bfb4 <floorf+0x38>
 800bfea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bfee:	4770      	bx	lr
 800bff0:	2300      	movs	r3, #0
 800bff2:	e7dd      	b.n	800bfb0 <floorf+0x34>
 800bff4:	7149f2ca 	.word	0x7149f2ca
 800bff8:	bf800000 	.word	0xbf800000
 800bffc:	007fffff 	.word	0x007fffff

0800c000 <scalbnf>:
 800c000:	ee10 3a10 	vmov	r3, s0
 800c004:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c008:	d024      	beq.n	800c054 <scalbnf+0x54>
 800c00a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c00e:	d302      	bcc.n	800c016 <scalbnf+0x16>
 800c010:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c014:	4770      	bx	lr
 800c016:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c01a:	d121      	bne.n	800c060 <scalbnf+0x60>
 800c01c:	4b29      	ldr	r3, [pc, #164]	; (800c0c4 <scalbnf+0xc4>)
 800c01e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800c0c8 <scalbnf+0xc8>
 800c022:	4298      	cmp	r0, r3
 800c024:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c028:	db15      	blt.n	800c056 <scalbnf+0x56>
 800c02a:	ee10 3a10 	vmov	r3, s0
 800c02e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c032:	3a19      	subs	r2, #25
 800c034:	4402      	add	r2, r0
 800c036:	2afe      	cmp	r2, #254	; 0xfe
 800c038:	dd14      	ble.n	800c064 <scalbnf+0x64>
 800c03a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c0cc <scalbnf+0xcc>
 800c03e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c0d0 <scalbnf+0xd0>
 800c042:	ee10 3a10 	vmov	r3, s0
 800c046:	eeb0 7a67 	vmov.f32	s14, s15
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800c050:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c054:	4770      	bx	lr
 800c056:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c0d4 <scalbnf+0xd4>
 800c05a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c05e:	4770      	bx	lr
 800c060:	0dd2      	lsrs	r2, r2, #23
 800c062:	e7e7      	b.n	800c034 <scalbnf+0x34>
 800c064:	2a00      	cmp	r2, #0
 800c066:	dd06      	ble.n	800c076 <scalbnf+0x76>
 800c068:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c06c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c070:	ee00 3a10 	vmov	s0, r3
 800c074:	4770      	bx	lr
 800c076:	f112 0f16 	cmn.w	r2, #22
 800c07a:	da19      	bge.n	800c0b0 <scalbnf+0xb0>
 800c07c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c080:	4298      	cmp	r0, r3
 800c082:	ee10 3a10 	vmov	r3, s0
 800c086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c08a:	dd09      	ble.n	800c0a0 <scalbnf+0xa0>
 800c08c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800c0cc <scalbnf+0xcc>
 800c090:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c0d0 <scalbnf+0xd0>
 800c094:	eef0 7a40 	vmov.f32	s15, s0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	fe00 0a07 	vseleq.f32	s0, s0, s14
 800c09e:	e7dc      	b.n	800c05a <scalbnf+0x5a>
 800c0a0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c0d4 <scalbnf+0xd4>
 800c0a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c0d8 <scalbnf+0xd8>
 800c0a8:	eef0 7a40 	vmov.f32	s15, s0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	e7f4      	b.n	800c09a <scalbnf+0x9a>
 800c0b0:	3219      	adds	r2, #25
 800c0b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c0b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c0ba:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c0dc <scalbnf+0xdc>
 800c0be:	ee07 3a10 	vmov	s14, r3
 800c0c2:	e7c5      	b.n	800c050 <scalbnf+0x50>
 800c0c4:	ffff3cb0 	.word	0xffff3cb0
 800c0c8:	4c000000 	.word	0x4c000000
 800c0cc:	7149f2ca 	.word	0x7149f2ca
 800c0d0:	f149f2ca 	.word	0xf149f2ca
 800c0d4:	0da24260 	.word	0x0da24260
 800c0d8:	8da24260 	.word	0x8da24260
 800c0dc:	33000000 	.word	0x33000000

0800c0e0 <_init>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	bf00      	nop
 800c0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e6:	bc08      	pop	{r3}
 800c0e8:	469e      	mov	lr, r3
 800c0ea:	4770      	bx	lr

0800c0ec <_fini>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	bf00      	nop
 800c0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f2:	bc08      	pop	{r3}
 800c0f4:	469e      	mov	lr, r3
 800c0f6:	4770      	bx	lr
