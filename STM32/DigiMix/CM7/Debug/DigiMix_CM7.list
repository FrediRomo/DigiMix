
DigiMix_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .buffers      0001c000  30000000  30000000  00040000  2**5
                  ALLOC
  1 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013c84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d08  08013f28  08013f28  00023f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08014c30  08014c30  000301f4  2**0
                  CONTENTS
  5 .ARM          00000008  08014c30  08014c30  00024c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08014c38  08014c38  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08014c38  08014c38  00024c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08014c3c  08014c3c  00024c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001f4  24000000  08014c40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004f44  240001f4  08014e34  000301f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24005138  08014e34  00035138  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000256ba  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004426  00000000  00000000  000558dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c30  00000000  00000000  00059d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a98  00000000  00000000  0005b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d02b  00000000  00000000  0005d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022def  00000000  00000000  0009a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019294c  00000000  00000000  000bd1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0024fb36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009094  00000000  00000000  0024fb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013f0c 	.word	0x08013f0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08013f0c 	.word	0x08013f0c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <SystemInit+0xfc>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <SystemInit+0xfc>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0xfc>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <SystemInit+0xfc>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <SystemInit+0x100>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	2b06      	cmp	r3, #6
 8000aa6:	d807      	bhi.n	8000ab8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <SystemInit+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f023 030f 	bic.w	r3, r3, #15
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x100>)
 8000ab2:	f043 0307 	orr.w	r3, r3, #7
 8000ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemInit+0x104>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemInit+0x104>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	492c      	ldr	r1, [pc, #176]	; (8000b80 <SystemInit+0x104>)
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <SystemInit+0x108>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemInit+0x100>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemInit+0x100>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 030f 	bic.w	r3, r3, #15
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemInit+0x100>)
 8000aec:	f043 0307 	orr.w	r3, r3, #7
 8000af0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x104>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x104>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x104>)
 8000b06:	4a20      	ldr	r2, [pc, #128]	; (8000b88 <SystemInit+0x10c>)
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x104>)
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <SystemInit+0x110>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x104>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <SystemInit+0x114>)
 8000b14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x104>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <SystemInit+0x114>)
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SystemInit+0x104>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <SystemInit+0x114>)
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <SystemInit+0x104>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <SystemInit+0x104>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <SystemInit+0x104>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x118>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <SystemInit+0x118>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <SystemInit+0x11c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x120>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d202      	bcs.n	8000b66 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x124>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <SystemInit+0x128>)
 8000b68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b6c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	580000c0 	.word	0x580000c0
 8000b98:	5c001000 	.word	0x5c001000
 8000b9c:	ffff0000 	.word	0xffff0000
 8000ba0:	51008108 	.word	0x51008108
 8000ba4:	52004000 	.word	0x52004000

08000ba8 <IFX_PeakingFilter_Init>:


#include "IFX_PeakingFilter.h"

// Initialize
void IFX_PeakingFilter_Init(IFX_PeakingFilter *filt, float sampleRate_Hz) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	ed87 0a00 	vstr	s0, [r7]

	// Sample time
	filt->sampleTime_s = 1.0f / sampleRate_Hz;
 8000bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bb8:	ed97 7a00 	vldr	s14, [r7]
 8000bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	edc3 7a00 	vstr	s15, [r3]

	// Clear mem
	for(uint8_t n = 0; n < 3; n++) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e012      	b.n	8000bf2 <IFX_PeakingFilter_Init+0x4a>
		filt->x[n] = 0.0f;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
		filt->y[n] = 0.0f;
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	3304      	adds	r3, #4
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < 3; n++) {
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d9e9      	bls.n	8000bcc <IFX_PeakingFilter_Init+0x24>
	}

	// Calculate all-pass filter
	IFX_PeakingFilter_SetParameters(filt, 1.0f, 1.0f, 1.0f);
 8000bf8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000bfc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f807 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	0000      	movs	r0, r0
 8000c14:	0000      	movs	r0, r0
	...

08000c18 <IFX_PeakingFilter_SetParameters>:

// Compute filter coefficients. (	 > 1.0f = boost | boostCut_linear < 1.0f = cut)
void IFX_PeakingFilter_SetParameters(IFX_PeakingFilter *filt, float centerFrequency_Hz, float Q, float boostCut_linear) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c24:	edc7 0a01 	vstr	s1, [r7, #4]
 8000c28:	ed87 1a00 	vstr	s2, [r7]

	// Convert Hz to rad/s, pre-warp cut off frequency, multiply by sampling time (wc*T = ...)
	float wcT = 2.0f * tanf(M_PI * centerFrequency_Hz * filt->sampleTime_s);
 8000c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c34:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8000d70 <IFX_PeakingFilter_SetParameters+0x158>
 8000c38:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c52:	f012 fb9d 	bl	8013390 <tanf>
 8000c56:	eef0 7a40 	vmov.f32	s15, s0
 8000c5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c5e:	edc7 7a07 	vstr	s15, [r7, #28]
	float wcT2 = wcT * wcT;
 8000c62:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c6a:	edc7 7a06 	vstr	s15, [r7, #24]
	// Compute quality factor (Q = f(Center) / f(bandwidth))
	float invQ = 1.0f / Q;
 8000c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000c72:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c7a:	edc7 7a05 	vstr	s15, [r7, #20]

	// Compute filter coefficients
	filt->a[0] = 4.0f + 2.0f * (boostCut_linear * invQ) * wcT + wcT2;
 8000c7e:	ed97 7a00 	vldr	s14, [r7]
 8000c82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c96:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	edc3 7a07 	vstr	s15, [r3, #28]
	filt->a[1] = 2.0f * wcT2 - 8.0f;
 8000cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cb4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000cb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	edc3 7a08 	vstr	s15, [r3, #32]
	filt->a[2] = 4.0f - 2.0f * (boostCut_linear * invQ) * wcT + wcT2;
 8000cc2:	ed97 7a00 	vldr	s14, [r7]
 8000cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000cd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ce2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	filt->b[0] = 1.0f / (4.0f + 2.0f * invQ * wcT + wcT2);	// 1 / coefficient
 8000cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000cf8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d00:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	filt->b[1] = -(2.0f * wcT2 - 8.0f);					// -coefficient
 8000d1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d26:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d2e:	eef1 7a67 	vneg.f32	s15, s15
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	filt->b[2] = -(4.0f - 2.0f * invQ * wcT + wcT2);			// -coefficient
 8000d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d48:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d50:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d58:	eef1 7a67 	vneg.f32	s15, s15
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

}
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	f3af 8000 	nop.w
 8000d70:	54442d18 	.word	0x54442d18
 8000d74:	400921fb 	.word	0x400921fb

08000d78 <IFX_PeakingFilter_Update>:

float IFX_PeakingFilter_Update(IFX_PeakingFilter *filt, float in) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	ed87 0a00 	vstr	s0, [r7]

	// Shift samples
	filt->x[2] = filt->x[1];
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
	filt->x[1] = filt->x[0];
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]
	filt->x[0] = in;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	605a      	str	r2, [r3, #4]

	filt->y[2] = filt->y[1];
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	619a      	str	r2, [r3, #24]
	filt->y[1] = filt->y[0];
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	615a      	str	r2, [r3, #20]

	// Compute new filter output
	filt->y[0] = (filt->a[0] * filt->x[0] + filt->a[1] * filt->x[1] + filt->a[2] * filt->x[2]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	ed93 7a07 	vldr	s14, [r3, #28]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	edd3 6a08 	vldr	s13, [r3, #32]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dde:	ee37 7a27 	vadd.f32	s14, s14, s15
			+    (filt->b[1] * filt->y[1] + filt->b[2] * filt->y[2])) * filt->b[0];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000e10:	ee67 7a27 	vmul.f32	s15, s14, s15
	filt->y[0] = (filt->a[0] * filt->x[0] + filt->a[1] * filt->x[1] + filt->a[2] * filt->x[2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	edc3 7a04 	vstr	s15, [r3, #16]

	// Return current output sample
	return(filt->y[0]);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	ee07 3a90 	vmov	s15, r3

}
 8000e22:	eeb0 0a67 	vmov.f32	s0, s15
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e36:	f000 fe55 	bl	8001ae4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e3a:	4b9b      	ldr	r3, [pc, #620]	; (80010a8 <main+0x278>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d11b      	bne.n	8000e7e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e46:	f3bf 8f4f 	dsb	sy
}
 8000e4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e4c:	f3bf 8f6f 	isb	sy
}
 8000e50:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e52:	4b95      	ldr	r3, [pc, #596]	; (80010a8 <main+0x278>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5a:	f3bf 8f4f 	dsb	sy
}
 8000e5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e60:	f3bf 8f6f 	isb	sy
}
 8000e64:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e66:	4b90      	ldr	r3, [pc, #576]	; (80010a8 <main+0x278>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a8f      	ldr	r2, [pc, #572]	; (80010a8 <main+0x278>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e72:	f3bf 8f4f 	dsb	sy
}
 8000e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e78:	f3bf 8f6f 	isb	sy
}
 8000e7c:	e000      	b.n	8000e80 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e7e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e80:	4b89      	ldr	r3, [pc, #548]	; (80010a8 <main+0x278>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d138      	bne.n	8000efe <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e8c:	4b86      	ldr	r3, [pc, #536]	; (80010a8 <main+0x278>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e94:	f3bf 8f4f 	dsb	sy
}
 8000e98:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e9a:	4b83      	ldr	r3, [pc, #524]	; (80010a8 <main+0x278>)
 8000e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ea0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	0b5b      	lsrs	r3, r3, #13
 8000ea6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000eaa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	015a      	lsls	r2, r3, #5
 8000eba:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000ebe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ec4:	4978      	ldr	r1, [pc, #480]	; (80010a8 <main+0x278>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1ef      	bne.n	8000eb6 <main+0x86>
    } while(sets-- != 0U);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	60fa      	str	r2, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1e5      	bne.n	8000eac <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee0:	f3bf 8f4f 	dsb	sy
}
 8000ee4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ee6:	4b70      	ldr	r3, [pc, #448]	; (80010a8 <main+0x278>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a6f      	ldr	r2, [pc, #444]	; (80010a8 <main+0x278>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef2:	f3bf 8f4f 	dsb	sy
}
 8000ef6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef8:	f3bf 8f6f 	isb	sy
}
 8000efc:	e000      	b.n	8000f00 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000efe:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	  /* Wait until CPU2 boots and enters in stop mode or timeout*/
	  timeout = 0xFFFF;
 8000f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f04:	617b      	str	r3, [r7, #20]
	  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000f06:	bf00      	nop
 8000f08:	4b68      	ldr	r3, [pc, #416]	; (80010ac <main+0x27c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <main+0xee>
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	617a      	str	r2, [r7, #20]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	dcf4      	bgt.n	8000f08 <main+0xd8>
	  if ( timeout < 0 )
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da01      	bge.n	8000f28 <main+0xf8>
	  {
	  Error_Handler();
 8000f24:	f000 fe1e 	bl	8001b64 <Error_Handler>
	  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f001 fa84 	bl	8002434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f8f8 	bl	8001120 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f30:	f000 f976 	bl	8001220 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000f34:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <main+0x27c>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a5c      	ldr	r2, [pc, #368]	; (80010ac <main+0x27c>)
 8000f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b59      	ldr	r3, [pc, #356]	; (80010ac <main+0x27c>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f003 feb6 	bl	8004cc4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f003 fecc 	bl	8004cf8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f64:	617b      	str	r3, [r7, #20]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f66:	bf00      	nop
 8000f68:	4b50      	ldr	r3, [pc, #320]	; (80010ac <main+0x27c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <main+0x14e>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	1e5a      	subs	r2, r3, #1
 8000f78:	617a      	str	r2, [r7, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	dcf4      	bgt.n	8000f68 <main+0x138>
	if ( timeout < 0 )
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	da01      	bge.n	8000f88 <main+0x158>
	{
	Error_Handler();
 8000f84:	f000 fdee 	bl	8001b64 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f000 fad0 	bl	800152c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f8c:	f000 fa76 	bl	800147c <MX_DMA_Init>
  MX_I2S3_Init();
 8000f90:	f000 f9a8 	bl	80012e4 <MX_I2S3_Init>
  MX_USART3_UART_Init();
 8000f94:	f000 fa26 	bl	80013e4 <MX_USART3_UART_Init>
  MX_I2S1_Init();
 8000f98:	f000 f972 	bl	8001280 <MX_I2S1_Init>
  MX_USART2_UART_Init();
 8000f9c:	f000 f9d6 	bl	800134c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	  memset(dacData, 0, sizeof(dacData));
 8000fa0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4842      	ldr	r0, [pc, #264]	; (80010b0 <main+0x280>)
 8000fa8:	f00d f872 	bl	800e090 <memset>

	  IFX_PeakingFilter_Init(&filt1, SAMPLE_RATE_HZ);
 8000fac:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80010b4 <main+0x284>
 8000fb0:	4841      	ldr	r0, [pc, #260]	; (80010b8 <main+0x288>)
 8000fb2:	f7ff fdf9 	bl	8000ba8 <IFX_PeakingFilter_Init>
	  IFX_PeakingFilter_Init(&filt2, SAMPLE_RATE_HZ);
 8000fb6:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80010b4 <main+0x284>
 8000fba:	4840      	ldr	r0, [pc, #256]	; (80010bc <main+0x28c>)
 8000fbc:	f7ff fdf4 	bl	8000ba8 <IFX_PeakingFilter_Init>
	  IFX_PeakingFilter_Init(&filt3, SAMPLE_RATE_HZ);
 8000fc0:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80010b4 <main+0x284>
 8000fc4:	483e      	ldr	r0, [pc, #248]	; (80010c0 <main+0x290>)
 8000fc6:	f7ff fdef 	bl	8000ba8 <IFX_PeakingFilter_Init>
	  //  IFX_PeakingFilter_Init(&filt4, SAMPLE_RATE_HZ);
	  //  IFX_PeakingFilter_Init(&filt5, SAMPLE_RATE_HZ);

	  UART_Printf("Readyy!\r\n");
 8000fca:	483e      	ldr	r0, [pc, #248]	; (80010c4 <main+0x294>)
 8000fcc:	f000 fae6 	bl	800159c <UART_Printf>

	  IFX_PeakingFilter_SetParameters(&filt1, 53.0f, 1.8f, 5.0f);
 8000fd0:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8000fd4:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80010c8 <main+0x298>
 8000fd8:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80010cc <main+0x29c>
 8000fdc:	4836      	ldr	r0, [pc, #216]	; (80010b8 <main+0x288>)
 8000fde:	f7ff fe1b 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
	  IFX_PeakingFilter_SetParameters(&filt2, 1.0f, 1.0f, 1.0f);
 8000fe2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000fe6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000fea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fee:	4833      	ldr	r0, [pc, #204]	; (80010bc <main+0x28c>)
 8000ff0:	f7ff fe12 	bl	8000c18 <IFX_PeakingFilter_SetParameters>
	  IFX_PeakingFilter_SetParameters(&filt3, 1.0f, 1.0f, 1.0f);
 8000ff4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000ff8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ffc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001000:	482f      	ldr	r0, [pc, #188]	; (80010c0 <main+0x290>)
 8001002:	f7ff fe09 	bl	8000c18 <IFX_PeakingFilter_SetParameters>

	  if (HAL_I2SEx_TransmitReceive_DMA(&hi2s3, (uint16_t *) dacData, (uint16_t *) adcData, BUFFER_SIZE) != HAL_OK) {
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <main+0x2a0>)
 800100a:	4929      	ldr	r1, [pc, #164]	; (80010b0 <main+0x280>)
 800100c:	4831      	ldr	r0, [pc, #196]	; (80010d4 <main+0x2a4>)
 800100e:	f003 ffa9 	bl	8004f64 <HAL_I2SEx_TransmitReceive_DMA>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <main+0x1f2>
		UART_Printf("I2S Full-Duplex DMA initialization failed\n");
 8001018:	482f      	ldr	r0, [pc, #188]	; (80010d8 <main+0x2a8>)
 800101a:	f000 fabf 	bl	800159c <UART_Printf>
		Error_Handler();
 800101e:	f000 fda1 	bl	8001b64 <Error_Handler>
	  }

	  if (HAL_UART_Receive_DMA(&huart2, uartData, sizeof(uartData)) != HAL_OK) {
 8001022:	2241      	movs	r2, #65	; 0x41
 8001024:	492d      	ldr	r1, [pc, #180]	; (80010dc <main+0x2ac>)
 8001026:	482e      	ldr	r0, [pc, #184]	; (80010e0 <main+0x2b0>)
 8001028:	f008 fa12 	bl	8009450 <HAL_UART_Receive_DMA>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <main+0x20c>
		UART_Printf("UART DMA Receive initialization failed\n");
 8001032:	482c      	ldr	r0, [pc, #176]	; (80010e4 <main+0x2b4>)
 8001034:	f000 fab2 	bl	800159c <UART_Printf>
		Error_Handler();
 8001038:	f000 fd94 	bl	8001b64 <Error_Handler>
//	  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800103c:	f009 fd1e 	bl	800aa7c <osKernelInitialize>
	  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of i2sHalfFull */
  i2sHalfFullHandle = osSemaphoreNew(1, 1, &i2sHalfFull_attributes);
 8001040:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <main+0x2b8>)
 8001042:	2101      	movs	r1, #1
 8001044:	2001      	movs	r0, #1
 8001046:	f009 fe15 	bl	800ac74 <osSemaphoreNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <main+0x2bc>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of i2sFull */
  i2sFullHandle = osSemaphoreNew(1, 1, &i2sFull_attributes);
 8001050:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <main+0x2c0>)
 8001052:	2101      	movs	r1, #1
 8001054:	2001      	movs	r0, #1
 8001056:	f009 fe0d 	bl	800ac74 <osSemaphoreNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a25      	ldr	r2, [pc, #148]	; (80010f4 <main+0x2c4>)
 800105e:	6013      	str	r3, [r2, #0]

  /* creation of uartFull */
  uartFullHandle = osSemaphoreNew(1, 1, &uartFull_attributes);
 8001060:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <main+0x2c8>)
 8001062:	2101      	movs	r1, #1
 8001064:	2001      	movs	r0, #1
 8001066:	f009 fe05 	bl	800ac74 <osSemaphoreNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a23      	ldr	r2, [pc, #140]	; (80010fc <main+0x2cc>)
 800106e:	6013      	str	r3, [r2, #0]
	  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uartQueue_attributes);
 8001070:	4a23      	ldr	r2, [pc, #140]	; (8001100 <main+0x2d0>)
 8001072:	2102      	movs	r1, #2
 8001074:	2010      	movs	r0, #16
 8001076:	f009 ff1d 	bl	800aeb4 <osMessageQueueNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <main+0x2d4>)
 800107e:	6013      	str	r3, [r2, #0]
	  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of filterTask */
  filterTaskHandle = osThreadNew(setFilterTask, NULL, &filterTask_attributes);
 8001080:	4a21      	ldr	r2, [pc, #132]	; (8001108 <main+0x2d8>)
 8001082:	2100      	movs	r1, #0
 8001084:	4821      	ldr	r0, [pc, #132]	; (800110c <main+0x2dc>)
 8001086:	f009 fd43 	bl	800ab10 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <main+0x2e0>)
 800108e:	6013      	str	r3, [r2, #0]

  /* creation of processData */
  processDataHandle = osThreadNew(processDataTask, NULL, &processData_attributes);
 8001090:	4a20      	ldr	r2, [pc, #128]	; (8001114 <main+0x2e4>)
 8001092:	2100      	movs	r1, #0
 8001094:	4820      	ldr	r0, [pc, #128]	; (8001118 <main+0x2e8>)
 8001096:	f009 fd3b 	bl	800ab10 <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <main+0x2ec>)
 800109e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010a0:	f009 fd10 	bl	800aac4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x274>
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	58024400 	.word	0x58024400
 80010b0:	30012000 	.word	0x30012000
 80010b4:	473b8000 	.word	0x473b8000
 80010b8:	240006d0 	.word	0x240006d0
 80010bc:	24000704 	.word	0x24000704
 80010c0:	24000738 	.word	0x24000738
 80010c4:	08013f6c 	.word	0x08013f6c
 80010c8:	3fe66666 	.word	0x3fe66666
 80010cc:	42540000 	.word	0x42540000
 80010d0:	30010000 	.word	0x30010000
 80010d4:	24000264 	.word	0x24000264
 80010d8:	08013f78 	.word	0x08013f78
 80010dc:	30018000 	.word	0x30018000
 80010e0:	240003a8 	.word	0x240003a8
 80010e4:	08013fa4 	.word	0x08013fa4
 80010e8:	080140d4 	.word	0x080140d4
 80010ec:	240006bc 	.word	0x240006bc
 80010f0:	080140e4 	.word	0x080140e4
 80010f4:	240006c0 	.word	0x240006c0
 80010f8:	080140f4 	.word	0x080140f4
 80010fc:	240006c4 	.word	0x240006c4
 8001100:	080140bc 	.word	0x080140bc
 8001104:	240006b8 	.word	0x240006b8
 8001108:	08014074 	.word	0x08014074
 800110c:	08001a95 	.word	0x08001a95
 8001110:	240006b0 	.word	0x240006b0
 8001114:	08014098 	.word	0x08014098
 8001118:	08001aa5 	.word	0x08001aa5
 800111c:	240006b4 	.word	0x240006b4

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b09c      	sub	sp, #112	; 0x70
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	224c      	movs	r2, #76	; 0x4c
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f00c ffae 	bl	800e090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2220      	movs	r2, #32
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f00c ffa8 	bl	800e090 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001140:	2004      	movs	r0, #4
 8001142:	f004 f859 	bl	80051f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <SystemClock_Config+0xf8>)
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <SystemClock_Config+0xf8>)
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <SystemClock_Config+0xf8>)
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	4b2e      	ldr	r3, [pc, #184]	; (800121c <SystemClock_Config+0xfc>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a2d      	ldr	r2, [pc, #180]	; (800121c <SystemClock_Config+0xfc>)
 8001166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <SystemClock_Config+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001178:	bf00      	nop
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <SystemClock_Config+0xfc>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001186:	d1f8      	bne.n	800117a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8001188:	2311      	movs	r3, #17
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800118c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001196:	2320      	movs	r3, #32
 8001198:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	2302      	movs	r3, #2
 80011a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a2:	2310      	movs	r3, #16
 80011a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 500;
 80011a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011bc:	2300      	movs	r3, #0
 80011be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f86f 	bl	80052ac <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80011d4:	f000 fcc6 	bl	8001b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	233f      	movs	r3, #63	; 0x3f
 80011da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011dc:	2303      	movs	r3, #3
 80011de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011e4:	2308      	movs	r3, #8
 80011e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011ec:	2340      	movs	r3, #64	; 0x40
 80011ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2102      	movs	r1, #2
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fcae 	bl	8005b60 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800120a:	f000 fcab 	bl	8001b64 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3770      	adds	r7, #112	; 0x70
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58000400 	.word	0x58000400
 800121c:	58024800 	.word	0x58024800

08001220 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0b0      	sub	sp, #192	; 0xc0
 8001224:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	22c0      	movs	r2, #192	; 0xc0
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f00c ff2f 	bl	800e090 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1;
 8001232:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 16;
 800123e:	2310      	movs	r3, #16
 8001240:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001246:	2308      	movs	r3, #8
 8001248:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 800124a:	2308      	movs	r3, #8
 800124c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4618      	mov	r0, r3
 8001268:	f005 f848 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001272:	f000 fc77 	bl	8001b64 <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	37c0      	adds	r7, #192	; 0xc0
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_I2S1_Init+0x5c>)
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <MX_I2S1_Init+0x60>)
 8001288:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_SLAVE_RX;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_I2S1_Init+0x5c>)
 800128c:	2202      	movs	r2, #2
 800128e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2S1_Init+0x5c>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2S1_Init+0x5c>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2S1_Init+0x5c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_I2S1_Init+0x5c>)
 80012a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80012a8:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_I2S1_Init+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_I2S1_Init+0x5c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_I2S1_Init+0x5c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_I2S1_Init+0x5c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_I2S1_Init+0x5c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_I2S1_Init+0x5c>)
 80012ca:	f003 fd29 	bl	8004d20 <HAL_I2S_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2S1_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 fc46 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	24000210 	.word	0x24000210
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_I2S3_Init+0x60>)
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <MX_I2S3_Init+0x64>)
 80012ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_I2S3_Init+0x60>)
 80012f0:	220a      	movs	r2, #10
 80012f2:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_I2S3_Init+0x60>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2S3_Init+0x60>)
 80012fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001300:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_I2S3_Init+0x60>)
 8001304:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001308:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_I2S3_Init+0x60>)
 800130c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001310:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_I2S3_Init+0x60>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_I2S3_Init+0x60>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_I2S3_Init+0x60>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_I2S3_Init+0x60>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_I2S3_Init+0x60>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_I2S3_Init+0x60>)
 8001332:	f003 fcf5 	bl	8004d20 <HAL_I2S_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2S3_Init+0x5c>
  {
    Error_Handler();
 800133c:	f000 fc12 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	24000264 	.word	0x24000264
 8001348:	40003c00 	.word	0x40003c00

0800134c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <MX_USART2_UART_Init+0x94>)
 8001354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_USART2_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_USART2_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_USART2_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001394:	4811      	ldr	r0, [pc, #68]	; (80013dc <MX_USART2_UART_Init+0x90>)
 8001396:	f007 ff7d 	bl	8009294 <HAL_UART_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013a0:	f000 fbe0 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_USART2_UART_Init+0x90>)
 80013a8:	f009 fa5a 	bl	800a860 <HAL_UARTEx_SetTxFifoThreshold>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f000 fbd7 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <MX_USART2_UART_Init+0x90>)
 80013ba:	f009 fa8f 	bl	800a8dc <HAL_UARTEx_SetRxFifoThreshold>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 fbce 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_USART2_UART_Init+0x90>)
 80013ca:	f009 fa10 	bl	800a7ee <HAL_UARTEx_DisableFifoMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013d4:	f000 fbc6 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	240003a8 	.word	0x240003a8
 80013e0:	40004400 	.word	0x40004400

080013e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <MX_USART3_UART_Init+0x90>)
 80013ea:	4a23      	ldr	r2, [pc, #140]	; (8001478 <MX_USART3_UART_Init+0x94>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MX_USART3_UART_Init+0x90>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_USART3_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MX_USART3_UART_Init+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_USART3_UART_Init+0x90>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_USART3_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800142c:	4811      	ldr	r0, [pc, #68]	; (8001474 <MX_USART3_UART_Init+0x90>)
 800142e:	f007 ff31 	bl	8009294 <HAL_UART_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001438:	f000 fb94 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143c:	2100      	movs	r1, #0
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001440:	f009 fa0e 	bl	800a860 <HAL_UARTEx_SetTxFifoThreshold>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800144a:	f000 fb8b 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4808      	ldr	r0, [pc, #32]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001452:	f009 fa43 	bl	800a8dc <HAL_UARTEx_SetRxFifoThreshold>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800145c:	f000 fb82 	bl	8001b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_USART3_UART_Init+0x90>)
 8001462:	f009 f9c4 	bl	800a7ee <HAL_UARTEx_DisableFifoMode>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800146c:	f000 fb7a 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2400043c 	.word	0x2400043c
 8001478:	40004800 	.word	0x40004800

0800147c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_DMA_Init+0xac>)
 8001484:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <MX_DMA_Init+0xac>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_DMA_Init+0xac>)
 8001494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_DMA_Init+0xac>)
 80014a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <MX_DMA_Init+0xac>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_DMA_Init+0xac>)
 80014b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	200b      	movs	r0, #11
 80014c4:	f001 f8d6 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014c8:	200b      	movs	r0, #11
 80014ca:	f001 f8ed 	bl	80026a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2105      	movs	r1, #5
 80014d2:	200c      	movs	r0, #12
 80014d4:	f001 f8ce 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014d8:	200c      	movs	r0, #12
 80014da:	f001 f8e5 	bl	80026a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2105      	movs	r1, #5
 80014e2:	200f      	movs	r0, #15
 80014e4:	f001 f8c6 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014e8:	200f      	movs	r0, #15
 80014ea:	f001 f8dd 	bl	80026a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	2010      	movs	r0, #16
 80014f4:	f001 f8be 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014f8:	2010      	movs	r0, #16
 80014fa:	f001 f8d5 	bl	80026a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2045      	movs	r0, #69	; 0x45
 8001504:	f001 f8b6 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001508:	2045      	movs	r0, #69	; 0x45
 800150a:	f001 f8cd 	bl	80026a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2046      	movs	r0, #70	; 0x46
 8001514:	f001 f8ae 	bl	8002674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001518:	2046      	movs	r0, #70	; 0x46
 800151a:	f001 f8c5 	bl	80026a8 <HAL_NVIC_EnableIRQ>

}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	58024400 	.word	0x58024400

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_GPIO_Init+0x6c>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <MX_GPIO_Init+0x6c>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_GPIO_Init+0x6c>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_GPIO_Init+0x6c>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <MX_GPIO_Init+0x6c>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <MX_GPIO_Init+0x6c>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_GPIO_Init+0x6c>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	4a08      	ldr	r2, [pc, #32]	; (8001598 <MX_GPIO_Init+0x6c>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_GPIO_Init+0x6c>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	58024400 	.word	0x58024400

0800159c <UART_Printf>:

/* USER CODE BEGIN 4 */
	void UART_Printf(const char* fmt, ...) {
 800159c:	b40f      	push	{r0, r1, r2, r3}
 800159e:	b580      	push	{r7, lr}
 80015a0:	b0c2      	sub	sp, #264	; 0x108
 80015a2:	af00      	add	r7, sp, #0
	  char buff[256];
	  va_list args;
	  va_start(args, fmt);
 80015a4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80015a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015b0:	601a      	str	r2, [r3, #0]
	  vsnprintf(buff, sizeof(buff), fmt, args);
 80015b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80015b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ba:	f107 0008 	add.w	r0, r7, #8
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	f00e fb06 	bl	800fbd8 <vsniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe fe85 	bl	80002e0 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29a      	uxth	r2, r3
 80015da:	f107 0108 	add.w	r1, r7, #8
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <UART_Printf+0x5c>)
 80015e4:	f007 fea6 	bl	8009334 <HAL_UART_Transmit>
	  va_end(args);
	}
 80015e8:	bf00      	nop
 80015ea:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80015ee:	46bd      	mov	sp, r7
 80015f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015f4:	b004      	add	sp, #16
 80015f6:	4770      	bx	lr
 80015f8:	2400043c 	.word	0x2400043c

080015fc <HAL_UART_RxCpltCallback>:


	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0a0      	sub	sp, #128	; 0x80
 8001600:	af06      	add	r7, sp, #24
 8001602:	6078      	str	r0, [r7, #4]
		UART_Printf("callback");
 8001604:	4877      	ldr	r0, [pc, #476]	; (80017e4 <HAL_UART_RxCpltCallback+0x1e8>)
 8001606:	f7ff ffc9 	bl	800159c <UART_Printf>
		HAL_UART_Transmit(&huart3, (uint8_t*)uartData, sizeof(uartData), HAL_MAX_DELAY);
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	2241      	movs	r2, #65	; 0x41
 8001610:	4975      	ldr	r1, [pc, #468]	; (80017e8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001612:	4876      	ldr	r0, [pc, #472]	; (80017ec <HAL_UART_RxCpltCallback+0x1f0>)
 8001614:	f007 fe8e 	bl	8009334 <HAL_UART_Transmit>
		if (uartData[0] == 'f') {
 8001618:	4b73      	ldr	r3, [pc, #460]	; (80017e8 <HAL_UART_RxCpltCallback+0x1ec>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b66      	cmp	r3, #102	; 0x66
 800161e:	d175      	bne.n	800170c <HAL_UART_RxCpltCallback+0x110>
		  FilterParams newParams = {0.0f, 0.0f, 0.0f};
 8001620:	2300      	movs	r3, #0
 8001622:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	657b      	str	r3, [r7, #84]	; 0x54
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	65bb      	str	r3, [r7, #88]	; 0x58
		  uint8_t channel = 0, filter = 0, freq = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001638:	2300      	movs	r3, #0
 800163a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800163e:	2300      	movs	r3, #0
 8001640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		  sscanf(uartData, "%c,%d,%d,%d,%f,%f", NULL, &channel, &filter, &newParams.centerFrequency, &newParams.gain, &newParams.qFactor);
 8001644:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 8001648:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800164c:	3304      	adds	r3, #4
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001654:	3308      	adds	r3, #8
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	2200      	movs	r2, #0
 8001668:	4961      	ldr	r1, [pc, #388]	; (80017f0 <HAL_UART_RxCpltCallback+0x1f4>)
 800166a:	485f      	ldr	r0, [pc, #380]	; (80017e8 <HAL_UART_RxCpltCallback+0x1ec>)
 800166c:	f00d fbba 	bl	800ede4 <siscanf>
		  //sscanf(uartData, "%c,%f,%f,%f", NULL, &newParams.centerFrequency, &newParams.qFactor, &newParams.gain);

		  newParams.gain = powf(10.0f, newParams.gain / 20.0f);
 8001670:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001674:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001678:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800167c:	eef0 0a47 	vmov.f32	s1, s14
 8001680:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001684:	f011 fd24 	bl	80130d0 <powf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
 800168c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		  char printBuffer[64];
		  snprintf(printBuffer, sizeof(printBuffer), "CH: %d\n\r#F: %d\n\rCF: %d \n\rQ: %.5f \n\rGain: %.5f \n\r", channel, filter, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 8001690:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001694:	4619      	mov	r1, r3
 8001696:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800169a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800169e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016a6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80016aa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016ae:	f107 000c 	add.w	r0, r7, #12
 80016b2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80016b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80016ba:	9201      	str	r2, [sp, #4]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	460b      	mov	r3, r1
 80016c0:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_UART_RxCpltCallback+0x1f8>)
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	f00d fb3a 	bl	800ed3c <sniprintf>

		  // f, #CH, #FILTRO, FREQ, GAIN, Q

		  IFX_PeakingFilter_SetParameters(&filt1, newParams.centerFrequency, newParams.qFactor, newParams.gain);
 80016c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80016d8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80016dc:	eeb0 1a66 	vmov.f32	s2, s13
 80016e0:	eef0 0a47 	vmov.f32	s1, s14
 80016e4:	eeb0 0a67 	vmov.f32	s0, s15
 80016e8:	4843      	ldr	r0, [pc, #268]	; (80017f8 <HAL_UART_RxCpltCallback+0x1fc>)
 80016ea:	f7ff fa95 	bl	8000c18 <IFX_PeakingFilter_SetParameters>

		  HAL_UART_Transmit(&huart3, (uint8_t*)printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fdf4 	bl	80002e0 <strlen>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f107 010c 	add.w	r1, r7, #12
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	4839      	ldr	r0, [pc, #228]	; (80017ec <HAL_UART_RxCpltCallback+0x1f0>)
 8001706:	f007 fe15 	bl	8009334 <HAL_UART_Transmit>
 800170a:	e061      	b.n	80017d0 <HAL_UART_RxCpltCallback+0x1d4>

		} else if (uartData[0] == 'v') {
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <HAL_UART_RxCpltCallback+0x1ec>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b76      	cmp	r3, #118	; 0x76
 8001712:	d15d      	bne.n	80017d0 <HAL_UART_RxCpltCallback+0x1d4>
		  uint8_t volume = 0, channel = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800171a:	2300      	movs	r3, #0
 800171c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		  sscanf(uartData, "%c,%d,%d", NULL, &channel, &volume);
 8001720:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001724:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	2200      	movs	r2, #0
 800172e:	4933      	ldr	r1, [pc, #204]	; (80017fc <HAL_UART_RxCpltCallback+0x200>)
 8001730:	482d      	ldr	r0, [pc, #180]	; (80017e8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001732:	f00d fb57 	bl	800ede4 <siscanf>

		  float normalizedVolume = volume / 100.0f;
 8001736:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001742:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001800 <HAL_UART_RxCpltCallback+0x204>
 8001746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		  float volumeMultiplier = powf(10.0f, (normalizedVolume - 1.0f) * 20.0f / 10.0f);
 800174e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001756:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800175a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800175e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001762:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001766:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800176a:	eef0 0a47 	vmov.f32	s1, s14
 800176e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001772:	f011 fcad 	bl	80130d0 <powf>
 8001776:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60

		  char printBuffer[64];
		  snprintf(printBuffer, sizeof(printBuffer), "CH: %d \n\rV: %d \n\r", channel, volumeMultiplier);
 800177a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800177e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001786:	f107 000c 	add.w	r0, r7, #12
 800178a:	ed8d 7b00 	vstr	d7, [sp]
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_UART_RxCpltCallback+0x208>)
 8001790:	2140      	movs	r1, #64	; 0x40
 8001792:	f00d fad3 	bl	800ed3c <sniprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fda0 	bl	80002e0 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f107 010c 	add.w	r1, r7, #12
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	480f      	ldr	r0, [pc, #60]	; (80017ec <HAL_UART_RxCpltCallback+0x1f0>)
 80017ae:	f007 fdc1 	bl	8009334 <HAL_UART_Transmit>


		  if (channel == 0) {
 80017b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d103      	bne.n	80017c2 <HAL_UART_RxCpltCallback+0x1c6>
			  vch1 = volumeMultiplier;
 80017ba:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_UART_RxCpltCallback+0x20c>)
 80017bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e006      	b.n	80017d0 <HAL_UART_RxCpltCallback+0x1d4>
		  } else if (channel == 1) {
 80017c2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_UART_RxCpltCallback+0x1d4>
			  vch2 = volumeMultiplier;
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_UART_RxCpltCallback+0x210>)
 80017cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ce:	6013      	str	r3, [r2, #0]
		  }


		}
		HAL_UART_Receive_DMA(&huart2, uartData, sizeof(uartData));
 80017d0:	2241      	movs	r2, #65	; 0x41
 80017d2:	4905      	ldr	r1, [pc, #20]	; (80017e8 <HAL_UART_RxCpltCallback+0x1ec>)
 80017d4:	480e      	ldr	r0, [pc, #56]	; (8001810 <HAL_UART_RxCpltCallback+0x214>)
 80017d6:	f007 fe3b 	bl	8009450 <HAL_UART_Receive_DMA>
	}
 80017da:	bf00      	nop
 80017dc:	3768      	adds	r7, #104	; 0x68
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	08013fcc 	.word	0x08013fcc
 80017e8:	30018000 	.word	0x30018000
 80017ec:	2400043c 	.word	0x2400043c
 80017f0:	08013fd8 	.word	0x08013fd8
 80017f4:	08013fec 	.word	0x08013fec
 80017f8:	240006d0 	.word	0x240006d0
 80017fc:	08014020 	.word	0x08014020
 8001800:	42c80000 	.word	0x42c80000
 8001804:	0801402c 	.word	0x0801402c
 8001808:	2400000c 	.word	0x2400000c
 800180c:	24000010 	.word	0x24000010
 8001810:	240003a8 	.word	0x240003a8

08001814 <HAL_I2SEx_TxRxHalfCpltCallback>:

	void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	  inBufPtr = &adcData[0];
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_I2SEx_TxRxHalfCpltCallback+0x44>)
 8001820:	601a      	str	r2, [r3, #0]
	  outBufPtr = &dacData[0];
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_I2SEx_TxRxHalfCpltCallback+0x48>)
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8001826:	601a      	str	r2, [r3, #0]
	  memcpy(uartBuffer, dacData, sizeof(dacData));
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_I2SEx_TxRxHalfCpltCallback+0x50>)
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001834:	461a      	mov	r2, r3
 8001836:	f00c fc1d 	bl	800e074 <memcpy>

	  if(osSemaphoreRelease(i2sHalfFullHandle) == osOK) {
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_I2SEx_TxRxHalfCpltCallback+0x54>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f009 faf4 	bl	800ae2c <osSemaphoreRelease>
		//UART_Printf("i2s half released..");
	  } else {
		//UART_Printf("i2s failed..");
	  }
	  dataReadyFlag = 1;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_I2SEx_TxRxHalfCpltCallback+0x58>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
	}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	240006c8 	.word	0x240006c8
 8001858:	30010000 	.word	0x30010000
 800185c:	24000008 	.word	0x24000008
 8001860:	30012000 	.word	0x30012000
 8001864:	3001a000 	.word	0x3001a000
 8001868:	240006bc 	.word	0x240006bc
 800186c:	240006cc 	.word	0x240006cc

08001870 <HAL_I2SEx_TxRxCpltCallback>:

	void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	  inBufPtr = &adcData[BUFFER_SIZE];
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 800187c:	601a      	str	r2, [r3, #0]
	  outBufPtr = &dacData[BUFFER_SIZE];
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_I2SEx_TxRxCpltCallback+0x48>)
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 8001882:	601a      	str	r2, [r3, #0]
	  memcpy(uartBuffer, dacData, sizeof(dacData));
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_I2SEx_TxRxCpltCallback+0x50>)
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_I2SEx_TxRxCpltCallback+0x54>)
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001890:	461a      	mov	r2, r3
 8001892:	f00c fbef 	bl	800e074 <memcpy>

	  if(osSemaphoreRelease(i2sHalfFullHandle) == osOK) {
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_I2SEx_TxRxCpltCallback+0x58>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f009 fac6 	bl	800ae2c <osSemaphoreRelease>
		//UART_Printf("i2s full released..");
	  } else {
		//UART_Printf("i2s failed..");
	  }
	  dataReadyFlag = 1;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_I2SEx_TxRxCpltCallback+0x5c>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
	}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	240006c8 	.word	0x240006c8
 80018b4:	30010180 	.word	0x30010180
 80018b8:	24000008 	.word	0x24000008
 80018bc:	30012180 	.word	0x30012180
 80018c0:	3001a000 	.word	0x3001a000
 80018c4:	30012000 	.word	0x30012000
 80018c8:	240006bc 	.word	0x240006bc
 80018cc:	240006cc 	.word	0x240006cc

080018d0 <processData>:

	void processData() {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	  static float leftIn, leftProcessed, leftProcessed2, leftOut;
	  static float rightIn, rightProcessed, rightProcessed2, rightOut;

	  for (uint8_t n = 0; n < (BUFFER_SIZE) - 1; n+=4) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	e0b6      	b.n	8001a4a <processData+0x17a>
		// LEFT

		//  CONVERTIR ENTRADA ADC A FLOAT
		leftIn = INT16_TO_FLOAT(inBufPtr[n]);
 80018dc:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <processData+0x190>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018f2:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001a64 <processData+0x194>
 80018f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <processData+0x198>)
 80018fc:	edc3 7a00 	vstr	s15, [r3]
		if (leftIn > 1.0f) {
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <processData+0x198>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800190a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	dd09      	ble.n	8001928 <processData+0x58>
		  leftIn -= 2.0f;
 8001914:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <processData+0x198>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800191e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001922:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <processData+0x198>)
 8001924:	edc3 7a00 	vstr	s15, [r3]
		}

		leftProcessed = IFX_PeakingFilter_Update(&filt1, leftIn);
 8001928:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <processData+0x198>)
 800192a:	edd3 7a00 	vldr	s15, [r3]
 800192e:	eeb0 0a67 	vmov.f32	s0, s15
 8001932:	484e      	ldr	r0, [pc, #312]	; (8001a6c <processData+0x19c>)
 8001934:	f7ff fa20 	bl	8000d78 <IFX_PeakingFilter_Update>
 8001938:	eef0 7a40 	vmov.f32	s15, s0
 800193c:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <processData+0x1a0>)
 800193e:	edc3 7a00 	vstr	s15, [r3]
		//leftProcessed2 = IFX_PeakingFilter_Update(&filt2, leftProcessed);

		//leftProcessed2 = IFX_PeakingFilter_Update(&filt3, leftProcessed2);

		// OUTPUT LEFT
		leftOut = leftProcessed * vch1;
 8001942:	4b4b      	ldr	r3, [pc, #300]	; (8001a70 <processData+0x1a0>)
 8001944:	ed93 7a00 	vldr	s14, [r3]
 8001948:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <processData+0x1a4>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <processData+0x1a8>)
 8001954:	edc3 7a00 	vstr	s15, [r3]

		// CONVERTIR SALIDA DAC A SIGNED INT
		outBufPtr[n] = (int16_t) (FLOAT_TO_INT16(leftOut));
 8001958:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <processData+0x1a8>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001a64 <processData+0x194>
 8001962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196a:	ee17 3a90 	vmov	r3, s15
 800196e:	b219      	sxth	r1, r3
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <processData+0x1ac>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	b28a      	uxth	r2, r1
 800197c:	801a      	strh	r2, [r3, #0]
		outBufPtr[n+1] = 0;//(int16_t) (FLOAT_TO_INT16(leftOut));
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <processData+0x1ac>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	3301      	adds	r3, #1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	2200      	movs	r2, #0
 800198c:	801a      	strh	r2, [r3, #0]
		// RIGHT

		//  CONVERTIR ENTRADA ADC A FLOAT
		rightIn = INT16_TO_FLOAT(inBufPtr[n+2]);
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <processData+0x190>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	3302      	adds	r3, #2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019a6:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001a64 <processData+0x194>
 80019aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <processData+0x1b0>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]
		if (rightIn > 1.0f) {
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <processData+0x1b0>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dd09      	ble.n	80019dc <processData+0x10c>
		  rightIn -= 2.0f;
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <processData+0x1b0>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80019d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019d6:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <processData+0x1b0>)
 80019d8:	edc3 7a00 	vstr	s15, [r3]
		}

		rightProcessed = IFX_PeakingFilter_Update(&filt1, rightIn);
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <processData+0x1b0>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eeb0 0a67 	vmov.f32	s0, s15
 80019e6:	4821      	ldr	r0, [pc, #132]	; (8001a6c <processData+0x19c>)
 80019e8:	f7ff f9c6 	bl	8000d78 <IFX_PeakingFilter_Update>
 80019ec:	eef0 7a40 	vmov.f32	s15, s0
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <processData+0x1b4>)
 80019f2:	edc3 7a00 	vstr	s15, [r3]
		//rightProcessed2 = IFX_PeakingFilter_Update(&filt2, rightProcessed);

		//rightProcessed2 = IFX_PeakingFilter_Update(&filt3, rightProcessed2);

		// OUTPUT RIGHT
		rightOut = rightProcessed * vch2;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <processData+0x1b4>)
 80019f8:	ed93 7a00 	vldr	s14, [r3]
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <processData+0x1b8>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <processData+0x1bc>)
 8001a08:	edc3 7a00 	vstr	s15, [r3]

		// CONVERTIR SALIDA DAC A SIGNED INT
		outBufPtr[n+2] = (int16_t) (FLOAT_TO_INT16(rightOut));
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <processData+0x1bc>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a64 <processData+0x194>
 8001a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1e:	ee17 3a90 	vmov	r3, s15
 8001a22:	b219      	sxth	r1, r3
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <processData+0x1ac>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	b28a      	uxth	r2, r1
 8001a32:	801a      	strh	r2, [r3, #0]
		outBufPtr[n+3] = 0;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <processData+0x1ac>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	3303      	adds	r3, #3
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	2200      	movs	r2, #0
 8001a42:	801a      	strh	r2, [r3, #0]
	  for (uint8_t n = 0; n < (BUFFER_SIZE) - 1; n+=4) {
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	3304      	adds	r3, #4
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2bbe      	cmp	r3, #190	; 0xbe
 8001a4e:	f67f af45 	bls.w	80018dc <processData+0xc>
	  }

		dataReadyFlag = 0;
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <processData+0x1c0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
	}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	240006c8 	.word	0x240006c8
 8001a64:	46fffe00 	.word	0x46fffe00
 8001a68:	2400076c 	.word	0x2400076c
 8001a6c:	240006d0 	.word	0x240006d0
 8001a70:	24000770 	.word	0x24000770
 8001a74:	2400000c 	.word	0x2400000c
 8001a78:	24000774 	.word	0x24000774
 8001a7c:	24000008 	.word	0x24000008
 8001a80:	24000778 	.word	0x24000778
 8001a84:	2400077c 	.word	0x2400077c
 8001a88:	24000010 	.word	0x24000010
 8001a8c:	24000780 	.word	0x24000780
 8001a90:	240006cc 	.word	0x240006cc

08001a94 <setFilterTask>:
	  * @param  argument: Not used
	  * @retval None
	  */
/* USER CODE END Header_setFilterTask */
void setFilterTask(void *argument)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  /* Infinite loop */
	  for(;;)
	  {

		osThreadYield();
 8001a9c:	f009 f8ca 	bl	800ac34 <osThreadYield>
 8001aa0:	e7fc      	b.n	8001a9c <setFilterTask+0x8>
	...

08001aa4 <processDataTask>:
	* @param argument: Not used
	* @retval None
	*/
/* USER CODE END Header_processDataTask */
void processDataTask(void *argument)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN processDataTask */
	  /* Infinite loop */
	  for(;;)
	  {
		if (osSemaphoreAcquire(i2sHalfFullHandle, 0) == osOK) {
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <processDataTask+0x3c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f009 f968 	bl	800ad88 <osSemaphoreAcquire>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <processDataTask+0x1e>
		  processData();
 8001abe:	f7ff ff07 	bl	80018d0 <processData>
		}

		if (osSemaphoreAcquire(i2sHalfFullHandle, 0) == osOK) {
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <processDataTask+0x3c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f009 f95d 	bl	800ad88 <osSemaphoreAcquire>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <processDataTask+0x34>
		  processData();
 8001ad4:	f7ff fefc 	bl	80018d0 <processData>

//		if (osSemaphoreAcquire(i2sFullHandle, 0) == osOK) {
//		  processData();
//		}

		osThreadYield();
 8001ad8:	f009 f8ac 	bl	800ac34 <osThreadYield>
		if (osSemaphoreAcquire(i2sHalfFullHandle, 0) == osOK) {
 8001adc:	e7e6      	b.n	8001aac <processDataTask+0x8>
 8001ade:	bf00      	nop
 8001ae0:	240006bc 	.word	0x240006bc

08001ae4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001af6:	f000 fde5 	bl	80026c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30010000;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MPU_Config+0x58>)
 8001b04:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001b06:	230f      	movs	r3, #15
 8001b08:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001b12:	2303      	movs	r3, #3
 8001b14:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b16:	2301      	movs	r3, #1
 8001b18:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b26:	463b      	mov	r3, r7
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fe03 	bl	8002734 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b2e:	2004      	movs	r0, #4
 8001b30:	f000 fde0 	bl	80026f4 <HAL_MPU_Enable>

}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	30010000 	.word	0x30010000

08001b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b52:	f000 fcab 	bl	80024ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40010000 	.word	0x40010000

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_MspInit+0x38>)
 8001b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_MspInit+0x38>)
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_MspInit+0x38>)
 8001b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	210f      	movs	r1, #15
 8001b98:	f06f 0001 	mvn.w	r0, #1
 8001b9c:	f000 fd6a 	bl	8002674 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	58024400 	.word	0x58024400

08001bac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08c      	sub	sp, #48	; 0x30
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a76      	ldr	r2, [pc, #472]	; (8001da4 <HAL_I2S_MspInit+0x1f8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12f      	bne.n	8001c2e <HAL_I2S_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd4:	4a74      	ldr	r2, [pc, #464]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001bd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bde:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b6e      	ldr	r3, [pc, #440]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	4a6d      	ldr	r2, [pc, #436]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfc:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    /**I2S1 GPIO Configuration
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PA15 (JTDI)     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8001c0a:	f248 0360 	movw	r3, #32864	; 0x8060
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4861      	ldr	r0, [pc, #388]	; (8001dac <HAL_I2S_MspInit+0x200>)
 8001c28:	f002 fe9c 	bl	8004964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c2c:	e0b5      	b.n	8001d9a <HAL_I2S_MspInit+0x1ee>
  else if(hi2s->Instance==SPI3)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a5f      	ldr	r2, [pc, #380]	; (8001db0 <HAL_I2S_MspInit+0x204>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	f040 80b0 	bne.w	8001d9a <HAL_I2S_MspInit+0x1ee>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c3a:	4b5b      	ldr	r3, [pc, #364]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c40:	4a59      	ldr	r2, [pc, #356]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c68:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	4a4a      	ldr	r2, [pc, #296]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <HAL_I2S_MspInit+0x1fc>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c94:	2310      	movs	r3, #16
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	483f      	ldr	r0, [pc, #252]	; (8001dac <HAL_I2S_MspInit+0x200>)
 8001cb0:	f002 fe58 	bl	8004964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001cb4:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4838      	ldr	r0, [pc, #224]	; (8001db4 <HAL_I2S_MspInit+0x208>)
 8001cd2:	f002 fe47 	bl	8004964 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001cd6:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001cd8:	4a38      	ldr	r2, [pc, #224]	; (8001dbc <HAL_I2S_MspInit+0x210>)
 8001cda:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001cde:	223d      	movs	r2, #61	; 0x3d
 8001ce0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce8:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cee:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cfc:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001d00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001d06:	4b2c      	ldr	r3, [pc, #176]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d0c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001d10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d14:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001d1c:	4826      	ldr	r0, [pc, #152]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001d1e:	f000 fd49 	bl	80027b4 <HAL_DMA_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_I2S_MspInit+0x180>
      Error_Handler();
 8001d28:	f7ff ff1c 	bl	8001b64 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001d30:	649a      	str	r2, [r3, #72]	; 0x48
 8001d32:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <HAL_I2S_MspInit+0x20c>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream1;
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d3a:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_I2S_MspInit+0x218>)
 8001d3c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d40:	223e      	movs	r2, #62	; 0x3e
 8001d42:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d46:	2240      	movs	r2, #64	; 0x40
 8001d48:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d56:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d5e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d66:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d76:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001d7e:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d80:	f000 fd18 	bl	80027b4 <HAL_DMA_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2S_MspInit+0x1e2>
      Error_Handler();
 8001d8a:	f7ff feeb 	bl	8001b64 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_I2S_MspInit+0x214>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d9a:	bf00      	nop
 8001d9c:	3730      	adds	r7, #48	; 0x30
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40013000 	.word	0x40013000
 8001da8:	58024400 	.word	0x58024400
 8001dac:	58020000 	.word	0x58020000
 8001db0:	40003c00 	.word	0x40003c00
 8001db4:	58020800 	.word	0x58020800
 8001db8:	240002b8 	.word	0x240002b8
 8001dbc:	40020010 	.word	0x40020010
 8001dc0:	24000330 	.word	0x24000330
 8001dc4:	40020028 	.word	0x40020028

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0bc      	sub	sp, #240	; 0xf0
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	22c0      	movs	r2, #192	; 0xc0
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f00c f951 	bl	800e090 <memset>
  if(huart->Instance==USART2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4aac      	ldr	r2, [pc, #688]	; (80020a4 <HAL_UART_MspInit+0x2dc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	f040 80a6 	bne.w	8001f46 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dfa:	f04f 0202 	mov.w	r2, #2
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 8001e06:	2304      	movs	r3, #4
 8001e08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0c:	f107 0318 	add.w	r3, r7, #24
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 fa73 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001e1c:	f7ff fea2 	bl	8001b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e20:	4ba1      	ldr	r3, [pc, #644]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e26:	4aa0      	ldr	r2, [pc, #640]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e30:	4b9d      	ldr	r3, [pc, #628]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001e32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b9a      	ldr	r3, [pc, #616]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e44:	4a98      	ldr	r2, [pc, #608]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4e:	4b96      	ldr	r3, [pc, #600]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e74:	2307      	movs	r3, #7
 8001e76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e7e:	4619      	mov	r1, r3
 8001e80:	488a      	ldr	r0, [pc, #552]	; (80020ac <HAL_UART_MspInit+0x2e4>)
 8001e82:	f002 fd6f 	bl	8004964 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream6;
 8001e86:	4b8a      	ldr	r3, [pc, #552]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001e88:	4a8a      	ldr	r2, [pc, #552]	; (80020b4 <HAL_UART_MspInit+0x2ec>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e8c:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001e8e:	222b      	movs	r2, #43	; 0x2b
 8001e90:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e92:	4b87      	ldr	r3, [pc, #540]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e98:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9e:	4b84      	ldr	r3, [pc, #528]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eac:	4b80      	ldr	r3, [pc, #512]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eba:	4b7d      	ldr	r3, [pc, #500]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001ebc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ec0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ec8:	4879      	ldr	r0, [pc, #484]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001eca:	f000 fc73 	bl	80027b4 <HAL_DMA_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001ed4:	f7ff fe46 	bl	8001b64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ee0:	4a73      	ldr	r2, [pc, #460]	; (80020b0 <HAL_UART_MspInit+0x2e8>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream7;
 8001ee6:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001ee8:	4a74      	ldr	r2, [pc, #464]	; (80020bc <HAL_UART_MspInit+0x2f4>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001eec:	4b72      	ldr	r3, [pc, #456]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001eee:	222c      	movs	r2, #44	; 0x2c
 8001ef0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ef2:	4b71      	ldr	r3, [pc, #452]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001efe:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f04:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f06:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001f12:	4b69      	ldr	r3, [pc, #420]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f18:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f20:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f22:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f28:	4863      	ldr	r0, [pc, #396]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f2a:	f000 fc43 	bl	80027b4 <HAL_DMA_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8001f34:	f7ff fe16 	bl	8001b64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f3c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	; (80020b8 <HAL_UART_MspInit+0x2f0>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f44:	e0aa      	b.n	800209c <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a5d      	ldr	r2, [pc, #372]	; (80020c0 <HAL_UART_MspInit+0x2f8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f040 80a5 	bne.w	800209c <HAL_UART_MspInit+0x2d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f52:	f04f 0202 	mov.w	r2, #2
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f9c7 	bl	80062fc <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8001f74:	f7ff fdf6 	bl	8001b64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f7e:	4a4a      	ldr	r2, [pc, #296]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f96:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9c:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_UART_MspInit+0x2e0>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fd8:	4619      	mov	r1, r3
 8001fda:	483a      	ldr	r0, [pc, #232]	; (80020c4 <HAL_UART_MspInit+0x2fc>)
 8001fdc:	f002 fcc2 	bl	8004964 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8001fe2:	4a3a      	ldr	r2, [pc, #232]	; (80020cc <HAL_UART_MspInit+0x304>)
 8001fe4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001fe6:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8001fe8:	222d      	movs	r2, #45	; 0x2d
 8001fea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8001ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_UART_MspInit+0x300>)
 800200e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002012:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8002016:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800201a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_UART_MspInit+0x300>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002022:	4829      	ldr	r0, [pc, #164]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8002024:	f000 fbc6 	bl	80027b4 <HAL_DMA_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 800202e:	f7ff fd99 	bl	8001b64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <HAL_UART_MspInit+0x300>)
 8002036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800203a:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <HAL_UART_MspInit+0x300>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002042:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <HAL_UART_MspInit+0x30c>)
 8002044:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002048:	222e      	movs	r2, #46	; 0x2e
 800204a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_UART_MspInit+0x308>)
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_UART_MspInit+0x308>)
 800205a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800205e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_UART_MspInit+0x308>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002074:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002078:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_UART_MspInit+0x308>)
 800207c:	2200      	movs	r2, #0
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002080:	4813      	ldr	r0, [pc, #76]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002082:	f000 fb97 	bl	80027b4 <HAL_DMA_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 800208c:	f7ff fd6a 	bl	8001b64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002094:	67da      	str	r2, [r3, #124]	; 0x7c
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_UART_MspInit+0x308>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800209c:	bf00      	nop
 800209e:	37f0      	adds	r7, #240	; 0xf0
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40004400 	.word	0x40004400
 80020a8:	58024400 	.word	0x58024400
 80020ac:	58020000 	.word	0x58020000
 80020b0:	240004d0 	.word	0x240004d0
 80020b4:	400204a0 	.word	0x400204a0
 80020b8:	24000548 	.word	0x24000548
 80020bc:	400204b8 	.word	0x400204b8
 80020c0:	40004800 	.word	0x40004800
 80020c4:	58020c00 	.word	0x58020c00
 80020c8:	240005c0 	.word	0x240005c0
 80020cc:	40020088 	.word	0x40020088
 80020d0:	24000638 	.word	0x24000638
 80020d4:	40020070 	.word	0x40020070

080020d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	d844      	bhi.n	8002170 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80020e6:	2200      	movs	r2, #0
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	2019      	movs	r0, #25
 80020ec:	f000 fac2 	bl	8002674 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020f0:	2019      	movs	r0, #25
 80020f2:	f000 fad9 	bl	80026a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80020f6:	4a24      	ldr	r2, [pc, #144]	; (8002188 <HAL_InitTick+0xb0>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_InitTick+0xb4>)
 80020fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <HAL_InitTick+0xb4>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_InitTick+0xb4>)
 800210e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800211a:	f107 020c 	add.w	r2, r7, #12
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f004 f8a7 	bl	8006278 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800212a:	f004 f88f 	bl	800624c <HAL_RCC_GetPCLK2Freq>
 800212e:	4603      	mov	r3, r0
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	4a16      	ldr	r2, [pc, #88]	; (8002190 <HAL_InitTick+0xb8>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	3b01      	subs	r3, #1
 8002140:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002142:	4b14      	ldr	r3, [pc, #80]	; (8002194 <HAL_InitTick+0xbc>)
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_InitTick+0xc0>)
 8002146:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_InitTick+0xbc>)
 800214a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800214e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002150:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_InitTick+0xbc>)
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_InitTick+0xbc>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_InitTick+0xbc>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <HAL_InitTick+0xbc>)
 8002164:	f006 fdc8 	bl	8008cf8 <HAL_TIM_Base_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d107      	bne.n	800217e <HAL_InitTick+0xa6>
 800216e:	e001      	b.n	8002174 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e005      	b.n	8002180 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002174:	4807      	ldr	r0, [pc, #28]	; (8002194 <HAL_InitTick+0xbc>)
 8002176:	f006 fe21 	bl	8008dbc <HAL_TIM_Base_Start_IT>
 800217a:	4603      	mov	r3, r0
 800217c:	e000      	b.n	8002180 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3738      	adds	r7, #56	; 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	24000014 	.word	0x24000014
 800218c:	58024400 	.word	0x58024400
 8002190:	431bde83 	.word	0x431bde83
 8002194:	24000784 	.word	0x24000784
 8002198:	40010000 	.word	0x40010000

0800219c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <NMI_Handler+0x4>

080021a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <HardFault_Handler+0x4>

080021a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <MemManage_Handler+0x4>

080021ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <BusFault_Handler+0x4>

080021b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <UsageFault_Handler+0x4>

080021ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <DMA1_Stream0_IRQHandler+0x10>)
 80021ce:	f001 f8b7 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	240002b8 	.word	0x240002b8

080021dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <DMA1_Stream1_IRQHandler+0x10>)
 80021e2:	f001 f8ad 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	24000330 	.word	0x24000330

080021f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <DMA1_Stream4_IRQHandler+0x10>)
 80021f6:	f001 f8a3 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	24000638 	.word	0x24000638

08002204 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <DMA1_Stream5_IRQHandler+0x10>)
 800220a:	f001 f899 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	240005c0 	.word	0x240005c0

08002218 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <TIM1_UP_IRQHandler+0x10>)
 800221e:	f006 fe45 	bl	8008eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	24000784 	.word	0x24000784

0800222c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <DMA2_Stream6_IRQHandler+0x10>)
 8002232:	f001 f885 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	240004d0 	.word	0x240004d0

08002240 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA2_Stream7_IRQHandler+0x10>)
 8002246:	f001 f87b 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	24000548 	.word	0x24000548

08002254 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return 1;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_kill>:

int _kill(int pid, int sig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800226e:	f00b fed7 	bl	800e020 <__errno>
 8002272:	4603      	mov	r3, r0
 8002274:	2216      	movs	r2, #22
 8002276:	601a      	str	r2, [r3, #0]
  return -1;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <_exit>:

void _exit (int status)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffe7 	bl	8002264 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002296:	e7fe      	b.n	8002296 <_exit+0x12>

08002298 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e00a      	b.n	80022c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022aa:	f3af 8000 	nop.w
 80022ae:	4601      	mov	r1, r0
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	b2ca      	uxtb	r2, r1
 80022b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dbf0      	blt.n	80022aa <_read+0x12>
  }

  return len;
 80022c8:	687b      	ldr	r3, [r7, #4]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e009      	b.n	80022f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	60ba      	str	r2, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbf1      	blt.n	80022e4 <_write+0x12>
  }
  return len;
 8002300:	687b      	ldr	r3, [r7, #4]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <_close>:

int _close(int file)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002332:	605a      	str	r2, [r3, #4]
  return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_isatty>:

int _isatty(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <_sbrk+0x5c>)
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <_sbrk+0x60>)
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <_sbrk+0x64>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <_sbrk+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d207      	bcs.n	80023b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a4:	f00b fe3c 	bl	800e020 <__errno>
 80023a8:	4603      	mov	r3, r0
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e009      	b.n	80023c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <_sbrk+0x64>)
 80023c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	24080000 	.word	0x24080000
 80023d4:	00000400 	.word	0x00000400
 80023d8:	240007d0 	.word	0x240007d0
 80023dc:	24005138 	.word	0x24005138

080023e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002418 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023e4:	f7fe fb4a 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ea:	490d      	ldr	r1, [pc, #52]	; (8002420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002400:	4c0a      	ldr	r4, [pc, #40]	; (800242c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800240e:	f00b fe0d 	bl	800e02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002412:	f7fe fd0d 	bl	8000e30 <main>
  bx  lr
 8002416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002418:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800241c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002420:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8002424:	08014c40 	.word	0x08014c40
  ldr r2, =_sbss
 8002428:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 800242c:	24005138 	.word	0x24005138

08002430 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC3_IRQHandler>
	...

08002434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243a:	2003      	movs	r0, #3
 800243c:	f000 f90f 	bl	800265e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002440:	f003 fd44 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_Init+0x68>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	4913      	ldr	r1, [pc, #76]	; (80024a0 <HAL_Init+0x6c>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_Init+0x68>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <HAL_Init+0x6c>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
 8002474:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <HAL_Init+0x70>)
 8002476:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002478:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_Init+0x74>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247e:	200f      	movs	r0, #15
 8002480:	f7ff fe2a 	bl	80020d8 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e002      	b.n	8002494 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800248e:	f7ff fb6f 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	58024400 	.word	0x58024400
 80024a0:	08014064 	.word	0x08014064
 80024a4:	24000004 	.word	0x24000004
 80024a8:	24000000 	.word	0x24000000

080024ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	24000018 	.word	0x24000018
 80024d0:	240007d4 	.word	0x240007d4

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	240007d4 	.word	0x240007d4

080024ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetREVID+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0c1b      	lsrs	r3, r3, #16
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	5c001000 	.word	0x5c001000

08002504 <__NVIC_SetPriorityGrouping>:
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <__NVIC_SetPriorityGrouping+0x40>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 800252e:	4313      	orrs	r3, r2
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <__NVIC_SetPriorityGrouping+0x40>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	05fa0000 	.word	0x05fa0000

0800254c <__NVIC_GetPriorityGrouping>:
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff4c 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002682:	f7ff ff63 	bl	800254c <__NVIC_GetPriorityGrouping>
 8002686:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	6978      	ldr	r0, [r7, #20]
 800268e:	f7ff ffb3 	bl	80025f8 <NVIC_EncodePriority>
 8002692:	4602      	mov	r2, r0
 8002694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff82 	bl	80025a4 <__NVIC_SetPriority>
}
 80026a0:	bf00      	nop
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff56 	bl	8002568 <__NVIC_EnableIRQ>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80026c8:	f3bf 8f5f 	dmb	sy
}
 80026cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_MPU_Disable+0x28>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	4a06      	ldr	r2, [pc, #24]	; (80026ec <HAL_MPU_Disable+0x28>)
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_MPU_Disable+0x2c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	605a      	str	r2, [r3, #4]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00
 80026f0:	e000ed90 	.word	0xe000ed90

080026f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_MPU_Enable+0x38>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_MPU_Enable+0x3c>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4a09      	ldr	r2, [pc, #36]	; (8002730 <HAL_MPU_Enable+0x3c>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002712:	f3bf 8f4f 	dsb	sy
}
 8002716:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002718:	f3bf 8f6f 	isb	sy
}
 800271c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed90 	.word	0xe000ed90
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	785a      	ldrb	r2, [r3, #1]
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002742:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_MPU_ConfigRegion+0x7c>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_MPU_ConfigRegion+0x7c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7b1b      	ldrb	r3, [r3, #12]
 800275c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7adb      	ldrb	r3, [r3, #11]
 8002762:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7a9b      	ldrb	r3, [r3, #10]
 800276a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800276c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7b5b      	ldrb	r3, [r3, #13]
 8002772:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7b9b      	ldrb	r3, [r3, #14]
 800277a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800277c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7bdb      	ldrb	r3, [r3, #15]
 8002782:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002784:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7a5b      	ldrb	r3, [r3, #9]
 800278a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800278c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7a1b      	ldrb	r3, [r3, #8]
 8002792:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002794:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	7812      	ldrb	r2, [r2, #0]
 800279a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800279e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027a0:	6113      	str	r3, [r2, #16]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed90 	.word	0xe000ed90

080027b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fe8a 	bl	80024d4 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e316      	b.n	8002dfa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a66      	ldr	r2, [pc, #408]	; (800296c <HAL_DMA_Init+0x1b8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04a      	beq.n	800286c <HAL_DMA_Init+0xb8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a65      	ldr	r2, [pc, #404]	; (8002970 <HAL_DMA_Init+0x1bc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d045      	beq.n	800286c <HAL_DMA_Init+0xb8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a63      	ldr	r2, [pc, #396]	; (8002974 <HAL_DMA_Init+0x1c0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d040      	beq.n	800286c <HAL_DMA_Init+0xb8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a62      	ldr	r2, [pc, #392]	; (8002978 <HAL_DMA_Init+0x1c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d03b      	beq.n	800286c <HAL_DMA_Init+0xb8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a60      	ldr	r2, [pc, #384]	; (800297c <HAL_DMA_Init+0x1c8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d036      	beq.n	800286c <HAL_DMA_Init+0xb8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <HAL_DMA_Init+0x1cc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d031      	beq.n	800286c <HAL_DMA_Init+0xb8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <HAL_DMA_Init+0x1d0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02c      	beq.n	800286c <HAL_DMA_Init+0xb8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5c      	ldr	r2, [pc, #368]	; (8002988 <HAL_DMA_Init+0x1d4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d027      	beq.n	800286c <HAL_DMA_Init+0xb8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_DMA_Init+0x1d8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d022      	beq.n	800286c <HAL_DMA_Init+0xb8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a59      	ldr	r2, [pc, #356]	; (8002990 <HAL_DMA_Init+0x1dc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <HAL_DMA_Init+0xb8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <HAL_DMA_Init+0x1e0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d018      	beq.n	800286c <HAL_DMA_Init+0xb8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a56      	ldr	r2, [pc, #344]	; (8002998 <HAL_DMA_Init+0x1e4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_DMA_Init+0xb8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_DMA_Init+0x1e8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_DMA_Init+0xb8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a53      	ldr	r2, [pc, #332]	; (80029a0 <HAL_DMA_Init+0x1ec>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_DMA_Init+0xb8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <HAL_DMA_Init+0x1f0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_DMA_Init+0xb8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_DMA_Init+0x1f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Init+0xbc>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_DMA_Init+0xbe>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 813b 	beq.w	8002aee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a37      	ldr	r2, [pc, #220]	; (800296c <HAL_DMA_Init+0x1b8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04a      	beq.n	8002928 <HAL_DMA_Init+0x174>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a36      	ldr	r2, [pc, #216]	; (8002970 <HAL_DMA_Init+0x1bc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d045      	beq.n	8002928 <HAL_DMA_Init+0x174>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a34      	ldr	r2, [pc, #208]	; (8002974 <HAL_DMA_Init+0x1c0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d040      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a33      	ldr	r2, [pc, #204]	; (8002978 <HAL_DMA_Init+0x1c4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d03b      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_DMA_Init+0x1c8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d036      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a30      	ldr	r2, [pc, #192]	; (8002980 <HAL_DMA_Init+0x1cc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d031      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <HAL_DMA_Init+0x1d0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02c      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <HAL_DMA_Init+0x1d4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d027      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2b      	ldr	r2, [pc, #172]	; (800298c <HAL_DMA_Init+0x1d8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d022      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2a      	ldr	r2, [pc, #168]	; (8002990 <HAL_DMA_Init+0x1dc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01d      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a28      	ldr	r2, [pc, #160]	; (8002994 <HAL_DMA_Init+0x1e0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d018      	beq.n	8002928 <HAL_DMA_Init+0x174>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_DMA_Init+0x1e4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_DMA_Init+0x174>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a25      	ldr	r2, [pc, #148]	; (800299c <HAL_DMA_Init+0x1e8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_DMA_Init+0x174>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <HAL_DMA_Init+0x1ec>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_DMA_Init+0x174>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <HAL_DMA_Init+0x1f0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_DMA_Init+0x174>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a21      	ldr	r2, [pc, #132]	; (80029a8 <HAL_DMA_Init+0x1f4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <HAL_DMA_Init+0x186>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e007      	b.n	800294a <HAL_DMA_Init+0x196>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0201 	bic.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800294a:	e02f      	b.n	80029ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800294c:	f7ff fdc2 	bl	80024d4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b05      	cmp	r3, #5
 8002958:	d928      	bls.n	80029ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2203      	movs	r2, #3
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e246      	b.n	8002dfa <HAL_DMA_Init+0x646>
 800296c:	40020010 	.word	0x40020010
 8002970:	40020028 	.word	0x40020028
 8002974:	40020040 	.word	0x40020040
 8002978:	40020058 	.word	0x40020058
 800297c:	40020070 	.word	0x40020070
 8002980:	40020088 	.word	0x40020088
 8002984:	400200a0 	.word	0x400200a0
 8002988:	400200b8 	.word	0x400200b8
 800298c:	40020410 	.word	0x40020410
 8002990:	40020428 	.word	0x40020428
 8002994:	40020440 	.word	0x40020440
 8002998:	40020458 	.word	0x40020458
 800299c:	40020470 	.word	0x40020470
 80029a0:	40020488 	.word	0x40020488
 80029a4:	400204a0 	.word	0x400204a0
 80029a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1c8      	bne.n	800294c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <HAL_DMA_Init+0x420>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80029d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d107      	bne.n	8002a10 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002a10:	4b71      	ldr	r3, [pc, #452]	; (8002bd8 <HAL_DMA_Init+0x424>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b71      	ldr	r3, [pc, #452]	; (8002bdc <HAL_DMA_Init+0x428>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1c:	d328      	bcc.n	8002a70 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b28      	cmp	r3, #40	; 0x28
 8002a24:	d903      	bls.n	8002a2e <HAL_DMA_Init+0x27a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a2c:	d917      	bls.n	8002a5e <HAL_DMA_Init+0x2aa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b3e      	cmp	r3, #62	; 0x3e
 8002a34:	d903      	bls.n	8002a3e <HAL_DMA_Init+0x28a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b42      	cmp	r3, #66	; 0x42
 8002a3c:	d90f      	bls.n	8002a5e <HAL_DMA_Init+0x2aa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b46      	cmp	r3, #70	; 0x46
 8002a44:	d903      	bls.n	8002a4e <HAL_DMA_Init+0x29a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b48      	cmp	r3, #72	; 0x48
 8002a4c:	d907      	bls.n	8002a5e <HAL_DMA_Init+0x2aa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b4e      	cmp	r3, #78	; 0x4e
 8002a54:	d905      	bls.n	8002a62 <HAL_DMA_Init+0x2ae>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b52      	cmp	r3, #82	; 0x52
 8002a5c:	d801      	bhi.n	8002a62 <HAL_DMA_Init+0x2ae>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_Init+0x2b0>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d117      	bne.n	8002aca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00e      	beq.n	8002aca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f001 fdcf 	bl	8004650 <DMA_CheckFifoParam>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e197      	b.n	8002dfa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f001 fd0a 	bl	80044ec <DMA_CalcBaseAndBitshift>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	223f      	movs	r2, #63	; 0x3f
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e0cd      	b.n	8002c8a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <HAL_DMA_Init+0x42c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d022      	beq.n	8002b3e <HAL_DMA_Init+0x38a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a39      	ldr	r2, [pc, #228]	; (8002be4 <HAL_DMA_Init+0x430>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01d      	beq.n	8002b3e <HAL_DMA_Init+0x38a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <HAL_DMA_Init+0x434>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d018      	beq.n	8002b3e <HAL_DMA_Init+0x38a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a36      	ldr	r2, [pc, #216]	; (8002bec <HAL_DMA_Init+0x438>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_DMA_Init+0x38a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a35      	ldr	r2, [pc, #212]	; (8002bf0 <HAL_DMA_Init+0x43c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_DMA_Init+0x38a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <HAL_DMA_Init+0x440>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_DMA_Init+0x38a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <HAL_DMA_Init+0x444>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_DMA_Init+0x38a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a30      	ldr	r2, [pc, #192]	; (8002bfc <HAL_DMA_Init+0x448>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_DMA_Init+0x38e>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_DMA_Init+0x390>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8097 	beq.w	8002c78 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a24      	ldr	r2, [pc, #144]	; (8002be0 <HAL_DMA_Init+0x42c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d021      	beq.n	8002b98 <HAL_DMA_Init+0x3e4>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <HAL_DMA_Init+0x430>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01c      	beq.n	8002b98 <HAL_DMA_Init+0x3e4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <HAL_DMA_Init+0x434>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d017      	beq.n	8002b98 <HAL_DMA_Init+0x3e4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_DMA_Init+0x438>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d012      	beq.n	8002b98 <HAL_DMA_Init+0x3e4>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <HAL_DMA_Init+0x43c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00d      	beq.n	8002b98 <HAL_DMA_Init+0x3e4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_DMA_Init+0x440>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d008      	beq.n	8002b98 <HAL_DMA_Init+0x3e4>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_DMA_Init+0x444>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_Init+0x3e4>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_DMA_Init+0x448>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_DMA_Init+0x44c>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d020      	beq.n	8002c04 <HAL_DMA_Init+0x450>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d102      	bne.n	8002bd0 <HAL_DMA_Init+0x41c>
 8002bca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bce:	e01a      	b.n	8002c06 <HAL_DMA_Init+0x452>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e018      	b.n	8002c06 <HAL_DMA_Init+0x452>
 8002bd4:	fe10803f 	.word	0xfe10803f
 8002bd8:	5c001000 	.word	0x5c001000
 8002bdc:	ffff0000 	.word	0xffff0000
 8002be0:	58025408 	.word	0x58025408
 8002be4:	5802541c 	.word	0x5802541c
 8002be8:	58025430 	.word	0x58025430
 8002bec:	58025444 	.word	0x58025444
 8002bf0:	58025458 	.word	0x58025458
 8002bf4:	5802546c 	.word	0x5802546c
 8002bf8:	58025480 	.word	0x58025480
 8002bfc:	58025494 	.word	0x58025494
 8002c00:	fffe000f 	.word	0xfffe000f
 8002c04:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c34:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b6e      	ldr	r3, [pc, #440]	; (8002e04 <HAL_DMA_Init+0x650>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_DMA_Init+0x654>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	009a      	lsls	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f001 fc45 	bl	80044ec <DMA_CalcBaseAndBitshift>
 8002c62:	4603      	mov	r3, r0
 8002c64:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	e008      	b.n	8002c8a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2203      	movs	r2, #3
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0b7      	b.n	8002dfa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a5f      	ldr	r2, [pc, #380]	; (8002e0c <HAL_DMA_Init+0x658>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d072      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a5d      	ldr	r2, [pc, #372]	; (8002e10 <HAL_DMA_Init+0x65c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d06d      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a5c      	ldr	r2, [pc, #368]	; (8002e14 <HAL_DMA_Init+0x660>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d068      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a5a      	ldr	r2, [pc, #360]	; (8002e18 <HAL_DMA_Init+0x664>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d063      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a59      	ldr	r2, [pc, #356]	; (8002e1c <HAL_DMA_Init+0x668>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d05e      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a57      	ldr	r2, [pc, #348]	; (8002e20 <HAL_DMA_Init+0x66c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d059      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a56      	ldr	r2, [pc, #344]	; (8002e24 <HAL_DMA_Init+0x670>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d054      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a54      	ldr	r2, [pc, #336]	; (8002e28 <HAL_DMA_Init+0x674>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d04f      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a53      	ldr	r2, [pc, #332]	; (8002e2c <HAL_DMA_Init+0x678>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d04a      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a51      	ldr	r2, [pc, #324]	; (8002e30 <HAL_DMA_Init+0x67c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d045      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_DMA_Init+0x680>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d040      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a4e      	ldr	r2, [pc, #312]	; (8002e38 <HAL_DMA_Init+0x684>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d03b      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a4d      	ldr	r2, [pc, #308]	; (8002e3c <HAL_DMA_Init+0x688>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d036      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	; (8002e40 <HAL_DMA_Init+0x68c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d031      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <HAL_DMA_Init+0x690>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d02c      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a48      	ldr	r2, [pc, #288]	; (8002e48 <HAL_DMA_Init+0x694>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d027      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a47      	ldr	r2, [pc, #284]	; (8002e4c <HAL_DMA_Init+0x698>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d022      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a45      	ldr	r2, [pc, #276]	; (8002e50 <HAL_DMA_Init+0x69c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01d      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a44      	ldr	r2, [pc, #272]	; (8002e54 <HAL_DMA_Init+0x6a0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d018      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a42      	ldr	r2, [pc, #264]	; (8002e58 <HAL_DMA_Init+0x6a4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a41      	ldr	r2, [pc, #260]	; (8002e5c <HAL_DMA_Init+0x6a8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3f      	ldr	r2, [pc, #252]	; (8002e60 <HAL_DMA_Init+0x6ac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <HAL_DMA_Init+0x6b0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_DMA_Init+0x5c6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <HAL_DMA_Init+0x6b4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_DMA_Init+0x5ca>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_DMA_Init+0x5cc>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d032      	beq.n	8002dea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f001 fcdf 	bl	8004748 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b80      	cmp	r3, #128	; 0x80
 8002d90:	d102      	bne.n	8002d98 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_DMA_Init+0x624>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d80c      	bhi.n	8002dd8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f001 fd5c 	bl	800487c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	e008      	b.n	8002dea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	a7fdabf8 	.word	0xa7fdabf8
 8002e08:	cccccccd 	.word	0xcccccccd
 8002e0c:	40020010 	.word	0x40020010
 8002e10:	40020028 	.word	0x40020028
 8002e14:	40020040 	.word	0x40020040
 8002e18:	40020058 	.word	0x40020058
 8002e1c:	40020070 	.word	0x40020070
 8002e20:	40020088 	.word	0x40020088
 8002e24:	400200a0 	.word	0x400200a0
 8002e28:	400200b8 	.word	0x400200b8
 8002e2c:	40020410 	.word	0x40020410
 8002e30:	40020428 	.word	0x40020428
 8002e34:	40020440 	.word	0x40020440
 8002e38:	40020458 	.word	0x40020458
 8002e3c:	40020470 	.word	0x40020470
 8002e40:	40020488 	.word	0x40020488
 8002e44:	400204a0 	.word	0x400204a0
 8002e48:	400204b8 	.word	0x400204b8
 8002e4c:	58025408 	.word	0x58025408
 8002e50:	5802541c 	.word	0x5802541c
 8002e54:	58025430 	.word	0x58025430
 8002e58:	58025444 	.word	0x58025444
 8002e5c:	58025458 	.word	0x58025458
 8002e60:	5802546c 	.word	0x5802546c
 8002e64:	58025480 	.word	0x58025480
 8002e68:	58025494 	.word	0x58025494

08002e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e226      	b.n	80032d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_DMA_Start_IT+0x2a>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e21f      	b.n	80032d6 <HAL_DMA_Start_IT+0x46a>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	f040 820a 	bne.w	80032c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a68      	ldr	r2, [pc, #416]	; (8003060 <HAL_DMA_Start_IT+0x1f4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d04a      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a66      	ldr	r2, [pc, #408]	; (8003064 <HAL_DMA_Start_IT+0x1f8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d045      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_DMA_Start_IT+0x1fc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d040      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a63      	ldr	r2, [pc, #396]	; (800306c <HAL_DMA_Start_IT+0x200>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d03b      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a62      	ldr	r2, [pc, #392]	; (8003070 <HAL_DMA_Start_IT+0x204>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d036      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a60      	ldr	r2, [pc, #384]	; (8003074 <HAL_DMA_Start_IT+0x208>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d031      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5f      	ldr	r2, [pc, #380]	; (8003078 <HAL_DMA_Start_IT+0x20c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d02c      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5d      	ldr	r2, [pc, #372]	; (800307c <HAL_DMA_Start_IT+0x210>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d027      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <HAL_DMA_Start_IT+0x214>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d022      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5a      	ldr	r2, [pc, #360]	; (8003084 <HAL_DMA_Start_IT+0x218>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01d      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a59      	ldr	r2, [pc, #356]	; (8003088 <HAL_DMA_Start_IT+0x21c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d018      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_DMA_Start_IT+0x220>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_DMA_Start_IT+0x224>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a54      	ldr	r2, [pc, #336]	; (8003094 <HAL_DMA_Start_IT+0x228>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a53      	ldr	r2, [pc, #332]	; (8003098 <HAL_DMA_Start_IT+0x22c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_DMA_Start_IT+0xee>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a51      	ldr	r2, [pc, #324]	; (800309c <HAL_DMA_Start_IT+0x230>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d108      	bne.n	8002f6c <HAL_DMA_Start_IT+0x100>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e007      	b.n	8002f7c <HAL_DMA_Start_IT+0x110>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f001 f906 	bl	8004194 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a34      	ldr	r2, [pc, #208]	; (8003060 <HAL_DMA_Start_IT+0x1f4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d04a      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a33      	ldr	r2, [pc, #204]	; (8003064 <HAL_DMA_Start_IT+0x1f8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d045      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a31      	ldr	r2, [pc, #196]	; (8003068 <HAL_DMA_Start_IT+0x1fc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d040      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a30      	ldr	r2, [pc, #192]	; (800306c <HAL_DMA_Start_IT+0x200>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d03b      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a2e      	ldr	r2, [pc, #184]	; (8003070 <HAL_DMA_Start_IT+0x204>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d036      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <HAL_DMA_Start_IT+0x208>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d031      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <HAL_DMA_Start_IT+0x20c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d02c      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_DMA_Start_IT+0x210>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d027      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a28      	ldr	r2, [pc, #160]	; (8003080 <HAL_DMA_Start_IT+0x214>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d022      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_DMA_Start_IT+0x218>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d01d      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_DMA_Start_IT+0x21c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d018      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_DMA_Start_IT+0x220>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <HAL_DMA_Start_IT+0x224>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00e      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_DMA_Start_IT+0x228>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_DMA_Start_IT+0x22c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_DMA_Start_IT+0x1bc>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_DMA_Start_IT+0x230>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_DMA_Start_IT+0x1c0>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_DMA_Start_IT+0x1c2>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d036      	beq.n	80030a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 021e 	bic.w	r2, r3, #30
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0216 	orr.w	r2, r2, #22
 8003044:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d03e      	beq.n	80030cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0208 	orr.w	r2, r2, #8
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e035      	b.n	80030cc <HAL_DMA_Start_IT+0x260>
 8003060:	40020010 	.word	0x40020010
 8003064:	40020028 	.word	0x40020028
 8003068:	40020040 	.word	0x40020040
 800306c:	40020058 	.word	0x40020058
 8003070:	40020070 	.word	0x40020070
 8003074:	40020088 	.word	0x40020088
 8003078:	400200a0 	.word	0x400200a0
 800307c:	400200b8 	.word	0x400200b8
 8003080:	40020410 	.word	0x40020410
 8003084:	40020428 	.word	0x40020428
 8003088:	40020440 	.word	0x40020440
 800308c:	40020458 	.word	0x40020458
 8003090:	40020470 	.word	0x40020470
 8003094:	40020488 	.word	0x40020488
 8003098:	400204a0 	.word	0x400204a0
 800309c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 020e 	bic.w	r2, r3, #14
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 020a 	orr.w	r2, r2, #10
 80030b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0204 	orr.w	r2, r2, #4
 80030ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a83      	ldr	r2, [pc, #524]	; (80032e0 <HAL_DMA_Start_IT+0x474>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d072      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a82      	ldr	r2, [pc, #520]	; (80032e4 <HAL_DMA_Start_IT+0x478>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d06d      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a80      	ldr	r2, [pc, #512]	; (80032e8 <HAL_DMA_Start_IT+0x47c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d068      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a7f      	ldr	r2, [pc, #508]	; (80032ec <HAL_DMA_Start_IT+0x480>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d063      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a7d      	ldr	r2, [pc, #500]	; (80032f0 <HAL_DMA_Start_IT+0x484>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d05e      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7c      	ldr	r2, [pc, #496]	; (80032f4 <HAL_DMA_Start_IT+0x488>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d059      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a7a      	ldr	r2, [pc, #488]	; (80032f8 <HAL_DMA_Start_IT+0x48c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d054      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a79      	ldr	r2, [pc, #484]	; (80032fc <HAL_DMA_Start_IT+0x490>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04f      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a77      	ldr	r2, [pc, #476]	; (8003300 <HAL_DMA_Start_IT+0x494>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d04a      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a76      	ldr	r2, [pc, #472]	; (8003304 <HAL_DMA_Start_IT+0x498>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d045      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a74      	ldr	r2, [pc, #464]	; (8003308 <HAL_DMA_Start_IT+0x49c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d040      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a73      	ldr	r2, [pc, #460]	; (800330c <HAL_DMA_Start_IT+0x4a0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d03b      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a71      	ldr	r2, [pc, #452]	; (8003310 <HAL_DMA_Start_IT+0x4a4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d036      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a70      	ldr	r2, [pc, #448]	; (8003314 <HAL_DMA_Start_IT+0x4a8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d031      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6e      	ldr	r2, [pc, #440]	; (8003318 <HAL_DMA_Start_IT+0x4ac>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d02c      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6d      	ldr	r2, [pc, #436]	; (800331c <HAL_DMA_Start_IT+0x4b0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d027      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a6b      	ldr	r2, [pc, #428]	; (8003320 <HAL_DMA_Start_IT+0x4b4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d022      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6a      	ldr	r2, [pc, #424]	; (8003324 <HAL_DMA_Start_IT+0x4b8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d01d      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a68      	ldr	r2, [pc, #416]	; (8003328 <HAL_DMA_Start_IT+0x4bc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d018      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_DMA_Start_IT+0x4c0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d013      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a65      	ldr	r2, [pc, #404]	; (8003330 <HAL_DMA_Start_IT+0x4c4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00e      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a64      	ldr	r2, [pc, #400]	; (8003334 <HAL_DMA_Start_IT+0x4c8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a62      	ldr	r2, [pc, #392]	; (8003338 <HAL_DMA_Start_IT+0x4cc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_DMA_Start_IT+0x350>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a61      	ldr	r2, [pc, #388]	; (800333c <HAL_DMA_Start_IT+0x4d0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_DMA_Start_IT+0x354>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_DMA_Start_IT+0x356>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01a      	beq.n	80031fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a37      	ldr	r2, [pc, #220]	; (80032e0 <HAL_DMA_Start_IT+0x474>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d04a      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a36      	ldr	r2, [pc, #216]	; (80032e4 <HAL_DMA_Start_IT+0x478>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d045      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a34      	ldr	r2, [pc, #208]	; (80032e8 <HAL_DMA_Start_IT+0x47c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d040      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a33      	ldr	r2, [pc, #204]	; (80032ec <HAL_DMA_Start_IT+0x480>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d03b      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a31      	ldr	r2, [pc, #196]	; (80032f0 <HAL_DMA_Start_IT+0x484>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d036      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <HAL_DMA_Start_IT+0x488>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d031      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <HAL_DMA_Start_IT+0x48c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02c      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_DMA_Start_IT+0x490>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d027      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <HAL_DMA_Start_IT+0x494>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d022      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2a      	ldr	r2, [pc, #168]	; (8003304 <HAL_DMA_Start_IT+0x498>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d01d      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a28      	ldr	r2, [pc, #160]	; (8003308 <HAL_DMA_Start_IT+0x49c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d018      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a27      	ldr	r2, [pc, #156]	; (800330c <HAL_DMA_Start_IT+0x4a0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <HAL_DMA_Start_IT+0x4a4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00e      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a24      	ldr	r2, [pc, #144]	; (8003314 <HAL_DMA_Start_IT+0x4a8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <HAL_DMA_Start_IT+0x4ac>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_DMA_Start_IT+0x430>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_DMA_Start_IT+0x4b0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d108      	bne.n	80032ae <HAL_DMA_Start_IT+0x442>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e012      	b.n	80032d4 <HAL_DMA_Start_IT+0x468>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e009      	b.n	80032d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40020010 	.word	0x40020010
 80032e4:	40020028 	.word	0x40020028
 80032e8:	40020040 	.word	0x40020040
 80032ec:	40020058 	.word	0x40020058
 80032f0:	40020070 	.word	0x40020070
 80032f4:	40020088 	.word	0x40020088
 80032f8:	400200a0 	.word	0x400200a0
 80032fc:	400200b8 	.word	0x400200b8
 8003300:	40020410 	.word	0x40020410
 8003304:	40020428 	.word	0x40020428
 8003308:	40020440 	.word	0x40020440
 800330c:	40020458 	.word	0x40020458
 8003310:	40020470 	.word	0x40020470
 8003314:	40020488 	.word	0x40020488
 8003318:	400204a0 	.word	0x400204a0
 800331c:	400204b8 	.word	0x400204b8
 8003320:	58025408 	.word	0x58025408
 8003324:	5802541c 	.word	0x5802541c
 8003328:	58025430 	.word	0x58025430
 800332c:	58025444 	.word	0x58025444
 8003330:	58025458 	.word	0x58025458
 8003334:	5802546c 	.word	0x5802546c
 8003338:	58025480 	.word	0x58025480
 800333c:	58025494 	.word	0x58025494

08003340 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800334c:	4b67      	ldr	r3, [pc, #412]	; (80034ec <HAL_DMA_IRQHandler+0x1ac>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a67      	ldr	r2, [pc, #412]	; (80034f0 <HAL_DMA_IRQHandler+0x1b0>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0a9b      	lsrs	r3, r3, #10
 8003358:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5f      	ldr	r2, [pc, #380]	; (80034f4 <HAL_DMA_IRQHandler+0x1b4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5d      	ldr	r2, [pc, #372]	; (80034f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <HAL_DMA_IRQHandler+0x1bc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5a      	ldr	r2, [pc, #360]	; (8003500 <HAL_DMA_IRQHandler+0x1c0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a59      	ldr	r2, [pc, #356]	; (8003504 <HAL_DMA_IRQHandler+0x1c4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_DMA_IRQHandler+0x1c8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_DMA_IRQHandler+0x1cc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <HAL_DMA_IRQHandler+0x1d0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a53      	ldr	r2, [pc, #332]	; (8003514 <HAL_DMA_IRQHandler+0x1d4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a51      	ldr	r2, [pc, #324]	; (8003518 <HAL_DMA_IRQHandler+0x1d8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a50      	ldr	r2, [pc, #320]	; (800351c <HAL_DMA_IRQHandler+0x1dc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4e      	ldr	r2, [pc, #312]	; (8003520 <HAL_DMA_IRQHandler+0x1e0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4d      	ldr	r2, [pc, #308]	; (8003524 <HAL_DMA_IRQHandler+0x1e4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a4b      	ldr	r2, [pc, #300]	; (8003528 <HAL_DMA_IRQHandler+0x1e8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4a      	ldr	r2, [pc, #296]	; (800352c <HAL_DMA_IRQHandler+0x1ec>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_IRQHandler+0xd2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a48      	ldr	r2, [pc, #288]	; (8003530 <HAL_DMA_IRQHandler+0x1f0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_DMA_IRQHandler+0xd6>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_DMA_IRQHandler+0xd8>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 842b 	beq.w	8003c74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2208      	movs	r2, #8
 8003428:	409a      	lsls	r2, r3
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80a2 	beq.w	8003578 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <HAL_DMA_IRQHandler+0x1b4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d045      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_DMA_IRQHandler+0x1bc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d040      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <HAL_DMA_IRQHandler+0x1c0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03b      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_DMA_IRQHandler+0x1c4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d036      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a27      	ldr	r2, [pc, #156]	; (8003508 <HAL_DMA_IRQHandler+0x1c8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d031      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_DMA_IRQHandler+0x1cc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02c      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a24      	ldr	r2, [pc, #144]	; (8003510 <HAL_DMA_IRQHandler+0x1d0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d027      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_DMA_IRQHandler+0x1d4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <HAL_DMA_IRQHandler+0x1d8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01d      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_DMA_IRQHandler+0x1dc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_DMA_IRQHandler+0x1e0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <HAL_DMA_IRQHandler+0x1e4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1b      	ldr	r2, [pc, #108]	; (8003528 <HAL_DMA_IRQHandler+0x1e8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_DMA_IRQHandler+0x1ec>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x194>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <HAL_DMA_IRQHandler+0x1f0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d12f      	bne.n	8003534 <HAL_DMA_IRQHandler+0x1f4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e02e      	b.n	8003548 <HAL_DMA_IRQHandler+0x208>
 80034ea:	bf00      	nop
 80034ec:	24000000 	.word	0x24000000
 80034f0:	1b4e81b5 	.word	0x1b4e81b5
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d015      	beq.n	8003578 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0204 	bic.w	r2, r2, #4
 800355a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2208      	movs	r2, #8
 8003566:	409a      	lsls	r2, r3
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d06e      	beq.n	800366c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a69      	ldr	r2, [pc, #420]	; (8003738 <HAL_DMA_IRQHandler+0x3f8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d04a      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a67      	ldr	r2, [pc, #412]	; (800373c <HAL_DMA_IRQHandler+0x3fc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d045      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a66      	ldr	r2, [pc, #408]	; (8003740 <HAL_DMA_IRQHandler+0x400>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d040      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a64      	ldr	r2, [pc, #400]	; (8003744 <HAL_DMA_IRQHandler+0x404>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a63      	ldr	r2, [pc, #396]	; (8003748 <HAL_DMA_IRQHandler+0x408>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d036      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a61      	ldr	r2, [pc, #388]	; (800374c <HAL_DMA_IRQHandler+0x40c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a60      	ldr	r2, [pc, #384]	; (8003750 <HAL_DMA_IRQHandler+0x410>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d02c      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a5e      	ldr	r2, [pc, #376]	; (8003754 <HAL_DMA_IRQHandler+0x414>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d027      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5d      	ldr	r2, [pc, #372]	; (8003758 <HAL_DMA_IRQHandler+0x418>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5b      	ldr	r2, [pc, #364]	; (800375c <HAL_DMA_IRQHandler+0x41c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5a      	ldr	r2, [pc, #360]	; (8003760 <HAL_DMA_IRQHandler+0x420>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_DMA_IRQHandler+0x424>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a57      	ldr	r2, [pc, #348]	; (8003768 <HAL_DMA_IRQHandler+0x428>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_DMA_IRQHandler+0x42c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a54      	ldr	r2, [pc, #336]	; (8003770 <HAL_DMA_IRQHandler+0x430>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_DMA_IRQHandler+0x2ee>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_DMA_IRQHandler+0x434>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10a      	bne.n	8003644 <HAL_DMA_IRQHandler+0x304>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e003      	b.n	800364c <HAL_DMA_IRQHandler+0x30c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2201      	movs	r2, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f043 0202 	orr.w	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2204      	movs	r2, #4
 8003676:	409a      	lsls	r2, r3
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 808f 	beq.w	80037a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <HAL_DMA_IRQHandler+0x3f8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d04a      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_DMA_IRQHandler+0x3fc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d045      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_DMA_IRQHandler+0x400>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d040      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <HAL_DMA_IRQHandler+0x404>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d03b      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a26      	ldr	r2, [pc, #152]	; (8003748 <HAL_DMA_IRQHandler+0x408>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d036      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a24      	ldr	r2, [pc, #144]	; (800374c <HAL_DMA_IRQHandler+0x40c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d031      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_DMA_IRQHandler+0x410>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d02c      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a21      	ldr	r2, [pc, #132]	; (8003754 <HAL_DMA_IRQHandler+0x414>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d027      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a20      	ldr	r2, [pc, #128]	; (8003758 <HAL_DMA_IRQHandler+0x418>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_DMA_IRQHandler+0x41c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01d      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <HAL_DMA_IRQHandler+0x420>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_DMA_IRQHandler+0x424>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_DMA_IRQHandler+0x428>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a18      	ldr	r2, [pc, #96]	; (800376c <HAL_DMA_IRQHandler+0x42c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_DMA_IRQHandler+0x430>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_DMA_IRQHandler+0x3e2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a15      	ldr	r2, [pc, #84]	; (8003774 <HAL_DMA_IRQHandler+0x434>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d12a      	bne.n	8003778 <HAL_DMA_IRQHandler+0x438>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e023      	b.n	8003780 <HAL_DMA_IRQHandler+0x440>
 8003738:	40020010 	.word	0x40020010
 800373c:	40020028 	.word	0x40020028
 8003740:	40020040 	.word	0x40020040
 8003744:	40020058 	.word	0x40020058
 8003748:	40020070 	.word	0x40020070
 800374c:	40020088 	.word	0x40020088
 8003750:	400200a0 	.word	0x400200a0
 8003754:	400200b8 	.word	0x400200b8
 8003758:	40020410 	.word	0x40020410
 800375c:	40020428 	.word	0x40020428
 8003760:	40020440 	.word	0x40020440
 8003764:	40020458 	.word	0x40020458
 8003768:	40020470 	.word	0x40020470
 800376c:	40020488 	.word	0x40020488
 8003770:	400204a0 	.word	0x400204a0
 8003774:	400204b8 	.word	0x400204b8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2204      	movs	r2, #4
 800378e:	409a      	lsls	r2, r3
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2210      	movs	r2, #16
 80037aa:	409a      	lsls	r2, r3
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a6 	beq.w	8003902 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a85      	ldr	r2, [pc, #532]	; (80039d0 <HAL_DMA_IRQHandler+0x690>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d04a      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a83      	ldr	r2, [pc, #524]	; (80039d4 <HAL_DMA_IRQHandler+0x694>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d045      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a82      	ldr	r2, [pc, #520]	; (80039d8 <HAL_DMA_IRQHandler+0x698>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d040      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a80      	ldr	r2, [pc, #512]	; (80039dc <HAL_DMA_IRQHandler+0x69c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d03b      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7f      	ldr	r2, [pc, #508]	; (80039e0 <HAL_DMA_IRQHandler+0x6a0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d036      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7d      	ldr	r2, [pc, #500]	; (80039e4 <HAL_DMA_IRQHandler+0x6a4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d031      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7c      	ldr	r2, [pc, #496]	; (80039e8 <HAL_DMA_IRQHandler+0x6a8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d02c      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7a      	ldr	r2, [pc, #488]	; (80039ec <HAL_DMA_IRQHandler+0x6ac>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d027      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a79      	ldr	r2, [pc, #484]	; (80039f0 <HAL_DMA_IRQHandler+0x6b0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a77      	ldr	r2, [pc, #476]	; (80039f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01d      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a76      	ldr	r2, [pc, #472]	; (80039f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d018      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a74      	ldr	r2, [pc, #464]	; (80039fc <HAL_DMA_IRQHandler+0x6bc>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a73      	ldr	r2, [pc, #460]	; (8003a00 <HAL_DMA_IRQHandler+0x6c0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a71      	ldr	r2, [pc, #452]	; (8003a04 <HAL_DMA_IRQHandler+0x6c4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a70      	ldr	r2, [pc, #448]	; (8003a08 <HAL_DMA_IRQHandler+0x6c8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_DMA_IRQHandler+0x516>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a6e      	ldr	r2, [pc, #440]	; (8003a0c <HAL_DMA_IRQHandler+0x6cc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10a      	bne.n	800386c <HAL_DMA_IRQHandler+0x52c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e009      	b.n	8003880 <HAL_DMA_IRQHandler+0x540>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03e      	beq.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2210      	movs	r2, #16
 800388e:	409a      	lsls	r2, r3
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d018      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d024      	beq.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
 80038c0:	e01f      	b.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01b      	beq.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
 80038d2:	e016      	b.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0208 	bic.w	r2, r2, #8
 80038f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2220      	movs	r2, #32
 800390c:	409a      	lsls	r2, r3
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8110 	beq.w	8003b38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <HAL_DMA_IRQHandler+0x690>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d04a      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <HAL_DMA_IRQHandler+0x694>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d045      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <HAL_DMA_IRQHandler+0x698>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d040      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a28      	ldr	r2, [pc, #160]	; (80039dc <HAL_DMA_IRQHandler+0x69c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d03b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <HAL_DMA_IRQHandler+0x6a0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d036      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <HAL_DMA_IRQHandler+0x6a4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d031      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a23      	ldr	r2, [pc, #140]	; (80039e8 <HAL_DMA_IRQHandler+0x6a8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_DMA_IRQHandler+0x6ac>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d027      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <HAL_DMA_IRQHandler+0x6b0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d022      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d01d      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d018      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_DMA_IRQHandler+0x6bc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1a      	ldr	r2, [pc, #104]	; (8003a00 <HAL_DMA_IRQHandler+0x6c0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00e      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_DMA_IRQHandler+0x6c4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_DMA_IRQHandler+0x6c8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d004      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x678>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_DMA_IRQHandler+0x6cc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d12b      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x6d0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	e02a      	b.n	8003a24 <HAL_DMA_IRQHandler+0x6e4>
 80039ce:	bf00      	nop
 80039d0:	40020010 	.word	0x40020010
 80039d4:	40020028 	.word	0x40020028
 80039d8:	40020040 	.word	0x40020040
 80039dc:	40020058 	.word	0x40020058
 80039e0:	40020070 	.word	0x40020070
 80039e4:	40020088 	.word	0x40020088
 80039e8:	400200a0 	.word	0x400200a0
 80039ec:	400200b8 	.word	0x400200b8
 80039f0:	40020410 	.word	0x40020410
 80039f4:	40020428 	.word	0x40020428
 80039f8:	40020440 	.word	0x40020440
 80039fc:	40020458 	.word	0x40020458
 8003a00:	40020470 	.word	0x40020470
 8003a04:	40020488 	.word	0x40020488
 8003a08:	400204a0 	.word	0x400204a0
 8003a0c:	400204b8 	.word	0x400204b8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8087 	beq.w	8003b38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2220      	movs	r2, #32
 8003a34:	409a      	lsls	r2, r3
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d139      	bne.n	8003aba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0216 	bic.w	r2, r2, #22
 8003a54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x736>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0208 	bic.w	r2, r2, #8
 8003a84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	223f      	movs	r2, #63	; 0x3f
 8003a90:	409a      	lsls	r2, r3
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 834a 	beq.w	8004144 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
          }
          return;
 8003ab8:	e344      	b.n	8004144 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02c      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e027      	b.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d023      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e01e      	b.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10f      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0210 	bic.w	r2, r2, #16
 8003b16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8306 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8088 	beq.w	8003c60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2204      	movs	r2, #4
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a7a      	ldr	r2, [pc, #488]	; (8003d48 <HAL_DMA_IRQHandler+0xa08>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d04a      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a79      	ldr	r2, [pc, #484]	; (8003d4c <HAL_DMA_IRQHandler+0xa0c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d045      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a77      	ldr	r2, [pc, #476]	; (8003d50 <HAL_DMA_IRQHandler+0xa10>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d040      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a76      	ldr	r2, [pc, #472]	; (8003d54 <HAL_DMA_IRQHandler+0xa14>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d03b      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a74      	ldr	r2, [pc, #464]	; (8003d58 <HAL_DMA_IRQHandler+0xa18>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d036      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a73      	ldr	r2, [pc, #460]	; (8003d5c <HAL_DMA_IRQHandler+0xa1c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d031      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a71      	ldr	r2, [pc, #452]	; (8003d60 <HAL_DMA_IRQHandler+0xa20>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02c      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a70      	ldr	r2, [pc, #448]	; (8003d64 <HAL_DMA_IRQHandler+0xa24>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d027      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6e      	ldr	r2, [pc, #440]	; (8003d68 <HAL_DMA_IRQHandler+0xa28>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d022      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6d      	ldr	r2, [pc, #436]	; (8003d6c <HAL_DMA_IRQHandler+0xa2c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01d      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6b      	ldr	r2, [pc, #428]	; (8003d70 <HAL_DMA_IRQHandler+0xa30>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6a      	ldr	r2, [pc, #424]	; (8003d74 <HAL_DMA_IRQHandler+0xa34>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a68      	ldr	r2, [pc, #416]	; (8003d78 <HAL_DMA_IRQHandler+0xa38>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a67      	ldr	r2, [pc, #412]	; (8003d7c <HAL_DMA_IRQHandler+0xa3c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <HAL_DMA_IRQHandler+0xa40>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x8b8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a64      	ldr	r2, [pc, #400]	; (8003d84 <HAL_DMA_IRQHandler+0xa44>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d108      	bne.n	8003c0a <HAL_DMA_IRQHandler+0x8ca>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e007      	b.n	8003c1a <HAL_DMA_IRQHandler+0x8da>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d307      	bcc.n	8003c36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f2      	bne.n	8003c1a <HAL_DMA_IRQHandler+0x8da>
 8003c34:	e000      	b.n	8003c38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c4e:	e003      	b.n	8003c58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8272 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
 8003c72:	e26c      	b.n	800414e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <HAL_DMA_IRQHandler+0xa48>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d022      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a42      	ldr	r2, [pc, #264]	; (8003d8c <HAL_DMA_IRQHandler+0xa4c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01d      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_DMA_IRQHandler+0xa50>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <HAL_DMA_IRQHandler+0xa54>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a3d      	ldr	r2, [pc, #244]	; (8003d98 <HAL_DMA_IRQHandler+0xa58>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a3c      	ldr	r2, [pc, #240]	; (8003d9c <HAL_DMA_IRQHandler+0xa5c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3a      	ldr	r2, [pc, #232]	; (8003da0 <HAL_DMA_IRQHandler+0xa60>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x984>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a39      	ldr	r2, [pc, #228]	; (8003da4 <HAL_DMA_IRQHandler+0xa64>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x988>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <HAL_DMA_IRQHandler+0x98a>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 823f 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80cd 	beq.w	8003e88 <HAL_DMA_IRQHandler+0xb48>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80c7 	beq.w	8003e88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2204      	movs	r2, #4
 8003d04:	409a      	lsls	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d049      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8210 	beq.w	8004148 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d30:	e20a      	b.n	8004148 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8206 	beq.w	8004148 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d44:	e200      	b.n	8004148 <HAL_DMA_IRQHandler+0xe08>
 8003d46:	bf00      	nop
 8003d48:	40020010 	.word	0x40020010
 8003d4c:	40020028 	.word	0x40020028
 8003d50:	40020040 	.word	0x40020040
 8003d54:	40020058 	.word	0x40020058
 8003d58:	40020070 	.word	0x40020070
 8003d5c:	40020088 	.word	0x40020088
 8003d60:	400200a0 	.word	0x400200a0
 8003d64:	400200b8 	.word	0x400200b8
 8003d68:	40020410 	.word	0x40020410
 8003d6c:	40020428 	.word	0x40020428
 8003d70:	40020440 	.word	0x40020440
 8003d74:	40020458 	.word	0x40020458
 8003d78:	40020470 	.word	0x40020470
 8003d7c:	40020488 	.word	0x40020488
 8003d80:	400204a0 	.word	0x400204a0
 8003d84:	400204b8 	.word	0x400204b8
 8003d88:	58025408 	.word	0x58025408
 8003d8c:	5802541c 	.word	0x5802541c
 8003d90:	58025430 	.word	0x58025430
 8003d94:	58025444 	.word	0x58025444
 8003d98:	58025458 	.word	0x58025458
 8003d9c:	5802546c 	.word	0x5802546c
 8003da0:	58025480 	.word	0x58025480
 8003da4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d160      	bne.n	8003e74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7f      	ldr	r2, [pc, #508]	; (8003fb4 <HAL_DMA_IRQHandler+0xc74>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d04a      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a7d      	ldr	r2, [pc, #500]	; (8003fb8 <HAL_DMA_IRQHandler+0xc78>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d045      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a7c      	ldr	r2, [pc, #496]	; (8003fbc <HAL_DMA_IRQHandler+0xc7c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d040      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a7a      	ldr	r2, [pc, #488]	; (8003fc0 <HAL_DMA_IRQHandler+0xc80>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d03b      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a79      	ldr	r2, [pc, #484]	; (8003fc4 <HAL_DMA_IRQHandler+0xc84>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d036      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a77      	ldr	r2, [pc, #476]	; (8003fc8 <HAL_DMA_IRQHandler+0xc88>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d031      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a76      	ldr	r2, [pc, #472]	; (8003fcc <HAL_DMA_IRQHandler+0xc8c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d02c      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a74      	ldr	r2, [pc, #464]	; (8003fd0 <HAL_DMA_IRQHandler+0xc90>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d027      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a73      	ldr	r2, [pc, #460]	; (8003fd4 <HAL_DMA_IRQHandler+0xc94>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d022      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a71      	ldr	r2, [pc, #452]	; (8003fd8 <HAL_DMA_IRQHandler+0xc98>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d01d      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a70      	ldr	r2, [pc, #448]	; (8003fdc <HAL_DMA_IRQHandler+0xc9c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d018      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6e      	ldr	r2, [pc, #440]	; (8003fe0 <HAL_DMA_IRQHandler+0xca0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	; (8003fe4 <HAL_DMA_IRQHandler+0xca4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6b      	ldr	r2, [pc, #428]	; (8003fe8 <HAL_DMA_IRQHandler+0xca8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d009      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6a      	ldr	r2, [pc, #424]	; (8003fec <HAL_DMA_IRQHandler+0xcac>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_DMA_IRQHandler+0xb12>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a68      	ldr	r2, [pc, #416]	; (8003ff0 <HAL_DMA_IRQHandler+0xcb0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d108      	bne.n	8003e64 <HAL_DMA_IRQHandler+0xb24>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e007      	b.n	8003e74 <HAL_DMA_IRQHandler+0xb34>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0204 	bic.w	r2, r2, #4
 8003e72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8165 	beq.w	8004148 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e86:	e15f      	b.n	8004148 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2202      	movs	r2, #2
 8003e92:	409a      	lsls	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80c5 	beq.w	8004028 <HAL_DMA_IRQHandler+0xce8>
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80bf 	beq.w	8004028 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d018      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 813a 	beq.w	800414c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee0:	e134      	b.n	800414c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8130 	beq.w	800414c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ef4:	e12a      	b.n	800414c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 8089 	bne.w	8004014 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2b      	ldr	r2, [pc, #172]	; (8003fb4 <HAL_DMA_IRQHandler+0xc74>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d04a      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_DMA_IRQHandler+0xc78>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d045      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <HAL_DMA_IRQHandler+0xc7c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d040      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <HAL_DMA_IRQHandler+0xc80>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d03b      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <HAL_DMA_IRQHandler+0xc84>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d036      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_DMA_IRQHandler+0xc88>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d031      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_DMA_IRQHandler+0xc8c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d02c      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_DMA_IRQHandler+0xc90>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d027      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_DMA_IRQHandler+0xc94>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_DMA_IRQHandler+0xc98>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01d      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_DMA_IRQHandler+0xc9c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_DMA_IRQHandler+0xca0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_DMA_IRQHandler+0xca4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_DMA_IRQHandler+0xca8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a16      	ldr	r2, [pc, #88]	; (8003fec <HAL_DMA_IRQHandler+0xcac>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0xc62>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <HAL_DMA_IRQHandler+0xcb0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d128      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0xcb4>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0214 	bic.w	r2, r2, #20
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e027      	b.n	8004004 <HAL_DMA_IRQHandler+0xcc4>
 8003fb4:	40020010 	.word	0x40020010
 8003fb8:	40020028 	.word	0x40020028
 8003fbc:	40020040 	.word	0x40020040
 8003fc0:	40020058 	.word	0x40020058
 8003fc4:	40020070 	.word	0x40020070
 8003fc8:	40020088 	.word	0x40020088
 8003fcc:	400200a0 	.word	0x400200a0
 8003fd0:	400200b8 	.word	0x400200b8
 8003fd4:	40020410 	.word	0x40020410
 8003fd8:	40020428 	.word	0x40020428
 8003fdc:	40020440 	.word	0x40020440
 8003fe0:	40020458 	.word	0x40020458
 8003fe4:	40020470 	.word	0x40020470
 8003fe8:	40020488 	.word	0x40020488
 8003fec:	400204a0 	.word	0x400204a0
 8003ff0:	400204b8 	.word	0x400204b8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 020a 	bic.w	r2, r2, #10
 8004002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8097 	beq.w	800414c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004026:	e091      	b.n	800414c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2208      	movs	r2, #8
 8004032:	409a      	lsls	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8088 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8082 	beq.w	800414e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a41      	ldr	r2, [pc, #260]	; (8004154 <HAL_DMA_IRQHandler+0xe14>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d04a      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3f      	ldr	r2, [pc, #252]	; (8004158 <HAL_DMA_IRQHandler+0xe18>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d045      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3e      	ldr	r2, [pc, #248]	; (800415c <HAL_DMA_IRQHandler+0xe1c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d040      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3c      	ldr	r2, [pc, #240]	; (8004160 <HAL_DMA_IRQHandler+0xe20>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d03b      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_DMA_IRQHandler+0xe24>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d036      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a39      	ldr	r2, [pc, #228]	; (8004168 <HAL_DMA_IRQHandler+0xe28>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d031      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a38      	ldr	r2, [pc, #224]	; (800416c <HAL_DMA_IRQHandler+0xe2c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d02c      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a36      	ldr	r2, [pc, #216]	; (8004170 <HAL_DMA_IRQHandler+0xe30>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d027      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a35      	ldr	r2, [pc, #212]	; (8004174 <HAL_DMA_IRQHandler+0xe34>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a33      	ldr	r2, [pc, #204]	; (8004178 <HAL_DMA_IRQHandler+0xe38>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01d      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a32      	ldr	r2, [pc, #200]	; (800417c <HAL_DMA_IRQHandler+0xe3c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a30      	ldr	r2, [pc, #192]	; (8004180 <HAL_DMA_IRQHandler+0xe40>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <HAL_DMA_IRQHandler+0xe44>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <HAL_DMA_IRQHandler+0xe48>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2c      	ldr	r2, [pc, #176]	; (800418c <HAL_DMA_IRQHandler+0xe4c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_DMA_IRQHandler+0xdaa>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2a      	ldr	r2, [pc, #168]	; (8004190 <HAL_DMA_IRQHandler+0xe50>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d108      	bne.n	80040fc <HAL_DMA_IRQHandler+0xdbc>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 021c 	bic.w	r2, r2, #28
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e007      	b.n	800410c <HAL_DMA_IRQHandler+0xdcc>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 020e 	bic.w	r2, r2, #14
 800410a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2201      	movs	r2, #1
 8004116:	409a      	lsls	r2, r3
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
 8004142:	e004      	b.n	800414e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800414c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800414e:	3728      	adds	r7, #40	; 0x28
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40020010 	.word	0x40020010
 8004158:	40020028 	.word	0x40020028
 800415c:	40020040 	.word	0x40020040
 8004160:	40020058 	.word	0x40020058
 8004164:	40020070 	.word	0x40020070
 8004168:	40020088 	.word	0x40020088
 800416c:	400200a0 	.word	0x400200a0
 8004170:	400200b8 	.word	0x400200b8
 8004174:	40020410 	.word	0x40020410
 8004178:	40020428 	.word	0x40020428
 800417c:	40020440 	.word	0x40020440
 8004180:	40020458 	.word	0x40020458
 8004184:	40020470 	.word	0x40020470
 8004188:	40020488 	.word	0x40020488
 800418c:	400204a0 	.word	0x400204a0
 8004190:	400204b8 	.word	0x400204b8

08004194 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7f      	ldr	r2, [pc, #508]	; (80043b0 <DMA_SetConfig+0x21c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d072      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7d      	ldr	r2, [pc, #500]	; (80043b4 <DMA_SetConfig+0x220>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d06d      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7c      	ldr	r2, [pc, #496]	; (80043b8 <DMA_SetConfig+0x224>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d068      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a7a      	ldr	r2, [pc, #488]	; (80043bc <DMA_SetConfig+0x228>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d063      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a79      	ldr	r2, [pc, #484]	; (80043c0 <DMA_SetConfig+0x22c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d05e      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <DMA_SetConfig+0x230>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d059      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a76      	ldr	r2, [pc, #472]	; (80043c8 <DMA_SetConfig+0x234>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d054      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a74      	ldr	r2, [pc, #464]	; (80043cc <DMA_SetConfig+0x238>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d04f      	beq.n	800429e <DMA_SetConfig+0x10a>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a73      	ldr	r2, [pc, #460]	; (80043d0 <DMA_SetConfig+0x23c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a71      	ldr	r2, [pc, #452]	; (80043d4 <DMA_SetConfig+0x240>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a70      	ldr	r2, [pc, #448]	; (80043d8 <DMA_SetConfig+0x244>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <DMA_SetConfig+0x10a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6e      	ldr	r2, [pc, #440]	; (80043dc <DMA_SetConfig+0x248>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6d      	ldr	r2, [pc, #436]	; (80043e0 <DMA_SetConfig+0x24c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6b      	ldr	r2, [pc, #428]	; (80043e4 <DMA_SetConfig+0x250>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <DMA_SetConfig+0x10a>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6a      	ldr	r2, [pc, #424]	; (80043e8 <DMA_SetConfig+0x254>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a68      	ldr	r2, [pc, #416]	; (80043ec <DMA_SetConfig+0x258>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <DMA_SetConfig+0x10a>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a67      	ldr	r2, [pc, #412]	; (80043f0 <DMA_SetConfig+0x25c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a65      	ldr	r2, [pc, #404]	; (80043f4 <DMA_SetConfig+0x260>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a64      	ldr	r2, [pc, #400]	; (80043f8 <DMA_SetConfig+0x264>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <DMA_SetConfig+0x10a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a62      	ldr	r2, [pc, #392]	; (80043fc <DMA_SetConfig+0x268>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a61      	ldr	r2, [pc, #388]	; (8004400 <DMA_SetConfig+0x26c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5f      	ldr	r2, [pc, #380]	; (8004404 <DMA_SetConfig+0x270>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <DMA_SetConfig+0x10a>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a5e      	ldr	r2, [pc, #376]	; (8004408 <DMA_SetConfig+0x274>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <DMA_SetConfig+0x10a>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a5c      	ldr	r2, [pc, #368]	; (800440c <DMA_SetConfig+0x278>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <DMA_SetConfig+0x10e>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <DMA_SetConfig+0x110>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <DMA_SetConfig+0x21c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d04a      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <DMA_SetConfig+0x220>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d045      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a36      	ldr	r2, [pc, #216]	; (80043b8 <DMA_SetConfig+0x224>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d040      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a35      	ldr	r2, [pc, #212]	; (80043bc <DMA_SetConfig+0x228>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d03b      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <DMA_SetConfig+0x22c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d036      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a32      	ldr	r2, [pc, #200]	; (80043c4 <DMA_SetConfig+0x230>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d031      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <DMA_SetConfig+0x234>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02c      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <DMA_SetConfig+0x238>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d027      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <DMA_SetConfig+0x23c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d022      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <DMA_SetConfig+0x240>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d01d      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <DMA_SetConfig+0x244>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d018      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <DMA_SetConfig+0x248>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <DMA_SetConfig+0x24c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00e      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <DMA_SetConfig+0x250>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d009      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <DMA_SetConfig+0x254>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <DMA_SetConfig+0x1d0>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a23      	ldr	r2, [pc, #140]	; (80043ec <DMA_SetConfig+0x258>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <DMA_SetConfig+0x1d4>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <DMA_SetConfig+0x1d6>
 8004368:	2300      	movs	r3, #0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d059      	beq.n	8004422 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	223f      	movs	r2, #63	; 0x3f
 8004378:	409a      	lsls	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800438c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d138      	bne.n	8004410 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043ae:	e086      	b.n	80044be <DMA_SetConfig+0x32a>
 80043b0:	40020010 	.word	0x40020010
 80043b4:	40020028 	.word	0x40020028
 80043b8:	40020040 	.word	0x40020040
 80043bc:	40020058 	.word	0x40020058
 80043c0:	40020070 	.word	0x40020070
 80043c4:	40020088 	.word	0x40020088
 80043c8:	400200a0 	.word	0x400200a0
 80043cc:	400200b8 	.word	0x400200b8
 80043d0:	40020410 	.word	0x40020410
 80043d4:	40020428 	.word	0x40020428
 80043d8:	40020440 	.word	0x40020440
 80043dc:	40020458 	.word	0x40020458
 80043e0:	40020470 	.word	0x40020470
 80043e4:	40020488 	.word	0x40020488
 80043e8:	400204a0 	.word	0x400204a0
 80043ec:	400204b8 	.word	0x400204b8
 80043f0:	58025408 	.word	0x58025408
 80043f4:	5802541c 	.word	0x5802541c
 80043f8:	58025430 	.word	0x58025430
 80043fc:	58025444 	.word	0x58025444
 8004400:	58025458 	.word	0x58025458
 8004404:	5802546c 	.word	0x5802546c
 8004408:	58025480 	.word	0x58025480
 800440c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]
}
 8004420:	e04d      	b.n	80044be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a29      	ldr	r2, [pc, #164]	; (80044cc <DMA_SetConfig+0x338>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d022      	beq.n	8004472 <DMA_SetConfig+0x2de>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <DMA_SetConfig+0x33c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01d      	beq.n	8004472 <DMA_SetConfig+0x2de>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <DMA_SetConfig+0x340>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d018      	beq.n	8004472 <DMA_SetConfig+0x2de>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a24      	ldr	r2, [pc, #144]	; (80044d8 <DMA_SetConfig+0x344>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <DMA_SetConfig+0x2de>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a23      	ldr	r2, [pc, #140]	; (80044dc <DMA_SetConfig+0x348>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <DMA_SetConfig+0x2de>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <DMA_SetConfig+0x34c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d009      	beq.n	8004472 <DMA_SetConfig+0x2de>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a20      	ldr	r2, [pc, #128]	; (80044e4 <DMA_SetConfig+0x350>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <DMA_SetConfig+0x2de>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <DMA_SetConfig+0x354>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d101      	bne.n	8004476 <DMA_SetConfig+0x2e2>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <DMA_SetConfig+0x2e4>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2201      	movs	r2, #1
 8004486:	409a      	lsls	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d108      	bne.n	80044ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	60da      	str	r2, [r3, #12]
}
 80044ac:	e007      	b.n	80044be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	60da      	str	r2, [r3, #12]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	58025408 	.word	0x58025408
 80044d0:	5802541c 	.word	0x5802541c
 80044d4:	58025430 	.word	0x58025430
 80044d8:	58025444 	.word	0x58025444
 80044dc:	58025458 	.word	0x58025458
 80044e0:	5802546c 	.word	0x5802546c
 80044e4:	58025480 	.word	0x58025480
 80044e8:	58025494 	.word	0x58025494

080044ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a42      	ldr	r2, [pc, #264]	; (8004604 <DMA_CalcBaseAndBitshift+0x118>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d04a      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a41      	ldr	r2, [pc, #260]	; (8004608 <DMA_CalcBaseAndBitshift+0x11c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d045      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3f      	ldr	r2, [pc, #252]	; (800460c <DMA_CalcBaseAndBitshift+0x120>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d040      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a3e      	ldr	r2, [pc, #248]	; (8004610 <DMA_CalcBaseAndBitshift+0x124>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d03b      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a3c      	ldr	r2, [pc, #240]	; (8004614 <DMA_CalcBaseAndBitshift+0x128>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d036      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <DMA_CalcBaseAndBitshift+0x12c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d031      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a39      	ldr	r2, [pc, #228]	; (800461c <DMA_CalcBaseAndBitshift+0x130>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02c      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a38      	ldr	r2, [pc, #224]	; (8004620 <DMA_CalcBaseAndBitshift+0x134>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d027      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a36      	ldr	r2, [pc, #216]	; (8004624 <DMA_CalcBaseAndBitshift+0x138>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d022      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a35      	ldr	r2, [pc, #212]	; (8004628 <DMA_CalcBaseAndBitshift+0x13c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d01d      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a33      	ldr	r2, [pc, #204]	; (800462c <DMA_CalcBaseAndBitshift+0x140>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d018      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a32      	ldr	r2, [pc, #200]	; (8004630 <DMA_CalcBaseAndBitshift+0x144>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <DMA_CalcBaseAndBitshift+0x148>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00e      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2f      	ldr	r2, [pc, #188]	; (8004638 <DMA_CalcBaseAndBitshift+0x14c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2d      	ldr	r2, [pc, #180]	; (800463c <DMA_CalcBaseAndBitshift+0x150>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <DMA_CalcBaseAndBitshift+0xa8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <DMA_CalcBaseAndBitshift+0x154>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <DMA_CalcBaseAndBitshift+0xac>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <DMA_CalcBaseAndBitshift+0xae>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d024      	beq.n	80045e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	3b10      	subs	r3, #16
 80045a6:	4a27      	ldr	r2, [pc, #156]	; (8004644 <DMA_CalcBaseAndBitshift+0x158>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	4a24      	ldr	r2, [pc, #144]	; (8004648 <DMA_CalcBaseAndBitshift+0x15c>)
 80045b8:	5cd3      	ldrb	r3, [r2, r3]
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d908      	bls.n	80045d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <DMA_CalcBaseAndBitshift+0x160>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	659a      	str	r2, [r3, #88]	; 0x58
 80045d6:	e00d      	b.n	80045f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <DMA_CalcBaseAndBitshift+0x160>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6593      	str	r3, [r2, #88]	; 0x58
 80045e6:	e005      	b.n	80045f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40020010 	.word	0x40020010
 8004608:	40020028 	.word	0x40020028
 800460c:	40020040 	.word	0x40020040
 8004610:	40020058 	.word	0x40020058
 8004614:	40020070 	.word	0x40020070
 8004618:	40020088 	.word	0x40020088
 800461c:	400200a0 	.word	0x400200a0
 8004620:	400200b8 	.word	0x400200b8
 8004624:	40020410 	.word	0x40020410
 8004628:	40020428 	.word	0x40020428
 800462c:	40020440 	.word	0x40020440
 8004630:	40020458 	.word	0x40020458
 8004634:	40020470 	.word	0x40020470
 8004638:	40020488 	.word	0x40020488
 800463c:	400204a0 	.word	0x400204a0
 8004640:	400204b8 	.word	0x400204b8
 8004644:	aaaaaaab 	.word	0xaaaaaaab
 8004648:	08014104 	.word	0x08014104
 800464c:	fffffc00 	.word	0xfffffc00

08004650 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d120      	bne.n	80046a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	2b03      	cmp	r3, #3
 800466a:	d858      	bhi.n	800471e <DMA_CheckFifoParam+0xce>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <DMA_CheckFifoParam+0x24>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004685 	.word	0x08004685
 8004678:	08004697 	.word	0x08004697
 800467c:	08004685 	.word	0x08004685
 8004680:	0800471f 	.word	0x0800471f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d048      	beq.n	8004722 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004694:	e045      	b.n	8004722 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800469e:	d142      	bne.n	8004726 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046a4:	e03f      	b.n	8004726 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	d123      	bne.n	80046f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d838      	bhi.n	800472a <DMA_CheckFifoParam+0xda>
 80046b8:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <DMA_CheckFifoParam+0x70>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046d1 	.word	0x080046d1
 80046c4:	080046d7 	.word	0x080046d7
 80046c8:	080046d1 	.word	0x080046d1
 80046cc:	080046e9 	.word	0x080046e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
        break;
 80046d4:	e030      	b.n	8004738 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d025      	beq.n	800472e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046e6:	e022      	b.n	800472e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046f0:	d11f      	bne.n	8004732 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046f6:	e01c      	b.n	8004732 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d902      	bls.n	8004706 <DMA_CheckFifoParam+0xb6>
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004704:	e018      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
        break;
 800470a:	e015      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
    break;
 800471c:	e00b      	b.n	8004736 <DMA_CheckFifoParam+0xe6>
        break;
 800471e:	bf00      	nop
 8004720:	e00a      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 8004722:	bf00      	nop
 8004724:	e008      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 8004726:	bf00      	nop
 8004728:	e006      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 800472a:	bf00      	nop
 800472c:	e004      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
        break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <DMA_CheckFifoParam+0xe8>
    break;
 8004736:	bf00      	nop
    }
  }

  return status;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop

08004748 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a38      	ldr	r2, [pc, #224]	; (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a36      	ldr	r2, [pc, #216]	; (8004840 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01d      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a35      	ldr	r2, [pc, #212]	; (8004844 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d018      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a33      	ldr	r2, [pc, #204]	; (8004848 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a32      	ldr	r2, [pc, #200]	; (800484c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a30      	ldr	r2, [pc, #192]	; (8004850 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2d      	ldr	r2, [pc, #180]	; (8004858 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	3b08      	subs	r3, #8
 80047b8:	4a28      	ldr	r2, [pc, #160]	; (800485c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a24      	ldr	r2, [pc, #144]	; (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80047d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2201      	movs	r2, #1
 80047de:	409a      	lsls	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80047e4:	e024      	b.n	8004830 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3b10      	subs	r3, #16
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4a1c      	ldr	r2, [pc, #112]	; (800486c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d806      	bhi.n	800480e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d902      	bls.n	800480e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3308      	adds	r3, #8
 800480c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4b18      	ldr	r3, [pc, #96]	; (8004874 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a16      	ldr	r2, [pc, #88]	; (8004878 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004820:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2201      	movs	r2, #1
 800482a:	409a      	lsls	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	58025408 	.word	0x58025408
 8004840:	5802541c 	.word	0x5802541c
 8004844:	58025430 	.word	0x58025430
 8004848:	58025444 	.word	0x58025444
 800484c:	58025458 	.word	0x58025458
 8004850:	5802546c 	.word	0x5802546c
 8004854:	58025480 	.word	0x58025480
 8004858:	58025494 	.word	0x58025494
 800485c:	cccccccd 	.word	0xcccccccd
 8004860:	16009600 	.word	0x16009600
 8004864:	58025880 	.word	0x58025880
 8004868:	aaaaaaab 	.word	0xaaaaaaab
 800486c:	400204b8 	.word	0x400204b8
 8004870:	4002040f 	.word	0x4002040f
 8004874:	10008200 	.word	0x10008200
 8004878:	40020880 	.word	0x40020880

0800487c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d04a      	beq.n	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d847      	bhi.n	8004928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d022      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a24      	ldr	r2, [pc, #144]	; (8004938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d01d      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a22      	ldr	r2, [pc, #136]	; (800493c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d018      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a21      	ldr	r2, [pc, #132]	; (8004940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1f      	ldr	r2, [pc, #124]	; (8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	; (800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a15      	ldr	r2, [pc, #84]	; (8004958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004904:	671a      	str	r2, [r3, #112]	; 0x70
 8004906:	e009      	b.n	800491c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a11      	ldr	r2, [pc, #68]	; (8004960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800491a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3b01      	subs	r3, #1
 8004920:	2201      	movs	r2, #1
 8004922:	409a      	lsls	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	58025408 	.word	0x58025408
 8004938:	5802541c 	.word	0x5802541c
 800493c:	58025430 	.word	0x58025430
 8004940:	58025444 	.word	0x58025444
 8004944:	58025458 	.word	0x58025458
 8004948:	5802546c 	.word	0x5802546c
 800494c:	58025480 	.word	0x58025480
 8004950:	58025494 	.word	0x58025494
 8004954:	1600963f 	.word	0x1600963f
 8004958:	58025940 	.word	0x58025940
 800495c:	1000823f 	.word	0x1000823f
 8004960:	40020940 	.word	0x40020940

08004964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	; 0x24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004972:	4b89      	ldr	r3, [pc, #548]	; (8004b98 <HAL_GPIO_Init+0x234>)
 8004974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004976:	e194      	b.n	8004ca2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	2101      	movs	r1, #1
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	4013      	ands	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8186 	beq.w	8004c9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d005      	beq.n	80049a8 <HAL_GPIO_Init+0x44>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d130      	bne.n	8004a0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	2203      	movs	r2, #3
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049de:	2201      	movs	r2, #1
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0201 	and.w	r2, r3, #1
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d017      	beq.n	8004a46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	2203      	movs	r2, #3
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d123      	bne.n	8004a9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	08da      	lsrs	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3208      	adds	r2, #8
 8004a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	220f      	movs	r2, #15
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	08da      	lsrs	r2, r3, #3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3208      	adds	r2, #8
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0203 	and.w	r2, r3, #3
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80e0 	beq.w	8004c9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004adc:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <HAL_GPIO_Init+0x238>)
 8004ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ae2:	4a2e      	ldr	r2, [pc, #184]	; (8004b9c <HAL_GPIO_Init+0x238>)
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004aec:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <HAL_GPIO_Init+0x238>)
 8004aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004afa:	4a29      	ldr	r2, [pc, #164]	; (8004ba0 <HAL_GPIO_Init+0x23c>)
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	3302      	adds	r3, #2
 8004b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	220f      	movs	r2, #15
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43db      	mvns	r3, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a20      	ldr	r2, [pc, #128]	; (8004ba4 <HAL_GPIO_Init+0x240>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d052      	beq.n	8004bcc <HAL_GPIO_Init+0x268>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <HAL_GPIO_Init+0x244>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d031      	beq.n	8004b92 <HAL_GPIO_Init+0x22e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1e      	ldr	r2, [pc, #120]	; (8004bac <HAL_GPIO_Init+0x248>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02b      	beq.n	8004b8e <HAL_GPIO_Init+0x22a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <HAL_GPIO_Init+0x24c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d025      	beq.n	8004b8a <HAL_GPIO_Init+0x226>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_GPIO_Init+0x250>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01f      	beq.n	8004b86 <HAL_GPIO_Init+0x222>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <HAL_GPIO_Init+0x254>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d019      	beq.n	8004b82 <HAL_GPIO_Init+0x21e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <HAL_GPIO_Init+0x258>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_GPIO_Init+0x21a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <HAL_GPIO_Init+0x25c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00d      	beq.n	8004b7a <HAL_GPIO_Init+0x216>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_GPIO_Init+0x260>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0x212>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <HAL_GPIO_Init+0x264>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_GPIO_Init+0x20e>
 8004b6e:	2309      	movs	r3, #9
 8004b70:	e02d      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b72:	230a      	movs	r3, #10
 8004b74:	e02b      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b76:	2308      	movs	r3, #8
 8004b78:	e029      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b7a:	2307      	movs	r3, #7
 8004b7c:	e027      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b7e:	2306      	movs	r3, #6
 8004b80:	e025      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e023      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e021      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e01f      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e01d      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e01b      	b.n	8004bce <HAL_GPIO_Init+0x26a>
 8004b96:	bf00      	nop
 8004b98:	58000080 	.word	0x58000080
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	58000400 	.word	0x58000400
 8004ba4:	58020000 	.word	0x58020000
 8004ba8:	58020400 	.word	0x58020400
 8004bac:	58020800 	.word	0x58020800
 8004bb0:	58020c00 	.word	0x58020c00
 8004bb4:	58021000 	.word	0x58021000
 8004bb8:	58021400 	.word	0x58021400
 8004bbc:	58021800 	.word	0x58021800
 8004bc0:	58021c00 	.word	0x58021c00
 8004bc4:	58022000 	.word	0x58022000
 8004bc8:	58022400 	.word	0x58022400
 8004bcc:	2300      	movs	r3, #0
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	f002 0203 	and.w	r2, r2, #3
 8004bd4:	0092      	lsls	r2, r2, #2
 8004bd6:	4093      	lsls	r3, r2
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bde:	4938      	ldr	r1, [pc, #224]	; (8004cc0 <HAL_GPIO_Init+0x35c>)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	3302      	adds	r3, #2
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f47f ae63 	bne.w	8004978 <HAL_GPIO_Init+0x14>
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	3724      	adds	r7, #36	; 0x24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	58000400 	.word	0x58000400

08004cc4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004ccc:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <HAL_HSEM_FastTake+0x2c>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3320      	adds	r3, #32
 8004cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd6:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <HAL_HSEM_FastTake+0x30>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e000      	b.n	8004ce2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	58026400 	.word	0x58026400
 8004cf4:	80000300 	.word	0x80000300

08004cf8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004d02:	4906      	ldr	r1, [pc, #24]	; (8004d1c <HAL_HSEM_Release+0x24>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	58026400 	.word	0x58026400

08004d20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e10d      	b.n	8004f4e <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc ff30 	bl	8001bac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d107      	bne.n	8004d72 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d008      	beq.n	8004d94 <HAL_I2S_Init+0x74>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d004      	beq.n	8004d94 <HAL_I2S_Init+0x74>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b0a      	cmp	r3, #10
 8004d90:	f040 8087 	bne.w	8004ea2 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d05a      	beq.n	8004e52 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004da4:	2302      	movs	r3, #2
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e001      	b.n	8004dae <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8004daa:	2301      	movs	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b30      	cmp	r3, #48	; 0x30
 8004db4:	d003      	beq.n	8004dbe <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004dba:	2bb0      	cmp	r3, #176	; 0xb0
 8004dbc:	d102      	bne.n	8004dc4 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e001      	b.n	8004dc8 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8004dc8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	f002 fc9e 	bl	8007710 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dd4:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dde:	d113      	bne.n	8004e08 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	461a      	mov	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	3305      	adds	r3, #5
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	e014      	b.n	8004e32 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8004e08:	2220      	movs	r2, #32
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	461a      	mov	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	3305      	adds	r3, #5
 8004e30:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4a48      	ldr	r2, [pc, #288]	; (8004f58 <HAL_I2S_Init+0x238>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	08db      	lsrs	r3, r3, #3
 8004e3c:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e003      	b.n	8004e5a <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8004e52:	2302      	movs	r3, #2
 8004e54:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d102      	bne.n	8004e66 <HAL_I2S_Init+0x146>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d002      	beq.n	8004e6c <HAL_I2S_Init+0x14c>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	2bff      	cmp	r3, #255	; 0xff
 8004e6a:	d907      	bls.n	8004e7c <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	f043 0210 	orr.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e068      	b.n	8004f4e <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8004e82:	2301      	movs	r3, #1
 8004e84:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e8c:	4b33      	ldr	r3, [pc, #204]	; (8004f5c <HAL_I2S_Init+0x23c>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	0411      	lsls	r1, r2, #16
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	0612      	lsls	r2, r2, #24
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <HAL_I2S_Init+0x240>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6851      	ldr	r1, [r2, #4]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6892      	ldr	r2, [r2, #8]
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68d2      	ldr	r2, [r2, #12]
 8004eba:	4311      	orrs	r1, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6992      	ldr	r2, [r2, #24]
 8004ec0:	4311      	orrs	r1, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a12      	ldr	r2, [r2, #32]
 8004ec6:	4311      	orrs	r1, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ecc:	4311      	orrs	r1, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6912      	ldr	r2, [r2, #16]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f640 72f8 	movw	r2, #4088	; 0xff8
 8004ee8:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ef8:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d007      	beq.n	8004f28 <HAL_I2S_Init+0x208>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b06      	cmp	r3, #6
 8004f1e:	d003      	beq.n	8004f28 <HAL_I2S_Init+0x208>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b0a      	cmp	r3, #10
 8004f26:	d10a      	bne.n	8004f3e <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3720      	adds	r7, #32
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	cccccccd 	.word	0xcccccccd
 8004f5c:	fe00ffff 	.word	0xfe00ffff
 8004f60:	fdff9040 	.word	0xfdff9040

08004f64 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]


  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 8004f82:	887b      	ldrh	r3, [r7, #2]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_I2SEx_TransmitReceive_DMA+0x28>
  {
    return  HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0c0      	b.n	800510e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d001      	beq.n	8004f9c <HAL_I2SEx_TransmitReceive_DMA+0x38>
  {
    return HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e0b8      	b.n	800510e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_I2SEx_TransmitReceive_DMA+0x48>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e0b0      	b.n	800510e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  hi2s->pTxBuffPtr = (const uint16_t *)pTxData;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->pRxBuffPtr = pRxData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	635a      	str	r2, [r3, #52]	; 0x34

  hi2s->TxXferSize  = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	887a      	ldrh	r2, [r7, #2]
 8004fc4:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	887a      	ldrh	r2, [r7, #2]
 8004fca:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferSize  = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	887a      	ldrh	r2, [r7, #2]
 8004fd0:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	887a      	ldrh	r2, [r7, #2]
 8004fd6:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State       = HAL_I2S_STATE_BUSY_TX_RX;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2205      	movs	r2, #5
 8004fe2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004ff4:	609a      	str	r2, [r3, #8]

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_DMATxRxHalfCplt;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffa:	4a47      	ldr	r2, [pc, #284]	; (8005118 <HAL_I2SEx_TransmitReceive_DMA+0x1b4>)
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_DMATxRxCplt;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	4a46      	ldr	r2, [pc, #280]	; (800511c <HAL_I2SEx_TransmitReceive_DMA+0x1b8>)
 8005004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500a:	4a45      	ldr	r2, [pc, #276]	; (8005120 <HAL_I2SEx_TransmitReceive_DMA+0x1bc>)
 800500c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	4619      	mov	r1, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3320      	adds	r3, #32
 800501e:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005024:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005026:	f7fd ff21 	bl	8002e6c <HAL_DMA_Start_IT>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d011      	beq.n	8005054 <HAL_I2SEx_TransmitReceive_DMA+0xf0>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	f043 0208 	orr.w	r2, r3, #8
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	e05c      	b.n	800510e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d107      	bne.n	8005072 <HAL_I2SEx_TransmitReceive_DMA+0x10e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005070:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3330      	adds	r3, #48	; 0x30
 800507c:	4619      	mov	r1, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005088:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 800508a:	f7fd feef 	bl	8002e6c <HAL_DMA_Start_IT>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d011      	beq.n	80050b8 <HAL_I2SEx_TransmitReceive_DMA+0x154>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	f043 0208 	orr.w	r2, r3, #8
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	e02a      	b.n	800510e <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_I2SEx_TransmitReceive_DMA+0x172>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050d4:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <HAL_I2SEx_TransmitReceive_DMA+0x190>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005102:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	08005191 	.word	0x08005191
 800511c:	08005139 	.word	0x08005139
 8005120:	080051ad 	.word	0x080051ad

08005124 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <I2SEx_DMATxRxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxCplt(DMA_HandleTypeDef *hdma)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d119      	bne.n	8005182 <I2SEx_DMATxRxCplt+0x4a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800515c:	609a      	str	r2, [r3, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005172:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	875a      	strh	r2, [r3, #58]	; 0x3a

    /* Updated HAL State */
    hi2s->State = HAL_I2S_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7fc fb74 	bl	8001870 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <I2SEx_DMATxRxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7fc fb38 	bl	8001814 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80051c8:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e2:	f043 0208 	orr.w	r2, r3, #8
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff ff9a 	bl	8005124 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005200:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	2b06      	cmp	r3, #6
 800520a:	d00a      	beq.n	8005222 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800520c:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d001      	beq.n	800521e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e040      	b.n	80052a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e03e      	b.n	80052a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005222:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800522a:	491f      	ldr	r1, [pc, #124]	; (80052a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4313      	orrs	r3, r2
 8005230:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005232:	f7fd f94f 	bl	80024d4 <HAL_GetTick>
 8005236:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005238:	e009      	b.n	800524e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800523a:	f7fd f94b 	bl	80024d4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005248:	d901      	bls.n	800524e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e028      	b.n	80052a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800524e:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525a:	d1ee      	bne.n	800523a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b1e      	cmp	r3, #30
 8005260:	d008      	beq.n	8005274 <HAL_PWREx_ConfigSupply+0x7c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b2e      	cmp	r3, #46	; 0x2e
 8005266:	d005      	beq.n	8005274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b1d      	cmp	r3, #29
 800526c:	d002      	beq.n	8005274 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b2d      	cmp	r3, #45	; 0x2d
 8005272:	d114      	bne.n	800529e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005274:	f7fd f92e 	bl	80024d4 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800527a:	e009      	b.n	8005290 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800527c:	f7fd f92a 	bl	80024d4 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800528a:	d901      	bls.n	8005290 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e007      	b.n	80052a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529c:	d1ee      	bne.n	800527c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	58024800 	.word	0x58024800

080052ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	; 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d102      	bne.n	80052c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f000 bc48 	b.w	8005b50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8088 	beq.w	80053de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ce:	4b99      	ldr	r3, [pc, #612]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052d8:	4b96      	ldr	r3, [pc, #600]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d007      	beq.n	80052f4 <HAL_RCC_OscConfig+0x48>
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	2b18      	cmp	r3, #24
 80052e8:	d111      	bne.n	800530e <HAL_RCC_OscConfig+0x62>
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d10c      	bne.n	800530e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	4b8f      	ldr	r3, [pc, #572]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d06d      	beq.n	80053dc <HAL_RCC_OscConfig+0x130>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d169      	bne.n	80053dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	f000 bc21 	b.w	8005b50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x7a>
 8005318:	4b86      	ldr	r3, [pc, #536]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a85      	ldr	r2, [pc, #532]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e02e      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x9c>
 800532e:	4b81      	ldr	r3, [pc, #516]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a80      	ldr	r2, [pc, #512]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b7e      	ldr	r3, [pc, #504]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a7d      	ldr	r2, [pc, #500]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e01d      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005350:	d10c      	bne.n	800536c <HAL_RCC_OscConfig+0xc0>
 8005352:	4b78      	ldr	r3, [pc, #480]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a77      	ldr	r2, [pc, #476]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	4b75      	ldr	r3, [pc, #468]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a74      	ldr	r2, [pc, #464]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e00b      	b.n	8005384 <HAL_RCC_OscConfig+0xd8>
 800536c:	4b71      	ldr	r3, [pc, #452]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a70      	ldr	r2, [pc, #448]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b6e      	ldr	r3, [pc, #440]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a6d      	ldr	r2, [pc, #436]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800537e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d013      	beq.n	80053b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fd f8a2 	bl	80024d4 <HAL_GetTick>
 8005390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005394:	f7fd f89e 	bl	80024d4 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	; 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e3d4      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053a6:	4b63      	ldr	r3, [pc, #396]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0xe8>
 80053b2:	e014      	b.n	80053de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fd f88e 	bl	80024d4 <HAL_GetTick>
 80053b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fd f88a 	bl	80024d4 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e3c0      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ce:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x110>
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80ca 	beq.w	8005580 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ec:	4b51      	ldr	r3, [pc, #324]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053f6:	4b4f      	ldr	r3, [pc, #316]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_RCC_OscConfig+0x166>
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	2b18      	cmp	r3, #24
 8005406:	d156      	bne.n	80054b6 <HAL_RCC_OscConfig+0x20a>
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d151      	bne.n	80054b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005412:	4b48      	ldr	r3, [pc, #288]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_RCC_OscConfig+0x17e>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e392      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800542a:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 0219 	bic.w	r2, r3, #25
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	493f      	ldr	r1, [pc, #252]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fd f84a 	bl	80024d4 <HAL_GetTick>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005444:	f7fd f846 	bl	80024d4 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e37c      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005462:	f7fd f843 	bl	80024ec <HAL_GetREVID>
 8005466:	4603      	mov	r3, r0
 8005468:	f241 0203 	movw	r2, #4099	; 0x1003
 800546c:	4293      	cmp	r3, r2
 800546e:	d817      	bhi.n	80054a0 <HAL_RCC_OscConfig+0x1f4>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d108      	bne.n	800548a <HAL_RCC_OscConfig+0x1de>
 8005478:	4b2e      	ldr	r3, [pc, #184]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005480:	4a2c      	ldr	r2, [pc, #176]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005486:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005488:	e07a      	b.n	8005580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548a:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	031b      	lsls	r3, r3, #12
 8005498:	4926      	ldr	r1, [pc, #152]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800549a:	4313      	orrs	r3, r2
 800549c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800549e:	e06f      	b.n	8005580 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	4921      	ldr	r1, [pc, #132]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b4:	e064      	b.n	8005580 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d047      	beq.n	800554e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 0219 	bic.w	r2, r3, #25
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	491a      	ldr	r1, [pc, #104]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fd f800 	bl	80024d4 <HAL_GetTick>
 80054d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d8:	f7fc fffc 	bl	80024d4 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e332      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ea:	4b12      	ldr	r3, [pc, #72]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f6:	f7fc fff9 	bl	80024ec <HAL_GetREVID>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005500:	4293      	cmp	r3, r2
 8005502:	d819      	bhi.n	8005538 <HAL_RCC_OscConfig+0x28c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d108      	bne.n	800551e <HAL_RCC_OscConfig+0x272>
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005514:	4a07      	ldr	r2, [pc, #28]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551a:	6053      	str	r3, [r2, #4]
 800551c:	e030      	b.n	8005580 <HAL_RCC_OscConfig+0x2d4>
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	031b      	lsls	r3, r3, #12
 800552c:	4901      	ldr	r1, [pc, #4]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800552e:	4313      	orrs	r3, r2
 8005530:	604b      	str	r3, [r1, #4]
 8005532:	e025      	b.n	8005580 <HAL_RCC_OscConfig+0x2d4>
 8005534:	58024400 	.word	0x58024400
 8005538:	4b9a      	ldr	r3, [pc, #616]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	061b      	lsls	r3, r3, #24
 8005546:	4997      	ldr	r1, [pc, #604]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005548:	4313      	orrs	r3, r2
 800554a:	604b      	str	r3, [r1, #4]
 800554c:	e018      	b.n	8005580 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554e:	4b95      	ldr	r3, [pc, #596]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a94      	ldr	r2, [pc, #592]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fc ffbb 	bl	80024d4 <HAL_GetTick>
 800555e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005562:	f7fc ffb7 	bl	80024d4 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e2ed      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005574:	4b8b      	ldr	r3, [pc, #556]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f0      	bne.n	8005562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80a9 	beq.w	80056e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800558e:	4b85      	ldr	r3, [pc, #532]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005596:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005598:	4b82      	ldr	r3, [pc, #520]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d007      	beq.n	80055b4 <HAL_RCC_OscConfig+0x308>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b18      	cmp	r3, #24
 80055a8:	d13a      	bne.n	8005620 <HAL_RCC_OscConfig+0x374>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d135      	bne.n	8005620 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055b4:	4b7b      	ldr	r3, [pc, #492]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_RCC_OscConfig+0x320>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e2c1      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055cc:	f7fc ff8e 	bl	80024ec <HAL_GetREVID>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d817      	bhi.n	800560a <HAL_RCC_OscConfig+0x35e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d108      	bne.n	80055f4 <HAL_RCC_OscConfig+0x348>
 80055e2:	4b70      	ldr	r3, [pc, #448]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055ea:	4a6e      	ldr	r2, [pc, #440]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80055ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055f2:	e075      	b.n	80056e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055f4:	4b6b      	ldr	r3, [pc, #428]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	069b      	lsls	r3, r3, #26
 8005602:	4968      	ldr	r1, [pc, #416]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005604:	4313      	orrs	r3, r2
 8005606:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005608:	e06a      	b.n	80056e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800560a:	4b66      	ldr	r3, [pc, #408]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	061b      	lsls	r3, r3, #24
 8005618:	4962      	ldr	r1, [pc, #392]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800561a:	4313      	orrs	r3, r2
 800561c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800561e:	e05f      	b.n	80056e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d042      	beq.n	80056ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005628:	4b5e      	ldr	r3, [pc, #376]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5d      	ldr	r2, [pc, #372]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800562e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fc ff4e 	bl	80024d4 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800563c:	f7fc ff4a 	bl	80024d4 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e280      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800564e:	4b55      	ldr	r3, [pc, #340]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800565a:	f7fc ff47 	bl	80024ec <HAL_GetREVID>
 800565e:	4603      	mov	r3, r0
 8005660:	f241 0203 	movw	r2, #4099	; 0x1003
 8005664:	4293      	cmp	r3, r2
 8005666:	d817      	bhi.n	8005698 <HAL_RCC_OscConfig+0x3ec>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	2b20      	cmp	r3, #32
 800566e:	d108      	bne.n	8005682 <HAL_RCC_OscConfig+0x3d6>
 8005670:	4b4c      	ldr	r3, [pc, #304]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005678:	4a4a      	ldr	r2, [pc, #296]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800567a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800567e:	6053      	str	r3, [r2, #4]
 8005680:	e02e      	b.n	80056e0 <HAL_RCC_OscConfig+0x434>
 8005682:	4b48      	ldr	r3, [pc, #288]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	069b      	lsls	r3, r3, #26
 8005690:	4944      	ldr	r1, [pc, #272]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005692:	4313      	orrs	r3, r2
 8005694:	604b      	str	r3, [r1, #4]
 8005696:	e023      	b.n	80056e0 <HAL_RCC_OscConfig+0x434>
 8005698:	4b42      	ldr	r3, [pc, #264]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	493f      	ldr	r1, [pc, #252]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60cb      	str	r3, [r1, #12]
 80056ac:	e018      	b.n	80056e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056ae:	4b3d      	ldr	r3, [pc, #244]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80056b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fc ff0b 	bl	80024d4 <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80056c2:	f7fc ff07 	bl	80024d4 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e23d      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056d4:	4b33      	ldr	r3, [pc, #204]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f0      	bne.n	80056c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d036      	beq.n	800575a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d019      	beq.n	8005728 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056f4:	4b2b      	ldr	r3, [pc, #172]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80056f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f8:	4a2a      	ldr	r2, [pc, #168]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fc fee8 	bl	80024d4 <HAL_GetTick>
 8005704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005708:	f7fc fee4 	bl	80024d4 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e21a      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800571a:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800571c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0x45c>
 8005726:	e018      	b.n	800575a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800572a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fc fece 	bl	80024d4 <HAL_GetTick>
 8005738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800573c:	f7fc feca 	bl	80024d4 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e200      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d039      	beq.n	80057da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01c      	beq.n	80057a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800576e:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800577a:	f7fc feab 	bl	80024d4 <HAL_GetTick>
 800577e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005780:	e008      	b.n	8005794 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005782:	f7fc fea7 	bl	80024d4 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e1dd      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <HAL_RCC_OscConfig+0x4f8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0f0      	beq.n	8005782 <HAL_RCC_OscConfig+0x4d6>
 80057a0:	e01b      	b.n	80057da <HAL_RCC_OscConfig+0x52e>
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057a8:	4b9b      	ldr	r3, [pc, #620]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a9a      	ldr	r2, [pc, #616]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80057ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057b4:	f7fc fe8e 	bl	80024d4 <HAL_GetTick>
 80057b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057bc:	f7fc fe8a 	bl	80024d4 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e1c0      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ce:	4b92      	ldr	r3, [pc, #584]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0304 	and.w	r3, r3, #4
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8081 	beq.w	80058ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057e8:	4b8c      	ldr	r3, [pc, #560]	; (8005a1c <HAL_RCC_OscConfig+0x770>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a8b      	ldr	r2, [pc, #556]	; (8005a1c <HAL_RCC_OscConfig+0x770>)
 80057ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057f4:	f7fc fe6e 	bl	80024d4 <HAL_GetTick>
 80057f8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fc:	f7fc fe6a 	bl	80024d4 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	; 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e1a0      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800580e:	4b83      	ldr	r3, [pc, #524]	; (8005a1c <HAL_RCC_OscConfig+0x770>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d106      	bne.n	8005830 <HAL_RCC_OscConfig+0x584>
 8005822:	4b7d      	ldr	r3, [pc, #500]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	4a7c      	ldr	r2, [pc, #496]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
 800582e:	e02d      	b.n	800588c <HAL_RCC_OscConfig+0x5e0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10c      	bne.n	8005852 <HAL_RCC_OscConfig+0x5a6>
 8005838:	4b77      	ldr	r3, [pc, #476]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	4a76      	ldr	r2, [pc, #472]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	6713      	str	r3, [r2, #112]	; 0x70
 8005844:	4b74      	ldr	r3, [pc, #464]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	4a73      	ldr	r2, [pc, #460]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800584a:	f023 0304 	bic.w	r3, r3, #4
 800584e:	6713      	str	r3, [r2, #112]	; 0x70
 8005850:	e01c      	b.n	800588c <HAL_RCC_OscConfig+0x5e0>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b05      	cmp	r3, #5
 8005858:	d10c      	bne.n	8005874 <HAL_RCC_OscConfig+0x5c8>
 800585a:	4b6f      	ldr	r3, [pc, #444]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	4a6e      	ldr	r2, [pc, #440]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005860:	f043 0304 	orr.w	r3, r3, #4
 8005864:	6713      	str	r3, [r2, #112]	; 0x70
 8005866:	4b6c      	ldr	r3, [pc, #432]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	4a6b      	ldr	r2, [pc, #428]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800586c:	f043 0301 	orr.w	r3, r3, #1
 8005870:	6713      	str	r3, [r2, #112]	; 0x70
 8005872:	e00b      	b.n	800588c <HAL_RCC_OscConfig+0x5e0>
 8005874:	4b68      	ldr	r3, [pc, #416]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005878:	4a67      	ldr	r2, [pc, #412]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800587a:	f023 0301 	bic.w	r3, r3, #1
 800587e:	6713      	str	r3, [r2, #112]	; 0x70
 8005880:	4b65      	ldr	r3, [pc, #404]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	4a64      	ldr	r2, [pc, #400]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005886:	f023 0304 	bic.w	r3, r3, #4
 800588a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d015      	beq.n	80058c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fc fe1e 	bl	80024d4 <HAL_GetTick>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f7fc fe1a 	bl	80024d4 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e14e      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058b2:	4b59      	ldr	r3, [pc, #356]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ee      	beq.n	800589c <HAL_RCC_OscConfig+0x5f0>
 80058be:	e014      	b.n	80058ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fc fe08 	bl	80024d4 <HAL_GetTick>
 80058c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058c6:	e00a      	b.n	80058de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c8:	f7fc fe04 	bl	80024d4 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e138      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058de:	4b4e      	ldr	r3, [pc, #312]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ee      	bne.n	80058c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 812d 	beq.w	8005b4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058f4:	4b48      	ldr	r3, [pc, #288]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058fc:	2b18      	cmp	r3, #24
 80058fe:	f000 80bd 	beq.w	8005a7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b02      	cmp	r3, #2
 8005908:	f040 809e 	bne.w	8005a48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590c:	4b42      	ldr	r3, [pc, #264]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a41      	ldr	r2, [pc, #260]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fc fddc 	bl	80024d4 <HAL_GetTick>
 800591c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005920:	f7fc fdd8 	bl	80024d4 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e10e      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005932:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800593e:	4b36      	ldr	r3, [pc, #216]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005942:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCC_OscConfig+0x774>)
 8005944:	4013      	ands	r3, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800594e:	0112      	lsls	r2, r2, #4
 8005950:	430a      	orrs	r2, r1
 8005952:	4931      	ldr	r1, [pc, #196]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005954:	4313      	orrs	r3, r2
 8005956:	628b      	str	r3, [r1, #40]	; 0x28
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	3b01      	subs	r3, #1
 800595e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	3b01      	subs	r3, #1
 8005968:	025b      	lsls	r3, r3, #9
 800596a:	b29b      	uxth	r3, r3
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	3b01      	subs	r3, #1
 8005974:	041b      	lsls	r3, r3, #16
 8005976:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	3b01      	subs	r3, #1
 8005982:	061b      	lsls	r3, r3, #24
 8005984:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005988:	4923      	ldr	r1, [pc, #140]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800598a:	4313      	orrs	r3, r2
 800598c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800598e:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800599a:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 800599c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599e:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <HAL_RCC_OscConfig+0x778>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059a6:	00d2      	lsls	r2, r2, #3
 80059a8:	491b      	ldr	r1, [pc, #108]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059ae:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	f023 020c 	bic.w	r2, r3, #12
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	4917      	ldr	r1, [pc, #92]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059c0:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	f023 0202 	bic.w	r2, r3, #2
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059cc:	4912      	ldr	r1, [pc, #72]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	4a10      	ldr	r2, [pc, #64]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059de:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	4a0d      	ldr	r2, [pc, #52]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a02:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <HAL_RCC_OscConfig+0x76c>)
 8005a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fc fd61 	bl	80024d4 <HAL_GetTick>
 8005a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a14:	e011      	b.n	8005a3a <HAL_RCC_OscConfig+0x78e>
 8005a16:	bf00      	nop
 8005a18:	58024400 	.word	0x58024400
 8005a1c:	58024800 	.word	0x58024800
 8005a20:	fffffc0c 	.word	0xfffffc0c
 8005a24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a28:	f7fc fd54 	bl	80024d4 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e08a      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a3a:	4b47      	ldr	r3, [pc, #284]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0x77c>
 8005a46:	e082      	b.n	8005b4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a48:	4b43      	ldr	r3, [pc, #268]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a42      	ldr	r2, [pc, #264]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fc fd3e 	bl	80024d4 <HAL_GetTick>
 8005a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fc fd3a 	bl	80024d4 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e070      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a6e:	4b3a      	ldr	r3, [pc, #232]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x7b0>
 8005a7a:	e068      	b.n	8005b4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a7c:	4b36      	ldr	r3, [pc, #216]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a82:	4b35      	ldr	r3, [pc, #212]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d031      	beq.n	8005af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f003 0203 	and.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d12a      	bne.n	8005af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d122      	bne.n	8005af4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d11a      	bne.n	8005af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	0a5b      	lsrs	r3, r3, #9
 8005ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d111      	bne.n	8005af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d108      	bne.n	8005af4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	0e1b      	lsrs	r3, r3, #24
 8005ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e02b      	b.n	8005b50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005af8:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	08db      	lsrs	r3, r3, #3
 8005afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d01f      	beq.n	8005b4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b1a:	f7fc fcdb 	bl	80024d4 <HAL_GetTick>
 8005b1e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005b20:	bf00      	nop
 8005b22:	f7fc fcd7 	bl	80024d4 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d0f9      	beq.n	8005b22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b2e:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <HAL_RCC_OscConfig+0x8b0>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b3a:	00d2      	lsls	r2, r2, #3
 8005b3c:	4906      	ldr	r1, [pc, #24]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <HAL_RCC_OscConfig+0x8ac>)
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3730      	adds	r7, #48	; 0x30
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	ffff0007 	.word	0xffff0007

08005b60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e19c      	b.n	8005eae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b74:	4b8a      	ldr	r3, [pc, #552]	; (8005da0 <HAL_RCC_ClockConfig+0x240>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d910      	bls.n	8005ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b87      	ldr	r3, [pc, #540]	; (8005da0 <HAL_RCC_ClockConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 020f 	bic.w	r2, r3, #15
 8005b8a:	4985      	ldr	r1, [pc, #532]	; (8005da0 <HAL_RCC_ClockConfig+0x240>)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	4b83      	ldr	r3, [pc, #524]	; (8005da0 <HAL_RCC_ClockConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e184      	b.n	8005eae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d010      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	4b7b      	ldr	r3, [pc, #492]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d908      	bls.n	8005bd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bc0:	4b78      	ldr	r3, [pc, #480]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	4975      	ldr	r1, [pc, #468]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d010      	beq.n	8005c00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	4b70      	ldr	r3, [pc, #448]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d908      	bls.n	8005c00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bee:	4b6d      	ldr	r3, [pc, #436]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	496a      	ldr	r1, [pc, #424]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d010      	beq.n	8005c2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	4b64      	ldr	r3, [pc, #400]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d908      	bls.n	8005c2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c1c:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	495e      	ldr	r1, [pc, #376]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d010      	beq.n	8005c5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	4b59      	ldr	r3, [pc, #356]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d908      	bls.n	8005c5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c4a:	4b56      	ldr	r3, [pc, #344]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4953      	ldr	r1, [pc, #332]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d010      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	4b4d      	ldr	r3, [pc, #308]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d908      	bls.n	8005c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c78:	4b4a      	ldr	r3, [pc, #296]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f023 020f 	bic.w	r2, r3, #15
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4947      	ldr	r1, [pc, #284]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d055      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c96:	4b43      	ldr	r3, [pc, #268]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	4940      	ldr	r1, [pc, #256]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d107      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cb0:	4b3c      	ldr	r3, [pc, #240]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d121      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0f6      	b.n	8005eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d107      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cc8:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d115      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0ea      	b.n	8005eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d107      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ce0:	4b30      	ldr	r3, [pc, #192]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d109      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0de      	b.n	8005eae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf0:	4b2c      	ldr	r3, [pc, #176]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0d6      	b.n	8005eae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d00:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f023 0207 	bic.w	r2, r3, #7
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4925      	ldr	r1, [pc, #148]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d12:	f7fc fbdf 	bl	80024d4 <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d1a:	f7fc fbdb 	bl	80024d4 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e0be      	b.n	8005eae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d30:	4b1c      	ldr	r3, [pc, #112]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d1eb      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d208      	bcs.n	8005d70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f023 020f 	bic.w	r2, r3, #15
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	490e      	ldr	r1, [pc, #56]	; (8005da4 <HAL_RCC_ClockConfig+0x244>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_ClockConfig+0x240>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d214      	bcs.n	8005da8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7e:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <HAL_RCC_ClockConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f023 020f 	bic.w	r2, r3, #15
 8005d86:	4906      	ldr	r1, [pc, #24]	; (8005da0 <HAL_RCC_ClockConfig+0x240>)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8e:	4b04      	ldr	r3, [pc, #16]	; (8005da0 <HAL_RCC_ClockConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e086      	b.n	8005eae <HAL_RCC_ClockConfig+0x34e>
 8005da0:	52002000 	.word	0x52002000
 8005da4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d010      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	4b3f      	ldr	r3, [pc, #252]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d208      	bcs.n	8005dd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dc4:	4b3c      	ldr	r3, [pc, #240]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	4939      	ldr	r1, [pc, #228]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d010      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	4b34      	ldr	r3, [pc, #208]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d208      	bcs.n	8005e04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005df2:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	492e      	ldr	r1, [pc, #184]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d010      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d208      	bcs.n	8005e32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	4922      	ldr	r1, [pc, #136]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d010      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d208      	bcs.n	8005e60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e4e:	4b1a      	ldr	r3, [pc, #104]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	4917      	ldr	r1, [pc, #92]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e60:	f000 f834 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8005e64:	4602      	mov	r2, r0
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	4912      	ldr	r1, [pc, #72]	; (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e72:	5ccb      	ldrb	r3, [r1, r3]
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <HAL_RCC_ClockConfig+0x358>)
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e88:	5cd3      	ldrb	r3, [r2, r3]
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
 8005e94:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <HAL_RCC_ClockConfig+0x360>)
 8005e96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e98:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <HAL_RCC_ClockConfig+0x364>)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <HAL_RCC_ClockConfig+0x368>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fc f918 	bl	80020d8 <HAL_InitTick>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	08014064 	.word	0x08014064
 8005ec0:	24000004 	.word	0x24000004
 8005ec4:	24000000 	.word	0x24000000
 8005ec8:	24000014 	.word	0x24000014

08005ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b089      	sub	sp, #36	; 0x24
 8005ed0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ed2:	4bb3      	ldr	r3, [pc, #716]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eda:	2b18      	cmp	r3, #24
 8005edc:	f200 8155 	bhi.w	800618a <HAL_RCC_GetSysClockFreq+0x2be>
 8005ee0:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005f4d 	.word	0x08005f4d
 8005eec:	0800618b 	.word	0x0800618b
 8005ef0:	0800618b 	.word	0x0800618b
 8005ef4:	0800618b 	.word	0x0800618b
 8005ef8:	0800618b 	.word	0x0800618b
 8005efc:	0800618b 	.word	0x0800618b
 8005f00:	0800618b 	.word	0x0800618b
 8005f04:	0800618b 	.word	0x0800618b
 8005f08:	08005f73 	.word	0x08005f73
 8005f0c:	0800618b 	.word	0x0800618b
 8005f10:	0800618b 	.word	0x0800618b
 8005f14:	0800618b 	.word	0x0800618b
 8005f18:	0800618b 	.word	0x0800618b
 8005f1c:	0800618b 	.word	0x0800618b
 8005f20:	0800618b 	.word	0x0800618b
 8005f24:	0800618b 	.word	0x0800618b
 8005f28:	08005f79 	.word	0x08005f79
 8005f2c:	0800618b 	.word	0x0800618b
 8005f30:	0800618b 	.word	0x0800618b
 8005f34:	0800618b 	.word	0x0800618b
 8005f38:	0800618b 	.word	0x0800618b
 8005f3c:	0800618b 	.word	0x0800618b
 8005f40:	0800618b 	.word	0x0800618b
 8005f44:	0800618b 	.word	0x0800618b
 8005f48:	08005f7f 	.word	0x08005f7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4c:	4b94      	ldr	r3, [pc, #592]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f58:	4b91      	ldr	r3, [pc, #580]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	4a90      	ldr	r2, [pc, #576]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
 8005f68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005f6a:	e111      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f6c:	4b8d      	ldr	r3, [pc, #564]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f6e:	61bb      	str	r3, [r7, #24]
      break;
 8005f70:	e10e      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005f72:	4b8d      	ldr	r3, [pc, #564]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f74:	61bb      	str	r3, [r7, #24]
      break;
 8005f76:	e10b      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005f78:	4b8c      	ldr	r3, [pc, #560]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f7a:	61bb      	str	r3, [r7, #24]
      break;
 8005f7c:	e108      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f7e:	4b88      	ldr	r3, [pc, #544]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f88:	4b85      	ldr	r3, [pc, #532]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f94:	4b82      	ldr	r3, [pc, #520]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f9e:	4b80      	ldr	r3, [pc, #512]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	08db      	lsrs	r3, r3, #3
 8005fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80e1 	beq.w	8006184 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	f000 8083 	beq.w	80060d0 <HAL_RCC_GetSysClockFreq+0x204>
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	f200 80a1 	bhi.w	8006114 <HAL_RCC_GetSysClockFreq+0x248>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x114>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d056      	beq.n	800608c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005fde:	e099      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fe0:	4b6f      	ldr	r3, [pc, #444]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d02d      	beq.n	8006048 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fec:	4b6c      	ldr	r3, [pc, #432]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	08db      	lsrs	r3, r3, #3
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	4a6b      	ldr	r2, [pc, #428]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	ee07 3a90 	vmov	s15, r3
 8006004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b62      	ldr	r3, [pc, #392]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a02 	vldr	s12, [r7, #8]
 800602a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80061b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006046:	e087      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a58 	vldr	s13, [pc, #352]	; 80061b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b51      	ldr	r3, [pc, #324]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a02 	vldr	s12, [r7, #8]
 800606e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80061b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800608a:	e065      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a48 	vldr	s13, [pc, #288]	; 80061b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80061b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060ce:	e043      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80060de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80061b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006112:	e021      	b.n	8006158 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80061b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006126:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006136:	ed97 6a02 	vldr	s12, [r7, #8]
 800613a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80061b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800613e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006156:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	0a5b      	lsrs	r3, r3, #9
 800615e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006162:	3301      	adds	r3, #1
 8006164:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006170:	edd7 6a07 	vldr	s13, [r7, #28]
 8006174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617c:	ee17 3a90 	vmov	r3, s15
 8006180:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006182:	e005      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	61bb      	str	r3, [r7, #24]
      break;
 8006188:	e002      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800618a:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800618c:	61bb      	str	r3, [r7, #24]
      break;
 800618e:	bf00      	nop
  }

  return sysclockfreq;
 8006190:	69bb      	ldr	r3, [r7, #24]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3724      	adds	r7, #36	; 0x24
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	58024400 	.word	0x58024400
 80061a4:	03d09000 	.word	0x03d09000
 80061a8:	003d0900 	.word	0x003d0900
 80061ac:	01770000 	.word	0x01770000
 80061b0:	46000000 	.word	0x46000000
 80061b4:	4c742400 	.word	0x4c742400
 80061b8:	4a742400 	.word	0x4a742400
 80061bc:	4bbb8000 	.word	0x4bbb8000

080061c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061c6:	f7ff fe81 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 80061ca:	4602      	mov	r2, r0
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <HAL_RCC_GetHCLKFreq+0x50>)
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	0a1b      	lsrs	r3, r3, #8
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	490f      	ldr	r1, [pc, #60]	; (8006214 <HAL_RCC_GetHCLKFreq+0x54>)
 80061d8:	5ccb      	ldrb	r3, [r1, r3]
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	fa22 f303 	lsr.w	r3, r2, r3
 80061e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061e4:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <HAL_RCC_GetHCLKFreq+0x50>)
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	4a09      	ldr	r2, [pc, #36]	; (8006214 <HAL_RCC_GetHCLKFreq+0x54>)
 80061ee:	5cd3      	ldrb	r3, [r2, r3]
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	fa22 f303 	lsr.w	r3, r2, r3
 80061fa:	4a07      	ldr	r2, [pc, #28]	; (8006218 <HAL_RCC_GetHCLKFreq+0x58>)
 80061fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061fe:	4a07      	ldr	r2, [pc, #28]	; (800621c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <HAL_RCC_GetHCLKFreq+0x58>)
 8006206:	681b      	ldr	r3, [r3, #0]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	58024400 	.word	0x58024400
 8006214:	08014064 	.word	0x08014064
 8006218:	24000004 	.word	0x24000004
 800621c:	24000000 	.word	0x24000000

08006220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006224:	f7ff ffcc 	bl	80061c0 <HAL_RCC_GetHCLKFreq>
 8006228:	4602      	mov	r2, r0
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	4904      	ldr	r1, [pc, #16]	; (8006248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006236:	5ccb      	ldrb	r3, [r1, r3]
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006240:	4618      	mov	r0, r3
 8006242:	bd80      	pop	{r7, pc}
 8006244:	58024400 	.word	0x58024400
 8006248:	08014064 	.word	0x08014064

0800624c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006250:	f7ff ffb6 	bl	80061c0 <HAL_RCC_GetHCLKFreq>
 8006254:	4602      	mov	r2, r0
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	4904      	ldr	r1, [pc, #16]	; (8006274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006262:	5ccb      	ldrb	r3, [r1, r3]
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800626c:	4618      	mov	r0, r3
 800626e:	bd80      	pop	{r7, pc}
 8006270:	58024400 	.word	0x58024400
 8006274:	08014064 	.word	0x08014064

08006278 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	223f      	movs	r2, #63	; 0x3f
 8006286:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <HAL_RCC_GetClockConfig+0x7c>)
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 0207 	and.w	r2, r3, #7
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006294:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <HAL_RCC_GetClockConfig+0x7c>)
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80062a0:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <HAL_RCC_GetClockConfig+0x7c>)
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f003 020f 	and.w	r2, r3, #15
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80062ac:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <HAL_RCC_GetClockConfig+0x7c>)
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80062b8:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <HAL_RCC_GetClockConfig+0x7c>)
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <HAL_RCC_GetClockConfig+0x7c>)
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <HAL_RCC_GetClockConfig+0x7c>)
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062dc:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <HAL_RCC_GetClockConfig+0x80>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 020f 	and.w	r2, r3, #15
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	601a      	str	r2, [r3, #0]
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	58024400 	.word	0x58024400
 80062f8:	52002000 	.word	0x52002000

080062fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006300:	b0ca      	sub	sp, #296	; 0x128
 8006302:	af00      	add	r7, sp, #0
 8006304:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006308:	2300      	movs	r3, #0
 800630a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800630e:	2300      	movs	r3, #0
 8006310:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006320:	2500      	movs	r5, #0
 8006322:	ea54 0305 	orrs.w	r3, r4, r5
 8006326:	d049      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800632c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800632e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006332:	d02f      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006334:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006338:	d828      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800633a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800633e:	d01a      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006344:	d822      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800634a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634e:	d007      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006350:	e01c      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006352:	4bb8      	ldr	r3, [pc, #736]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4ab7      	ldr	r2, [pc, #732]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800635e:	e01a      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006364:	3308      	adds	r3, #8
 8006366:	2102      	movs	r1, #2
 8006368:	4618      	mov	r0, r3
 800636a:	f002 fb61 	bl	8008a30 <RCCEx_PLL2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006374:	e00f      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637a:	3328      	adds	r3, #40	; 0x28
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f002 fc08 	bl	8008b94 <RCCEx_PLL3_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800638a:	e004      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006392:	e000      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800639e:	4ba5      	ldr	r3, [pc, #660]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ac:	4aa1      	ldr	r2, [pc, #644]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063ae:	430b      	orrs	r3, r1
 80063b0:	6513      	str	r3, [r2, #80]	; 0x50
 80063b2:	e003      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80063c8:	f04f 0900 	mov.w	r9, #0
 80063cc:	ea58 0309 	orrs.w	r3, r8, r9
 80063d0:	d047      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d82a      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	080063f9 	.word	0x080063f9
 80063e8:	08006407 	.word	0x08006407
 80063ec:	0800641d 	.word	0x0800641d
 80063f0:	0800643b 	.word	0x0800643b
 80063f4:	0800643b 	.word	0x0800643b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f8:	4b8e      	ldr	r3, [pc, #568]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a8d      	ldr	r2, [pc, #564]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006404:	e01a      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640a:	3308      	adds	r3, #8
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f002 fb0e 	bl	8008a30 <RCCEx_PLL2_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800641a:	e00f      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006420:	3328      	adds	r3, #40	; 0x28
 8006422:	2100      	movs	r1, #0
 8006424:	4618      	mov	r0, r3
 8006426:	f002 fbb5 	bl	8008b94 <RCCEx_PLL3_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006430:	e004      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006438:	e000      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800643a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006444:	4b7b      	ldr	r3, [pc, #492]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006448:	f023 0107 	bic.w	r1, r3, #7
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	4a78      	ldr	r2, [pc, #480]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006454:	430b      	orrs	r3, r1
 8006456:	6513      	str	r3, [r2, #80]	; 0x50
 8006458:	e003      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800645e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800646e:	f04f 0b00 	mov.w	fp, #0
 8006472:	ea5a 030b 	orrs.w	r3, sl, fp
 8006476:	d04c      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006482:	d030      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006488:	d829      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800648a:	2bc0      	cmp	r3, #192	; 0xc0
 800648c:	d02d      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800648e:	2bc0      	cmp	r3, #192	; 0xc0
 8006490:	d825      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006492:	2b80      	cmp	r3, #128	; 0x80
 8006494:	d018      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d821      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d007      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80064a2:	e01c      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a4:	4b63      	ldr	r3, [pc, #396]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4a62      	ldr	r2, [pc, #392]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80064b0:	e01c      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b6:	3308      	adds	r3, #8
 80064b8:	2100      	movs	r1, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f002 fab8 	bl	8008a30 <RCCEx_PLL2_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80064c6:	e011      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064cc:	3328      	adds	r3, #40	; 0x28
 80064ce:	2100      	movs	r1, #0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f002 fb5f 	bl	8008b94 <RCCEx_PLL3_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80064dc:	e006      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80064ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80064f4:	4b4f      	ldr	r3, [pc, #316]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	4a4c      	ldr	r2, [pc, #304]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6513      	str	r3, [r2, #80]	; 0x50
 8006508:	e003      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800650e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800651e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006522:	2300      	movs	r3, #0
 8006524:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006528:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d053      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800653a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800653e:	d035      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006544:	d82e      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006546:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800654a:	d031      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800654c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006550:	d828      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006556:	d01a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800655c:	d822      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006566:	d007      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006568:	e01c      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656a:	4b32      	ldr	r3, [pc, #200]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	4a31      	ldr	r2, [pc, #196]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006576:	e01c      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657c:	3308      	adds	r3, #8
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f002 fa55 	bl	8008a30 <RCCEx_PLL2_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800658c:	e011      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006592:	3328      	adds	r3, #40	; 0x28
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f002 fafc 	bl	8008b94 <RCCEx_PLL3_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065a2:	e006      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065aa:	e002      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80065ac:	bf00      	nop
 80065ae:	e000      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80065b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80065ba:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065be:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065ca:	4a1a      	ldr	r2, [pc, #104]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6593      	str	r3, [r2, #88]	; 0x58
 80065d0:	e003      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80065e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80065ea:	2300      	movs	r3, #0
 80065ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80065f4:	460b      	mov	r3, r1
 80065f6:	4313      	orrs	r3, r2
 80065f8:	d056      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006606:	d038      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800660c:	d831      	bhi.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800660e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006612:	d034      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006618:	d82b      	bhi.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800661a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800661e:	d01d      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006624:	d825      	bhi.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d006      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800662a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800662e:	d00a      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006630:	e01f      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006632:	bf00      	nop
 8006634:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006638:	4ba2      	ldr	r3, [pc, #648]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4aa1      	ldr	r2, [pc, #644]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800663e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006644:	e01c      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664a:	3308      	adds	r3, #8
 800664c:	2100      	movs	r1, #0
 800664e:	4618      	mov	r0, r3
 8006650:	f002 f9ee 	bl	8008a30 <RCCEx_PLL2_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800665a:	e011      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006660:	3328      	adds	r3, #40	; 0x28
 8006662:	2100      	movs	r1, #0
 8006664:	4618      	mov	r0, r3
 8006666:	f002 fa95 	bl	8008b94 <RCCEx_PLL3_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006670:	e006      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006678:	e002      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800667e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10b      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006688:	4b8e      	ldr	r3, [pc, #568]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800668a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006694:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006698:	4a8a      	ldr	r2, [pc, #552]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800669a:	430b      	orrs	r3, r1
 800669c:	6593      	str	r3, [r2, #88]	; 0x58
 800669e:	e003      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80066b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066b8:	2300      	movs	r3, #0
 80066ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80066c2:	460b      	mov	r3, r1
 80066c4:	4313      	orrs	r3, r2
 80066c6:	d03a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80066c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ce:	2b30      	cmp	r3, #48	; 0x30
 80066d0:	d01f      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80066d2:	2b30      	cmp	r3, #48	; 0x30
 80066d4:	d819      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d00c      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d815      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d019      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d111      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e6:	4b77      	ldr	r3, [pc, #476]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	4a76      	ldr	r2, [pc, #472]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80066f2:	e011      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f8:	3308      	adds	r3, #8
 80066fa:	2102      	movs	r1, #2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f002 f997 	bl	8008a30 <RCCEx_PLL2_Config>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006708:	e006      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006710:	e002      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006712:	bf00      	nop
 8006714:	e000      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006718:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006720:	4b68      	ldr	r3, [pc, #416]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006724:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800672c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672e:	4a65      	ldr	r2, [pc, #404]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006730:	430b      	orrs	r3, r1
 8006732:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006734:	e003      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800673a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800674a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800674e:	2300      	movs	r3, #0
 8006750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006754:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006758:	460b      	mov	r3, r1
 800675a:	4313      	orrs	r3, r2
 800675c:	d051      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006768:	d035      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800676a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800676e:	d82e      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006770:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006774:	d031      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800677a:	d828      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800677c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006780:	d01a      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006786:	d822      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006790:	d007      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006792:	e01c      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006794:	4b4b      	ldr	r3, [pc, #300]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	4a4a      	ldr	r2, [pc, #296]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800679a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067a0:	e01c      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	3308      	adds	r3, #8
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f002 f940 	bl	8008a30 <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067b6:	e011      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067bc:	3328      	adds	r3, #40	; 0x28
 80067be:	2100      	movs	r1, #0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f002 f9e7 	bl	8008b94 <RCCEx_PLL3_Config>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80067cc:	e006      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067d4:	e002      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80067da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80067e4:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f2:	4a34      	ldr	r2, [pc, #208]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067f4:	430b      	orrs	r3, r1
 80067f6:	6513      	str	r3, [r2, #80]	; 0x50
 80067f8:	e003      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800680e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006812:	2300      	movs	r3, #0
 8006814:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006818:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800681c:	460b      	mov	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	d056      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800682c:	d033      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800682e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006832:	d82c      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006838:	d02f      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800683a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800683e:	d826      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006840:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006844:	d02b      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800684a:	d820      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800684c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006850:	d012      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006856:	d81a      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d022      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d115      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006866:	3308      	adds	r3, #8
 8006868:	2101      	movs	r1, #1
 800686a:	4618      	mov	r0, r3
 800686c:	f002 f8e0 	bl	8008a30 <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006876:	e015      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687c:	3328      	adds	r3, #40	; 0x28
 800687e:	2101      	movs	r1, #1
 8006880:	4618      	mov	r0, r3
 8006882:	f002 f987 	bl	8008b94 <RCCEx_PLL3_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800688c:	e00a      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006894:	e006      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006896:	bf00      	nop
 8006898:	e004      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800689a:	bf00      	nop
 800689c:	e002      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10d      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ba:	4a02      	ldr	r2, [pc, #8]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068bc:	430b      	orrs	r3, r1
 80068be:	6513      	str	r3, [r2, #80]	; 0x50
 80068c0:	e006      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80068c2:	bf00      	nop
 80068c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80068dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	d055      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068fc:	d033      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80068fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006902:	d82c      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d02f      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800690a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690e:	d826      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006910:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006914:	d02b      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006916:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800691a:	d820      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800691c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006920:	d012      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006926:	d81a      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d022      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800692c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006930:	d115      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006936:	3308      	adds	r3, #8
 8006938:	2101      	movs	r1, #1
 800693a:	4618      	mov	r0, r3
 800693c:	f002 f878 	bl	8008a30 <RCCEx_PLL2_Config>
 8006940:	4603      	mov	r3, r0
 8006942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006946:	e015      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694c:	3328      	adds	r3, #40	; 0x28
 800694e:	2101      	movs	r1, #1
 8006950:	4618      	mov	r0, r3
 8006952:	f002 f91f 	bl	8008b94 <RCCEx_PLL3_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800695c:	e00a      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006964:	e006      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006966:	bf00      	nop
 8006968:	e004      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800696a:	bf00      	nop
 800696c:	e002      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800696e:	bf00      	nop
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800697c:	4ba3      	ldr	r3, [pc, #652]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006980:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800698c:	4a9f      	ldr	r2, [pc, #636]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800698e:	430b      	orrs	r3, r1
 8006990:	6593      	str	r3, [r2, #88]	; 0x58
 8006992:	e003      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800699c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80069a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069ac:	2300      	movs	r3, #0
 80069ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d037      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c6:	d00e      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80069c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069cc:	d816      	bhi.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80069d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d6:	d111      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d8:	4b8c      	ldr	r3, [pc, #560]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	4a8b      	ldr	r2, [pc, #556]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80069e4:	e00f      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ea:	3308      	adds	r3, #8
 80069ec:	2101      	movs	r1, #1
 80069ee:	4618      	mov	r0, r3
 80069f0:	f002 f81e 	bl	8008a30 <RCCEx_PLL2_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80069fa:	e004      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a02:	e000      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a0e:	4b7f      	ldr	r3, [pc, #508]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1c:	4a7b      	ldr	r2, [pc, #492]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6513      	str	r3, [r2, #80]	; 0x50
 8006a22:	e003      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006a42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	d039      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d81c      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a99 	.word	0x08006a99
 8006a60:	08006a6d 	.word	0x08006a6d
 8006a64:	08006a7b 	.word	0x08006a7b
 8006a68:	08006a99 	.word	0x08006a99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a6c:	4b67      	ldr	r3, [pc, #412]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	4a66      	ldr	r2, [pc, #408]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a78:	e00f      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7e:	3308      	adds	r3, #8
 8006a80:	2102      	movs	r1, #2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 ffd4 	bl	8008a30 <RCCEx_PLL2_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006a8e:	e004      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a96:	e000      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006aa2:	4b5a      	ldr	r3, [pc, #360]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa6:	f023 0103 	bic.w	r1, r3, #3
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab0:	4a56      	ldr	r2, [pc, #344]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ab6:	e003      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006abc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ad6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006ada:	460b      	mov	r3, r1
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f000 809f 	beq.w	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ae2:	4b4b      	ldr	r3, [pc, #300]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a4a      	ldr	r2, [pc, #296]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aee:	f7fb fcf1 	bl	80024d4 <HAL_GetTick>
 8006af2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006af6:	e00b      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af8:	f7fb fcec 	bl	80024d4 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b64      	cmp	r3, #100	; 0x64
 8006b06:	d903      	bls.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b0e:	e005      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b10:	4b3f      	ldr	r3, [pc, #252]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0ed      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d179      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b24:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b30:	4053      	eors	r3, r2
 8006b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d015      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b3a:	4b34      	ldr	r3, [pc, #208]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b46:	4b31      	ldr	r3, [pc, #196]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	4a30      	ldr	r2, [pc, #192]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b50:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b52:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	4a2d      	ldr	r2, [pc, #180]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006b5e:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006b64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b72:	d118      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fb fcae 	bl	80024d4 <HAL_GetTick>
 8006b78:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b7c:	e00d      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b7e:	f7fb fca9 	bl	80024d4 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b88:	1ad2      	subs	r2, r2, r3
 8006b8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d903      	bls.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006b98:	e005      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b9a:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0eb      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d129      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bbe:	d10e      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006bc0:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006bd0:	091a      	lsrs	r2, r3, #4
 8006bd2:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	4a0d      	ldr	r2, [pc, #52]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	6113      	str	r3, [r2, #16]
 8006bdc:	e005      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006be4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006be8:	6113      	str	r3, [r2, #16]
 8006bea:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bfa:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006c00:	e00e      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006c0a:	e009      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	58024800 	.word	0x58024800
 8006c14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f002 0301 	and.w	r3, r2, #1
 8006c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f000 8089 	beq.w	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c48:	2b28      	cmp	r3, #40	; 0x28
 8006c4a:	d86b      	bhi.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006d2d 	.word	0x08006d2d
 8006c58:	08006d25 	.word	0x08006d25
 8006c5c:	08006d25 	.word	0x08006d25
 8006c60:	08006d25 	.word	0x08006d25
 8006c64:	08006d25 	.word	0x08006d25
 8006c68:	08006d25 	.word	0x08006d25
 8006c6c:	08006d25 	.word	0x08006d25
 8006c70:	08006d25 	.word	0x08006d25
 8006c74:	08006cf9 	.word	0x08006cf9
 8006c78:	08006d25 	.word	0x08006d25
 8006c7c:	08006d25 	.word	0x08006d25
 8006c80:	08006d25 	.word	0x08006d25
 8006c84:	08006d25 	.word	0x08006d25
 8006c88:	08006d25 	.word	0x08006d25
 8006c8c:	08006d25 	.word	0x08006d25
 8006c90:	08006d25 	.word	0x08006d25
 8006c94:	08006d0f 	.word	0x08006d0f
 8006c98:	08006d25 	.word	0x08006d25
 8006c9c:	08006d25 	.word	0x08006d25
 8006ca0:	08006d25 	.word	0x08006d25
 8006ca4:	08006d25 	.word	0x08006d25
 8006ca8:	08006d25 	.word	0x08006d25
 8006cac:	08006d25 	.word	0x08006d25
 8006cb0:	08006d25 	.word	0x08006d25
 8006cb4:	08006d2d 	.word	0x08006d2d
 8006cb8:	08006d25 	.word	0x08006d25
 8006cbc:	08006d25 	.word	0x08006d25
 8006cc0:	08006d25 	.word	0x08006d25
 8006cc4:	08006d25 	.word	0x08006d25
 8006cc8:	08006d25 	.word	0x08006d25
 8006ccc:	08006d25 	.word	0x08006d25
 8006cd0:	08006d25 	.word	0x08006d25
 8006cd4:	08006d2d 	.word	0x08006d2d
 8006cd8:	08006d25 	.word	0x08006d25
 8006cdc:	08006d25 	.word	0x08006d25
 8006ce0:	08006d25 	.word	0x08006d25
 8006ce4:	08006d25 	.word	0x08006d25
 8006ce8:	08006d25 	.word	0x08006d25
 8006cec:	08006d25 	.word	0x08006d25
 8006cf0:	08006d25 	.word	0x08006d25
 8006cf4:	08006d2d 	.word	0x08006d2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	2101      	movs	r1, #1
 8006d00:	4618      	mov	r0, r3
 8006d02:	f001 fe95 	bl	8008a30 <RCCEx_PLL2_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d0c:	e00f      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d12:	3328      	adds	r3, #40	; 0x28
 8006d14:	2101      	movs	r1, #1
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 ff3c 	bl	8008b94 <RCCEx_PLL3_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d22:	e004      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d2a:	e000      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d36:	4bbf      	ldr	r3, [pc, #764]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d44:	4abb      	ldr	r2, [pc, #748]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d46:	430b      	orrs	r3, r1
 8006d48:	6553      	str	r3, [r2, #84]	; 0x54
 8006d4a:	e003      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f002 0302 	and.w	r3, r2, #2
 8006d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d041      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	d824      	bhi.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006dd1 	.word	0x08006dd1
 8006d88:	08006d9d 	.word	0x08006d9d
 8006d8c:	08006db3 	.word	0x08006db3
 8006d90:	08006dd1 	.word	0x08006dd1
 8006d94:	08006dd1 	.word	0x08006dd1
 8006d98:	08006dd1 	.word	0x08006dd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da0:	3308      	adds	r3, #8
 8006da2:	2101      	movs	r1, #1
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 fe43 	bl	8008a30 <RCCEx_PLL2_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006db0:	e00f      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db6:	3328      	adds	r3, #40	; 0x28
 8006db8:	2101      	movs	r1, #1
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 feea 	bl	8008b94 <RCCEx_PLL3_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006dc6:	e004      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dce:	e000      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006dda:	4b96      	ldr	r3, [pc, #600]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dde:	f023 0107 	bic.w	r1, r3, #7
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de8:	4a92      	ldr	r2, [pc, #584]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dea:	430b      	orrs	r3, r1
 8006dec:	6553      	str	r3, [r2, #84]	; 0x54
 8006dee:	e003      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 0304 	and.w	r3, r2, #4
 8006e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4313      	orrs	r3, r2
 8006e16:	d044      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e20:	2b05      	cmp	r3, #5
 8006e22:	d825      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006e24:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e79 	.word	0x08006e79
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006e5b 	.word	0x08006e5b
 8006e38:	08006e79 	.word	0x08006e79
 8006e3c:	08006e79 	.word	0x08006e79
 8006e40:	08006e79 	.word	0x08006e79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e48:	3308      	adds	r3, #8
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fdef 	bl	8008a30 <RCCEx_PLL2_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006e58:	e00f      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5e:	3328      	adds	r3, #40	; 0x28
 8006e60:	2101      	movs	r1, #1
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fe96 	bl	8008b94 <RCCEx_PLL3_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006e6e:	e004      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e76:	e000      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10b      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e82:	4b6c      	ldr	r3, [pc, #432]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e86:	f023 0107 	bic.w	r1, r3, #7
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e92:	4a68      	ldr	r2, [pc, #416]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6593      	str	r3, [r2, #88]	; 0x58
 8006e98:	e003      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f002 0320 	and.w	r3, r2, #32
 8006eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	d055      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ece:	d033      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed4:	d82c      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eda:	d02f      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d826      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ee6:	d02b      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eec:	d820      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef2:	d012      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef8:	d81a      	bhi.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d022      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f02:	d115      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f08:	3308      	adds	r3, #8
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 fd8f 	bl	8008a30 <RCCEx_PLL2_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f18:	e015      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f1e:	3328      	adds	r3, #40	; 0x28
 8006f20:	2102      	movs	r1, #2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 fe36 	bl	8008b94 <RCCEx_PLL3_Config>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f2e:	e00a      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f36:	e006      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f38:	bf00      	nop
 8006f3a:	e004      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f3c:	bf00      	nop
 8006f3e:	e002      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f40:	bf00      	nop
 8006f42:	e000      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f4e:	4b39      	ldr	r3, [pc, #228]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f52:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5e:	4a35      	ldr	r2, [pc, #212]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f60:	430b      	orrs	r3, r1
 8006f62:	6553      	str	r3, [r2, #84]	; 0x54
 8006f64:	e003      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	d058      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f9a:	d033      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006f9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fa0:	d82c      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa6:	d02f      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fac:	d826      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fb2:	d02b      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006fb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fb8:	d820      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fbe:	d012      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc4:	d81a      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d022      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fce:	d115      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 fd29 	bl	8008a30 <RCCEx_PLL2_Config>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006fe4:	e015      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fea:	3328      	adds	r3, #40	; 0x28
 8006fec:	2102      	movs	r1, #2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 fdd0 	bl	8008b94 <RCCEx_PLL3_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ffa:	e00a      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007002:	e006      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007004:	bf00      	nop
 8007006:	e004      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007008:	bf00      	nop
 800700a:	e002      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800700c:	bf00      	nop
 800700e:	e000      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10e      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800701a:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800701c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800702a:	4a02      	ldr	r2, [pc, #8]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800702c:	430b      	orrs	r3, r1
 800702e:	6593      	str	r3, [r2, #88]	; 0x58
 8007030:	e006      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007032:	bf00      	nop
 8007034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800703c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800704c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007050:	2300      	movs	r3, #0
 8007052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007056:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800705a:	460b      	mov	r3, r1
 800705c:	4313      	orrs	r3, r2
 800705e:	d055      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007068:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800706c:	d033      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800706e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007072:	d82c      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007078:	d02f      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800707a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800707e:	d826      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007080:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007084:	d02b      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007086:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800708a:	d820      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800708c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007090:	d012      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007096:	d81a      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d022      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800709c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a0:	d115      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a6:	3308      	adds	r3, #8
 80070a8:	2100      	movs	r1, #0
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 fcc0 	bl	8008a30 <RCCEx_PLL2_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80070b6:	e015      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070bc:	3328      	adds	r3, #40	; 0x28
 80070be:	2102      	movs	r1, #2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 fd67 	bl	8008b94 <RCCEx_PLL3_Config>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80070cc:	e00a      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070d4:	e006      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80070d6:	bf00      	nop
 80070d8:	e004      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80070da:	bf00      	nop
 80070dc:	e002      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80070de:	bf00      	nop
 80070e0:	e000      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80070e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80070ec:	4ba1      	ldr	r3, [pc, #644]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070fc:	4a9d      	ldr	r2, [pc, #628]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070fe:	430b      	orrs	r3, r1
 8007100:	6593      	str	r3, [r2, #88]	; 0x58
 8007102:	e003      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800710c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f002 0308 	and.w	r3, r2, #8
 8007118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800711c:	2300      	movs	r3, #0
 800711e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007122:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007126:	460b      	mov	r3, r1
 8007128:	4313      	orrs	r3, r2
 800712a:	d01e      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007138:	d10c      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713e:	3328      	adds	r3, #40	; 0x28
 8007140:	2102      	movs	r1, #2
 8007142:	4618      	mov	r0, r3
 8007144:	f001 fd26 	bl	8008b94 <RCCEx_PLL3_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007154:	4b87      	ldr	r3, [pc, #540]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007158:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800715c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007164:	4a83      	ldr	r2, [pc, #524]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007166:	430b      	orrs	r3, r1
 8007168:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f002 0310 	and.w	r3, r2, #16
 8007176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800717a:	2300      	movs	r3, #0
 800717c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007180:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d01e      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007196:	d10c      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719c:	3328      	adds	r3, #40	; 0x28
 800719e:	2102      	movs	r1, #2
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 fcf7 	bl	8008b94 <RCCEx_PLL3_Config>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071b2:	4b70      	ldr	r3, [pc, #448]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071c2:	4a6c      	ldr	r2, [pc, #432]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071c4:	430b      	orrs	r3, r1
 80071c6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80071d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80071e2:	460b      	mov	r3, r1
 80071e4:	4313      	orrs	r3, r2
 80071e6:	d03e      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f4:	d022      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80071f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071fa:	d81b      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007204:	d00b      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007206:	e015      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720c:	3308      	adds	r3, #8
 800720e:	2100      	movs	r1, #0
 8007210:	4618      	mov	r0, r3
 8007212:	f001 fc0d 	bl	8008a30 <RCCEx_PLL2_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800721c:	e00f      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007222:	3328      	adds	r3, #40	; 0x28
 8007224:	2102      	movs	r1, #2
 8007226:	4618      	mov	r0, r3
 8007228:	f001 fcb4 	bl	8008b94 <RCCEx_PLL3_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007232:	e004      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800723a:	e000      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800723c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800723e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10b      	bne.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007246:	4b4b      	ldr	r3, [pc, #300]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007256:	4a47      	ldr	r2, [pc, #284]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007258:	430b      	orrs	r3, r1
 800725a:	6593      	str	r3, [r2, #88]	; 0x58
 800725c:	e003      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007262:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007272:	67bb      	str	r3, [r7, #120]	; 0x78
 8007274:	2300      	movs	r3, #0
 8007276:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007278:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800727c:	460b      	mov	r3, r1
 800727e:	4313      	orrs	r3, r2
 8007280:	d03b      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800728e:	d01f      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007290:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007294:	d818      	bhi.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800729a:	d003      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800729c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072a0:	d007      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80072a2:	e011      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a4:	4b33      	ldr	r3, [pc, #204]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	4a32      	ldr	r2, [pc, #200]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80072b0:	e00f      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b6:	3328      	adds	r3, #40	; 0x28
 80072b8:	2101      	movs	r1, #1
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 fc6a 	bl	8008b94 <RCCEx_PLL3_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80072c6:	e004      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072ce:	e000      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80072d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10b      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072da:	4b26      	ldr	r3, [pc, #152]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ea:	4a22      	ldr	r2, [pc, #136]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6553      	str	r3, [r2, #84]	; 0x54
 80072f0:	e003      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007306:	673b      	str	r3, [r7, #112]	; 0x70
 8007308:	2300      	movs	r3, #0
 800730a:	677b      	str	r3, [r7, #116]	; 0x74
 800730c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007310:	460b      	mov	r3, r1
 8007312:	4313      	orrs	r3, r2
 8007314:	d034      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007324:	d007      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007326:	e011      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007328:	4b12      	ldr	r3, [pc, #72]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	4a11      	ldr	r2, [pc, #68]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800732e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007334:	e00e      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733a:	3308      	adds	r3, #8
 800733c:	2102      	movs	r1, #2
 800733e:	4618      	mov	r0, r3
 8007340:	f001 fb76 	bl	8008a30 <RCCEx_PLL2_Config>
 8007344:	4603      	mov	r3, r0
 8007346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800734a:	e003      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10d      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800735c:	4b05      	ldr	r3, [pc, #20]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800735e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736a:	4a02      	ldr	r2, [pc, #8]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800736c:	430b      	orrs	r3, r1
 800736e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007370:	e006      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007372:	bf00      	nop
 8007374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800737c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800738c:	66bb      	str	r3, [r7, #104]	; 0x68
 800738e:	2300      	movs	r3, #0
 8007390:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007392:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007396:	460b      	mov	r3, r1
 8007398:	4313      	orrs	r3, r2
 800739a:	d00c      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800739c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a0:	3328      	adds	r3, #40	; 0x28
 80073a2:	2102      	movs	r1, #2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 fbf5 	bl	8008b94 <RCCEx_PLL3_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80073c2:	663b      	str	r3, [r7, #96]	; 0x60
 80073c4:	2300      	movs	r3, #0
 80073c6:	667b      	str	r3, [r7, #100]	; 0x64
 80073c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80073cc:	460b      	mov	r3, r1
 80073ce:	4313      	orrs	r3, r2
 80073d0:	d038      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073de:	d018      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80073e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e4:	d811      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80073e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ea:	d014      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80073ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f0:	d80b      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d011      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80073f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fa:	d106      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fc:	4bc3      	ldr	r3, [pc, #780]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	4ac2      	ldr	r2, [pc, #776]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007408:	e008      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007410:	e004      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007412:	bf00      	nop
 8007414:	e002      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007416:	bf00      	nop
 8007418:	e000      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800741a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800741c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10b      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007424:	4bb9      	ldr	r3, [pc, #740]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007428:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007434:	4ab5      	ldr	r2, [pc, #724]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007436:	430b      	orrs	r3, r1
 8007438:	6553      	str	r3, [r2, #84]	; 0x54
 800743a:	e003      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007450:	65bb      	str	r3, [r7, #88]	; 0x58
 8007452:	2300      	movs	r3, #0
 8007454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007456:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800745a:	460b      	mov	r3, r1
 800745c:	4313      	orrs	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007460:	4baa      	ldr	r3, [pc, #680]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007464:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800746c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746e:	4aa7      	ldr	r2, [pc, #668]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007470:	430b      	orrs	r3, r1
 8007472:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007480:	653b      	str	r3, [r7, #80]	; 0x50
 8007482:	2300      	movs	r3, #0
 8007484:	657b      	str	r3, [r7, #84]	; 0x54
 8007486:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800748a:	460b      	mov	r3, r1
 800748c:	4313      	orrs	r3, r2
 800748e:	d00a      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007490:	4b9e      	ldr	r3, [pc, #632]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074a0:	4a9a      	ldr	r2, [pc, #616]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074a2:	430b      	orrs	r3, r1
 80074a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80074b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074b4:	2300      	movs	r3, #0
 80074b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80074bc:	460b      	mov	r3, r1
 80074be:	4313      	orrs	r3, r2
 80074c0:	d009      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074c2:	4b92      	ldr	r3, [pc, #584]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80074ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d0:	4a8e      	ldr	r2, [pc, #568]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074d2:	430b      	orrs	r3, r1
 80074d4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80074e2:	643b      	str	r3, [r7, #64]	; 0x40
 80074e4:	2300      	movs	r3, #0
 80074e6:	647b      	str	r3, [r7, #68]	; 0x44
 80074e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80074ec:	460b      	mov	r3, r1
 80074ee:	4313      	orrs	r3, r2
 80074f0:	d00e      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074f2:	4b86      	ldr	r3, [pc, #536]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	4a85      	ldr	r2, [pc, #532]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074fc:	6113      	str	r3, [r2, #16]
 80074fe:	4b83      	ldr	r3, [pc, #524]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007500:	6919      	ldr	r1, [r3, #16]
 8007502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007506:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800750a:	4a80      	ldr	r2, [pc, #512]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800750c:	430b      	orrs	r3, r1
 800750e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800751c:	63bb      	str	r3, [r7, #56]	; 0x38
 800751e:	2300      	movs	r3, #0
 8007520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007522:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007526:	460b      	mov	r3, r1
 8007528:	4313      	orrs	r3, r2
 800752a:	d009      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800752c:	4b77      	ldr	r3, [pc, #476]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800752e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007530:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753a:	4a74      	ldr	r2, [pc, #464]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800753c:	430b      	orrs	r3, r1
 800753e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800754c:	633b      	str	r3, [r7, #48]	; 0x30
 800754e:	2300      	movs	r3, #0
 8007550:	637b      	str	r3, [r7, #52]	; 0x34
 8007552:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007556:	460b      	mov	r3, r1
 8007558:	4313      	orrs	r3, r2
 800755a:	d00a      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800755c:	4b6b      	ldr	r3, [pc, #428]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007560:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800756c:	4a67      	ldr	r2, [pc, #412]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800756e:	430b      	orrs	r3, r1
 8007570:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	2100      	movs	r1, #0
 800757c:	62b9      	str	r1, [r7, #40]	; 0x28
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007584:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007588:	460b      	mov	r3, r1
 800758a:	4313      	orrs	r3, r2
 800758c:	d011      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007592:	3308      	adds	r3, #8
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fa4a 	bl	8008a30 <RCCEx_PLL2_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80075a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	2100      	movs	r1, #0
 80075bc:	6239      	str	r1, [r7, #32]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
 80075c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80075c8:	460b      	mov	r3, r1
 80075ca:	4313      	orrs	r3, r2
 80075cc:	d011      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d2:	3308      	adds	r3, #8
 80075d4:	2101      	movs	r1, #1
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fa2a 	bl	8008a30 <RCCEx_PLL2_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80075e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	2100      	movs	r1, #0
 80075fc:	61b9      	str	r1, [r7, #24]
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007608:	460b      	mov	r3, r1
 800760a:	4313      	orrs	r3, r2
 800760c:	d011      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007612:	3308      	adds	r3, #8
 8007614:	2102      	movs	r1, #2
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fa0a 	bl	8008a30 <RCCEx_PLL2_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800762e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	2100      	movs	r1, #0
 800763c:	6139      	str	r1, [r7, #16]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007648:	460b      	mov	r3, r1
 800764a:	4313      	orrs	r3, r2
 800764c:	d011      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007652:	3328      	adds	r3, #40	; 0x28
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fa9c 	bl	8008b94 <RCCEx_PLL3_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800766e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	2100      	movs	r1, #0
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	f003 0310 	and.w	r3, r3, #16
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007688:	460b      	mov	r3, r1
 800768a:	4313      	orrs	r3, r2
 800768c:	d011      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007692:	3328      	adds	r3, #40	; 0x28
 8007694:	2101      	movs	r1, #1
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fa7c 	bl	8008b94 <RCCEx_PLL3_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80076a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	2100      	movs	r1, #0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80076c8:	460b      	mov	r3, r1
 80076ca:	4313      	orrs	r3, r2
 80076cc:	d011      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d2:	3328      	adds	r3, #40	; 0x28
 80076d4:	2102      	movs	r1, #2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 fa5c 	bl	8008b94 <RCCEx_PLL3_Config>
 80076dc:	4603      	mov	r3, r0
 80076de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80076e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80076f2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e000      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
}
 8007700:	4618      	mov	r0, r3
 8007702:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007706:	46bd      	mov	sp, r7
 8007708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800770c:	58024400 	.word	0x58024400

08007710 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b090      	sub	sp, #64	; 0x40
 8007714:	af00      	add	r7, sp, #0
 8007716:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800771a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007722:	430b      	orrs	r3, r1
 8007724:	f040 8094 	bne.w	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007728:	4b9e      	ldr	r3, [pc, #632]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2b04      	cmp	r3, #4
 8007736:	f200 8087 	bhi.w	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800773a:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800773c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007740:	08007755 	.word	0x08007755
 8007744:	0800777d 	.word	0x0800777d
 8007748:	080077a5 	.word	0x080077a5
 800774c:	08007841 	.word	0x08007841
 8007750:	080077cd 	.word	0x080077cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007754:	4b93      	ldr	r3, [pc, #588]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007760:	d108      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007766:	4618      	mov	r0, r3
 8007768:	f001 f810 	bl	800878c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007770:	f000 bd45 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007778:	f000 bd41 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800777c:	4b89      	ldr	r3, [pc, #548]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007788:	d108      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800778a:	f107 0318 	add.w	r3, r7, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fd54 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007798:	f000 bd31 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077a0:	f000 bd2d 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077a4:	4b7f      	ldr	r3, [pc, #508]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b0:	d108      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077b2:	f107 030c 	add.w	r3, r7, #12
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 fe94 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c0:	f000 bd1d 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c8:	f000 bd19 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077cc:	4b75      	ldr	r3, [pc, #468]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077d6:	4b73      	ldr	r3, [pc, #460]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d10c      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077e8:	4b6e      	ldr	r3, [pc, #440]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	08db      	lsrs	r3, r3, #3
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	4a6d      	ldr	r2, [pc, #436]	; (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077fa:	e01f      	b.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077fc:	4b69      	ldr	r3, [pc, #420]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007808:	d106      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800780a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007810:	d102      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007812:	4b66      	ldr	r3, [pc, #408]	; (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007816:	e011      	b.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007818:	4b62      	ldr	r3, [pc, #392]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007824:	d106      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800782c:	d102      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800782e:	4b60      	ldr	r3, [pc, #384]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007832:	e003      	b.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007838:	f000 bce1 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800783c:	f000 bcdf 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007840:	4b5c      	ldr	r3, [pc, #368]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007844:	f000 bcdb 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800784c:	f000 bcd7 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007854:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007858:	430b      	orrs	r3, r1
 800785a:	f040 80ad 	bne.w	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800785e:	4b51      	ldr	r3, [pc, #324]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007862:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007866:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786e:	d056      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007876:	f200 8090 	bhi.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	2bc0      	cmp	r3, #192	; 0xc0
 800787e:	f000 8088 	beq.w	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	2bc0      	cmp	r3, #192	; 0xc0
 8007886:	f200 8088 	bhi.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	2b80      	cmp	r3, #128	; 0x80
 800788e:	d032      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	f200 8081 	bhi.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	d014      	beq.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80078a4:	e079      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078a6:	4b3f      	ldr	r3, [pc, #252]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078b2:	d108      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 ff67 	bl	800878c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c2:	f000 bc9c 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ca:	f000 bc98 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078ce:	4b35      	ldr	r3, [pc, #212]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078da:	d108      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078dc:	f107 0318 	add.w	r3, r7, #24
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fcab 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ea:	f000 bc88 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f2:	f000 bc84 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078f6:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007902:	d108      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007904:	f107 030c 	add.w	r3, r7, #12
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fdeb 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007912:	f000 bc74 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800791a:	f000 bc70 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800791e:	4b21      	ldr	r3, [pc, #132]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007922:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007926:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b04      	cmp	r3, #4
 8007932:	d10c      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007936:	2b00      	cmp	r3, #0
 8007938:	d109      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	08db      	lsrs	r3, r3, #3
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007946:	fa22 f303 	lsr.w	r3, r2, r3
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800794c:	e01f      	b.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800794e:	4b15      	ldr	r3, [pc, #84]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795a:	d106      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800795c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007962:	d102      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007964:	4b11      	ldr	r3, [pc, #68]	; (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007968:	e011      	b.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800796a:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007976:	d106      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797e:	d102      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007984:	e003      	b.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800798a:	f000 bc38 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800798e:	f000 bc36 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007996:	f000 bc32 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800799e:	f000 bc2e 	b.w	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079a2:	bf00      	nop
 80079a4:	58024400 	.word	0x58024400
 80079a8:	03d09000 	.word	0x03d09000
 80079ac:	003d0900 	.word	0x003d0900
 80079b0:	01770000 	.word	0x01770000
 80079b4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80079b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079bc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80079c0:	430b      	orrs	r3, r1
 80079c2:	f040 809c 	bne.w	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80079c6:	4b9e      	ldr	r3, [pc, #632]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80079ce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079d6:	d054      	beq.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079de:	f200 808b 	bhi.w	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079e8:	f000 8083 	beq.w	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079f2:	f200 8081 	bhi.w	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079fc:	d02f      	beq.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a04:	d878      	bhi.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a12:	d012      	beq.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007a14:	e070      	b.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a16:	4b8a      	ldr	r3, [pc, #552]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a22:	d107      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 feaf 	bl	800878c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a32:	e3e4      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a38:	e3e1      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a3a:	4b81      	ldr	r3, [pc, #516]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a46:	d107      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a48:	f107 0318 	add.w	r3, r7, #24
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fbf5 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a56:	e3d2      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a5c:	e3cf      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a5e:	4b78      	ldr	r3, [pc, #480]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a6a:	d107      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a6c:	f107 030c 	add.w	r3, r7, #12
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fd37 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a7a:	e3c0      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a80:	e3bd      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a82:	4b6f      	ldr	r3, [pc, #444]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a8c:	4b6c      	ldr	r3, [pc, #432]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d10c      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a9e:	4b68      	ldr	r3, [pc, #416]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	08db      	lsrs	r3, r3, #3
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	4a66      	ldr	r2, [pc, #408]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab0:	e01e      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ab2:	4b63      	ldr	r3, [pc, #396]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007abe:	d106      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac6:	d102      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ac8:	4b5f      	ldr	r3, [pc, #380]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007acc:	e010      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ace:	4b5c      	ldr	r3, [pc, #368]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ada:	d106      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae2:	d102      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ae4:	4b59      	ldr	r3, [pc, #356]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae8:	e002      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007aee:	e386      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007af0:	e385      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007af2:	4b57      	ldr	r3, [pc, #348]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af6:	e382      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007afc:	e37f      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b02:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007b06:	430b      	orrs	r3, r1
 8007b08:	f040 80a7 	bne.w	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007b0c:	4b4c      	ldr	r3, [pc, #304]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b10:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b1c:	d055      	beq.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b24:	f200 8096 	bhi.w	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b2e:	f000 8084 	beq.w	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b38:	f200 808c 	bhi.w	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b42:	d030      	beq.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b4a:	f200 8083 	bhi.w	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b5a:	d012      	beq.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007b5c:	e07a      	b.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b5e:	4b38      	ldr	r3, [pc, #224]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b6a:	d107      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fe0b 	bl	800878c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b7a:	e340      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b80:	e33d      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b82:	4b2f      	ldr	r3, [pc, #188]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b8e:	d107      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b90:	f107 0318 	add.w	r3, r7, #24
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fb51 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b9e:	e32e      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ba4:	e32b      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ba6:	4b26      	ldr	r3, [pc, #152]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb2:	d107      	bne.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb4:	f107 030c 	add.w	r3, r7, #12
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fc93 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc2:	e31c      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bc8:	e319      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bca:	4b1d      	ldr	r3, [pc, #116]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bd4:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d10c      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d109      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007be6:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	08db      	lsrs	r3, r3, #3
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	4a14      	ldr	r2, [pc, #80]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf8:	e01e      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bfa:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c06:	d106      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c0e:	d102      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c10:	4b0d      	ldr	r3, [pc, #52]	; (8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c14:	e010      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c16:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c22:	d106      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c2a:	d102      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c2c:	4b07      	ldr	r3, [pc, #28]	; (8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c30:	e002      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c36:	e2e2      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c38:	e2e1      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c3a:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c3e:	e2de      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c40:	58024400 	.word	0x58024400
 8007c44:	03d09000 	.word	0x03d09000
 8007c48:	003d0900 	.word	0x003d0900
 8007c4c:	01770000 	.word	0x01770000
 8007c50:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c58:	e2d1      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c5e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007c62:	430b      	orrs	r3, r1
 8007c64:	f040 809c 	bne.w	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007c68:	4b93      	ldr	r3, [pc, #588]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c70:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c78:	d054      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c80:	f200 808b 	bhi.w	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c8a:	f000 8083 	beq.w	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c94:	f200 8081 	bhi.w	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c9e:	d02f      	beq.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca6:	d878      	bhi.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb4:	d012      	beq.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007cb6:	e070      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb8:	4b7f      	ldr	r3, [pc, #508]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cc4:	d107      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fd5e 	bl	800878c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cd4:	e293      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cda:	e290      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cdc:	4b76      	ldr	r3, [pc, #472]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ce8:	d107      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cea:	f107 0318 	add.w	r3, r7, #24
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 faa4 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf8:	e281      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfe:	e27e      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d00:	4b6d      	ldr	r3, [pc, #436]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d0c:	d107      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fbe6 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d1c:	e26f      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d22:	e26c      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d24:	4b64      	ldr	r3, [pc, #400]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d2e:	4b62      	ldr	r3, [pc, #392]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d10c      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d109      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d40:	4b5d      	ldr	r3, [pc, #372]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	08db      	lsrs	r3, r3, #3
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	4a5c      	ldr	r2, [pc, #368]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d52:	e01e      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d54:	4b58      	ldr	r3, [pc, #352]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d60:	d106      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d68:	d102      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d6a:	4b55      	ldr	r3, [pc, #340]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6e:	e010      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d70:	4b51      	ldr	r3, [pc, #324]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d7c:	d106      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d84:	d102      	bne.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d86:	4b4f      	ldr	r3, [pc, #316]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8a:	e002      	b.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007d90:	e235      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d92:	e234      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d94:	4b4c      	ldr	r3, [pc, #304]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d98:	e231      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d9e:	e22e      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007da8:	430b      	orrs	r3, r1
 8007daa:	f040 808f 	bne.w	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007dae:	4b42      	ldr	r3, [pc, #264]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007db6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dbe:	d06b      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dc6:	d874      	bhi.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dce:	d056      	beq.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd6:	d86c      	bhi.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dde:	d03b      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007de6:	d864      	bhi.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dee:	d021      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df6:	d85c      	bhi.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e04:	d004      	beq.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007e06:	e054      	b.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e08:	f7fe fa0a 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8007e0c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e0e:	e1f6      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e10:	4b29      	ldr	r3, [pc, #164]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e1c:	d107      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e1e:	f107 0318 	add.w	r3, r7, #24
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fa0a 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e2c:	e1e7      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e32:	e1e4      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e34:	4b20      	ldr	r3, [pc, #128]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e40:	d107      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e42:	f107 030c 	add.w	r3, r7, #12
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fb4c 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e50:	e1d5      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e56:	e1d2      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e58:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d109      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e64:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	08db      	lsrs	r3, r3, #3
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	4a13      	ldr	r2, [pc, #76]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007e70:	fa22 f303 	lsr.w	r3, r2, r3
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e76:	e1c2      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e7c:	e1bf      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e7e:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8a:	d102      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007e8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e90:	e1b5      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e96:	e1b2      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ea4:	d102      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eaa:	e1a8      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb0:	e1a5      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb6:	e1a2      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007eb8:	58024400 	.word	0x58024400
 8007ebc:	03d09000 	.word	0x03d09000
 8007ec0:	003d0900 	.word	0x003d0900
 8007ec4:	01770000 	.word	0x01770000
 8007ec8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	d173      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007ed8:	4b9c      	ldr	r3, [pc, #624]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ee0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ee8:	d02f      	beq.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ef0:	d863      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efe:	d012      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007f00:	e05b      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f02:	4b92      	ldr	r3, [pc, #584]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f0e:	d107      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f10:	f107 0318 	add.w	r3, r7, #24
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 f991 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f1e:	e16e      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f24:	e16b      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f26:	4b89      	ldr	r3, [pc, #548]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f32:	d107      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f34:	f107 030c 	add.w	r3, r7, #12
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fad3 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f42:	e15c      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f48:	e159      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f4a:	4b80      	ldr	r3, [pc, #512]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f54:	4b7d      	ldr	r3, [pc, #500]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d10c      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f66:	4b79      	ldr	r3, [pc, #484]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	08db      	lsrs	r3, r3, #3
 8007f6c:	f003 0303 	and.w	r3, r3, #3
 8007f70:	4a77      	ldr	r2, [pc, #476]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007f72:	fa22 f303 	lsr.w	r3, r2, r3
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f78:	e01e      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f7a:	4b74      	ldr	r3, [pc, #464]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f86:	d106      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f8e:	d102      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f90:	4b70      	ldr	r3, [pc, #448]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f94:	e010      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f96:	4b6d      	ldr	r3, [pc, #436]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fa2:	d106      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007faa:	d102      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fac:	4b6a      	ldr	r3, [pc, #424]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb0:	e002      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007fb6:	e122      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fb8:	e121      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbe:	e11e      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	d133      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007fcc:	4b5f      	ldr	r3, [pc, #380]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d004      	beq.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe2:	d012      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007fe4:	e023      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fe6:	4b59      	ldr	r3, [pc, #356]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff2:	d107      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fbc7 	bl	800878c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008002:	e0fc      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008008:	e0f9      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800800a:	4b50      	ldr	r3, [pc, #320]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008016:	d107      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008018:	f107 0318 	add.w	r3, r7, #24
 800801c:	4618      	mov	r0, r3
 800801e:	f000 f90d 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008026:	e0ea      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800802c:	e0e7      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008032:	e0e4      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008038:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800803c:	430b      	orrs	r3, r1
 800803e:	f040 808d 	bne.w	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008042:	4b42      	ldr	r3, [pc, #264]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008046:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800804a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008052:	d06b      	beq.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800805a:	d874      	bhi.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008062:	d056      	beq.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806a:	d86c      	bhi.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008072:	d03b      	beq.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800807a:	d864      	bhi.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008082:	d021      	beq.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800808a:	d85c      	bhi.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	2b00      	cmp	r3, #0
 8008090:	d004      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008098:	d004      	beq.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800809a:	e054      	b.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800809c:	f000 f8b8 	bl	8008210 <HAL_RCCEx_GetD3PCLK1Freq>
 80080a0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080a2:	e0ac      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080a4:	4b29      	ldr	r3, [pc, #164]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080b0:	d107      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b2:	f107 0318 	add.w	r3, r7, #24
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f8c0 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080c0:	e09d      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080c6:	e09a      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080c8:	4b20      	ldr	r3, [pc, #128]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d4:	d107      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d6:	f107 030c 	add.w	r3, r7, #12
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fa02 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080e4:	e08b      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ea:	e088      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080ec:	4b17      	ldr	r3, [pc, #92]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d109      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080f8:	4b14      	ldr	r3, [pc, #80]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	08db      	lsrs	r3, r3, #3
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	4a13      	ldr	r2, [pc, #76]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008104:	fa22 f303 	lsr.w	r3, r2, r3
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800810a:	e078      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008110:	e075      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008112:	4b0e      	ldr	r3, [pc, #56]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811e:	d102      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008120:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008124:	e06b      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800812a:	e068      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800812c:	4b07      	ldr	r3, [pc, #28]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008138:	d102      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800813e:	e05e      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008144:	e05b      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800814a:	e058      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800814c:	58024400 	.word	0x58024400
 8008150:	03d09000 	.word	0x03d09000
 8008154:	003d0900 	.word	0x003d0900
 8008158:	01770000 	.word	0x01770000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800815c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008160:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008164:	430b      	orrs	r3, r1
 8008166:	d148      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008168:	4b27      	ldr	r3, [pc, #156]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800816a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800816c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008170:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008178:	d02a      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008180:	d838      	bhi.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800818e:	d00d      	beq.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008190:	e030      	b.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008192:	4b1d      	ldr	r3, [pc, #116]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800819e:	d102      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80081a0:	4b1a      	ldr	r3, [pc, #104]	; (800820c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081a4:	e02b      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081aa:	e028      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081ac:	4b16      	ldr	r3, [pc, #88]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081b8:	d107      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fae4 	bl	800878c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081c8:	e019      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ce:	e016      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081dc:	d107      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081de:	f107 0318 	add.w	r3, r7, #24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f82a 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ec:	e007      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f2:	e004      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f8:	e001      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80081fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008200:	4618      	mov	r0, r3
 8008202:	3740      	adds	r7, #64	; 0x40
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	58024400 	.word	0x58024400
 800820c:	01770000 	.word	0x01770000

08008210 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008214:	f7fd ffd4 	bl	80061c0 <HAL_RCC_GetHCLKFreq>
 8008218:	4602      	mov	r2, r0
 800821a:	4b06      	ldr	r3, [pc, #24]	; (8008234 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	091b      	lsrs	r3, r3, #4
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	4904      	ldr	r1, [pc, #16]	; (8008238 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008226:	5ccb      	ldrb	r3, [r1, r3]
 8008228:	f003 031f 	and.w	r3, r3, #31
 800822c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008230:	4618      	mov	r0, r3
 8008232:	bd80      	pop	{r7, pc}
 8008234:	58024400 	.word	0x58024400
 8008238:	08014064 	.word	0x08014064

0800823c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	; 0x24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008244:	4ba1      	ldr	r3, [pc, #644]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	f003 0303 	and.w	r3, r3, #3
 800824c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800824e:	4b9f      	ldr	r3, [pc, #636]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008252:	0b1b      	lsrs	r3, r3, #12
 8008254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008258:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800825a:	4b9c      	ldr	r3, [pc, #624]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825e:	091b      	lsrs	r3, r3, #4
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008266:	4b99      	ldr	r3, [pc, #612]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	08db      	lsrs	r3, r3, #3
 800826c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	fb02 f303 	mul.w	r3, r2, r3
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8111 	beq.w	80084ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b02      	cmp	r3, #2
 800828e:	f000 8083 	beq.w	8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	2b02      	cmp	r3, #2
 8008296:	f200 80a1 	bhi.w	80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d056      	beq.n	8008354 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082a6:	e099      	b.n	80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082a8:	4b88      	ldr	r3, [pc, #544]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0320 	and.w	r3, r3, #32
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d02d      	beq.n	8008310 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082b4:	4b85      	ldr	r3, [pc, #532]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	08db      	lsrs	r3, r3, #3
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	4a84      	ldr	r2, [pc, #528]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	ee07 3a90 	vmov	s15, r3
 80082cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082de:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800830e:	e087      	b.n	8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800831e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008322:	4b6a      	ldr	r3, [pc, #424]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008332:	ed97 6a03 	vldr	s12, [r7, #12]
 8008336:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800833a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008352:	e065      	b.n	8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	4b59      	ldr	r3, [pc, #356]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008376:	ed97 6a03 	vldr	s12, [r7, #12]
 800837a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800837e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008396:	e043      	b.n	8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083aa:	4b48      	ldr	r3, [pc, #288]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80083be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083da:	e021      	b.n	8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ee:	4b37      	ldr	r3, [pc, #220]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008402:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800841e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008420:	4b2a      	ldr	r3, [pc, #168]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	0a5b      	lsrs	r3, r3, #9
 8008426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800843a:	edd7 6a07 	vldr	s13, [r7, #28]
 800843e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008446:	ee17 2a90 	vmov	r2, s15
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800844e:	4b1f      	ldr	r3, [pc, #124]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008468:	edd7 6a07 	vldr	s13, [r7, #28]
 800846c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008474:	ee17 2a90 	vmov	r2, s15
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800847c:	4b13      	ldr	r3, [pc, #76]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	0e1b      	lsrs	r3, r3, #24
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008496:	edd7 6a07 	vldr	s13, [r7, #28]
 800849a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a2:	ee17 2a90 	vmov	r2, s15
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80084aa:	e008      	b.n	80084be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	609a      	str	r2, [r3, #8]
}
 80084be:	bf00      	nop
 80084c0:	3724      	adds	r7, #36	; 0x24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	58024400 	.word	0x58024400
 80084d0:	03d09000 	.word	0x03d09000
 80084d4:	46000000 	.word	0x46000000
 80084d8:	4c742400 	.word	0x4c742400
 80084dc:	4a742400 	.word	0x4a742400
 80084e0:	4bbb8000 	.word	0x4bbb8000

080084e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b089      	sub	sp, #36	; 0x24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084ec:	4ba1      	ldr	r3, [pc, #644]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80084f6:	4b9f      	ldr	r3, [pc, #636]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	0d1b      	lsrs	r3, r3, #20
 80084fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008500:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008502:	4b9c      	ldr	r3, [pc, #624]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	0a1b      	lsrs	r3, r3, #8
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800850e:	4b99      	ldr	r3, [pc, #612]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008512:	08db      	lsrs	r3, r3, #3
 8008514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	fb02 f303 	mul.w	r3, r2, r3
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008526:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 8111 	beq.w	8008754 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b02      	cmp	r3, #2
 8008536:	f000 8083 	beq.w	8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b02      	cmp	r3, #2
 800853e:	f200 80a1 	bhi.w	8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d056      	beq.n	80085fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800854e:	e099      	b.n	8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008550:	4b88      	ldr	r3, [pc, #544]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0320 	and.w	r3, r3, #32
 8008558:	2b00      	cmp	r3, #0
 800855a:	d02d      	beq.n	80085b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800855c:	4b85      	ldr	r3, [pc, #532]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	08db      	lsrs	r3, r3, #3
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	4a84      	ldr	r2, [pc, #528]	; (8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008568:	fa22 f303 	lsr.w	r3, r2, r3
 800856c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	ee07 3a90 	vmov	s15, r3
 8008574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008586:	4b7b      	ldr	r3, [pc, #492]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	ed97 6a03 	vldr	s12, [r7, #12]
 800859a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800877c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800859e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085b6:	e087      	b.n	80086c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ca:	4b6a      	ldr	r3, [pc, #424]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085da:	ed97 6a03 	vldr	s12, [r7, #12]
 80085de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800877c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085fa:	e065      	b.n	80086c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008606:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800860a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860e:	4b59      	ldr	r3, [pc, #356]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008616:	ee07 3a90 	vmov	s15, r3
 800861a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008622:	eddf 5a56 	vldr	s11, [pc, #344]	; 800877c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800863e:	e043      	b.n	80086c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800864e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008652:	4b48      	ldr	r3, [pc, #288]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008662:	ed97 6a03 	vldr	s12, [r7, #12]
 8008666:	eddf 5a45 	vldr	s11, [pc, #276]	; 800877c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800866a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008682:	e021      	b.n	80086c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	ee07 3a90 	vmov	s15, r3
 800868a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008696:	4b37      	ldr	r3, [pc, #220]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800877c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086c8:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086cc:	0a5b      	lsrs	r3, r3, #9
 80086ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ee:	ee17 2a90 	vmov	r2, s15
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80086f6:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	0c1b      	lsrs	r3, r3, #16
 80086fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800870c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008710:	edd7 6a07 	vldr	s13, [r7, #28]
 8008714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800871c:	ee17 2a90 	vmov	r2, s15
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008724:	4b13      	ldr	r3, [pc, #76]	; (8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	0e1b      	lsrs	r3, r3, #24
 800872a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800873a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800873e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800874a:	ee17 2a90 	vmov	r2, s15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008752:	e008      	b.n	8008766 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	609a      	str	r2, [r3, #8]
}
 8008766:	bf00      	nop
 8008768:	3724      	adds	r7, #36	; 0x24
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	58024400 	.word	0x58024400
 8008778:	03d09000 	.word	0x03d09000
 800877c:	46000000 	.word	0x46000000
 8008780:	4c742400 	.word	0x4c742400
 8008784:	4a742400 	.word	0x4a742400
 8008788:	4bbb8000 	.word	0x4bbb8000

0800878c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800878c:	b480      	push	{r7}
 800878e:	b089      	sub	sp, #36	; 0x24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008794:	4ba0      	ldr	r3, [pc, #640]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008798:	f003 0303 	and.w	r3, r3, #3
 800879c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800879e:	4b9e      	ldr	r3, [pc, #632]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	091b      	lsrs	r3, r3, #4
 80087a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80087aa:	4b9b      	ldr	r3, [pc, #620]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087b4:	4b98      	ldr	r3, [pc, #608]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b8:	08db      	lsrs	r3, r3, #3
 80087ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	fb02 f303 	mul.w	r3, r2, r3
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 8111 	beq.w	80089fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	f000 8083 	beq.w	80088e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	f200 80a1 	bhi.w	800892a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d056      	beq.n	80088a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80087f4:	e099      	b.n	800892a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f6:	4b88      	ldr	r3, [pc, #544]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d02d      	beq.n	800885e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008802:	4b85      	ldr	r3, [pc, #532]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	08db      	lsrs	r3, r3, #3
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	4a83      	ldr	r2, [pc, #524]	; (8008a1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800880e:	fa22 f303 	lsr.w	r3, r2, r3
 8008812:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882c:	4b7a      	ldr	r3, [pc, #488]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008834:	ee07 3a90 	vmov	s15, r3
 8008838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008840:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008858:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800885c:	e087      	b.n	800896e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	ee07 3a90 	vmov	s15, r3
 8008864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008868:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800886c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008870:	4b69      	ldr	r3, [pc, #420]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008878:	ee07 3a90 	vmov	s15, r3
 800887c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008880:	ed97 6a03 	vldr	s12, [r7, #12]
 8008884:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008888:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088a0:	e065      	b.n	800896e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	ee07 3a90 	vmov	s15, r3
 80088a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80088b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b4:	4b58      	ldr	r3, [pc, #352]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088bc:	ee07 3a90 	vmov	s15, r3
 80088c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088e4:	e043      	b.n	800896e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80088f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f8:	4b47      	ldr	r3, [pc, #284]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008908:	ed97 6a03 	vldr	s12, [r7, #12]
 800890c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008924:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008928:	e021      	b.n	800896e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	ee07 3a90 	vmov	s15, r3
 8008930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008934:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008a24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893c:	4b36      	ldr	r3, [pc, #216]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800893e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008950:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008968:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800896c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800896e:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	0a5b      	lsrs	r3, r3, #9
 8008974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008984:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008988:	edd7 6a07 	vldr	s13, [r7, #28]
 800898c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008994:	ee17 2a90 	vmov	r2, s15
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800899c:	4b1e      	ldr	r3, [pc, #120]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800899e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a0:	0c1b      	lsrs	r3, r3, #16
 80089a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c2:	ee17 2a90 	vmov	r2, s15
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80089ca:	4b13      	ldr	r3, [pc, #76]	; (8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	0e1b      	lsrs	r3, r3, #24
 80089d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f0:	ee17 2a90 	vmov	r2, s15
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80089f8:	e008      	b.n	8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	609a      	str	r2, [r3, #8]
}
 8008a0c:	bf00      	nop
 8008a0e:	3724      	adds	r7, #36	; 0x24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	58024400 	.word	0x58024400
 8008a1c:	03d09000 	.word	0x03d09000
 8008a20:	46000000 	.word	0x46000000
 8008a24:	4c742400 	.word	0x4c742400
 8008a28:	4a742400 	.word	0x4a742400
 8008a2c:	4bbb8000 	.word	0x4bbb8000

08008a30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a3e:	4b53      	ldr	r3, [pc, #332]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d101      	bne.n	8008a4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e099      	b.n	8008b82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a4e:	4b4f      	ldr	r3, [pc, #316]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a4e      	ldr	r2, [pc, #312]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008a54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a5a:	f7f9 fd3b 	bl	80024d4 <HAL_GetTick>
 8008a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a60:	e008      	b.n	8008a74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a62:	f7f9 fd37 	bl	80024d4 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e086      	b.n	8008b82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a74:	4b45      	ldr	r3, [pc, #276]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f0      	bne.n	8008a62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a80:	4b42      	ldr	r3, [pc, #264]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	031b      	lsls	r3, r3, #12
 8008a8e:	493f      	ldr	r1, [pc, #252]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	628b      	str	r3, [r1, #40]	; 0x28
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	025b      	lsls	r3, r3, #9
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	041b      	lsls	r3, r3, #16
 8008ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	061b      	lsls	r3, r3, #24
 8008ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ac4:	4931      	ldr	r1, [pc, #196]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008aca:	4b30      	ldr	r3, [pc, #192]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ace:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	492d      	ldr	r1, [pc, #180]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008adc:	4b2b      	ldr	r3, [pc, #172]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	f023 0220 	bic.w	r2, r3, #32
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	4928      	ldr	r1, [pc, #160]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008aee:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	4a26      	ldr	r2, [pc, #152]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008af4:	f023 0310 	bic.w	r3, r3, #16
 8008af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008afa:	4b24      	ldr	r3, [pc, #144]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008afe:	4b24      	ldr	r3, [pc, #144]	; (8008b90 <RCCEx_PLL2_Config+0x160>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	69d2      	ldr	r2, [r2, #28]
 8008b06:	00d2      	lsls	r2, r2, #3
 8008b08:	4920      	ldr	r1, [pc, #128]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b0e:	4b1f      	ldr	r3, [pc, #124]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b12:	4a1e      	ldr	r2, [pc, #120]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b14:	f043 0310 	orr.w	r3, r3, #16
 8008b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d106      	bne.n	8008b2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b20:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	4a19      	ldr	r2, [pc, #100]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b2c:	e00f      	b.n	8008b4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d106      	bne.n	8008b42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b34:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	4a14      	ldr	r2, [pc, #80]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b40:	e005      	b.n	8008b4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b42:	4b12      	ldr	r3, [pc, #72]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	4a11      	ldr	r2, [pc, #68]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a0e      	ldr	r2, [pc, #56]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b5a:	f7f9 fcbb 	bl	80024d4 <HAL_GetTick>
 8008b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b60:	e008      	b.n	8008b74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b62:	f7f9 fcb7 	bl	80024d4 <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d901      	bls.n	8008b74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e006      	b.n	8008b82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <RCCEx_PLL2_Config+0x15c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0f0      	beq.n	8008b62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	58024400 	.word	0x58024400
 8008b90:	ffff0007 	.word	0xffff0007

08008b94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ba2:	4b53      	ldr	r3, [pc, #332]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d101      	bne.n	8008bb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e099      	b.n	8008ce6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008bb2:	4b4f      	ldr	r3, [pc, #316]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a4e      	ldr	r2, [pc, #312]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bbe:	f7f9 fc89 	bl	80024d4 <HAL_GetTick>
 8008bc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bc4:	e008      	b.n	8008bd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bc6:	f7f9 fc85 	bl	80024d4 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d901      	bls.n	8008bd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e086      	b.n	8008ce6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bd8:	4b45      	ldr	r3, [pc, #276]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1f0      	bne.n	8008bc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008be4:	4b42      	ldr	r3, [pc, #264]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	051b      	lsls	r3, r3, #20
 8008bf2:	493f      	ldr	r1, [pc, #252]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	628b      	str	r3, [r1, #40]	; 0x28
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	025b      	lsls	r3, r3, #9
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	041b      	lsls	r3, r3, #16
 8008c16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	061b      	lsls	r3, r3, #24
 8008c24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c28:	4931      	ldr	r1, [pc, #196]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c2e:	4b30      	ldr	r3, [pc, #192]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	492d      	ldr	r1, [pc, #180]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c40:	4b2b      	ldr	r3, [pc, #172]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	4928      	ldr	r1, [pc, #160]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c52:	4b27      	ldr	r3, [pc, #156]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	4a26      	ldr	r2, [pc, #152]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c5e:	4b24      	ldr	r3, [pc, #144]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c62:	4b24      	ldr	r3, [pc, #144]	; (8008cf4 <RCCEx_PLL3_Config+0x160>)
 8008c64:	4013      	ands	r3, r2
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	69d2      	ldr	r2, [r2, #28]
 8008c6a:	00d2      	lsls	r2, r2, #3
 8008c6c:	4920      	ldr	r1, [pc, #128]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c72:	4b1f      	ldr	r3, [pc, #124]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	4a1e      	ldr	r2, [pc, #120]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c84:	4b1a      	ldr	r3, [pc, #104]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	4a19      	ldr	r2, [pc, #100]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c90:	e00f      	b.n	8008cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d106      	bne.n	8008ca6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c98:	4b15      	ldr	r3, [pc, #84]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	4a14      	ldr	r2, [pc, #80]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008c9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ca4:	e005      	b.n	8008cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008ca6:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	4a11      	ldr	r2, [pc, #68]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008cb2:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a0e      	ldr	r2, [pc, #56]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cbe:	f7f9 fc09 	bl	80024d4 <HAL_GetTick>
 8008cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cc4:	e008      	b.n	8008cd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cc6:	f7f9 fc05 	bl	80024d4 <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d901      	bls.n	8008cd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e006      	b.n	8008ce6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <RCCEx_PLL3_Config+0x15c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0f0      	beq.n	8008cc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	58024400 	.word	0x58024400
 8008cf4:	ffff0007 	.word	0xffff0007

08008cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e049      	b.n	8008d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d106      	bne.n	8008d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f841 	bl	8008da6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f000 f9e8 	bl	800910c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d001      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e054      	b.n	8008e7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0201 	orr.w	r2, r2, #1
 8008dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a26      	ldr	r2, [pc, #152]	; (8008e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d022      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfe:	d01d      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a22      	ldr	r2, [pc, #136]	; (8008e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d018      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a21      	ldr	r2, [pc, #132]	; (8008e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d013      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1f      	ldr	r2, [pc, #124]	; (8008e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00e      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a1e      	ldr	r2, [pc, #120]	; (8008e9c <HAL_TIM_Base_Start_IT+0xe0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d009      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1c      	ldr	r2, [pc, #112]	; (8008ea0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d004      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1b      	ldr	r2, [pc, #108]	; (8008ea4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d115      	bne.n	8008e68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689a      	ldr	r2, [r3, #8]
 8008e42:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <HAL_TIM_Base_Start_IT+0xec>)
 8008e44:	4013      	ands	r3, r2
 8008e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b06      	cmp	r3, #6
 8008e4c:	d015      	beq.n	8008e7a <HAL_TIM_Base_Start_IT+0xbe>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e54:	d011      	beq.n	8008e7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f042 0201 	orr.w	r2, r2, #1
 8008e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e66:	e008      	b.n	8008e7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e000      	b.n	8008e7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40010000 	.word	0x40010000
 8008e90:	40000400 	.word	0x40000400
 8008e94:	40000800 	.word	0x40000800
 8008e98:	40000c00 	.word	0x40000c00
 8008e9c:	40010400 	.word	0x40010400
 8008ea0:	40001800 	.word	0x40001800
 8008ea4:	40014000 	.word	0x40014000
 8008ea8:	00010007 	.word	0x00010007

08008eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d020      	beq.n	8008f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01b      	beq.n	8008f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f06f 0202 	mvn.w	r2, #2
 8008ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	f003 0303 	and.w	r3, r3, #3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f8e9 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008efc:	e005      	b.n	8008f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f8db 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f8ec 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f003 0304 	and.w	r3, r3, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d020      	beq.n	8008f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01b      	beq.n	8008f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f06f 0204 	mvn.w	r2, #4
 8008f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f8c3 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008f48:	e005      	b.n	8008f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f8b5 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8c6 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d020      	beq.n	8008fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f003 0308 	and.w	r3, r3, #8
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01b      	beq.n	8008fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0208 	mvn.w	r2, #8
 8008f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f89d 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008f94:	e005      	b.n	8008fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f88f 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f8a0 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d020      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01b      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0210 	mvn.w	r2, #16
 8008fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2208      	movs	r2, #8
 8008fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f877 	bl	80090ce <HAL_TIM_IC_CaptureCallback>
 8008fe0:	e005      	b.n	8008fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f869 	bl	80090ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f87a 	bl	80090e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0201 	mvn.w	r2, #1
 8009010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7f8 fd94 	bl	8001b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00c      	beq.n	8009046 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009032:	2b00      	cmp	r3, #0
 8009034:	d007      	beq.n	8009046 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800903e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f913 	bl	800926c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00c      	beq.n	800906a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f90b 	bl	8009280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00c      	beq.n	800908e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f834 	bl	80090f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00c      	beq.n	80090b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f06f 0220 	mvn.w	r2, #32
 80090aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f8d3 	bl	8009258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
	...

0800910c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a46      	ldr	r2, [pc, #280]	; (8009238 <TIM_Base_SetConfig+0x12c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d013      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912a:	d00f      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a43      	ldr	r2, [pc, #268]	; (800923c <TIM_Base_SetConfig+0x130>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a42      	ldr	r2, [pc, #264]	; (8009240 <TIM_Base_SetConfig+0x134>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a41      	ldr	r2, [pc, #260]	; (8009244 <TIM_Base_SetConfig+0x138>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a40      	ldr	r2, [pc, #256]	; (8009248 <TIM_Base_SetConfig+0x13c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d108      	bne.n	800915e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a35      	ldr	r2, [pc, #212]	; (8009238 <TIM_Base_SetConfig+0x12c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d01f      	beq.n	80091a6 <TIM_Base_SetConfig+0x9a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916c:	d01b      	beq.n	80091a6 <TIM_Base_SetConfig+0x9a>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a32      	ldr	r2, [pc, #200]	; (800923c <TIM_Base_SetConfig+0x130>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d017      	beq.n	80091a6 <TIM_Base_SetConfig+0x9a>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a31      	ldr	r2, [pc, #196]	; (8009240 <TIM_Base_SetConfig+0x134>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d013      	beq.n	80091a6 <TIM_Base_SetConfig+0x9a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a30      	ldr	r2, [pc, #192]	; (8009244 <TIM_Base_SetConfig+0x138>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d00f      	beq.n	80091a6 <TIM_Base_SetConfig+0x9a>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a2f      	ldr	r2, [pc, #188]	; (8009248 <TIM_Base_SetConfig+0x13c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d00b      	beq.n	80091a6 <TIM_Base_SetConfig+0x9a>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a2e      	ldr	r2, [pc, #184]	; (800924c <TIM_Base_SetConfig+0x140>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d007      	beq.n	80091a6 <TIM_Base_SetConfig+0x9a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a2d      	ldr	r2, [pc, #180]	; (8009250 <TIM_Base_SetConfig+0x144>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d003      	beq.n	80091a6 <TIM_Base_SetConfig+0x9a>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a2c      	ldr	r2, [pc, #176]	; (8009254 <TIM_Base_SetConfig+0x148>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d108      	bne.n	80091b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a16      	ldr	r2, [pc, #88]	; (8009238 <TIM_Base_SetConfig+0x12c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00f      	beq.n	8009204 <TIM_Base_SetConfig+0xf8>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a18      	ldr	r2, [pc, #96]	; (8009248 <TIM_Base_SetConfig+0x13c>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d00b      	beq.n	8009204 <TIM_Base_SetConfig+0xf8>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a17      	ldr	r2, [pc, #92]	; (800924c <TIM_Base_SetConfig+0x140>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d007      	beq.n	8009204 <TIM_Base_SetConfig+0xf8>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a16      	ldr	r2, [pc, #88]	; (8009250 <TIM_Base_SetConfig+0x144>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d003      	beq.n	8009204 <TIM_Base_SetConfig+0xf8>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a15      	ldr	r2, [pc, #84]	; (8009254 <TIM_Base_SetConfig+0x148>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d103      	bne.n	800920c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b01      	cmp	r3, #1
 800921c:	d105      	bne.n	800922a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f023 0201 	bic.w	r2, r3, #1
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	611a      	str	r2, [r3, #16]
  }
}
 800922a:	bf00      	nop
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	40010000 	.word	0x40010000
 800923c:	40000400 	.word	0x40000400
 8009240:	40000800 	.word	0x40000800
 8009244:	40000c00 	.word	0x40000c00
 8009248:	40010400 	.word	0x40010400
 800924c:	40014000 	.word	0x40014000
 8009250:	40014400 	.word	0x40014400
 8009254:	40014800 	.word	0x40014800

08009258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e042      	b.n	800932c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d106      	bne.n	80092be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7f8 fd85 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2224      	movs	r2, #36	; 0x24
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0201 	bic.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 fe8a 	bl	8009ff8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f91f 	bl	8009528 <UART_SetConfig>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d101      	bne.n	80092f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e01b      	b.n	800932c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0201 	orr.w	r2, r2, #1
 8009322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 ff09 	bl	800a13c <UART_CheckIdleState>
 800932a:	4603      	mov	r3, r0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	; 0x28
 8009338:	af02      	add	r7, sp, #8
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	4613      	mov	r3, r2
 8009342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800934a:	2b20      	cmp	r3, #32
 800934c:	d17b      	bne.n	8009446 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <HAL_UART_Transmit+0x26>
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e074      	b.n	8009448 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2221      	movs	r2, #33	; 0x21
 800936a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800936e:	f7f9 f8b1 	bl	80024d4 <HAL_GetTick>
 8009372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	88fa      	ldrh	r2, [r7, #6]
 8009378:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	88fa      	ldrh	r2, [r7, #6]
 8009380:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938c:	d108      	bne.n	80093a0 <HAL_UART_Transmit+0x6c>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d104      	bne.n	80093a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009396:	2300      	movs	r3, #0
 8009398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	61bb      	str	r3, [r7, #24]
 800939e:	e003      	b.n	80093a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093a4:	2300      	movs	r3, #0
 80093a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80093a8:	e030      	b.n	800940c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2200      	movs	r2, #0
 80093b2:	2180      	movs	r1, #128	; 0x80
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 ff6b 	bl	800a290 <UART_WaitOnFlagUntilTimeout>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e03d      	b.n	8009448 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10b      	bne.n	80093ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	3302      	adds	r3, #2
 80093e6:	61bb      	str	r3, [r7, #24]
 80093e8:	e007      	b.n	80093fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	781a      	ldrb	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	3301      	adds	r3, #1
 80093f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009400:	b29b      	uxth	r3, r3
 8009402:	3b01      	subs	r3, #1
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009412:	b29b      	uxth	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1c8      	bne.n	80093aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2200      	movs	r2, #0
 8009420:	2140      	movs	r1, #64	; 0x40
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 ff34 	bl	800a290 <UART_WaitOnFlagUntilTimeout>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2220      	movs	r2, #32
 8009432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e006      	b.n	8009448 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	e000      	b.n	8009448 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009446:	2302      	movs	r3, #2
  }
}
 8009448:	4618      	mov	r0, r3
 800944a:	3720      	adds	r7, #32
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08a      	sub	sp, #40	; 0x28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	4613      	mov	r3, r2
 800945c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009464:	2b20      	cmp	r3, #32
 8009466:	d137      	bne.n	80094d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <HAL_UART_Receive_DMA+0x24>
 800946e:	88fb      	ldrh	r3, [r7, #6]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e030      	b.n	80094da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a18      	ldr	r2, [pc, #96]	; (80094e4 <HAL_UART_Receive_DMA+0x94>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d01f      	beq.n	80094c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d018      	beq.n	80094c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	613b      	str	r3, [r7, #16]
   return(result);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	461a      	mov	r2, r3
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	623b      	str	r3, [r7, #32]
 80094b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b8:	69f9      	ldr	r1, [r7, #28]
 80094ba:	6a3a      	ldr	r2, [r7, #32]
 80094bc:	e841 2300 	strex	r3, r2, [r1]
 80094c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e6      	bne.n	8009496 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80094c8:	88fb      	ldrh	r3, [r7, #6]
 80094ca:	461a      	mov	r2, r3
 80094cc:	68b9      	ldr	r1, [r7, #8]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 ff4c 	bl	800a36c <UART_Start_Receive_DMA>
 80094d4:	4603      	mov	r3, r0
 80094d6:	e000      	b.n	80094da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094d8:	2302      	movs	r3, #2
  }
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3728      	adds	r7, #40	; 0x28
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	58000c00 	.word	0x58000c00

080094e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800952c:	b092      	sub	sp, #72	; 0x48
 800952e:	af00      	add	r7, sp, #0
 8009530:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	431a      	orrs	r2, r3
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	431a      	orrs	r2, r3
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	4313      	orrs	r3, r2
 800954e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4bbe      	ldr	r3, [pc, #760]	; (8009850 <UART_SetConfig+0x328>)
 8009558:	4013      	ands	r3, r2
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	6812      	ldr	r2, [r2, #0]
 800955e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009560:	430b      	orrs	r3, r1
 8009562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4ab3      	ldr	r2, [pc, #716]	; (8009854 <UART_SetConfig+0x32c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d004      	beq.n	8009594 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009590:	4313      	orrs	r3, r2
 8009592:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689a      	ldr	r2, [r3, #8]
 800959a:	4baf      	ldr	r3, [pc, #700]	; (8009858 <UART_SetConfig+0x330>)
 800959c:	4013      	ands	r3, r2
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	6812      	ldr	r2, [r2, #0]
 80095a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095a4:	430b      	orrs	r3, r1
 80095a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ae:	f023 010f 	bic.w	r1, r3, #15
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4aa6      	ldr	r2, [pc, #664]	; (800985c <UART_SetConfig+0x334>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d177      	bne.n	80096b8 <UART_SetConfig+0x190>
 80095c8:	4ba5      	ldr	r3, [pc, #660]	; (8009860 <UART_SetConfig+0x338>)
 80095ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095d0:	2b28      	cmp	r3, #40	; 0x28
 80095d2:	d86d      	bhi.n	80096b0 <UART_SetConfig+0x188>
 80095d4:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <UART_SetConfig+0xb4>)
 80095d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095da:	bf00      	nop
 80095dc:	08009681 	.word	0x08009681
 80095e0:	080096b1 	.word	0x080096b1
 80095e4:	080096b1 	.word	0x080096b1
 80095e8:	080096b1 	.word	0x080096b1
 80095ec:	080096b1 	.word	0x080096b1
 80095f0:	080096b1 	.word	0x080096b1
 80095f4:	080096b1 	.word	0x080096b1
 80095f8:	080096b1 	.word	0x080096b1
 80095fc:	08009689 	.word	0x08009689
 8009600:	080096b1 	.word	0x080096b1
 8009604:	080096b1 	.word	0x080096b1
 8009608:	080096b1 	.word	0x080096b1
 800960c:	080096b1 	.word	0x080096b1
 8009610:	080096b1 	.word	0x080096b1
 8009614:	080096b1 	.word	0x080096b1
 8009618:	080096b1 	.word	0x080096b1
 800961c:	08009691 	.word	0x08009691
 8009620:	080096b1 	.word	0x080096b1
 8009624:	080096b1 	.word	0x080096b1
 8009628:	080096b1 	.word	0x080096b1
 800962c:	080096b1 	.word	0x080096b1
 8009630:	080096b1 	.word	0x080096b1
 8009634:	080096b1 	.word	0x080096b1
 8009638:	080096b1 	.word	0x080096b1
 800963c:	08009699 	.word	0x08009699
 8009640:	080096b1 	.word	0x080096b1
 8009644:	080096b1 	.word	0x080096b1
 8009648:	080096b1 	.word	0x080096b1
 800964c:	080096b1 	.word	0x080096b1
 8009650:	080096b1 	.word	0x080096b1
 8009654:	080096b1 	.word	0x080096b1
 8009658:	080096b1 	.word	0x080096b1
 800965c:	080096a1 	.word	0x080096a1
 8009660:	080096b1 	.word	0x080096b1
 8009664:	080096b1 	.word	0x080096b1
 8009668:	080096b1 	.word	0x080096b1
 800966c:	080096b1 	.word	0x080096b1
 8009670:	080096b1 	.word	0x080096b1
 8009674:	080096b1 	.word	0x080096b1
 8009678:	080096b1 	.word	0x080096b1
 800967c:	080096a9 	.word	0x080096a9
 8009680:	2301      	movs	r3, #1
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009686:	e222      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009688:	2304      	movs	r3, #4
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968e:	e21e      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009696:	e21a      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009698:	2310      	movs	r3, #16
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800969e:	e216      	b.n	8009ace <UART_SetConfig+0x5a6>
 80096a0:	2320      	movs	r3, #32
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a6:	e212      	b.n	8009ace <UART_SetConfig+0x5a6>
 80096a8:	2340      	movs	r3, #64	; 0x40
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ae:	e20e      	b.n	8009ace <UART_SetConfig+0x5a6>
 80096b0:	2380      	movs	r3, #128	; 0x80
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b6:	e20a      	b.n	8009ace <UART_SetConfig+0x5a6>
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a69      	ldr	r2, [pc, #420]	; (8009864 <UART_SetConfig+0x33c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d130      	bne.n	8009724 <UART_SetConfig+0x1fc>
 80096c2:	4b67      	ldr	r3, [pc, #412]	; (8009860 <UART_SetConfig+0x338>)
 80096c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c6:	f003 0307 	and.w	r3, r3, #7
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	d826      	bhi.n	800971c <UART_SetConfig+0x1f4>
 80096ce:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <UART_SetConfig+0x1ac>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	080096ed 	.word	0x080096ed
 80096d8:	080096f5 	.word	0x080096f5
 80096dc:	080096fd 	.word	0x080096fd
 80096e0:	08009705 	.word	0x08009705
 80096e4:	0800970d 	.word	0x0800970d
 80096e8:	08009715 	.word	0x08009715
 80096ec:	2300      	movs	r3, #0
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096f2:	e1ec      	b.n	8009ace <UART_SetConfig+0x5a6>
 80096f4:	2304      	movs	r3, #4
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fa:	e1e8      	b.n	8009ace <UART_SetConfig+0x5a6>
 80096fc:	2308      	movs	r3, #8
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009702:	e1e4      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009704:	2310      	movs	r3, #16
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970a:	e1e0      	b.n	8009ace <UART_SetConfig+0x5a6>
 800970c:	2320      	movs	r3, #32
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009712:	e1dc      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009714:	2340      	movs	r3, #64	; 0x40
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971a:	e1d8      	b.n	8009ace <UART_SetConfig+0x5a6>
 800971c:	2380      	movs	r3, #128	; 0x80
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009722:	e1d4      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a4f      	ldr	r2, [pc, #316]	; (8009868 <UART_SetConfig+0x340>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d130      	bne.n	8009790 <UART_SetConfig+0x268>
 800972e:	4b4c      	ldr	r3, [pc, #304]	; (8009860 <UART_SetConfig+0x338>)
 8009730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	2b05      	cmp	r3, #5
 8009738:	d826      	bhi.n	8009788 <UART_SetConfig+0x260>
 800973a:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <UART_SetConfig+0x218>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009759 	.word	0x08009759
 8009744:	08009761 	.word	0x08009761
 8009748:	08009769 	.word	0x08009769
 800974c:	08009771 	.word	0x08009771
 8009750:	08009779 	.word	0x08009779
 8009754:	08009781 	.word	0x08009781
 8009758:	2300      	movs	r3, #0
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975e:	e1b6      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009760:	2304      	movs	r3, #4
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009766:	e1b2      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009768:	2308      	movs	r3, #8
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800976e:	e1ae      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009770:	2310      	movs	r3, #16
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009776:	e1aa      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009778:	2320      	movs	r3, #32
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977e:	e1a6      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009786:	e1a2      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009788:	2380      	movs	r3, #128	; 0x80
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978e:	e19e      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a35      	ldr	r2, [pc, #212]	; (800986c <UART_SetConfig+0x344>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d130      	bne.n	80097fc <UART_SetConfig+0x2d4>
 800979a:	4b31      	ldr	r3, [pc, #196]	; (8009860 <UART_SetConfig+0x338>)
 800979c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	d826      	bhi.n	80097f4 <UART_SetConfig+0x2cc>
 80097a6:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <UART_SetConfig+0x284>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097c5 	.word	0x080097c5
 80097b0:	080097cd 	.word	0x080097cd
 80097b4:	080097d5 	.word	0x080097d5
 80097b8:	080097dd 	.word	0x080097dd
 80097bc:	080097e5 	.word	0x080097e5
 80097c0:	080097ed 	.word	0x080097ed
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ca:	e180      	b.n	8009ace <UART_SetConfig+0x5a6>
 80097cc:	2304      	movs	r3, #4
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d2:	e17c      	b.n	8009ace <UART_SetConfig+0x5a6>
 80097d4:	2308      	movs	r3, #8
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097da:	e178      	b.n	8009ace <UART_SetConfig+0x5a6>
 80097dc:	2310      	movs	r3, #16
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e2:	e174      	b.n	8009ace <UART_SetConfig+0x5a6>
 80097e4:	2320      	movs	r3, #32
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ea:	e170      	b.n	8009ace <UART_SetConfig+0x5a6>
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e16c      	b.n	8009ace <UART_SetConfig+0x5a6>
 80097f4:	2380      	movs	r3, #128	; 0x80
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e168      	b.n	8009ace <UART_SetConfig+0x5a6>
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a1b      	ldr	r2, [pc, #108]	; (8009870 <UART_SetConfig+0x348>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d142      	bne.n	800988c <UART_SetConfig+0x364>
 8009806:	4b16      	ldr	r3, [pc, #88]	; (8009860 <UART_SetConfig+0x338>)
 8009808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	2b05      	cmp	r3, #5
 8009810:	d838      	bhi.n	8009884 <UART_SetConfig+0x35c>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <UART_SetConfig+0x2f0>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	08009831 	.word	0x08009831
 800981c:	08009839 	.word	0x08009839
 8009820:	08009841 	.word	0x08009841
 8009824:	08009849 	.word	0x08009849
 8009828:	08009875 	.word	0x08009875
 800982c:	0800987d 	.word	0x0800987d
 8009830:	2300      	movs	r3, #0
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009836:	e14a      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009838:	2304      	movs	r3, #4
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983e:	e146      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009840:	2308      	movs	r3, #8
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009846:	e142      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009848:	2310      	movs	r3, #16
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e13e      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009850:	cfff69f3 	.word	0xcfff69f3
 8009854:	58000c00 	.word	0x58000c00
 8009858:	11fff4ff 	.word	0x11fff4ff
 800985c:	40011000 	.word	0x40011000
 8009860:	58024400 	.word	0x58024400
 8009864:	40004400 	.word	0x40004400
 8009868:	40004800 	.word	0x40004800
 800986c:	40004c00 	.word	0x40004c00
 8009870:	40005000 	.word	0x40005000
 8009874:	2320      	movs	r3, #32
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987a:	e128      	b.n	8009ace <UART_SetConfig+0x5a6>
 800987c:	2340      	movs	r3, #64	; 0x40
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009882:	e124      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009884:	2380      	movs	r3, #128	; 0x80
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988a:	e120      	b.n	8009ace <UART_SetConfig+0x5a6>
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4acb      	ldr	r2, [pc, #812]	; (8009bc0 <UART_SetConfig+0x698>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d176      	bne.n	8009984 <UART_SetConfig+0x45c>
 8009896:	4bcb      	ldr	r3, [pc, #812]	; (8009bc4 <UART_SetConfig+0x69c>)
 8009898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800989e:	2b28      	cmp	r3, #40	; 0x28
 80098a0:	d86c      	bhi.n	800997c <UART_SetConfig+0x454>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <UART_SetConfig+0x380>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	0800994d 	.word	0x0800994d
 80098ac:	0800997d 	.word	0x0800997d
 80098b0:	0800997d 	.word	0x0800997d
 80098b4:	0800997d 	.word	0x0800997d
 80098b8:	0800997d 	.word	0x0800997d
 80098bc:	0800997d 	.word	0x0800997d
 80098c0:	0800997d 	.word	0x0800997d
 80098c4:	0800997d 	.word	0x0800997d
 80098c8:	08009955 	.word	0x08009955
 80098cc:	0800997d 	.word	0x0800997d
 80098d0:	0800997d 	.word	0x0800997d
 80098d4:	0800997d 	.word	0x0800997d
 80098d8:	0800997d 	.word	0x0800997d
 80098dc:	0800997d 	.word	0x0800997d
 80098e0:	0800997d 	.word	0x0800997d
 80098e4:	0800997d 	.word	0x0800997d
 80098e8:	0800995d 	.word	0x0800995d
 80098ec:	0800997d 	.word	0x0800997d
 80098f0:	0800997d 	.word	0x0800997d
 80098f4:	0800997d 	.word	0x0800997d
 80098f8:	0800997d 	.word	0x0800997d
 80098fc:	0800997d 	.word	0x0800997d
 8009900:	0800997d 	.word	0x0800997d
 8009904:	0800997d 	.word	0x0800997d
 8009908:	08009965 	.word	0x08009965
 800990c:	0800997d 	.word	0x0800997d
 8009910:	0800997d 	.word	0x0800997d
 8009914:	0800997d 	.word	0x0800997d
 8009918:	0800997d 	.word	0x0800997d
 800991c:	0800997d 	.word	0x0800997d
 8009920:	0800997d 	.word	0x0800997d
 8009924:	0800997d 	.word	0x0800997d
 8009928:	0800996d 	.word	0x0800996d
 800992c:	0800997d 	.word	0x0800997d
 8009930:	0800997d 	.word	0x0800997d
 8009934:	0800997d 	.word	0x0800997d
 8009938:	0800997d 	.word	0x0800997d
 800993c:	0800997d 	.word	0x0800997d
 8009940:	0800997d 	.word	0x0800997d
 8009944:	0800997d 	.word	0x0800997d
 8009948:	08009975 	.word	0x08009975
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009952:	e0bc      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009954:	2304      	movs	r3, #4
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995a:	e0b8      	b.n	8009ace <UART_SetConfig+0x5a6>
 800995c:	2308      	movs	r3, #8
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009962:	e0b4      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009964:	2310      	movs	r3, #16
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996a:	e0b0      	b.n	8009ace <UART_SetConfig+0x5a6>
 800996c:	2320      	movs	r3, #32
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009972:	e0ac      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e0a8      	b.n	8009ace <UART_SetConfig+0x5a6>
 800997c:	2380      	movs	r3, #128	; 0x80
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e0a4      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a8f      	ldr	r2, [pc, #572]	; (8009bc8 <UART_SetConfig+0x6a0>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d130      	bne.n	80099f0 <UART_SetConfig+0x4c8>
 800998e:	4b8d      	ldr	r3, [pc, #564]	; (8009bc4 <UART_SetConfig+0x69c>)
 8009990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009992:	f003 0307 	and.w	r3, r3, #7
 8009996:	2b05      	cmp	r3, #5
 8009998:	d826      	bhi.n	80099e8 <UART_SetConfig+0x4c0>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x478>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	080099b9 	.word	0x080099b9
 80099a4:	080099c1 	.word	0x080099c1
 80099a8:	080099c9 	.word	0x080099c9
 80099ac:	080099d1 	.word	0x080099d1
 80099b0:	080099d9 	.word	0x080099d9
 80099b4:	080099e1 	.word	0x080099e1
 80099b8:	2300      	movs	r3, #0
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e086      	b.n	8009ace <UART_SetConfig+0x5a6>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e082      	b.n	8009ace <UART_SetConfig+0x5a6>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ce:	e07e      	b.n	8009ace <UART_SetConfig+0x5a6>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d6:	e07a      	b.n	8009ace <UART_SetConfig+0x5a6>
 80099d8:	2320      	movs	r3, #32
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099de:	e076      	b.n	8009ace <UART_SetConfig+0x5a6>
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e072      	b.n	8009ace <UART_SetConfig+0x5a6>
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ee:	e06e      	b.n	8009ace <UART_SetConfig+0x5a6>
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a75      	ldr	r2, [pc, #468]	; (8009bcc <UART_SetConfig+0x6a4>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d130      	bne.n	8009a5c <UART_SetConfig+0x534>
 80099fa:	4b72      	ldr	r3, [pc, #456]	; (8009bc4 <UART_SetConfig+0x69c>)
 80099fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fe:	f003 0307 	and.w	r3, r3, #7
 8009a02:	2b05      	cmp	r3, #5
 8009a04:	d826      	bhi.n	8009a54 <UART_SetConfig+0x52c>
 8009a06:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <UART_SetConfig+0x4e4>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a25 	.word	0x08009a25
 8009a10:	08009a2d 	.word	0x08009a2d
 8009a14:	08009a35 	.word	0x08009a35
 8009a18:	08009a3d 	.word	0x08009a3d
 8009a1c:	08009a45 	.word	0x08009a45
 8009a20:	08009a4d 	.word	0x08009a4d
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e050      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009a2c:	2304      	movs	r3, #4
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e04c      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009a34:	2308      	movs	r3, #8
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3a:	e048      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009a3c:	2310      	movs	r3, #16
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a42:	e044      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009a44:	2320      	movs	r3, #32
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4a:	e040      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009a4c:	2340      	movs	r3, #64	; 0x40
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e03c      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009a54:	2380      	movs	r3, #128	; 0x80
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e038      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a5b      	ldr	r2, [pc, #364]	; (8009bd0 <UART_SetConfig+0x6a8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d130      	bne.n	8009ac8 <UART_SetConfig+0x5a0>
 8009a66:	4b57      	ldr	r3, [pc, #348]	; (8009bc4 <UART_SetConfig+0x69c>)
 8009a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	2b05      	cmp	r3, #5
 8009a70:	d826      	bhi.n	8009ac0 <UART_SetConfig+0x598>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <UART_SetConfig+0x550>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009a91 	.word	0x08009a91
 8009a7c:	08009a99 	.word	0x08009a99
 8009a80:	08009aa1 	.word	0x08009aa1
 8009a84:	08009aa9 	.word	0x08009aa9
 8009a88:	08009ab1 	.word	0x08009ab1
 8009a8c:	08009ab9 	.word	0x08009ab9
 8009a90:	2302      	movs	r3, #2
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e01a      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e016      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e012      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aae:	e00e      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009ab0:	2320      	movs	r3, #32
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e00a      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009ab8:	2340      	movs	r3, #64	; 0x40
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e006      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009ac0:	2380      	movs	r3, #128	; 0x80
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac6:	e002      	b.n	8009ace <UART_SetConfig+0x5a6>
 8009ac8:	2380      	movs	r3, #128	; 0x80
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a3f      	ldr	r2, [pc, #252]	; (8009bd0 <UART_SetConfig+0x6a8>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	f040 80f8 	bne.w	8009cca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ada:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ade:	2b20      	cmp	r3, #32
 8009ae0:	dc46      	bgt.n	8009b70 <UART_SetConfig+0x648>
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	f2c0 8082 	blt.w	8009bec <UART_SetConfig+0x6c4>
 8009ae8:	3b02      	subs	r3, #2
 8009aea:	2b1e      	cmp	r3, #30
 8009aec:	d87e      	bhi.n	8009bec <UART_SetConfig+0x6c4>
 8009aee:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <UART_SetConfig+0x5cc>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b77 	.word	0x08009b77
 8009af8:	08009bed 	.word	0x08009bed
 8009afc:	08009b7f 	.word	0x08009b7f
 8009b00:	08009bed 	.word	0x08009bed
 8009b04:	08009bed 	.word	0x08009bed
 8009b08:	08009bed 	.word	0x08009bed
 8009b0c:	08009b8f 	.word	0x08009b8f
 8009b10:	08009bed 	.word	0x08009bed
 8009b14:	08009bed 	.word	0x08009bed
 8009b18:	08009bed 	.word	0x08009bed
 8009b1c:	08009bed 	.word	0x08009bed
 8009b20:	08009bed 	.word	0x08009bed
 8009b24:	08009bed 	.word	0x08009bed
 8009b28:	08009bed 	.word	0x08009bed
 8009b2c:	08009b9f 	.word	0x08009b9f
 8009b30:	08009bed 	.word	0x08009bed
 8009b34:	08009bed 	.word	0x08009bed
 8009b38:	08009bed 	.word	0x08009bed
 8009b3c:	08009bed 	.word	0x08009bed
 8009b40:	08009bed 	.word	0x08009bed
 8009b44:	08009bed 	.word	0x08009bed
 8009b48:	08009bed 	.word	0x08009bed
 8009b4c:	08009bed 	.word	0x08009bed
 8009b50:	08009bed 	.word	0x08009bed
 8009b54:	08009bed 	.word	0x08009bed
 8009b58:	08009bed 	.word	0x08009bed
 8009b5c:	08009bed 	.word	0x08009bed
 8009b60:	08009bed 	.word	0x08009bed
 8009b64:	08009bed 	.word	0x08009bed
 8009b68:	08009bed 	.word	0x08009bed
 8009b6c:	08009bdf 	.word	0x08009bdf
 8009b70:	2b40      	cmp	r3, #64	; 0x40
 8009b72:	d037      	beq.n	8009be4 <UART_SetConfig+0x6bc>
 8009b74:	e03a      	b.n	8009bec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b76:	f7fe fb4b 	bl	8008210 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b7c:	e03c      	b.n	8009bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe fb5a 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b8c:	e034      	b.n	8009bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b8e:	f107 0318 	add.w	r3, r7, #24
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fca6 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b9c:	e02c      	b.n	8009bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <UART_SetConfig+0x69c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0320 	and.w	r3, r3, #32
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d016      	beq.n	8009bd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <UART_SetConfig+0x69c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	08db      	lsrs	r3, r3, #3
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	4a07      	ldr	r2, [pc, #28]	; (8009bd4 <UART_SetConfig+0x6ac>)
 8009bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bbc:	e01c      	b.n	8009bf8 <UART_SetConfig+0x6d0>
 8009bbe:	bf00      	nop
 8009bc0:	40011400 	.word	0x40011400
 8009bc4:	58024400 	.word	0x58024400
 8009bc8:	40007800 	.word	0x40007800
 8009bcc:	40007c00 	.word	0x40007c00
 8009bd0:	58000c00 	.word	0x58000c00
 8009bd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009bd8:	4b9d      	ldr	r3, [pc, #628]	; (8009e50 <UART_SetConfig+0x928>)
 8009bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bdc:	e00c      	b.n	8009bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bde:	4b9d      	ldr	r3, [pc, #628]	; (8009e54 <UART_SetConfig+0x92c>)
 8009be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009be2:	e009      	b.n	8009bf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bea:	e005      	b.n	8009bf8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009bf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 81de 	beq.w	8009fbc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	4a94      	ldr	r2, [pc, #592]	; (8009e58 <UART_SetConfig+0x930>)
 8009c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c12:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	4413      	add	r3, r2
 8009c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d305      	bcc.n	8009c30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c36:	e1c1      	b.n	8009fbc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	60bb      	str	r3, [r7, #8]
 8009c3e:	60fa      	str	r2, [r7, #12]
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	4a84      	ldr	r2, [pc, #528]	; (8009e58 <UART_SetConfig+0x930>)
 8009c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	607a      	str	r2, [r7, #4]
 8009c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c5a:	f7f6 fd55 	bl	8000708 <__aeabi_uldivmod>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4610      	mov	r0, r2
 8009c64:	4619      	mov	r1, r3
 8009c66:	f04f 0200 	mov.w	r2, #0
 8009c6a:	f04f 0300 	mov.w	r3, #0
 8009c6e:	020b      	lsls	r3, r1, #8
 8009c70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c74:	0202      	lsls	r2, r0, #8
 8009c76:	6979      	ldr	r1, [r7, #20]
 8009c78:	6849      	ldr	r1, [r1, #4]
 8009c7a:	0849      	lsrs	r1, r1, #1
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	4605      	mov	r5, r0
 8009c82:	eb12 0804 	adds.w	r8, r2, r4
 8009c86:	eb43 0905 	adc.w	r9, r3, r5
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	469a      	mov	sl, r3
 8009c92:	4693      	mov	fp, r2
 8009c94:	4652      	mov	r2, sl
 8009c96:	465b      	mov	r3, fp
 8009c98:	4640      	mov	r0, r8
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	f7f6 fd34 	bl	8000708 <__aeabi_uldivmod>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cae:	d308      	bcc.n	8009cc2 <UART_SetConfig+0x79a>
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cb6:	d204      	bcs.n	8009cc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cbe:	60da      	str	r2, [r3, #12]
 8009cc0:	e17c      	b.n	8009fbc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009cc8:	e178      	b.n	8009fbc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd2:	f040 80c5 	bne.w	8009e60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009cd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	dc48      	bgt.n	8009d70 <UART_SetConfig+0x848>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	db7b      	blt.n	8009dda <UART_SetConfig+0x8b2>
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	d879      	bhi.n	8009dda <UART_SetConfig+0x8b2>
 8009ce6:	a201      	add	r2, pc, #4	; (adr r2, 8009cec <UART_SetConfig+0x7c4>)
 8009ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cec:	08009d77 	.word	0x08009d77
 8009cf0:	08009d7f 	.word	0x08009d7f
 8009cf4:	08009ddb 	.word	0x08009ddb
 8009cf8:	08009ddb 	.word	0x08009ddb
 8009cfc:	08009d87 	.word	0x08009d87
 8009d00:	08009ddb 	.word	0x08009ddb
 8009d04:	08009ddb 	.word	0x08009ddb
 8009d08:	08009ddb 	.word	0x08009ddb
 8009d0c:	08009d97 	.word	0x08009d97
 8009d10:	08009ddb 	.word	0x08009ddb
 8009d14:	08009ddb 	.word	0x08009ddb
 8009d18:	08009ddb 	.word	0x08009ddb
 8009d1c:	08009ddb 	.word	0x08009ddb
 8009d20:	08009ddb 	.word	0x08009ddb
 8009d24:	08009ddb 	.word	0x08009ddb
 8009d28:	08009ddb 	.word	0x08009ddb
 8009d2c:	08009da7 	.word	0x08009da7
 8009d30:	08009ddb 	.word	0x08009ddb
 8009d34:	08009ddb 	.word	0x08009ddb
 8009d38:	08009ddb 	.word	0x08009ddb
 8009d3c:	08009ddb 	.word	0x08009ddb
 8009d40:	08009ddb 	.word	0x08009ddb
 8009d44:	08009ddb 	.word	0x08009ddb
 8009d48:	08009ddb 	.word	0x08009ddb
 8009d4c:	08009ddb 	.word	0x08009ddb
 8009d50:	08009ddb 	.word	0x08009ddb
 8009d54:	08009ddb 	.word	0x08009ddb
 8009d58:	08009ddb 	.word	0x08009ddb
 8009d5c:	08009ddb 	.word	0x08009ddb
 8009d60:	08009ddb 	.word	0x08009ddb
 8009d64:	08009ddb 	.word	0x08009ddb
 8009d68:	08009ddb 	.word	0x08009ddb
 8009d6c:	08009dcd 	.word	0x08009dcd
 8009d70:	2b40      	cmp	r3, #64	; 0x40
 8009d72:	d02e      	beq.n	8009dd2 <UART_SetConfig+0x8aa>
 8009d74:	e031      	b.n	8009dda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d76:	f7fc fa53 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8009d7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d7c:	e033      	b.n	8009de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d7e:	f7fc fa65 	bl	800624c <HAL_RCC_GetPCLK2Freq>
 8009d82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d84:	e02f      	b.n	8009de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fe fa56 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d94:	e027      	b.n	8009de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d96:	f107 0318 	add.w	r3, r7, #24
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fba2 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009da4:	e01f      	b.n	8009de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da6:	4b2d      	ldr	r3, [pc, #180]	; (8009e5c <UART_SetConfig+0x934>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d009      	beq.n	8009dc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009db2:	4b2a      	ldr	r3, [pc, #168]	; (8009e5c <UART_SetConfig+0x934>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	08db      	lsrs	r3, r3, #3
 8009db8:	f003 0303 	and.w	r3, r3, #3
 8009dbc:	4a24      	ldr	r2, [pc, #144]	; (8009e50 <UART_SetConfig+0x928>)
 8009dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dc4:	e00f      	b.n	8009de6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009dc6:	4b22      	ldr	r3, [pc, #136]	; (8009e50 <UART_SetConfig+0x928>)
 8009dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dca:	e00c      	b.n	8009de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dcc:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <UART_SetConfig+0x92c>)
 8009dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd0:	e009      	b.n	8009de6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd8:	e005      	b.n	8009de6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80e7 	beq.w	8009fbc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	4a19      	ldr	r2, [pc, #100]	; (8009e58 <UART_SetConfig+0x930>)
 8009df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e00:	005a      	lsls	r2, r3, #1
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	085b      	lsrs	r3, r3, #1
 8009e08:	441a      	add	r2, r3
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d916      	bls.n	8009e48 <UART_SetConfig+0x920>
 8009e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e20:	d212      	bcs.n	8009e48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	f023 030f 	bic.w	r3, r3, #15
 8009e2a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	085b      	lsrs	r3, r3, #1
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009e44:	60da      	str	r2, [r3, #12]
 8009e46:	e0b9      	b.n	8009fbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e4e:	e0b5      	b.n	8009fbc <UART_SetConfig+0xa94>
 8009e50:	03d09000 	.word	0x03d09000
 8009e54:	003d0900 	.word	0x003d0900
 8009e58:	0801410c 	.word	0x0801410c
 8009e5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e64:	2b20      	cmp	r3, #32
 8009e66:	dc49      	bgt.n	8009efc <UART_SetConfig+0x9d4>
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	db7c      	blt.n	8009f66 <UART_SetConfig+0xa3e>
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	d87a      	bhi.n	8009f66 <UART_SetConfig+0xa3e>
 8009e70:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x950>)
 8009e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e76:	bf00      	nop
 8009e78:	08009f03 	.word	0x08009f03
 8009e7c:	08009f0b 	.word	0x08009f0b
 8009e80:	08009f67 	.word	0x08009f67
 8009e84:	08009f67 	.word	0x08009f67
 8009e88:	08009f13 	.word	0x08009f13
 8009e8c:	08009f67 	.word	0x08009f67
 8009e90:	08009f67 	.word	0x08009f67
 8009e94:	08009f67 	.word	0x08009f67
 8009e98:	08009f23 	.word	0x08009f23
 8009e9c:	08009f67 	.word	0x08009f67
 8009ea0:	08009f67 	.word	0x08009f67
 8009ea4:	08009f67 	.word	0x08009f67
 8009ea8:	08009f67 	.word	0x08009f67
 8009eac:	08009f67 	.word	0x08009f67
 8009eb0:	08009f67 	.word	0x08009f67
 8009eb4:	08009f67 	.word	0x08009f67
 8009eb8:	08009f33 	.word	0x08009f33
 8009ebc:	08009f67 	.word	0x08009f67
 8009ec0:	08009f67 	.word	0x08009f67
 8009ec4:	08009f67 	.word	0x08009f67
 8009ec8:	08009f67 	.word	0x08009f67
 8009ecc:	08009f67 	.word	0x08009f67
 8009ed0:	08009f67 	.word	0x08009f67
 8009ed4:	08009f67 	.word	0x08009f67
 8009ed8:	08009f67 	.word	0x08009f67
 8009edc:	08009f67 	.word	0x08009f67
 8009ee0:	08009f67 	.word	0x08009f67
 8009ee4:	08009f67 	.word	0x08009f67
 8009ee8:	08009f67 	.word	0x08009f67
 8009eec:	08009f67 	.word	0x08009f67
 8009ef0:	08009f67 	.word	0x08009f67
 8009ef4:	08009f67 	.word	0x08009f67
 8009ef8:	08009f59 	.word	0x08009f59
 8009efc:	2b40      	cmp	r3, #64	; 0x40
 8009efe:	d02e      	beq.n	8009f5e <UART_SetConfig+0xa36>
 8009f00:	e031      	b.n	8009f66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f02:	f7fc f98d 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8009f06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f08:	e033      	b.n	8009f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f0a:	f7fc f99f 	bl	800624c <HAL_RCC_GetPCLK2Freq>
 8009f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f10:	e02f      	b.n	8009f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe f990 	bl	800823c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f20:	e027      	b.n	8009f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f22:	f107 0318 	add.w	r3, r7, #24
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fadc 	bl	80084e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f30:	e01f      	b.n	8009f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f32:	4b2d      	ldr	r3, [pc, #180]	; (8009fe8 <UART_SetConfig+0xac0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0320 	and.w	r3, r3, #32
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f3e:	4b2a      	ldr	r3, [pc, #168]	; (8009fe8 <UART_SetConfig+0xac0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	08db      	lsrs	r3, r3, #3
 8009f44:	f003 0303 	and.w	r3, r3, #3
 8009f48:	4a28      	ldr	r2, [pc, #160]	; (8009fec <UART_SetConfig+0xac4>)
 8009f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f50:	e00f      	b.n	8009f72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009f52:	4b26      	ldr	r3, [pc, #152]	; (8009fec <UART_SetConfig+0xac4>)
 8009f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f56:	e00c      	b.n	8009f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f58:	4b25      	ldr	r3, [pc, #148]	; (8009ff0 <UART_SetConfig+0xac8>)
 8009f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f5c:	e009      	b.n	8009f72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f64:	e005      	b.n	8009f72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f70:	bf00      	nop
    }

    if (pclk != 0U)
 8009f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d021      	beq.n	8009fbc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <UART_SetConfig+0xacc>)
 8009f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f82:	461a      	mov	r2, r3
 8009f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f86:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	085b      	lsrs	r3, r3, #1
 8009f90:	441a      	add	r2, r3
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	2b0f      	cmp	r3, #15
 8009fa0:	d909      	bls.n	8009fb6 <UART_SetConfig+0xa8e>
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa8:	d205      	bcs.n	8009fb6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	60da      	str	r2, [r3, #12]
 8009fb4:	e002      	b.n	8009fbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009fd8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3748      	adds	r7, #72	; 0x48
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fe6:	bf00      	nop
 8009fe8:	58024400 	.word	0x58024400
 8009fec:	03d09000 	.word	0x03d09000
 8009ff0:	003d0900 	.word	0x003d0900
 8009ff4:	0801410c 	.word	0x0801410c

08009ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a004:	f003 0308 	and.w	r3, r3, #8
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00a      	beq.n	800a044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00a      	beq.n	800a066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	f003 0304 	and.w	r3, r3, #4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00a      	beq.n	800a088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	f003 0310 	and.w	r3, r3, #16
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01a      	beq.n	800a10e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f6:	d10a      	bne.n	800a10e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	605a      	str	r2, [r3, #4]
  }
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b098      	sub	sp, #96	; 0x60
 800a140:	af02      	add	r7, sp, #8
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a14c:	f7f8 f9c2 	bl	80024d4 <HAL_GetTick>
 800a150:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0308 	and.w	r3, r3, #8
 800a15c:	2b08      	cmp	r3, #8
 800a15e:	d12f      	bne.n	800a1c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a168:	2200      	movs	r2, #0
 800a16a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f88e 	bl	800a290 <UART_WaitOnFlagUntilTimeout>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d022      	beq.n	800a1c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a18e:	653b      	str	r3, [r7, #80]	; 0x50
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a198:	647b      	str	r3, [r7, #68]	; 0x44
 800a19a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a19e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1a0:	e841 2300 	strex	r3, r2, [r1]
 800a1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e6      	bne.n	800a17a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e063      	b.n	800a288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d149      	bne.n	800a262 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f857 	bl	800a290 <UART_WaitOnFlagUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d03c      	beq.n	800a262 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a206:	633b      	str	r3, [r7, #48]	; 0x30
 800a208:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e6      	bne.n	800a1e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3308      	adds	r3, #8
 800a220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	60fb      	str	r3, [r7, #12]
   return(result);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f023 0301 	bic.w	r3, r3, #1
 800a230:	64bb      	str	r3, [r7, #72]	; 0x48
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3308      	adds	r3, #8
 800a238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a23a:	61fa      	str	r2, [r7, #28]
 800a23c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	69b9      	ldr	r1, [r7, #24]
 800a240:	69fa      	ldr	r2, [r7, #28]
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	617b      	str	r3, [r7, #20]
   return(result);
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1e5      	bne.n	800a21a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2220      	movs	r2, #32
 800a252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e012      	b.n	800a288 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2220      	movs	r2, #32
 800a266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3758      	adds	r7, #88	; 0x58
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	4613      	mov	r3, r2
 800a29e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2a0:	e04f      	b.n	800a342 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a8:	d04b      	beq.n	800a342 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2aa:	f7f8 f913 	bl	80024d4 <HAL_GetTick>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d302      	bcc.n	800a2c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e04e      	b.n	800a362 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0304 	and.w	r3, r3, #4
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d037      	beq.n	800a342 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2b80      	cmp	r3, #128	; 0x80
 800a2d6:	d034      	beq.n	800a342 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b40      	cmp	r3, #64	; 0x40
 800a2dc:	d031      	beq.n	800a342 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	f003 0308 	and.w	r3, r3, #8
 800a2e8:	2b08      	cmp	r3, #8
 800a2ea:	d110      	bne.n	800a30e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2208      	movs	r2, #8
 800a2f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f921 	bl	800a53c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2208      	movs	r2, #8
 800a2fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e029      	b.n	800a362 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69db      	ldr	r3, [r3, #28]
 800a314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31c:	d111      	bne.n	800a342 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f907 	bl	800a53c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2220      	movs	r2, #32
 800a332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e00f      	b.n	800a362 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69da      	ldr	r2, [r3, #28]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	4013      	ands	r3, r2
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	429a      	cmp	r2, r3
 800a350:	bf0c      	ite	eq
 800a352:	2301      	moveq	r3, #1
 800a354:	2300      	movne	r3, #0
 800a356:	b2db      	uxtb	r3, r3
 800a358:	461a      	mov	r2, r3
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d0a0      	beq.n	800a2a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b096      	sub	sp, #88	; 0x58
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	88fa      	ldrh	r2, [r7, #6]
 800a384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2222      	movs	r2, #34	; 0x22
 800a394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d02d      	beq.n	800a3fe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3a8:	4a40      	ldr	r2, [pc, #256]	; (800a4ac <UART_Start_Receive_DMA+0x140>)
 800a3aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3b2:	4a3f      	ldr	r2, [pc, #252]	; (800a4b0 <UART_Start_Receive_DMA+0x144>)
 800a3b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3bc:	4a3d      	ldr	r2, [pc, #244]	; (800a4b4 <UART_Start_Receive_DMA+0x148>)
 800a3be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3324      	adds	r3, #36	; 0x24
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3dc:	461a      	mov	r2, r3
 800a3de:	88fb      	ldrh	r3, [r7, #6]
 800a3e0:	f7f8 fd44 	bl	8002e6c <HAL_DMA_Start_IT>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d009      	beq.n	800a3fe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2210      	movs	r2, #16
 800a3ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e051      	b.n	800a4a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d018      	beq.n	800a438 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a41a:	657b      	str	r3, [r7, #84]	; 0x54
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a424:	64bb      	str	r3, [r7, #72]	; 0x48
 800a426:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a428:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a42a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a42c:	e841 2300 	strex	r3, r2, [r1]
 800a430:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e6      	bne.n	800a406 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3308      	adds	r3, #8
 800a43e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	e853 3f00 	ldrex	r3, [r3]
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	f043 0301 	orr.w	r3, r3, #1
 800a44e:	653b      	str	r3, [r7, #80]	; 0x50
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3308      	adds	r3, #8
 800a456:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a458:	637a      	str	r2, [r7, #52]	; 0x34
 800a45a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a45e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a460:	e841 2300 	strex	r3, r2, [r1]
 800a464:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e5      	bne.n	800a438 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3308      	adds	r3, #8
 800a472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	613b      	str	r3, [r7, #16]
   return(result);
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a482:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3308      	adds	r3, #8
 800a48a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a48c:	623a      	str	r2, [r7, #32]
 800a48e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	69f9      	ldr	r1, [r7, #28]
 800a492:	6a3a      	ldr	r2, [r7, #32]
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	61bb      	str	r3, [r7, #24]
   return(result);
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e5      	bne.n	800a46c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3758      	adds	r7, #88	; 0x58
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	0800a609 	.word	0x0800a609
 800a4b0:	0800a731 	.word	0x0800a731
 800a4b4:	0800a76f 	.word	0x0800a76f

0800a4b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b08f      	sub	sp, #60	; 0x3c
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	e853 3f00 	ldrex	r3, [r3]
 800a4cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4e6:	e841 2300 	strex	r3, r2, [r1]
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1e6      	bne.n	800a4c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3308      	adds	r3, #8
 800a4f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	60bb      	str	r3, [r7, #8]
   return(result);
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a508:	633b      	str	r3, [r7, #48]	; 0x30
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3308      	adds	r3, #8
 800a510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a512:	61ba      	str	r2, [r7, #24]
 800a514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a516:	6979      	ldr	r1, [r7, #20]
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	e841 2300 	strex	r3, r2, [r1]
 800a51e:	613b      	str	r3, [r7, #16]
   return(result);
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1e5      	bne.n	800a4f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2220      	movs	r2, #32
 800a52a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a52e:	bf00      	nop
 800a530:	373c      	adds	r7, #60	; 0x3c
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
	...

0800a53c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b095      	sub	sp, #84	; 0x54
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a558:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a562:	643b      	str	r3, [r7, #64]	; 0x40
 800a564:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a566:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e6      	bne.n	800a544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3308      	adds	r3, #8
 800a57c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	61fb      	str	r3, [r7, #28]
   return(result);
 800a586:	69fa      	ldr	r2, [r7, #28]
 800a588:	4b1e      	ldr	r3, [pc, #120]	; (800a604 <UART_EndRxTransfer+0xc8>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3308      	adds	r3, #8
 800a594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a596:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a598:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a59c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e5      	bne.n	800a576 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d118      	bne.n	800a5e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	e853 3f00 	ldrex	r3, [r3]
 800a5be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f023 0310 	bic.w	r3, r3, #16
 800a5c6:	647b      	str	r3, [r7, #68]	; 0x44
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d4:	6979      	ldr	r1, [r7, #20]
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	e841 2300 	strex	r3, r2, [r1]
 800a5dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1e6      	bne.n	800a5b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2220      	movs	r2, #32
 800a5e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a5f8:	bf00      	nop
 800a5fa:	3754      	adds	r7, #84	; 0x54
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	effffffe 	.word	0xeffffffe

0800a608 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b09c      	sub	sp, #112	; 0x70
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a614:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a61e:	d071      	beq.n	800a704 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a622:	2200      	movs	r2, #0
 800a624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a63c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a646:	65bb      	str	r3, [r7, #88]	; 0x58
 800a648:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a64c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a64e:	e841 2300 	strex	r3, r2, [r1]
 800a652:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e6      	bne.n	800a628 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3308      	adds	r3, #8
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66c:	f023 0301 	bic.w	r3, r3, #1
 800a670:	667b      	str	r3, [r7, #100]	; 0x64
 800a672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a67a:	647a      	str	r2, [r7, #68]	; 0x44
 800a67c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e5      	bne.n	800a65a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3308      	adds	r3, #8
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	623b      	str	r3, [r7, #32]
   return(result);
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6a4:	663b      	str	r3, [r7, #96]	; 0x60
 800a6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6ae:	633a      	str	r2, [r7, #48]	; 0x30
 800a6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e5      	bne.n	800a68e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d118      	bne.n	800a704 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f023 0310 	bic.w	r3, r3, #16
 800a6e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6f0:	61fb      	str	r3, [r7, #28]
 800a6f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	69b9      	ldr	r1, [r7, #24]
 800a6f6:	69fa      	ldr	r2, [r7, #28]
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e6      	bne.n	800a6d2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a706:	2200      	movs	r2, #0
 800a708:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a70c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d107      	bne.n	800a722 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a718:	4619      	mov	r1, r3
 800a71a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a71c:	f7fe fef8 	bl	8009510 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a720:	e002      	b.n	800a728 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a722:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a724:	f7f6 ff6a 	bl	80015fc <HAL_UART_RxCpltCallback>
}
 800a728:	bf00      	nop
 800a72a:	3770      	adds	r7, #112	; 0x70
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2201      	movs	r2, #1
 800a742:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d109      	bne.n	800a760 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a752:	085b      	lsrs	r3, r3, #1
 800a754:	b29b      	uxth	r3, r3
 800a756:	4619      	mov	r1, r3
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f7fe fed9 	bl	8009510 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a75e:	e002      	b.n	800a766 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7fe fec1 	bl	80094e8 <HAL_UART_RxHalfCpltCallback>
}
 800a766:	bf00      	nop
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b086      	sub	sp, #24
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a782:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a796:	2b80      	cmp	r3, #128	; 0x80
 800a798:	d109      	bne.n	800a7ae <UART_DMAError+0x40>
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2b21      	cmp	r3, #33	; 0x21
 800a79e:	d106      	bne.n	800a7ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a7a8:	6978      	ldr	r0, [r7, #20]
 800a7aa:	f7ff fe85 	bl	800a4b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b8:	2b40      	cmp	r3, #64	; 0x40
 800a7ba:	d109      	bne.n	800a7d0 <UART_DMAError+0x62>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b22      	cmp	r3, #34	; 0x22
 800a7c0:	d106      	bne.n	800a7d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a7ca:	6978      	ldr	r0, [r7, #20]
 800a7cc:	f7ff feb6 	bl	800a53c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7d6:	f043 0210 	orr.w	r2, r3, #16
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7e0:	6978      	ldr	r0, [r7, #20]
 800a7e2:	f7fe fe8b 	bl	80094fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7e6:	bf00      	nop
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b085      	sub	sp, #20
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_UARTEx_DisableFifoMode+0x16>
 800a800:	2302      	movs	r3, #2
 800a802:	e027      	b.n	800a854 <HAL_UARTEx_DisableFifoMode+0x66>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2224      	movs	r2, #36	; 0x24
 800a810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f022 0201 	bic.w	r2, r2, #1
 800a82a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a832:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2220      	movs	r2, #32
 800a846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3714      	adds	r7, #20
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a870:	2b01      	cmp	r3, #1
 800a872:	d101      	bne.n	800a878 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a874:	2302      	movs	r3, #2
 800a876:	e02d      	b.n	800a8d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2224      	movs	r2, #36	; 0x24
 800a884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 0201 	bic.w	r2, r2, #1
 800a89e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f84f 	bl	800a958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2220      	movs	r2, #32
 800a8c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e02d      	b.n	800a950 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2224      	movs	r2, #36	; 0x24
 800a900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f022 0201 	bic.w	r2, r2, #1
 800a91a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	430a      	orrs	r2, r1
 800a92e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f811 	bl	800a958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2220      	movs	r2, #32
 800a942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a964:	2b00      	cmp	r3, #0
 800a966:	d108      	bne.n	800a97a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a978:	e031      	b.n	800a9de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a97a:	2310      	movs	r3, #16
 800a97c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a97e:	2310      	movs	r3, #16
 800a980:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	0e5b      	lsrs	r3, r3, #25
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f003 0307 	and.w	r3, r3, #7
 800a990:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	0f5b      	lsrs	r3, r3, #29
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	f003 0307 	and.w	r3, r3, #7
 800a9a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	7b3a      	ldrb	r2, [r7, #12]
 800a9a6:	4911      	ldr	r1, [pc, #68]	; (800a9ec <UARTEx_SetNbDataToProcess+0x94>)
 800a9a8:	5c8a      	ldrb	r2, [r1, r2]
 800a9aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9ae:	7b3a      	ldrb	r2, [r7, #12]
 800a9b0:	490f      	ldr	r1, [pc, #60]	; (800a9f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a9b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	7b7a      	ldrb	r2, [r7, #13]
 800a9c4:	4909      	ldr	r1, [pc, #36]	; (800a9ec <UARTEx_SetNbDataToProcess+0x94>)
 800a9c6:	5c8a      	ldrb	r2, [r1, r2]
 800a9c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9cc:	7b7a      	ldrb	r2, [r7, #13]
 800a9ce:	4908      	ldr	r1, [pc, #32]	; (800a9f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a9d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9de:	bf00      	nop
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	08014124 	.word	0x08014124
 800a9f0:	0801412c 	.word	0x0801412c

0800a9f4 <__NVIC_SetPriority>:
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800aa00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	db0a      	blt.n	800aa1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	490c      	ldr	r1, [pc, #48]	; (800aa40 <__NVIC_SetPriority+0x4c>)
 800aa0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa12:	0112      	lsls	r2, r2, #4
 800aa14:	b2d2      	uxtb	r2, r2
 800aa16:	440b      	add	r3, r1
 800aa18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aa1c:	e00a      	b.n	800aa34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	4908      	ldr	r1, [pc, #32]	; (800aa44 <__NVIC_SetPriority+0x50>)
 800aa24:	88fb      	ldrh	r3, [r7, #6]
 800aa26:	f003 030f 	and.w	r3, r3, #15
 800aa2a:	3b04      	subs	r3, #4
 800aa2c:	0112      	lsls	r2, r2, #4
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	440b      	add	r3, r1
 800aa32:	761a      	strb	r2, [r3, #24]
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	e000e100 	.word	0xe000e100
 800aa44:	e000ed00 	.word	0xe000ed00

0800aa48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aa4c:	4b05      	ldr	r3, [pc, #20]	; (800aa64 <SysTick_Handler+0x1c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aa50:	f002 fdba 	bl	800d5c8 <xTaskGetSchedulerState>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d001      	beq.n	800aa5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aa5a:	f000 ff2d 	bl	800b8b8 <xPortSysTickHandler>
  }
}
 800aa5e:	bf00      	nop
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	e000e010 	.word	0xe000e010

0800aa68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	f06f 0004 	mvn.w	r0, #4
 800aa72:	f7ff ffbf 	bl	800a9f4 <__NVIC_SetPriority>
#endif
}
 800aa76:	bf00      	nop
 800aa78:	bd80      	pop	{r7, pc}
	...

0800aa7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa82:	f3ef 8305 	mrs	r3, IPSR
 800aa86:	603b      	str	r3, [r7, #0]
  return(result);
 800aa88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aa8e:	f06f 0305 	mvn.w	r3, #5
 800aa92:	607b      	str	r3, [r7, #4]
 800aa94:	e00c      	b.n	800aab0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aa96:	4b0a      	ldr	r3, [pc, #40]	; (800aac0 <osKernelInitialize+0x44>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d105      	bne.n	800aaaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aa9e:	4b08      	ldr	r3, [pc, #32]	; (800aac0 <osKernelInitialize+0x44>)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	607b      	str	r3, [r7, #4]
 800aaa8:	e002      	b.n	800aab0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aaae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aab0:	687b      	ldr	r3, [r7, #4]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	240007d8 	.word	0x240007d8

0800aac4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaca:	f3ef 8305 	mrs	r3, IPSR
 800aace:	603b      	str	r3, [r7, #0]
  return(result);
 800aad0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <osKernelStart+0x1a>
    stat = osErrorISR;
 800aad6:	f06f 0305 	mvn.w	r3, #5
 800aada:	607b      	str	r3, [r7, #4]
 800aadc:	e010      	b.n	800ab00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aade:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <osKernelStart+0x48>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d109      	bne.n	800aafa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aae6:	f7ff ffbf 	bl	800aa68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aaea:	4b08      	ldr	r3, [pc, #32]	; (800ab0c <osKernelStart+0x48>)
 800aaec:	2202      	movs	r2, #2
 800aaee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aaf0:	f002 f922 	bl	800cd38 <vTaskStartScheduler>
      stat = osOK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	607b      	str	r3, [r7, #4]
 800aaf8:	e002      	b.n	800ab00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aafa:	f04f 33ff 	mov.w	r3, #4294967295
 800aafe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab00:	687b      	ldr	r3, [r7, #4]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	240007d8 	.word	0x240007d8

0800ab10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08e      	sub	sp, #56	; 0x38
 800ab14:	af04      	add	r7, sp, #16
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab20:	f3ef 8305 	mrs	r3, IPSR
 800ab24:	617b      	str	r3, [r7, #20]
  return(result);
 800ab26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d17e      	bne.n	800ac2a <osThreadNew+0x11a>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d07b      	beq.n	800ac2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ab32:	2380      	movs	r3, #128	; 0x80
 800ab34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ab36:	2318      	movs	r3, #24
 800ab38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ab3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d045      	beq.n	800abd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <osThreadNew+0x48>
        name = attr->name;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d008      	beq.n	800ab7e <osThreadNew+0x6e>
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b38      	cmp	r3, #56	; 0x38
 800ab70:	d805      	bhi.n	800ab7e <osThreadNew+0x6e>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <osThreadNew+0x72>
        return (NULL);
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e054      	b.n	800ac2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	089b      	lsrs	r3, r3, #2
 800ab90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00e      	beq.n	800abb8 <osThreadNew+0xa8>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	2b5b      	cmp	r3, #91	; 0x5b
 800aba0:	d90a      	bls.n	800abb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d006      	beq.n	800abb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d002      	beq.n	800abb8 <osThreadNew+0xa8>
        mem = 1;
 800abb2:	2301      	movs	r3, #1
 800abb4:	61bb      	str	r3, [r7, #24]
 800abb6:	e010      	b.n	800abda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10c      	bne.n	800abda <osThreadNew+0xca>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d108      	bne.n	800abda <osThreadNew+0xca>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d104      	bne.n	800abda <osThreadNew+0xca>
          mem = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	61bb      	str	r3, [r7, #24]
 800abd4:	e001      	b.n	800abda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d110      	bne.n	800ac02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800abe8:	9202      	str	r2, [sp, #8]
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	6a3a      	ldr	r2, [r7, #32]
 800abf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f001 fefc 	bl	800c9f4 <xTaskCreateStatic>
 800abfc:	4603      	mov	r3, r0
 800abfe:	613b      	str	r3, [r7, #16]
 800ac00:	e013      	b.n	800ac2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d110      	bne.n	800ac2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	f107 0310 	add.w	r3, r7, #16
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f001 ff47 	bl	800caae <xTaskCreate>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d001      	beq.n	800ac2a <osThreadNew+0x11a>
            hTask = NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ac2a:	693b      	ldr	r3, [r7, #16]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3728      	adds	r7, #40	; 0x28
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac3a:	f3ef 8305 	mrs	r3, IPSR
 800ac3e:	603b      	str	r3, [r7, #0]
  return(result);
 800ac40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <osThreadYield+0x1a>
    stat = osErrorISR;
 800ac46:	f06f 0305 	mvn.w	r3, #5
 800ac4a:	607b      	str	r3, [r7, #4]
 800ac4c:	e009      	b.n	800ac62 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800ac52:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <osThreadYield+0x3c>)
 800ac54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800ac62:	687b      	ldr	r3, [r7, #4]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	e000ed04 	.word	0xe000ed04

0800ac74 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b08a      	sub	sp, #40	; 0x28
 800ac78:	af02      	add	r7, sp, #8
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ac80:	2300      	movs	r3, #0
 800ac82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac84:	f3ef 8305 	mrs	r3, IPSR
 800ac88:	613b      	str	r3, [r7, #16]
  return(result);
 800ac8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d175      	bne.n	800ad7c <osSemaphoreNew+0x108>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d072      	beq.n	800ad7c <osSemaphoreNew+0x108>
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d86e      	bhi.n	800ad7c <osSemaphoreNew+0x108>
    mem = -1;
 800ac9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aca2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d015      	beq.n	800acd6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d006      	beq.n	800acc0 <osSemaphoreNew+0x4c>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	2b4f      	cmp	r3, #79	; 0x4f
 800acb8:	d902      	bls.n	800acc0 <osSemaphoreNew+0x4c>
        mem = 1;
 800acba:	2301      	movs	r3, #1
 800acbc:	61bb      	str	r3, [r7, #24]
 800acbe:	e00c      	b.n	800acda <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d108      	bne.n	800acda <osSemaphoreNew+0x66>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d104      	bne.n	800acda <osSemaphoreNew+0x66>
          mem = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	61bb      	str	r3, [r7, #24]
 800acd4:	e001      	b.n	800acda <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace0:	d04c      	beq.n	800ad7c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d128      	bne.n	800ad3a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d10a      	bne.n	800ad04 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	2203      	movs	r2, #3
 800acf4:	9200      	str	r2, [sp, #0]
 800acf6:	2200      	movs	r2, #0
 800acf8:	2100      	movs	r1, #0
 800acfa:	2001      	movs	r0, #1
 800acfc:	f000 fed4 	bl	800baa8 <xQueueGenericCreateStatic>
 800ad00:	61f8      	str	r0, [r7, #28]
 800ad02:	e005      	b.n	800ad10 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ad04:	2203      	movs	r2, #3
 800ad06:	2100      	movs	r1, #0
 800ad08:	2001      	movs	r0, #1
 800ad0a:	f000 ff45 	bl	800bb98 <xQueueGenericCreate>
 800ad0e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d022      	beq.n	800ad5c <osSemaphoreNew+0xe8>
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01f      	beq.n	800ad5c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2100      	movs	r1, #0
 800ad22:	69f8      	ldr	r0, [r7, #28]
 800ad24:	f001 f800 	bl	800bd28 <xQueueGenericSend>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d016      	beq.n	800ad5c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ad2e:	69f8      	ldr	r0, [r7, #28]
 800ad30:	f001 fc8c 	bl	800c64c <vQueueDelete>
            hSemaphore = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	61fb      	str	r3, [r7, #28]
 800ad38:	e010      	b.n	800ad5c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d108      	bne.n	800ad52 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	461a      	mov	r2, r3
 800ad46:	68b9      	ldr	r1, [r7, #8]
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f000 ff82 	bl	800bc52 <xQueueCreateCountingSemaphoreStatic>
 800ad4e:	61f8      	str	r0, [r7, #28]
 800ad50:	e004      	b.n	800ad5c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 ffb3 	bl	800bcc0 <xQueueCreateCountingSemaphore>
 800ad5a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00c      	beq.n	800ad7c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d003      	beq.n	800ad70 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	617b      	str	r3, [r7, #20]
 800ad6e:	e001      	b.n	800ad74 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ad74:	6979      	ldr	r1, [r7, #20]
 800ad76:	69f8      	ldr	r0, [r7, #28]
 800ad78:	f001 fdb4 	bl	800c8e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ad7c:	69fb      	ldr	r3, [r7, #28]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3720      	adds	r7, #32
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
	...

0800ad88 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d103      	bne.n	800ada8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ada0:	f06f 0303 	mvn.w	r3, #3
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	e039      	b.n	800ae1c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ada8:	f3ef 8305 	mrs	r3, IPSR
 800adac:	60fb      	str	r3, [r7, #12]
  return(result);
 800adae:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d022      	beq.n	800adfa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800adba:	f06f 0303 	mvn.w	r3, #3
 800adbe:	617b      	str	r3, [r7, #20]
 800adc0:	e02c      	b.n	800ae1c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800adc6:	f107 0308 	add.w	r3, r7, #8
 800adca:	461a      	mov	r2, r3
 800adcc:	2100      	movs	r1, #0
 800adce:	6938      	ldr	r0, [r7, #16]
 800add0:	f001 fbbc 	bl	800c54c <xQueueReceiveFromISR>
 800add4:	4603      	mov	r3, r0
 800add6:	2b01      	cmp	r3, #1
 800add8:	d003      	beq.n	800ade2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800adda:	f06f 0302 	mvn.w	r3, #2
 800adde:	617b      	str	r3, [r7, #20]
 800ade0:	e01c      	b.n	800ae1c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d019      	beq.n	800ae1c <osSemaphoreAcquire+0x94>
 800ade8:	4b0f      	ldr	r3, [pc, #60]	; (800ae28 <osSemaphoreAcquire+0xa0>)
 800adea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	e010      	b.n	800ae1c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6938      	ldr	r0, [r7, #16]
 800adfe:	f001 fa99 	bl	800c334 <xQueueSemaphoreTake>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d009      	beq.n	800ae1c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ae0e:	f06f 0301 	mvn.w	r3, #1
 800ae12:	617b      	str	r3, [r7, #20]
 800ae14:	e002      	b.n	800ae1c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ae16:	f06f 0302 	mvn.w	r3, #2
 800ae1a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ae1c:	697b      	ldr	r3, [r7, #20]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3718      	adds	r7, #24
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	e000ed04 	.word	0xe000ed04

0800ae2c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d103      	bne.n	800ae4a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ae42:	f06f 0303 	mvn.w	r3, #3
 800ae46:	617b      	str	r3, [r7, #20]
 800ae48:	e02c      	b.n	800aea4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae4a:	f3ef 8305 	mrs	r3, IPSR
 800ae4e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae50:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d01a      	beq.n	800ae8c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ae56:	2300      	movs	r3, #0
 800ae58:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6938      	ldr	r0, [r7, #16]
 800ae62:	f001 f8fa 	bl	800c05a <xQueueGiveFromISR>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d003      	beq.n	800ae74 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ae6c:	f06f 0302 	mvn.w	r3, #2
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	e017      	b.n	800aea4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d014      	beq.n	800aea4 <osSemaphoreRelease+0x78>
 800ae7a:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <osSemaphoreRelease+0x84>)
 800ae7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	e00b      	b.n	800aea4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	2200      	movs	r2, #0
 800ae90:	2100      	movs	r1, #0
 800ae92:	6938      	ldr	r0, [r7, #16]
 800ae94:	f000 ff48 	bl	800bd28 <xQueueGenericSend>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d002      	beq.n	800aea4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ae9e:	f06f 0302 	mvn.w	r3, #2
 800aea2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800aea4:	697b      	ldr	r3, [r7, #20]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	e000ed04 	.word	0xe000ed04

0800aeb4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b08a      	sub	sp, #40	; 0x28
 800aeb8:	af02      	add	r7, sp, #8
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aec0:	2300      	movs	r3, #0
 800aec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aec4:	f3ef 8305 	mrs	r3, IPSR
 800aec8:	613b      	str	r3, [r7, #16]
  return(result);
 800aeca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d15f      	bne.n	800af90 <osMessageQueueNew+0xdc>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d05c      	beq.n	800af90 <osMessageQueueNew+0xdc>
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d059      	beq.n	800af90 <osMessageQueueNew+0xdc>
    mem = -1;
 800aedc:	f04f 33ff 	mov.w	r3, #4294967295
 800aee0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d029      	beq.n	800af3c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d012      	beq.n	800af16 <osMessageQueueNew+0x62>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	2b4f      	cmp	r3, #79	; 0x4f
 800aef6:	d90e      	bls.n	800af16 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00a      	beq.n	800af16 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	695a      	ldr	r2, [r3, #20]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	fb01 f303 	mul.w	r3, r1, r3
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d302      	bcc.n	800af16 <osMessageQueueNew+0x62>
        mem = 1;
 800af10:	2301      	movs	r3, #1
 800af12:	61bb      	str	r3, [r7, #24]
 800af14:	e014      	b.n	800af40 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d110      	bne.n	800af40 <osMessageQueueNew+0x8c>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10c      	bne.n	800af40 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d108      	bne.n	800af40 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d104      	bne.n	800af40 <osMessageQueueNew+0x8c>
          mem = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	61bb      	str	r3, [r7, #24]
 800af3a:	e001      	b.n	800af40 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d10b      	bne.n	800af5e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	691a      	ldr	r2, [r3, #16]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	2100      	movs	r1, #0
 800af50:	9100      	str	r1, [sp, #0]
 800af52:	68b9      	ldr	r1, [r7, #8]
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 fda7 	bl	800baa8 <xQueueGenericCreateStatic>
 800af5a:	61f8      	str	r0, [r7, #28]
 800af5c:	e008      	b.n	800af70 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d105      	bne.n	800af70 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800af64:	2200      	movs	r2, #0
 800af66:	68b9      	ldr	r1, [r7, #8]
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 fe15 	bl	800bb98 <xQueueGenericCreate>
 800af6e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00c      	beq.n	800af90 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <osMessageQueueNew+0xd0>
        name = attr->name;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	e001      	b.n	800af88 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800af84:	2300      	movs	r3, #0
 800af86:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800af88:	6979      	ldr	r1, [r7, #20]
 800af8a:	69f8      	ldr	r0, [r7, #28]
 800af8c:	f001 fcaa 	bl	800c8e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800af90:	69fb      	ldr	r3, [r7, #28]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3720      	adds	r7, #32
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4a07      	ldr	r2, [pc, #28]	; (800afc8 <vApplicationGetIdleTaskMemory+0x2c>)
 800afac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	4a06      	ldr	r2, [pc, #24]	; (800afcc <vApplicationGetIdleTaskMemory+0x30>)
 800afb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2280      	movs	r2, #128	; 0x80
 800afb8:	601a      	str	r2, [r3, #0]
}
 800afba:	bf00      	nop
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	240007dc 	.word	0x240007dc
 800afcc:	24000838 	.word	0x24000838

0800afd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4a07      	ldr	r2, [pc, #28]	; (800affc <vApplicationGetTimerTaskMemory+0x2c>)
 800afe0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	4a06      	ldr	r2, [pc, #24]	; (800b000 <vApplicationGetTimerTaskMemory+0x30>)
 800afe6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afee:	601a      	str	r2, [r3, #0]
}
 800aff0:	bf00      	nop
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	24000a38 	.word	0x24000a38
 800b000:	24000a94 	.word	0x24000a94

0800b004 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08a      	sub	sp, #40	; 0x28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b010:	f001 fef8 	bl	800ce04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b014:	4b5b      	ldr	r3, [pc, #364]	; (800b184 <pvPortMalloc+0x180>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b01c:	f000 f920 	bl	800b260 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b020:	4b59      	ldr	r3, [pc, #356]	; (800b188 <pvPortMalloc+0x184>)
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4013      	ands	r3, r2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f040 8093 	bne.w	800b154 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d01d      	beq.n	800b070 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b034:	2208      	movs	r2, #8
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4413      	add	r3, r2
 800b03a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f003 0307 	and.w	r3, r3, #7
 800b042:	2b00      	cmp	r3, #0
 800b044:	d014      	beq.n	800b070 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f023 0307 	bic.w	r3, r3, #7
 800b04c:	3308      	adds	r3, #8
 800b04e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f003 0307 	and.w	r3, r3, #7
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b06c:	bf00      	nop
 800b06e:	e7fe      	b.n	800b06e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d06e      	beq.n	800b154 <pvPortMalloc+0x150>
 800b076:	4b45      	ldr	r3, [pc, #276]	; (800b18c <pvPortMalloc+0x188>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d869      	bhi.n	800b154 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b080:	4b43      	ldr	r3, [pc, #268]	; (800b190 <pvPortMalloc+0x18c>)
 800b082:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b084:	4b42      	ldr	r3, [pc, #264]	; (800b190 <pvPortMalloc+0x18c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b08a:	e004      	b.n	800b096 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d903      	bls.n	800b0a8 <pvPortMalloc+0xa4>
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1f1      	bne.n	800b08c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0a8:	4b36      	ldr	r3, [pc, #216]	; (800b184 <pvPortMalloc+0x180>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d050      	beq.n	800b154 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2208      	movs	r2, #8
 800b0b8:	4413      	add	r3, r2
 800b0ba:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	685a      	ldr	r2, [r3, #4]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	1ad2      	subs	r2, r2, r3
 800b0cc:	2308      	movs	r3, #8
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d91f      	bls.n	800b114 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4413      	add	r3, r2
 800b0da:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00a      	beq.n	800b0fc <pvPortMalloc+0xf8>
	__asm volatile
 800b0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	613b      	str	r3, [r7, #16]
}
 800b0f8:	bf00      	nop
 800b0fa:	e7fe      	b.n	800b0fa <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	1ad2      	subs	r2, r2, r3
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b10e:	69b8      	ldr	r0, [r7, #24]
 800b110:	f000 f908 	bl	800b324 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b114:	4b1d      	ldr	r3, [pc, #116]	; (800b18c <pvPortMalloc+0x188>)
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	4a1b      	ldr	r2, [pc, #108]	; (800b18c <pvPortMalloc+0x188>)
 800b120:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b122:	4b1a      	ldr	r3, [pc, #104]	; (800b18c <pvPortMalloc+0x188>)
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	4b1b      	ldr	r3, [pc, #108]	; (800b194 <pvPortMalloc+0x190>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d203      	bcs.n	800b136 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b12e:	4b17      	ldr	r3, [pc, #92]	; (800b18c <pvPortMalloc+0x188>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a18      	ldr	r2, [pc, #96]	; (800b194 <pvPortMalloc+0x190>)
 800b134:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	4b13      	ldr	r3, [pc, #76]	; (800b188 <pvPortMalloc+0x184>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	431a      	orrs	r2, r3
 800b140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b142:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b14a:	4b13      	ldr	r3, [pc, #76]	; (800b198 <pvPortMalloc+0x194>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	4a11      	ldr	r2, [pc, #68]	; (800b198 <pvPortMalloc+0x194>)
 800b152:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b154:	f001 fe64 	bl	800ce20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	f003 0307 	and.w	r3, r3, #7
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00a      	beq.n	800b178 <pvPortMalloc+0x174>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	60fb      	str	r3, [r7, #12]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <pvPortMalloc+0x172>
	return pvReturn;
 800b178:	69fb      	ldr	r3, [r7, #28]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3728      	adds	r7, #40	; 0x28
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	24004a9c 	.word	0x24004a9c
 800b188:	24004ab0 	.word	0x24004ab0
 800b18c:	24004aa0 	.word	0x24004aa0
 800b190:	24004a94 	.word	0x24004a94
 800b194:	24004aa4 	.word	0x24004aa4
 800b198:	24004aa8 	.word	0x24004aa8

0800b19c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d04d      	beq.n	800b24a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1ae:	2308      	movs	r3, #8
 800b1b0:	425b      	negs	r3, r3
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	4b24      	ldr	r3, [pc, #144]	; (800b254 <vPortFree+0xb8>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10a      	bne.n	800b1e0 <vPortFree+0x44>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	60fb      	str	r3, [r7, #12]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00a      	beq.n	800b1fe <vPortFree+0x62>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	60bb      	str	r3, [r7, #8]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	4b14      	ldr	r3, [pc, #80]	; (800b254 <vPortFree+0xb8>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4013      	ands	r3, r2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01e      	beq.n	800b24a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d11a      	bne.n	800b24a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	685a      	ldr	r2, [r3, #4]
 800b218:	4b0e      	ldr	r3, [pc, #56]	; (800b254 <vPortFree+0xb8>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	43db      	mvns	r3, r3
 800b21e:	401a      	ands	r2, r3
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b224:	f001 fdee 	bl	800ce04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <vPortFree+0xbc>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4413      	add	r3, r2
 800b232:	4a09      	ldr	r2, [pc, #36]	; (800b258 <vPortFree+0xbc>)
 800b234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b236:	6938      	ldr	r0, [r7, #16]
 800b238:	f000 f874 	bl	800b324 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b23c:	4b07      	ldr	r3, [pc, #28]	; (800b25c <vPortFree+0xc0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	4a06      	ldr	r2, [pc, #24]	; (800b25c <vPortFree+0xc0>)
 800b244:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b246:	f001 fdeb 	bl	800ce20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b24a:	bf00      	nop
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	24004ab0 	.word	0x24004ab0
 800b258:	24004aa0 	.word	0x24004aa0
 800b25c:	24004aac 	.word	0x24004aac

0800b260 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b266:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b26a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b26c:	4b27      	ldr	r3, [pc, #156]	; (800b30c <prvHeapInit+0xac>)
 800b26e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f003 0307 	and.w	r3, r3, #7
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00c      	beq.n	800b294 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3307      	adds	r3, #7
 800b27e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 0307 	bic.w	r3, r3, #7
 800b286:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	4a1f      	ldr	r2, [pc, #124]	; (800b30c <prvHeapInit+0xac>)
 800b290:	4413      	add	r3, r2
 800b292:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b298:	4a1d      	ldr	r2, [pc, #116]	; (800b310 <prvHeapInit+0xb0>)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b29e:	4b1c      	ldr	r3, [pc, #112]	; (800b310 <prvHeapInit+0xb0>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	1a9b      	subs	r3, r3, r2
 800b2b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f023 0307 	bic.w	r3, r3, #7
 800b2ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4a15      	ldr	r2, [pc, #84]	; (800b314 <prvHeapInit+0xb4>)
 800b2c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2c2:	4b14      	ldr	r3, [pc, #80]	; (800b314 <prvHeapInit+0xb4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2ca:	4b12      	ldr	r3, [pc, #72]	; (800b314 <prvHeapInit+0xb4>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	1ad2      	subs	r2, r2, r3
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2e0:	4b0c      	ldr	r3, [pc, #48]	; (800b314 <prvHeapInit+0xb4>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	4a0a      	ldr	r2, [pc, #40]	; (800b318 <prvHeapInit+0xb8>)
 800b2ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	4a09      	ldr	r2, [pc, #36]	; (800b31c <prvHeapInit+0xbc>)
 800b2f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2f8:	4b09      	ldr	r3, [pc, #36]	; (800b320 <prvHeapInit+0xc0>)
 800b2fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2fe:	601a      	str	r2, [r3, #0]
}
 800b300:	bf00      	nop
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	24000e94 	.word	0x24000e94
 800b310:	24004a94 	.word	0x24004a94
 800b314:	24004a9c 	.word	0x24004a9c
 800b318:	24004aa4 	.word	0x24004aa4
 800b31c:	24004aa0 	.word	0x24004aa0
 800b320:	24004ab0 	.word	0x24004ab0

0800b324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b32c:	4b28      	ldr	r3, [pc, #160]	; (800b3d0 <prvInsertBlockIntoFreeList+0xac>)
 800b32e:	60fb      	str	r3, [r7, #12]
 800b330:	e002      	b.n	800b338 <prvInsertBlockIntoFreeList+0x14>
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d8f7      	bhi.n	800b332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	4413      	add	r3, r2
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	429a      	cmp	r2, r3
 800b352:	d108      	bne.n	800b366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	441a      	add	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	441a      	add	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	429a      	cmp	r2, r3
 800b378:	d118      	bne.n	800b3ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	4b15      	ldr	r3, [pc, #84]	; (800b3d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d00d      	beq.n	800b3a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	441a      	add	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	e008      	b.n	800b3b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3a2:	4b0c      	ldr	r3, [pc, #48]	; (800b3d4 <prvInsertBlockIntoFreeList+0xb0>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	601a      	str	r2, [r3, #0]
 800b3aa:	e003      	b.n	800b3b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d002      	beq.n	800b3c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3c2:	bf00      	nop
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	24004a94 	.word	0x24004a94
 800b3d4:	24004a9c 	.word	0x24004a9c

0800b3d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f103 0208 	add.w	r2, r3, #8
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f103 0208 	add.w	r2, r3, #8
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f103 0208 	add.w	r2, r3, #8
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b432:	b480      	push	{r7}
 800b434:	b085      	sub	sp, #20
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	689a      	ldr	r2, [r3, #8]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	683a      	ldr	r2, [r7, #0]
 800b456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	601a      	str	r2, [r3, #0]
}
 800b46e:	bf00      	nop
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b47a:	b480      	push	{r7}
 800b47c:	b085      	sub	sp, #20
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b490:	d103      	bne.n	800b49a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	e00c      	b.n	800b4b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3308      	adds	r3, #8
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e002      	b.n	800b4a8 <vListInsert+0x2e>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d2f6      	bcs.n	800b4a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	685a      	ldr	r2, [r3, #4]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	601a      	str	r2, [r3, #0]
}
 800b4e0:	bf00      	nop
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	6892      	ldr	r2, [r2, #8]
 800b502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	6852      	ldr	r2, [r2, #4]
 800b50c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	429a      	cmp	r2, r3
 800b516:	d103      	bne.n	800b520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	1e5a      	subs	r2, r3, #1
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3b04      	subs	r3, #4
 800b550:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3b04      	subs	r3, #4
 800b55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f023 0201 	bic.w	r2, r3, #1
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3b04      	subs	r3, #4
 800b56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b570:	4a0c      	ldr	r2, [pc, #48]	; (800b5a4 <pxPortInitialiseStack+0x64>)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3b14      	subs	r3, #20
 800b57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3b04      	subs	r3, #4
 800b586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f06f 0202 	mvn.w	r2, #2
 800b58e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3b20      	subs	r3, #32
 800b594:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b596:	68fb      	ldr	r3, [r7, #12]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	0800b5a9 	.word	0x0800b5a9

0800b5a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b5b2:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <prvTaskExitError+0x54>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ba:	d00a      	beq.n	800b5d2 <prvTaskExitError+0x2a>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	60fb      	str	r3, [r7, #12]
}
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <prvTaskExitError+0x28>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	60bb      	str	r3, [r7, #8]
}
 800b5e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b5e6:	bf00      	nop
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0fc      	beq.n	800b5e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b5ee:	bf00      	nop
 800b5f0:	bf00      	nop
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	2400001c 	.word	0x2400001c

0800b600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <pxCurrentTCBConst2>)
 800b602:	6819      	ldr	r1, [r3, #0]
 800b604:	6808      	ldr	r0, [r1, #0]
 800b606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60a:	f380 8809 	msr	PSP, r0
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f04f 0000 	mov.w	r0, #0
 800b616:	f380 8811 	msr	BASEPRI, r0
 800b61a:	4770      	bx	lr
 800b61c:	f3af 8000 	nop.w

0800b620 <pxCurrentTCBConst2>:
 800b620:	24004afc 	.word	0x24004afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop

0800b628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b628:	4808      	ldr	r0, [pc, #32]	; (800b64c <prvPortStartFirstTask+0x24>)
 800b62a:	6800      	ldr	r0, [r0, #0]
 800b62c:	6800      	ldr	r0, [r0, #0]
 800b62e:	f380 8808 	msr	MSP, r0
 800b632:	f04f 0000 	mov.w	r0, #0
 800b636:	f380 8814 	msr	CONTROL, r0
 800b63a:	b662      	cpsie	i
 800b63c:	b661      	cpsie	f
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	df00      	svc	0
 800b648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b64a:	bf00      	nop
 800b64c:	e000ed08 	.word	0xe000ed08

0800b650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b656:	4b46      	ldr	r3, [pc, #280]	; (800b770 <xPortStartScheduler+0x120>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a46      	ldr	r2, [pc, #280]	; (800b774 <xPortStartScheduler+0x124>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d10a      	bne.n	800b676 <xPortStartScheduler+0x26>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	613b      	str	r3, [r7, #16]
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b676:	4b3e      	ldr	r3, [pc, #248]	; (800b770 <xPortStartScheduler+0x120>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a3f      	ldr	r2, [pc, #252]	; (800b778 <xPortStartScheduler+0x128>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d10a      	bne.n	800b696 <xPortStartScheduler+0x46>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	60fb      	str	r3, [r7, #12]
}
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b696:	4b39      	ldr	r3, [pc, #228]	; (800b77c <xPortStartScheduler+0x12c>)
 800b698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	22ff      	movs	r2, #255	; 0xff
 800b6a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b6b0:	78fb      	ldrb	r3, [r7, #3]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	4b31      	ldr	r3, [pc, #196]	; (800b780 <xPortStartScheduler+0x130>)
 800b6bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b6be:	4b31      	ldr	r3, [pc, #196]	; (800b784 <xPortStartScheduler+0x134>)
 800b6c0:	2207      	movs	r2, #7
 800b6c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6c4:	e009      	b.n	800b6da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b6c6:	4b2f      	ldr	r3, [pc, #188]	; (800b784 <xPortStartScheduler+0x134>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	4a2d      	ldr	r2, [pc, #180]	; (800b784 <xPortStartScheduler+0x134>)
 800b6ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	005b      	lsls	r3, r3, #1
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6da:	78fb      	ldrb	r3, [r7, #3]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e2:	2b80      	cmp	r3, #128	; 0x80
 800b6e4:	d0ef      	beq.n	800b6c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b6e6:	4b27      	ldr	r3, [pc, #156]	; (800b784 <xPortStartScheduler+0x134>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f1c3 0307 	rsb	r3, r3, #7
 800b6ee:	2b04      	cmp	r3, #4
 800b6f0:	d00a      	beq.n	800b708 <xPortStartScheduler+0xb8>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	60bb      	str	r3, [r7, #8]
}
 800b704:	bf00      	nop
 800b706:	e7fe      	b.n	800b706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b708:	4b1e      	ldr	r3, [pc, #120]	; (800b784 <xPortStartScheduler+0x134>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	4a1d      	ldr	r2, [pc, #116]	; (800b784 <xPortStartScheduler+0x134>)
 800b710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b712:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <xPortStartScheduler+0x134>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b71a:	4a1a      	ldr	r2, [pc, #104]	; (800b784 <xPortStartScheduler+0x134>)
 800b71c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	b2da      	uxtb	r2, r3
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b726:	4b18      	ldr	r3, [pc, #96]	; (800b788 <xPortStartScheduler+0x138>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a17      	ldr	r2, [pc, #92]	; (800b788 <xPortStartScheduler+0x138>)
 800b72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b732:	4b15      	ldr	r3, [pc, #84]	; (800b788 <xPortStartScheduler+0x138>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a14      	ldr	r2, [pc, #80]	; (800b788 <xPortStartScheduler+0x138>)
 800b738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b73c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b73e:	f000 f8dd 	bl	800b8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b742:	4b12      	ldr	r3, [pc, #72]	; (800b78c <xPortStartScheduler+0x13c>)
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b748:	f000 f8fc 	bl	800b944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b74c:	4b10      	ldr	r3, [pc, #64]	; (800b790 <xPortStartScheduler+0x140>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a0f      	ldr	r2, [pc, #60]	; (800b790 <xPortStartScheduler+0x140>)
 800b752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b758:	f7ff ff66 	bl	800b628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b75c:	f001 fcc8 	bl	800d0f0 <vTaskSwitchContext>
	prvTaskExitError();
 800b760:	f7ff ff22 	bl	800b5a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	e000ed00 	.word	0xe000ed00
 800b774:	410fc271 	.word	0x410fc271
 800b778:	410fc270 	.word	0x410fc270
 800b77c:	e000e400 	.word	0xe000e400
 800b780:	24004ab4 	.word	0x24004ab4
 800b784:	24004ab8 	.word	0x24004ab8
 800b788:	e000ed20 	.word	0xe000ed20
 800b78c:	2400001c 	.word	0x2400001c
 800b790:	e000ef34 	.word	0xe000ef34

0800b794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	607b      	str	r3, [r7, #4]
}
 800b7ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7ae:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <vPortEnterCritical+0x58>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	4a0d      	ldr	r2, [pc, #52]	; (800b7ec <vPortEnterCritical+0x58>)
 800b7b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b7b8:	4b0c      	ldr	r3, [pc, #48]	; (800b7ec <vPortEnterCritical+0x58>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d10f      	bne.n	800b7e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b7c0:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <vPortEnterCritical+0x5c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00a      	beq.n	800b7e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	603b      	str	r3, [r7, #0]
}
 800b7dc:	bf00      	nop
 800b7de:	e7fe      	b.n	800b7de <vPortEnterCritical+0x4a>
	}
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	2400001c 	.word	0x2400001c
 800b7f0:	e000ed04 	.word	0xe000ed04

0800b7f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7fa:	4b12      	ldr	r3, [pc, #72]	; (800b844 <vPortExitCritical+0x50>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <vPortExitCritical+0x24>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	607b      	str	r3, [r7, #4]
}
 800b814:	bf00      	nop
 800b816:	e7fe      	b.n	800b816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b818:	4b0a      	ldr	r3, [pc, #40]	; (800b844 <vPortExitCritical+0x50>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	4a09      	ldr	r2, [pc, #36]	; (800b844 <vPortExitCritical+0x50>)
 800b820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b822:	4b08      	ldr	r3, [pc, #32]	; (800b844 <vPortExitCritical+0x50>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d105      	bne.n	800b836 <vPortExitCritical+0x42>
 800b82a:	2300      	movs	r3, #0
 800b82c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	2400001c 	.word	0x2400001c
	...

0800b850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b850:	f3ef 8009 	mrs	r0, PSP
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <pxCurrentTCBConst>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	f01e 0f10 	tst.w	lr, #16
 800b860:	bf08      	it	eq
 800b862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86a:	6010      	str	r0, [r2, #0]
 800b86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b870:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b874:	f380 8811 	msr	BASEPRI, r0
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f001 fc36 	bl	800d0f0 <vTaskSwitchContext>
 800b884:	f04f 0000 	mov.w	r0, #0
 800b888:	f380 8811 	msr	BASEPRI, r0
 800b88c:	bc09      	pop	{r0, r3}
 800b88e:	6819      	ldr	r1, [r3, #0]
 800b890:	6808      	ldr	r0, [r1, #0]
 800b892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b896:	f01e 0f10 	tst.w	lr, #16
 800b89a:	bf08      	it	eq
 800b89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8a0:	f380 8809 	msr	PSP, r0
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	f3af 8000 	nop.w

0800b8b0 <pxCurrentTCBConst>:
 800b8b0:	24004afc 	.word	0x24004afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop

0800b8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	607b      	str	r3, [r7, #4]
}
 800b8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b8d2:	f001 fb53 	bl	800cf7c <xTaskIncrementTick>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b8dc:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <xPortSysTickHandler+0x40>)
 800b8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	f383 8811 	msr	BASEPRI, r3
}
 800b8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	e000ed04 	.word	0xe000ed04

0800b8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b900:	4b0b      	ldr	r3, [pc, #44]	; (800b930 <vPortSetupTimerInterrupt+0x34>)
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b906:	4b0b      	ldr	r3, [pc, #44]	; (800b934 <vPortSetupTimerInterrupt+0x38>)
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b90c:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <vPortSetupTimerInterrupt+0x3c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a0a      	ldr	r2, [pc, #40]	; (800b93c <vPortSetupTimerInterrupt+0x40>)
 800b912:	fba2 2303 	umull	r2, r3, r2, r3
 800b916:	099b      	lsrs	r3, r3, #6
 800b918:	4a09      	ldr	r2, [pc, #36]	; (800b940 <vPortSetupTimerInterrupt+0x44>)
 800b91a:	3b01      	subs	r3, #1
 800b91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b91e:	4b04      	ldr	r3, [pc, #16]	; (800b930 <vPortSetupTimerInterrupt+0x34>)
 800b920:	2207      	movs	r2, #7
 800b922:	601a      	str	r2, [r3, #0]
}
 800b924:	bf00      	nop
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	e000e010 	.word	0xe000e010
 800b934:	e000e018 	.word	0xe000e018
 800b938:	24000000 	.word	0x24000000
 800b93c:	10624dd3 	.word	0x10624dd3
 800b940:	e000e014 	.word	0xe000e014

0800b944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b954 <vPortEnableVFP+0x10>
 800b948:	6801      	ldr	r1, [r0, #0]
 800b94a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b94e:	6001      	str	r1, [r0, #0]
 800b950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b952:	bf00      	nop
 800b954:	e000ed88 	.word	0xe000ed88

0800b958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b95e:	f3ef 8305 	mrs	r3, IPSR
 800b962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2b0f      	cmp	r3, #15
 800b968:	d914      	bls.n	800b994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b96a:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <vPortValidateInterruptPriority+0x70>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4413      	add	r3, r2
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b974:	4b15      	ldr	r3, [pc, #84]	; (800b9cc <vPortValidateInterruptPriority+0x74>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	7afa      	ldrb	r2, [r7, #11]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d20a      	bcs.n	800b994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	607b      	str	r3, [r7, #4]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b994:	4b0e      	ldr	r3, [pc, #56]	; (800b9d0 <vPortValidateInterruptPriority+0x78>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b99c:	4b0d      	ldr	r3, [pc, #52]	; (800b9d4 <vPortValidateInterruptPriority+0x7c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d90a      	bls.n	800b9ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	603b      	str	r3, [r7, #0]
}
 800b9b6:	bf00      	nop
 800b9b8:	e7fe      	b.n	800b9b8 <vPortValidateInterruptPriority+0x60>
	}
 800b9ba:	bf00      	nop
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	e000e3f0 	.word	0xe000e3f0
 800b9cc:	24004ab4 	.word	0x24004ab4
 800b9d0:	e000ed0c 	.word	0xe000ed0c
 800b9d4:	24004ab8 	.word	0x24004ab8

0800b9d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10a      	bne.n	800ba02 <xQueueGenericReset+0x2a>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	60bb      	str	r3, [r7, #8]
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba02:	f7ff fec7 	bl	800b794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0e:	68f9      	ldr	r1, [r7, #12]
 800ba10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba12:	fb01 f303 	mul.w	r3, r1, r3
 800ba16:	441a      	add	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba32:	3b01      	subs	r3, #1
 800ba34:	68f9      	ldr	r1, [r7, #12]
 800ba36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba38:	fb01 f303 	mul.w	r3, r1, r3
 800ba3c:	441a      	add	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	22ff      	movs	r2, #255	; 0xff
 800ba46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	22ff      	movs	r2, #255	; 0xff
 800ba4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d114      	bne.n	800ba82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d01a      	beq.n	800ba96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	3310      	adds	r3, #16
 800ba64:	4618      	mov	r0, r3
 800ba66:	f001 fbf1 	bl	800d24c <xTaskRemoveFromEventList>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d012      	beq.n	800ba96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba70:	4b0c      	ldr	r3, [pc, #48]	; (800baa4 <xQueueGenericReset+0xcc>)
 800ba72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	e009      	b.n	800ba96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3310      	adds	r3, #16
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fca6 	bl	800b3d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3324      	adds	r3, #36	; 0x24
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff fca1 	bl	800b3d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba96:	f7ff fead 	bl	800b7f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba9a:	2301      	movs	r3, #1
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	e000ed04 	.word	0xe000ed04

0800baa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08e      	sub	sp, #56	; 0x38
 800baac:	af02      	add	r7, sp, #8
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bace:	bf00      	nop
 800bad0:	e7fe      	b.n	800bad0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10a      	bne.n	800baee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <xQueueGenericCreateStatic+0x52>
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <xQueueGenericCreateStatic+0x56>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e000      	b.n	800bb00 <xQueueGenericCreateStatic+0x58>
 800bafe:	2300      	movs	r3, #0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	623b      	str	r3, [r7, #32]
}
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d102      	bne.n	800bb26 <xQueueGenericCreateStatic+0x7e>
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <xQueueGenericCreateStatic+0x82>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e000      	b.n	800bb2c <xQueueGenericCreateStatic+0x84>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	61fb      	str	r3, [r7, #28]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb46:	2350      	movs	r3, #80	; 0x50
 800bb48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b50      	cmp	r3, #80	; 0x50
 800bb4e:	d00a      	beq.n	800bb66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	61bb      	str	r3, [r7, #24]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00d      	beq.n	800bb8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	4613      	mov	r3, r2
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 f83f 	bl	800bc0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3730      	adds	r7, #48	; 0x30
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b08a      	sub	sp, #40	; 0x28
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4613      	mov	r3, r2
 800bba4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10a      	bne.n	800bbc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	613b      	str	r3, [r7, #16]
}
 800bbbe:	bf00      	nop
 800bbc0:	e7fe      	b.n	800bbc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	fb02 f303 	mul.w	r3, r2, r3
 800bbca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	3350      	adds	r3, #80	; 0x50
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff fa17 	bl	800b004 <pvPortMalloc>
 800bbd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d011      	beq.n	800bc02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	3350      	adds	r3, #80	; 0x50
 800bbe6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbf0:	79fa      	ldrb	r2, [r7, #7]
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f805 	bl	800bc0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc02:	69bb      	ldr	r3, [r7, #24]
	}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3720      	adds	r7, #32
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d103      	bne.n	800bc28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	69ba      	ldr	r2, [r7, #24]
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	e002      	b.n	800bc2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	69b8      	ldr	r0, [r7, #24]
 800bc3e:	f7ff fecb 	bl	800b9d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc4a:	bf00      	nop
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b08a      	sub	sp, #40	; 0x28
 800bc56:	af02      	add	r7, sp, #8
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	61bb      	str	r3, [r7, #24]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d90a      	bls.n	800bc98 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	617b      	str	r3, [r7, #20]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc98:	2302      	movs	r3, #2
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2100      	movs	r1, #0
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f7ff ff00 	bl	800baa8 <xQueueGenericCreateStatic>
 800bca8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bcb6:	69fb      	ldr	r3, [r7, #28]
	}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3720      	adds	r7, #32
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	613b      	str	r3, [r7, #16]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d90a      	bls.n	800bd04 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	60fb      	str	r3, [r7, #12]
}
 800bd00:	bf00      	nop
 800bd02:	e7fe      	b.n	800bd02 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd04:	2202      	movs	r2, #2
 800bd06:	2100      	movs	r1, #0
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7ff ff45 	bl	800bb98 <xQueueGenericCreate>
 800bd0e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d002      	beq.n	800bd1c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bd1c:	697b      	ldr	r3, [r7, #20]
	}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
	...

0800bd28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08e      	sub	sp, #56	; 0x38
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd36:	2300      	movs	r3, #0
 800bd38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <xQueueGenericSend+0x32>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d103      	bne.n	800bd68 <xQueueGenericSend+0x40>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <xQueueGenericSend+0x44>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e000      	b.n	800bd6e <xQueueGenericSend+0x46>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10a      	bne.n	800bd88 <xQueueGenericSend+0x60>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d103      	bne.n	800bd96 <xQueueGenericSend+0x6e>
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d101      	bne.n	800bd9a <xQueueGenericSend+0x72>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e000      	b.n	800bd9c <xQueueGenericSend+0x74>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	623b      	str	r3, [r7, #32]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdb6:	f001 fc07 	bl	800d5c8 <xTaskGetSchedulerState>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d102      	bne.n	800bdc6 <xQueueGenericSend+0x9e>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <xQueueGenericSend+0xa2>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e000      	b.n	800bdcc <xQueueGenericSend+0xa4>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10a      	bne.n	800bde6 <xQueueGenericSend+0xbe>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	61fb      	str	r3, [r7, #28]
}
 800bde2:	bf00      	nop
 800bde4:	e7fe      	b.n	800bde4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bde6:	f7ff fcd5 	bl	800b794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d302      	bcc.n	800bdfc <xQueueGenericSend+0xd4>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d129      	bne.n	800be50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	68b9      	ldr	r1, [r7, #8]
 800be00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be02:	f000 fc5e 	bl	800c6c2 <prvCopyDataToQueue>
 800be06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d010      	beq.n	800be32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	3324      	adds	r3, #36	; 0x24
 800be14:	4618      	mov	r0, r3
 800be16:	f001 fa19 	bl	800d24c <xTaskRemoveFromEventList>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d013      	beq.n	800be48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be20:	4b3f      	ldr	r3, [pc, #252]	; (800bf20 <xQueueGenericSend+0x1f8>)
 800be22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	e00a      	b.n	800be48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	2b00      	cmp	r3, #0
 800be36:	d007      	beq.n	800be48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be38:	4b39      	ldr	r3, [pc, #228]	; (800bf20 <xQueueGenericSend+0x1f8>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be48:	f7ff fcd4 	bl	800b7f4 <vPortExitCritical>
				return pdPASS;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e063      	b.n	800bf18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d103      	bne.n	800be5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be56:	f7ff fccd 	bl	800b7f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be5a:	2300      	movs	r3, #0
 800be5c:	e05c      	b.n	800bf18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be60:	2b00      	cmp	r3, #0
 800be62:	d106      	bne.n	800be72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be64:	f107 0314 	add.w	r3, r7, #20
 800be68:	4618      	mov	r0, r3
 800be6a:	f001 fa53 	bl	800d314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be6e:	2301      	movs	r3, #1
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be72:	f7ff fcbf 	bl	800b7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be76:	f000 ffc5 	bl	800ce04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be7a:	f7ff fc8b 	bl	800b794 <vPortEnterCritical>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be84:	b25b      	sxtb	r3, r3
 800be86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8a:	d103      	bne.n	800be94 <xQueueGenericSend+0x16c>
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be9a:	b25b      	sxtb	r3, r3
 800be9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea0:	d103      	bne.n	800beaa <xQueueGenericSend+0x182>
 800bea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800beaa:	f7ff fca3 	bl	800b7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800beae:	1d3a      	adds	r2, r7, #4
 800beb0:	f107 0314 	add.w	r3, r7, #20
 800beb4:	4611      	mov	r1, r2
 800beb6:	4618      	mov	r0, r3
 800beb8:	f001 fa42 	bl	800d340 <xTaskCheckForTimeOut>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d124      	bne.n	800bf0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bec4:	f000 fcf5 	bl	800c8b2 <prvIsQueueFull>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d018      	beq.n	800bf00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	3310      	adds	r3, #16
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	4611      	mov	r1, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f001 f968 	bl	800d1ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bede:	f000 fc80 	bl	800c7e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bee2:	f000 ff9d 	bl	800ce20 <xTaskResumeAll>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f47f af7c 	bne.w	800bde6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800beee:	4b0c      	ldr	r3, [pc, #48]	; (800bf20 <xQueueGenericSend+0x1f8>)
 800bef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	e772      	b.n	800bde6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf02:	f000 fc6e 	bl	800c7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf06:	f000 ff8b 	bl	800ce20 <xTaskResumeAll>
 800bf0a:	e76c      	b.n	800bde6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf0e:	f000 fc68 	bl	800c7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf12:	f000 ff85 	bl	800ce20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3738      	adds	r7, #56	; 0x38
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b090      	sub	sp, #64	; 0x40
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d103      	bne.n	800bf60 <xQueueGenericSendFromISR+0x3c>
 800bf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <xQueueGenericSendFromISR+0x40>
 800bf60:	2301      	movs	r3, #1
 800bf62:	e000      	b.n	800bf66 <xQueueGenericSendFromISR+0x42>
 800bf64:	2300      	movs	r3, #0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10a      	bne.n	800bf80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf7c:	bf00      	nop
 800bf7e:	e7fe      	b.n	800bf7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d103      	bne.n	800bf8e <xQueueGenericSendFromISR+0x6a>
 800bf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d101      	bne.n	800bf92 <xQueueGenericSendFromISR+0x6e>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e000      	b.n	800bf94 <xQueueGenericSendFromISR+0x70>
 800bf92:	2300      	movs	r3, #0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10a      	bne.n	800bfae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	623b      	str	r3, [r7, #32]
}
 800bfaa:	bf00      	nop
 800bfac:	e7fe      	b.n	800bfac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfae:	f7ff fcd3 	bl	800b958 <vPortValidateInterruptPriority>
	__asm volatile
 800bfb2:	f3ef 8211 	mrs	r2, BASEPRI
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	61fa      	str	r2, [r7, #28]
 800bfc8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800bfca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfcc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d302      	bcc.n	800bfe0 <xQueueGenericSendFromISR+0xbc>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d12f      	bne.n	800c040 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bff6:	f000 fb64 	bl	800c6c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bffa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c002:	d112      	bne.n	800c02a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d016      	beq.n	800c03a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00e:	3324      	adds	r3, #36	; 0x24
 800c010:	4618      	mov	r0, r3
 800c012:	f001 f91b 	bl	800d24c <xTaskRemoveFromEventList>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00e      	beq.n	800c03a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00b      	beq.n	800c03a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	601a      	str	r2, [r3, #0]
 800c028:	e007      	b.n	800c03a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c02a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c02e:	3301      	adds	r3, #1
 800c030:	b2db      	uxtb	r3, r3
 800c032:	b25a      	sxtb	r2, r3
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c03a:	2301      	movs	r3, #1
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c03e:	e001      	b.n	800c044 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c046:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	f383 8811 	msr	BASEPRI, r3
}
 800c04e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c052:	4618      	mov	r0, r3
 800c054:	3740      	adds	r7, #64	; 0x40
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b08e      	sub	sp, #56	; 0x38
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10a      	bne.n	800c084 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	623b      	str	r3, [r7, #32]
}
 800c080:	bf00      	nop
 800c082:	e7fe      	b.n	800c082 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	61fb      	str	r3, [r7, #28]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d103      	bne.n	800c0b2 <xQueueGiveFromISR+0x58>
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <xQueueGiveFromISR+0x5c>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e000      	b.n	800c0b8 <xQueueGiveFromISR+0x5e>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	61bb      	str	r3, [r7, #24]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0d2:	f7ff fc41 	bl	800b958 <vPortValidateInterruptPriority>
	__asm volatile
 800c0d6:	f3ef 8211 	mrs	r2, BASEPRI
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	617a      	str	r2, [r7, #20]
 800c0ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c0ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d22b      	bcs.n	800c15a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11c:	d112      	bne.n	800c144 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c122:	2b00      	cmp	r3, #0
 800c124:	d016      	beq.n	800c154 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	3324      	adds	r3, #36	; 0x24
 800c12a:	4618      	mov	r0, r3
 800c12c:	f001 f88e 	bl	800d24c <xTaskRemoveFromEventList>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00e      	beq.n	800c154 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00b      	beq.n	800c154 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2201      	movs	r2, #1
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	e007      	b.n	800c154 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c148:	3301      	adds	r3, #1
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	b25a      	sxtb	r2, r3
 800c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c154:	2301      	movs	r3, #1
 800c156:	637b      	str	r3, [r7, #52]	; 0x34
 800c158:	e001      	b.n	800c15e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	637b      	str	r3, [r7, #52]	; 0x34
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f383 8811 	msr	BASEPRI, r3
}
 800c168:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3738      	adds	r7, #56	; 0x38
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08c      	sub	sp, #48	; 0x30
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c180:	2300      	movs	r3, #0
 800c182:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10a      	bne.n	800c1a4 <xQueueReceive+0x30>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	623b      	str	r3, [r7, #32]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d103      	bne.n	800c1b2 <xQueueReceive+0x3e>
 800c1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <xQueueReceive+0x42>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e000      	b.n	800c1b8 <xQueueReceive+0x44>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <xQueueReceive+0x5e>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	61fb      	str	r3, [r7, #28]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1d2:	f001 f9f9 	bl	800d5c8 <xTaskGetSchedulerState>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d102      	bne.n	800c1e2 <xQueueReceive+0x6e>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <xQueueReceive+0x72>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e000      	b.n	800c1e8 <xQueueReceive+0x74>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10a      	bne.n	800c202 <xQueueReceive+0x8e>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	61bb      	str	r3, [r7, #24]
}
 800c1fe:	bf00      	nop
 800c200:	e7fe      	b.n	800c200 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c202:	f7ff fac7 	bl	800b794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01f      	beq.n	800c252 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c216:	f000 fabe 	bl	800c796 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	1e5a      	subs	r2, r3, #1
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00f      	beq.n	800c24a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	3310      	adds	r3, #16
 800c22e:	4618      	mov	r0, r3
 800c230:	f001 f80c 	bl	800d24c <xTaskRemoveFromEventList>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d007      	beq.n	800c24a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c23a:	4b3d      	ldr	r3, [pc, #244]	; (800c330 <xQueueReceive+0x1bc>)
 800c23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c240:	601a      	str	r2, [r3, #0]
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c24a:	f7ff fad3 	bl	800b7f4 <vPortExitCritical>
				return pdPASS;
 800c24e:	2301      	movs	r3, #1
 800c250:	e069      	b.n	800c326 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d103      	bne.n	800c260 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c258:	f7ff facc 	bl	800b7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c25c:	2300      	movs	r3, #0
 800c25e:	e062      	b.n	800c326 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	2b00      	cmp	r3, #0
 800c264:	d106      	bne.n	800c274 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c266:	f107 0310 	add.w	r3, r7, #16
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 f852 	bl	800d314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c270:	2301      	movs	r3, #1
 800c272:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c274:	f7ff fabe 	bl	800b7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c278:	f000 fdc4 	bl	800ce04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c27c:	f7ff fa8a 	bl	800b794 <vPortEnterCritical>
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c286:	b25b      	sxtb	r3, r3
 800c288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28c:	d103      	bne.n	800c296 <xQueueReceive+0x122>
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c29c:	b25b      	sxtb	r3, r3
 800c29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a2:	d103      	bne.n	800c2ac <xQueueReceive+0x138>
 800c2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2ac:	f7ff faa2 	bl	800b7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2b0:	1d3a      	adds	r2, r7, #4
 800c2b2:	f107 0310 	add.w	r3, r7, #16
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f001 f841 	bl	800d340 <xTaskCheckForTimeOut>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d123      	bne.n	800c30c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c6:	f000 fade 	bl	800c886 <prvIsQueueEmpty>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d017      	beq.n	800c300 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	3324      	adds	r3, #36	; 0x24
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 ff67 	bl	800d1ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2e0:	f000 fa7f 	bl	800c7e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2e4:	f000 fd9c 	bl	800ce20 <xTaskResumeAll>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d189      	bne.n	800c202 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2ee:	4b10      	ldr	r3, [pc, #64]	; (800c330 <xQueueReceive+0x1bc>)
 800c2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f4:	601a      	str	r2, [r3, #0]
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	e780      	b.n	800c202 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c302:	f000 fa6e 	bl	800c7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c306:	f000 fd8b 	bl	800ce20 <xTaskResumeAll>
 800c30a:	e77a      	b.n	800c202 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30e:	f000 fa68 	bl	800c7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c312:	f000 fd85 	bl	800ce20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c318:	f000 fab5 	bl	800c886 <prvIsQueueEmpty>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f43f af6f 	beq.w	800c202 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c326:	4618      	mov	r0, r3
 800c328:	3730      	adds	r7, #48	; 0x30
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	e000ed04 	.word	0xe000ed04

0800c334 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08e      	sub	sp, #56	; 0x38
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c346:	2300      	movs	r3, #0
 800c348:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	623b      	str	r3, [r7, #32]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00a      	beq.n	800c384 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	61fb      	str	r3, [r7, #28]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c384:	f001 f920 	bl	800d5c8 <xTaskGetSchedulerState>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d102      	bne.n	800c394 <xQueueSemaphoreTake+0x60>
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <xQueueSemaphoreTake+0x64>
 800c394:	2301      	movs	r3, #1
 800c396:	e000      	b.n	800c39a <xQueueSemaphoreTake+0x66>
 800c398:	2300      	movs	r3, #0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d10a      	bne.n	800c3b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	61bb      	str	r3, [r7, #24]
}
 800c3b0:	bf00      	nop
 800c3b2:	e7fe      	b.n	800c3b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3b4:	f7ff f9ee 	bl	800b794 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d024      	beq.n	800c40e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	1e5a      	subs	r2, r3, #1
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d104      	bne.n	800c3de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3d4:	f001 fa6e 	bl	800d8b4 <pvTaskIncrementMutexHeldCount>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00f      	beq.n	800c406 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	3310      	adds	r3, #16
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 ff2e 	bl	800d24c <xTaskRemoveFromEventList>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3f6:	4b54      	ldr	r3, [pc, #336]	; (800c548 <xQueueSemaphoreTake+0x214>)
 800c3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c406:	f7ff f9f5 	bl	800b7f4 <vPortExitCritical>
				return pdPASS;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e097      	b.n	800c53e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d111      	bne.n	800c438 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00a      	beq.n	800c430 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	617b      	str	r3, [r7, #20]
}
 800c42c:	bf00      	nop
 800c42e:	e7fe      	b.n	800c42e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c430:	f7ff f9e0 	bl	800b7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c434:	2300      	movs	r3, #0
 800c436:	e082      	b.n	800c53e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d106      	bne.n	800c44c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c43e:	f107 030c 	add.w	r3, r7, #12
 800c442:	4618      	mov	r0, r3
 800c444:	f000 ff66 	bl	800d314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c448:	2301      	movs	r3, #1
 800c44a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c44c:	f7ff f9d2 	bl	800b7f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c450:	f000 fcd8 	bl	800ce04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c454:	f7ff f99e 	bl	800b794 <vPortEnterCritical>
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c45e:	b25b      	sxtb	r3, r3
 800c460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c464:	d103      	bne.n	800c46e <xQueueSemaphoreTake+0x13a>
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c474:	b25b      	sxtb	r3, r3
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47a:	d103      	bne.n	800c484 <xQueueSemaphoreTake+0x150>
 800c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c484:	f7ff f9b6 	bl	800b7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c488:	463a      	mov	r2, r7
 800c48a:	f107 030c 	add.w	r3, r7, #12
 800c48e:	4611      	mov	r1, r2
 800c490:	4618      	mov	r0, r3
 800c492:	f000 ff55 	bl	800d340 <xTaskCheckForTimeOut>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d132      	bne.n	800c502 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c49c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c49e:	f000 f9f2 	bl	800c886 <prvIsQueueEmpty>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d026      	beq.n	800c4f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d109      	bne.n	800c4c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c4b0:	f7ff f970 	bl	800b794 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 f8a3 	bl	800d604 <xTaskPriorityInherit>
 800c4be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4c0:	f7ff f998 	bl	800b7f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	3324      	adds	r3, #36	; 0x24
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 fe6d 	bl	800d1ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4d4:	f000 f985 	bl	800c7e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4d8:	f000 fca2 	bl	800ce20 <xTaskResumeAll>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f47f af68 	bne.w	800c3b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c4e4:	4b18      	ldr	r3, [pc, #96]	; (800c548 <xQueueSemaphoreTake+0x214>)
 800c4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	e75e      	b.n	800c3b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f8:	f000 f973 	bl	800c7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4fc:	f000 fc90 	bl	800ce20 <xTaskResumeAll>
 800c500:	e758      	b.n	800c3b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c504:	f000 f96d 	bl	800c7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c508:	f000 fc8a 	bl	800ce20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c50c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c50e:	f000 f9ba 	bl	800c886 <prvIsQueueEmpty>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	f43f af4d 	beq.w	800c3b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00d      	beq.n	800c53c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c520:	f7ff f938 	bl	800b794 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c526:	f000 f8b4 	bl	800c692 <prvGetDisinheritPriorityAfterTimeout>
 800c52a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c532:	4618      	mov	r0, r3
 800c534:	f001 f93c 	bl	800d7b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c538:	f7ff f95c 	bl	800b7f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c53c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3738      	adds	r7, #56	; 0x38
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08e      	sub	sp, #56	; 0x38
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10a      	bne.n	800c578 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	623b      	str	r3, [r7, #32]
}
 800c574:	bf00      	nop
 800c576:	e7fe      	b.n	800c576 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d103      	bne.n	800c586 <xQueueReceiveFromISR+0x3a>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <xQueueReceiveFromISR+0x3e>
 800c586:	2301      	movs	r3, #1
 800c588:	e000      	b.n	800c58c <xQueueReceiveFromISR+0x40>
 800c58a:	2300      	movs	r3, #0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10a      	bne.n	800c5a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	61fb      	str	r3, [r7, #28]
}
 800c5a2:	bf00      	nop
 800c5a4:	e7fe      	b.n	800c5a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5a6:	f7ff f9d7 	bl	800b958 <vPortValidateInterruptPriority>
	__asm volatile
 800c5aa:	f3ef 8211 	mrs	r2, BASEPRI
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	61ba      	str	r2, [r7, #24]
 800c5c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d02f      	beq.n	800c632 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5dc:	68b9      	ldr	r1, [r7, #8]
 800c5de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e0:	f000 f8d9 	bl	800c796 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	1e5a      	subs	r2, r3, #1
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f4:	d112      	bne.n	800c61c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d016      	beq.n	800c62c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	3310      	adds	r3, #16
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fe22 	bl	800d24c <xTaskRemoveFromEventList>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00e      	beq.n	800c62c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	e007      	b.n	800c62c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c620:	3301      	adds	r3, #1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	b25a      	sxtb	r2, r3
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c62c:	2301      	movs	r3, #1
 800c62e:	637b      	str	r3, [r7, #52]	; 0x34
 800c630:	e001      	b.n	800c636 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c632:	2300      	movs	r3, #0
 800c634:	637b      	str	r3, [r7, #52]	; 0x34
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f383 8811 	msr	BASEPRI, r3
}
 800c640:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c644:	4618      	mov	r0, r3
 800c646:	3738      	adds	r7, #56	; 0x38
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <vQueueDelete+0x28>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	60bb      	str	r3, [r7, #8]
}
 800c670:	bf00      	nop
 800c672:	e7fe      	b.n	800c672 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f000 f95f 	bl	800c938 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c680:	2b00      	cmp	r3, #0
 800c682:	d102      	bne.n	800c68a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f7fe fd89 	bl	800b19c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c68a:	bf00      	nop
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d006      	beq.n	800c6b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	e001      	b.n	800c6b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
	}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b086      	sub	sp, #24
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	60f8      	str	r0, [r7, #12]
 800c6ca:	60b9      	str	r1, [r7, #8]
 800c6cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10d      	bne.n	800c6fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d14d      	bne.n	800c784 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f000 fff1 	bl	800d6d4 <xTaskPriorityDisinherit>
 800c6f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	609a      	str	r2, [r3, #8]
 800c6fa:	e043      	b.n	800c784 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d119      	bne.n	800c736 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6858      	ldr	r0, [r3, #4]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c70a:	461a      	mov	r2, r3
 800c70c:	68b9      	ldr	r1, [r7, #8]
 800c70e:	f001 fcb1 	bl	800e074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c71a:	441a      	add	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d32b      	bcc.n	800c784 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	605a      	str	r2, [r3, #4]
 800c734:	e026      	b.n	800c784 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	68d8      	ldr	r0, [r3, #12]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73e:	461a      	mov	r2, r3
 800c740:	68b9      	ldr	r1, [r7, #8]
 800c742:	f001 fc97 	bl	800e074 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68da      	ldr	r2, [r3, #12]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74e:	425b      	negs	r3, r3
 800c750:	441a      	add	r2, r3
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	68da      	ldr	r2, [r3, #12]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d207      	bcs.n	800c772 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	689a      	ldr	r2, [r3, #8]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76a:	425b      	negs	r3, r3
 800c76c:	441a      	add	r2, r3
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b02      	cmp	r3, #2
 800c776:	d105      	bne.n	800c784 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d002      	beq.n	800c784 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	3b01      	subs	r3, #1
 800c782:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c78c:	697b      	ldr	r3, [r7, #20]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b082      	sub	sp, #8
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d018      	beq.n	800c7da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	68da      	ldr	r2, [r3, #12]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b0:	441a      	add	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68da      	ldr	r2, [r3, #12]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d303      	bcc.n	800c7ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68d9      	ldr	r1, [r3, #12]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6838      	ldr	r0, [r7, #0]
 800c7d6:	f001 fc4d 	bl	800e074 <memcpy>
	}
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7ea:	f7fe ffd3 	bl	800b794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7f6:	e011      	b.n	800c81c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d012      	beq.n	800c826 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3324      	adds	r3, #36	; 0x24
 800c804:	4618      	mov	r0, r3
 800c806:	f000 fd21 	bl	800d24c <xTaskRemoveFromEventList>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c810:	f000 fdf8 	bl	800d404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	3b01      	subs	r3, #1
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c820:	2b00      	cmp	r3, #0
 800c822:	dce9      	bgt.n	800c7f8 <prvUnlockQueue+0x16>
 800c824:	e000      	b.n	800c828 <prvUnlockQueue+0x46>
					break;
 800c826:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	22ff      	movs	r2, #255	; 0xff
 800c82c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c830:	f7fe ffe0 	bl	800b7f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c834:	f7fe ffae 	bl	800b794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c83e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c840:	e011      	b.n	800c866 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d012      	beq.n	800c870 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3310      	adds	r3, #16
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 fcfc 	bl	800d24c <xTaskRemoveFromEventList>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c85a:	f000 fdd3 	bl	800d404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
 800c860:	3b01      	subs	r3, #1
 800c862:	b2db      	uxtb	r3, r3
 800c864:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	dce9      	bgt.n	800c842 <prvUnlockQueue+0x60>
 800c86e:	e000      	b.n	800c872 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c870:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	22ff      	movs	r2, #255	; 0xff
 800c876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c87a:	f7fe ffbb 	bl	800b7f4 <vPortExitCritical>
}
 800c87e:	bf00      	nop
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b084      	sub	sp, #16
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c88e:	f7fe ff81 	bl	800b794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c896:	2b00      	cmp	r3, #0
 800c898:	d102      	bne.n	800c8a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c89a:	2301      	movs	r3, #1
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	e001      	b.n	800c8a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8a4:	f7fe ffa6 	bl	800b7f4 <vPortExitCritical>

	return xReturn;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b084      	sub	sp, #16
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8ba:	f7fe ff6b 	bl	800b794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d102      	bne.n	800c8d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	60fb      	str	r3, [r7, #12]
 800c8ce:	e001      	b.n	800c8d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8d4:	f7fe ff8e 	bl	800b7f4 <vPortExitCritical>

	return xReturn;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60fb      	str	r3, [r7, #12]
 800c8f2:	e014      	b.n	800c91e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8f4:	4a0f      	ldr	r2, [pc, #60]	; (800c934 <vQueueAddToRegistry+0x50>)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10b      	bne.n	800c918 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c900:	490c      	ldr	r1, [pc, #48]	; (800c934 <vQueueAddToRegistry+0x50>)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c90a:	4a0a      	ldr	r2, [pc, #40]	; (800c934 <vQueueAddToRegistry+0x50>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	4413      	add	r3, r2
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c916:	e006      	b.n	800c926 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3301      	adds	r3, #1
 800c91c:	60fb      	str	r3, [r7, #12]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2b07      	cmp	r3, #7
 800c922:	d9e7      	bls.n	800c8f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	24004abc 	.word	0x24004abc

0800c938 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c940:	2300      	movs	r3, #0
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e016      	b.n	800c974 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c946:	4a10      	ldr	r2, [pc, #64]	; (800c988 <vQueueUnregisterQueue+0x50>)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	4413      	add	r3, r2
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d10b      	bne.n	800c96e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c956:	4a0c      	ldr	r2, [pc, #48]	; (800c988 <vQueueUnregisterQueue+0x50>)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2100      	movs	r1, #0
 800c95c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c960:	4a09      	ldr	r2, [pc, #36]	; (800c988 <vQueueUnregisterQueue+0x50>)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	00db      	lsls	r3, r3, #3
 800c966:	4413      	add	r3, r2
 800c968:	2200      	movs	r2, #0
 800c96a:	605a      	str	r2, [r3, #4]
				break;
 800c96c:	e006      	b.n	800c97c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3301      	adds	r3, #1
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b07      	cmp	r3, #7
 800c978:	d9e5      	bls.n	800c946 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	24004abc 	.word	0x24004abc

0800c98c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c99c:	f7fe fefa 	bl	800b794 <vPortEnterCritical>
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9a6:	b25b      	sxtb	r3, r3
 800c9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ac:	d103      	bne.n	800c9b6 <vQueueWaitForMessageRestricted+0x2a>
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9bc:	b25b      	sxtb	r3, r3
 800c9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c2:	d103      	bne.n	800c9cc <vQueueWaitForMessageRestricted+0x40>
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9cc:	f7fe ff12 	bl	800b7f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d106      	bne.n	800c9e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	3324      	adds	r3, #36	; 0x24
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 fc07 	bl	800d1f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9e6:	6978      	ldr	r0, [r7, #20]
 800c9e8:	f7ff fefb 	bl	800c7e2 <prvUnlockQueue>
	}
 800c9ec:	bf00      	nop
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08e      	sub	sp, #56	; 0x38
 800c9f8:	af04      	add	r7, sp, #16
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	623b      	str	r3, [r7, #32]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10a      	bne.n	800ca3a <xTaskCreateStatic+0x46>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	61fb      	str	r3, [r7, #28]
}
 800ca36:	bf00      	nop
 800ca38:	e7fe      	b.n	800ca38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca3a:	235c      	movs	r3, #92	; 0x5c
 800ca3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2b5c      	cmp	r3, #92	; 0x5c
 800ca42:	d00a      	beq.n	800ca5a <xTaskCreateStatic+0x66>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	61bb      	str	r3, [r7, #24]
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d01e      	beq.n	800caa0 <xTaskCreateStatic+0xac>
 800ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d01b      	beq.n	800caa0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca74:	2202      	movs	r2, #2
 800ca76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9303      	str	r3, [sp, #12]
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	9302      	str	r3, [sp, #8]
 800ca82:	f107 0314 	add.w	r3, r7, #20
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	68b9      	ldr	r1, [r7, #8]
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f000 f850 	bl	800cb38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca9a:	f000 f8dd 	bl	800cc58 <prvAddNewTaskToReadyList>
 800ca9e:	e001      	b.n	800caa4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800caa0:	2300      	movs	r3, #0
 800caa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800caa4:	697b      	ldr	r3, [r7, #20]
	}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3728      	adds	r7, #40	; 0x28
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b08c      	sub	sp, #48	; 0x30
 800cab2:	af04      	add	r7, sp, #16
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	60b9      	str	r1, [r7, #8]
 800cab8:	603b      	str	r3, [r7, #0]
 800caba:	4613      	mov	r3, r2
 800cabc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cabe:	88fb      	ldrh	r3, [r7, #6]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fe fa9e 	bl	800b004 <pvPortMalloc>
 800cac8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00e      	beq.n	800caee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cad0:	205c      	movs	r0, #92	; 0x5c
 800cad2:	f7fe fa97 	bl	800b004 <pvPortMalloc>
 800cad6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	697a      	ldr	r2, [r7, #20]
 800cae2:	631a      	str	r2, [r3, #48]	; 0x30
 800cae4:	e005      	b.n	800caf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cae6:	6978      	ldr	r0, [r7, #20]
 800cae8:	f7fe fb58 	bl	800b19c <vPortFree>
 800caec:	e001      	b.n	800caf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d017      	beq.n	800cb28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb00:	88fa      	ldrh	r2, [r7, #6]
 800cb02:	2300      	movs	r3, #0
 800cb04:	9303      	str	r3, [sp, #12]
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	9302      	str	r3, [sp, #8]
 800cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	68b9      	ldr	r1, [r7, #8]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f80e 	bl	800cb38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb1c:	69f8      	ldr	r0, [r7, #28]
 800cb1e:	f000 f89b 	bl	800cc58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb22:	2301      	movs	r3, #1
 800cb24:	61bb      	str	r3, [r7, #24]
 800cb26:	e002      	b.n	800cb2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb28:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb2e:	69bb      	ldr	r3, [r7, #24]
	}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	461a      	mov	r2, r3
 800cb50:	21a5      	movs	r1, #165	; 0xa5
 800cb52:	f001 fa9d 	bl	800e090 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb5a:	6879      	ldr	r1, [r7, #4]
 800cb5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cb60:	440b      	add	r3, r1
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	f023 0307 	bic.w	r3, r3, #7
 800cb6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00a      	beq.n	800cb90 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	617b      	str	r3, [r7, #20]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d01f      	beq.n	800cbd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb96:	2300      	movs	r3, #0
 800cb98:	61fb      	str	r3, [r7, #28]
 800cb9a:	e012      	b.n	800cbc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	4413      	add	r3, r2
 800cba2:	7819      	ldrb	r1, [r3, #0]
 800cba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	4413      	add	r3, r2
 800cbaa:	3334      	adds	r3, #52	; 0x34
 800cbac:	460a      	mov	r2, r1
 800cbae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d006      	beq.n	800cbca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	61fb      	str	r3, [r7, #28]
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b0f      	cmp	r3, #15
 800cbc6:	d9e9      	bls.n	800cb9c <prvInitialiseNewTask+0x64>
 800cbc8:	e000      	b.n	800cbcc <prvInitialiseNewTask+0x94>
			{
				break;
 800cbca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cbd4:	e003      	b.n	800cbde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe0:	2b37      	cmp	r3, #55	; 0x37
 800cbe2:	d901      	bls.n	800cbe8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbe4:	2337      	movs	r3, #55	; 0x37
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fc0a 	bl	800b418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	3318      	adds	r3, #24
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe fc05 	bl	800b418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	2200      	movs	r2, #0
 800cc28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	68f9      	ldr	r1, [r7, #12]
 800cc36:	69b8      	ldr	r0, [r7, #24]
 800cc38:	f7fe fc82 	bl	800b540 <pxPortInitialiseStack>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc4e:	bf00      	nop
 800cc50:	3720      	adds	r7, #32
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
	...

0800cc58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc60:	f7fe fd98 	bl	800b794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc64:	4b2d      	ldr	r3, [pc, #180]	; (800cd1c <prvAddNewTaskToReadyList+0xc4>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	4a2c      	ldr	r2, [pc, #176]	; (800cd1c <prvAddNewTaskToReadyList+0xc4>)
 800cc6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc6e:	4b2c      	ldr	r3, [pc, #176]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d109      	bne.n	800cc8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc76:	4a2a      	ldr	r2, [pc, #168]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc7c:	4b27      	ldr	r3, [pc, #156]	; (800cd1c <prvAddNewTaskToReadyList+0xc4>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d110      	bne.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc84:	f000 fbe2 	bl	800d44c <prvInitialiseTaskLists>
 800cc88:	e00d      	b.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc8a:	4b26      	ldr	r3, [pc, #152]	; (800cd24 <prvAddNewTaskToReadyList+0xcc>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d109      	bne.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc92:	4b23      	ldr	r3, [pc, #140]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d802      	bhi.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cca0:	4a1f      	ldr	r2, [pc, #124]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cca6:	4b20      	ldr	r3, [pc, #128]	; (800cd28 <prvAddNewTaskToReadyList+0xd0>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	4a1e      	ldr	r2, [pc, #120]	; (800cd28 <prvAddNewTaskToReadyList+0xd0>)
 800ccae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccb0:	4b1d      	ldr	r3, [pc, #116]	; (800cd28 <prvAddNewTaskToReadyList+0xd0>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbc:	4b1b      	ldr	r3, [pc, #108]	; (800cd2c <prvAddNewTaskToReadyList+0xd4>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d903      	bls.n	800cccc <prvAddNewTaskToReadyList+0x74>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc8:	4a18      	ldr	r2, [pc, #96]	; (800cd2c <prvAddNewTaskToReadyList+0xd4>)
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4a15      	ldr	r2, [pc, #84]	; (800cd30 <prvAddNewTaskToReadyList+0xd8>)
 800ccda:	441a      	add	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3304      	adds	r3, #4
 800cce0:	4619      	mov	r1, r3
 800cce2:	4610      	mov	r0, r2
 800cce4:	f7fe fba5 	bl	800b432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cce8:	f7fe fd84 	bl	800b7f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <prvAddNewTaskToReadyList+0xcc>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00e      	beq.n	800cd12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ccf4:	4b0a      	ldr	r3, [pc, #40]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d207      	bcs.n	800cd12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd02:	4b0c      	ldr	r3, [pc, #48]	; (800cd34 <prvAddNewTaskToReadyList+0xdc>)
 800cd04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	24004fd0 	.word	0x24004fd0
 800cd20:	24004afc 	.word	0x24004afc
 800cd24:	24004fdc 	.word	0x24004fdc
 800cd28:	24004fec 	.word	0x24004fec
 800cd2c:	24004fd8 	.word	0x24004fd8
 800cd30:	24004b00 	.word	0x24004b00
 800cd34:	e000ed04 	.word	0xe000ed04

0800cd38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b08a      	sub	sp, #40	; 0x28
 800cd3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd46:	463a      	mov	r2, r7
 800cd48:	1d39      	adds	r1, r7, #4
 800cd4a:	f107 0308 	add.w	r3, r7, #8
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fe f924 	bl	800af9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	9202      	str	r2, [sp, #8]
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	2300      	movs	r3, #0
 800cd64:	460a      	mov	r2, r1
 800cd66:	4921      	ldr	r1, [pc, #132]	; (800cdec <vTaskStartScheduler+0xb4>)
 800cd68:	4821      	ldr	r0, [pc, #132]	; (800cdf0 <vTaskStartScheduler+0xb8>)
 800cd6a:	f7ff fe43 	bl	800c9f4 <xTaskCreateStatic>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	4a20      	ldr	r2, [pc, #128]	; (800cdf4 <vTaskStartScheduler+0xbc>)
 800cd72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd74:	4b1f      	ldr	r3, [pc, #124]	; (800cdf4 <vTaskStartScheduler+0xbc>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	e001      	b.n	800cd86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d102      	bne.n	800cd92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd8c:	f000 fdfa 	bl	800d984 <xTimerCreateTimerTask>
 800cd90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d116      	bne.n	800cdc6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	613b      	str	r3, [r7, #16]
}
 800cdaa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cdac:	4b12      	ldr	r3, [pc, #72]	; (800cdf8 <vTaskStartScheduler+0xc0>)
 800cdae:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdb4:	4b11      	ldr	r3, [pc, #68]	; (800cdfc <vTaskStartScheduler+0xc4>)
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cdba:	4b11      	ldr	r3, [pc, #68]	; (800ce00 <vTaskStartScheduler+0xc8>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdc0:	f7fe fc46 	bl	800b650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdc4:	e00e      	b.n	800cde4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdcc:	d10a      	bne.n	800cde4 <vTaskStartScheduler+0xac>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	60fb      	str	r3, [r7, #12]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <vTaskStartScheduler+0xaa>
}
 800cde4:	bf00      	nop
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	08014040 	.word	0x08014040
 800cdf0:	0800d41d 	.word	0x0800d41d
 800cdf4:	24004ff4 	.word	0x24004ff4
 800cdf8:	24004ff0 	.word	0x24004ff0
 800cdfc:	24004fdc 	.word	0x24004fdc
 800ce00:	24004fd4 	.word	0x24004fd4

0800ce04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce08:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <vTaskSuspendAll+0x18>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	4a03      	ldr	r2, [pc, #12]	; (800ce1c <vTaskSuspendAll+0x18>)
 800ce10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce12:	bf00      	nop
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	24004ff8 	.word	0x24004ff8

0800ce20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce2e:	4b42      	ldr	r3, [pc, #264]	; (800cf38 <xTaskResumeAll+0x118>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10a      	bne.n	800ce4c <xTaskResumeAll+0x2c>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	603b      	str	r3, [r7, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	e7fe      	b.n	800ce4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce4c:	f7fe fca2 	bl	800b794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce50:	4b39      	ldr	r3, [pc, #228]	; (800cf38 <xTaskResumeAll+0x118>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	4a38      	ldr	r2, [pc, #224]	; (800cf38 <xTaskResumeAll+0x118>)
 800ce58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce5a:	4b37      	ldr	r3, [pc, #220]	; (800cf38 <xTaskResumeAll+0x118>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d162      	bne.n	800cf28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce62:	4b36      	ldr	r3, [pc, #216]	; (800cf3c <xTaskResumeAll+0x11c>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d05e      	beq.n	800cf28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce6a:	e02f      	b.n	800cecc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce6c:	4b34      	ldr	r3, [pc, #208]	; (800cf40 <xTaskResumeAll+0x120>)
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	3318      	adds	r3, #24
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fe fb37 	bl	800b4ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3304      	adds	r3, #4
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fe fb32 	bl	800b4ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8c:	4b2d      	ldr	r3, [pc, #180]	; (800cf44 <xTaskResumeAll+0x124>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d903      	bls.n	800ce9c <xTaskResumeAll+0x7c>
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce98:	4a2a      	ldr	r2, [pc, #168]	; (800cf44 <xTaskResumeAll+0x124>)
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea0:	4613      	mov	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4a27      	ldr	r2, [pc, #156]	; (800cf48 <xTaskResumeAll+0x128>)
 800ceaa:	441a      	add	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	3304      	adds	r3, #4
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	f7fe fabd 	bl	800b432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebc:	4b23      	ldr	r3, [pc, #140]	; (800cf4c <xTaskResumeAll+0x12c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d302      	bcc.n	800cecc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cec6:	4b22      	ldr	r3, [pc, #136]	; (800cf50 <xTaskResumeAll+0x130>)
 800cec8:	2201      	movs	r2, #1
 800ceca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cecc:	4b1c      	ldr	r3, [pc, #112]	; (800cf40 <xTaskResumeAll+0x120>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1cb      	bne.n	800ce6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ceda:	f000 fb55 	bl	800d588 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cede:	4b1d      	ldr	r3, [pc, #116]	; (800cf54 <xTaskResumeAll+0x134>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d010      	beq.n	800cf0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ceea:	f000 f847 	bl	800cf7c <xTaskIncrementTick>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cef4:	4b16      	ldr	r3, [pc, #88]	; (800cf50 <xTaskResumeAll+0x130>)
 800cef6:	2201      	movs	r2, #1
 800cef8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1f1      	bne.n	800ceea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cf06:	4b13      	ldr	r3, [pc, #76]	; (800cf54 <xTaskResumeAll+0x134>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf0c:	4b10      	ldr	r3, [pc, #64]	; (800cf50 <xTaskResumeAll+0x130>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d009      	beq.n	800cf28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf14:	2301      	movs	r3, #1
 800cf16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf18:	4b0f      	ldr	r3, [pc, #60]	; (800cf58 <xTaskResumeAll+0x138>)
 800cf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf28:	f7fe fc64 	bl	800b7f4 <vPortExitCritical>

	return xAlreadyYielded;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	24004ff8 	.word	0x24004ff8
 800cf3c:	24004fd0 	.word	0x24004fd0
 800cf40:	24004f90 	.word	0x24004f90
 800cf44:	24004fd8 	.word	0x24004fd8
 800cf48:	24004b00 	.word	0x24004b00
 800cf4c:	24004afc 	.word	0x24004afc
 800cf50:	24004fe4 	.word	0x24004fe4
 800cf54:	24004fe0 	.word	0x24004fe0
 800cf58:	e000ed04 	.word	0xe000ed04

0800cf5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf62:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <xTaskGetTickCount+0x1c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf68:	687b      	ldr	r3, [r7, #4]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	24004fd4 	.word	0x24004fd4

0800cf7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf82:	2300      	movs	r3, #0
 800cf84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf86:	4b4f      	ldr	r3, [pc, #316]	; (800d0c4 <xTaskIncrementTick+0x148>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f040 808f 	bne.w	800d0ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf90:	4b4d      	ldr	r3, [pc, #308]	; (800d0c8 <xTaskIncrementTick+0x14c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	3301      	adds	r3, #1
 800cf96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf98:	4a4b      	ldr	r2, [pc, #300]	; (800d0c8 <xTaskIncrementTick+0x14c>)
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d120      	bne.n	800cfe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfa4:	4b49      	ldr	r3, [pc, #292]	; (800d0cc <xTaskIncrementTick+0x150>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00a      	beq.n	800cfc4 <xTaskIncrementTick+0x48>
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	603b      	str	r3, [r7, #0]
}
 800cfc0:	bf00      	nop
 800cfc2:	e7fe      	b.n	800cfc2 <xTaskIncrementTick+0x46>
 800cfc4:	4b41      	ldr	r3, [pc, #260]	; (800d0cc <xTaskIncrementTick+0x150>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	4b41      	ldr	r3, [pc, #260]	; (800d0d0 <xTaskIncrementTick+0x154>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a3f      	ldr	r2, [pc, #252]	; (800d0cc <xTaskIncrementTick+0x150>)
 800cfd0:	6013      	str	r3, [r2, #0]
 800cfd2:	4a3f      	ldr	r2, [pc, #252]	; (800d0d0 <xTaskIncrementTick+0x154>)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	4b3e      	ldr	r3, [pc, #248]	; (800d0d4 <xTaskIncrementTick+0x158>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	4a3d      	ldr	r2, [pc, #244]	; (800d0d4 <xTaskIncrementTick+0x158>)
 800cfe0:	6013      	str	r3, [r2, #0]
 800cfe2:	f000 fad1 	bl	800d588 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cfe6:	4b3c      	ldr	r3, [pc, #240]	; (800d0d8 <xTaskIncrementTick+0x15c>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	693a      	ldr	r2, [r7, #16]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d349      	bcc.n	800d084 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cff0:	4b36      	ldr	r3, [pc, #216]	; (800d0cc <xTaskIncrementTick+0x150>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d104      	bne.n	800d004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cffa:	4b37      	ldr	r3, [pc, #220]	; (800d0d8 <xTaskIncrementTick+0x15c>)
 800cffc:	f04f 32ff 	mov.w	r2, #4294967295
 800d000:	601a      	str	r2, [r3, #0]
					break;
 800d002:	e03f      	b.n	800d084 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d004:	4b31      	ldr	r3, [pc, #196]	; (800d0cc <xTaskIncrementTick+0x150>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d203      	bcs.n	800d024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d01c:	4a2e      	ldr	r2, [pc, #184]	; (800d0d8 <xTaskIncrementTick+0x15c>)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d022:	e02f      	b.n	800d084 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	3304      	adds	r3, #4
 800d028:	4618      	mov	r0, r3
 800d02a:	f7fe fa5f 	bl	800b4ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d032:	2b00      	cmp	r3, #0
 800d034:	d004      	beq.n	800d040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	3318      	adds	r3, #24
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fa56 	bl	800b4ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d044:	4b25      	ldr	r3, [pc, #148]	; (800d0dc <xTaskIncrementTick+0x160>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d903      	bls.n	800d054 <xTaskIncrementTick+0xd8>
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d050:	4a22      	ldr	r2, [pc, #136]	; (800d0dc <xTaskIncrementTick+0x160>)
 800d052:	6013      	str	r3, [r2, #0]
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d058:	4613      	mov	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	4a1f      	ldr	r2, [pc, #124]	; (800d0e0 <xTaskIncrementTick+0x164>)
 800d062:	441a      	add	r2, r3
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	3304      	adds	r3, #4
 800d068:	4619      	mov	r1, r3
 800d06a:	4610      	mov	r0, r2
 800d06c:	f7fe f9e1 	bl	800b432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d074:	4b1b      	ldr	r3, [pc, #108]	; (800d0e4 <xTaskIncrementTick+0x168>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d3b8      	bcc.n	800cff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d07e:	2301      	movs	r3, #1
 800d080:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d082:	e7b5      	b.n	800cff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d084:	4b17      	ldr	r3, [pc, #92]	; (800d0e4 <xTaskIncrementTick+0x168>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08a:	4915      	ldr	r1, [pc, #84]	; (800d0e0 <xTaskIncrementTick+0x164>)
 800d08c:	4613      	mov	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	440b      	add	r3, r1
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d901      	bls.n	800d0a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d09c:	2301      	movs	r3, #1
 800d09e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0a0:	4b11      	ldr	r3, [pc, #68]	; (800d0e8 <xTaskIncrementTick+0x16c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d007      	beq.n	800d0b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	617b      	str	r3, [r7, #20]
 800d0ac:	e004      	b.n	800d0b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0ae:	4b0f      	ldr	r3, [pc, #60]	; (800d0ec <xTaskIncrementTick+0x170>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	4a0d      	ldr	r2, [pc, #52]	; (800d0ec <xTaskIncrementTick+0x170>)
 800d0b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0b8:	697b      	ldr	r3, [r7, #20]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	24004ff8 	.word	0x24004ff8
 800d0c8:	24004fd4 	.word	0x24004fd4
 800d0cc:	24004f88 	.word	0x24004f88
 800d0d0:	24004f8c 	.word	0x24004f8c
 800d0d4:	24004fe8 	.word	0x24004fe8
 800d0d8:	24004ff0 	.word	0x24004ff0
 800d0dc:	24004fd8 	.word	0x24004fd8
 800d0e0:	24004b00 	.word	0x24004b00
 800d0e4:	24004afc 	.word	0x24004afc
 800d0e8:	24004fe4 	.word	0x24004fe4
 800d0ec:	24004fe0 	.word	0x24004fe0

0800d0f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0f6:	4b28      	ldr	r3, [pc, #160]	; (800d198 <vTaskSwitchContext+0xa8>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d0fe:	4b27      	ldr	r3, [pc, #156]	; (800d19c <vTaskSwitchContext+0xac>)
 800d100:	2201      	movs	r2, #1
 800d102:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d104:	e041      	b.n	800d18a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d106:	4b25      	ldr	r3, [pc, #148]	; (800d19c <vTaskSwitchContext+0xac>)
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d10c:	4b24      	ldr	r3, [pc, #144]	; (800d1a0 <vTaskSwitchContext+0xb0>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	60fb      	str	r3, [r7, #12]
 800d112:	e010      	b.n	800d136 <vTaskSwitchContext+0x46>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10a      	bne.n	800d130 <vTaskSwitchContext+0x40>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	607b      	str	r3, [r7, #4]
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <vTaskSwitchContext+0x3e>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	3b01      	subs	r3, #1
 800d134:	60fb      	str	r3, [r7, #12]
 800d136:	491b      	ldr	r1, [pc, #108]	; (800d1a4 <vTaskSwitchContext+0xb4>)
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	4613      	mov	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4413      	add	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	440b      	add	r3, r1
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0e4      	beq.n	800d114 <vTaskSwitchContext+0x24>
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	4613      	mov	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	4a13      	ldr	r2, [pc, #76]	; (800d1a4 <vTaskSwitchContext+0xb4>)
 800d156:	4413      	add	r3, r2
 800d158:	60bb      	str	r3, [r7, #8]
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	605a      	str	r2, [r3, #4]
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	685a      	ldr	r2, [r3, #4]
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	3308      	adds	r3, #8
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d104      	bne.n	800d17a <vTaskSwitchContext+0x8a>
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	605a      	str	r2, [r3, #4]
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	4a09      	ldr	r2, [pc, #36]	; (800d1a8 <vTaskSwitchContext+0xb8>)
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	4a06      	ldr	r2, [pc, #24]	; (800d1a0 <vTaskSwitchContext+0xb0>)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6013      	str	r3, [r2, #0]
}
 800d18a:	bf00      	nop
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	24004ff8 	.word	0x24004ff8
 800d19c:	24004fe4 	.word	0x24004fe4
 800d1a0:	24004fd8 	.word	0x24004fd8
 800d1a4:	24004b00 	.word	0x24004b00
 800d1a8:	24004afc 	.word	0x24004afc

0800d1ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10a      	bne.n	800d1d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	60fb      	str	r3, [r7, #12]
}
 800d1ce:	bf00      	nop
 800d1d0:	e7fe      	b.n	800d1d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1d2:	4b07      	ldr	r3, [pc, #28]	; (800d1f0 <vTaskPlaceOnEventList+0x44>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3318      	adds	r3, #24
 800d1d8:	4619      	mov	r1, r3
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7fe f94d 	bl	800b47a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1e0:	2101      	movs	r1, #1
 800d1e2:	6838      	ldr	r0, [r7, #0]
 800d1e4:	f000 fb7a 	bl	800d8dc <prvAddCurrentTaskToDelayedList>
}
 800d1e8:	bf00      	nop
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	24004afc 	.word	0x24004afc

0800d1f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10a      	bne.n	800d21c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	617b      	str	r3, [r7, #20]
}
 800d218:	bf00      	nop
 800d21a:	e7fe      	b.n	800d21a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d21c:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <vTaskPlaceOnEventListRestricted+0x54>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3318      	adds	r3, #24
 800d222:	4619      	mov	r1, r3
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f7fe f904 	bl	800b432 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d230:	f04f 33ff 	mov.w	r3, #4294967295
 800d234:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d236:	6879      	ldr	r1, [r7, #4]
 800d238:	68b8      	ldr	r0, [r7, #8]
 800d23a:	f000 fb4f 	bl	800d8dc <prvAddCurrentTaskToDelayedList>
	}
 800d23e:	bf00      	nop
 800d240:	3718      	adds	r7, #24
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	24004afc 	.word	0x24004afc

0800d24c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10a      	bne.n	800d278 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	60fb      	str	r3, [r7, #12]
}
 800d274:	bf00      	nop
 800d276:	e7fe      	b.n	800d276 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	3318      	adds	r3, #24
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe f935 	bl	800b4ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d282:	4b1e      	ldr	r3, [pc, #120]	; (800d2fc <xTaskRemoveFromEventList+0xb0>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d11d      	bne.n	800d2c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	3304      	adds	r3, #4
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe f92c 	bl	800b4ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d298:	4b19      	ldr	r3, [pc, #100]	; (800d300 <xTaskRemoveFromEventList+0xb4>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d903      	bls.n	800d2a8 <xTaskRemoveFromEventList+0x5c>
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a4:	4a16      	ldr	r2, [pc, #88]	; (800d300 <xTaskRemoveFromEventList+0xb4>)
 800d2a6:	6013      	str	r3, [r2, #0]
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4a13      	ldr	r2, [pc, #76]	; (800d304 <xTaskRemoveFromEventList+0xb8>)
 800d2b6:	441a      	add	r2, r3
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f7fe f8b7 	bl	800b432 <vListInsertEnd>
 800d2c4:	e005      	b.n	800d2d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	3318      	adds	r3, #24
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	480e      	ldr	r0, [pc, #56]	; (800d308 <xTaskRemoveFromEventList+0xbc>)
 800d2ce:	f7fe f8b0 	bl	800b432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	; (800d30c <xTaskRemoveFromEventList+0xc0>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d905      	bls.n	800d2ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2e4:	4b0a      	ldr	r3, [pc, #40]	; (800d310 <xTaskRemoveFromEventList+0xc4>)
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	e001      	b.n	800d2f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d2f0:	697b      	ldr	r3, [r7, #20]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3718      	adds	r7, #24
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	24004ff8 	.word	0x24004ff8
 800d300:	24004fd8 	.word	0x24004fd8
 800d304:	24004b00 	.word	0x24004b00
 800d308:	24004f90 	.word	0x24004f90
 800d30c:	24004afc 	.word	0x24004afc
 800d310:	24004fe4 	.word	0x24004fe4

0800d314 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <vTaskInternalSetTimeOutState+0x24>)
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d324:	4b05      	ldr	r3, [pc, #20]	; (800d33c <vTaskInternalSetTimeOutState+0x28>)
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	605a      	str	r2, [r3, #4]
}
 800d32c:	bf00      	nop
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	24004fe8 	.word	0x24004fe8
 800d33c:	24004fd4 	.word	0x24004fd4

0800d340 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10a      	bne.n	800d366 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	613b      	str	r3, [r7, #16]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10a      	bne.n	800d382 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	60fb      	str	r3, [r7, #12]
}
 800d37e:	bf00      	nop
 800d380:	e7fe      	b.n	800d380 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d382:	f7fe fa07 	bl	800b794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d386:	4b1d      	ldr	r3, [pc, #116]	; (800d3fc <xTaskCheckForTimeOut+0xbc>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	69ba      	ldr	r2, [r7, #24]
 800d392:	1ad3      	subs	r3, r2, r3
 800d394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39e:	d102      	bne.n	800d3a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	61fb      	str	r3, [r7, #28]
 800d3a4:	e023      	b.n	800d3ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	4b15      	ldr	r3, [pc, #84]	; (800d400 <xTaskCheckForTimeOut+0xc0>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d007      	beq.n	800d3c2 <xTaskCheckForTimeOut+0x82>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	69ba      	ldr	r2, [r7, #24]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d302      	bcc.n	800d3c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	61fb      	str	r3, [r7, #28]
 800d3c0:	e015      	b.n	800d3ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d20b      	bcs.n	800d3e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	1ad2      	subs	r2, r2, r3
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff ff9b 	bl	800d314 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	61fb      	str	r3, [r7, #28]
 800d3e2:	e004      	b.n	800d3ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3ee:	f7fe fa01 	bl	800b7f4 <vPortExitCritical>

	return xReturn;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3720      	adds	r7, #32
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	24004fd4 	.word	0x24004fd4
 800d400:	24004fe8 	.word	0x24004fe8

0800d404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d404:	b480      	push	{r7}
 800d406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d408:	4b03      	ldr	r3, [pc, #12]	; (800d418 <vTaskMissedYield+0x14>)
 800d40a:	2201      	movs	r2, #1
 800d40c:	601a      	str	r2, [r3, #0]
}
 800d40e:	bf00      	nop
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	24004fe4 	.word	0x24004fe4

0800d41c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d424:	f000 f852 	bl	800d4cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d428:	4b06      	ldr	r3, [pc, #24]	; (800d444 <prvIdleTask+0x28>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d9f9      	bls.n	800d424 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d430:	4b05      	ldr	r3, [pc, #20]	; (800d448 <prvIdleTask+0x2c>)
 800d432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d440:	e7f0      	b.n	800d424 <prvIdleTask+0x8>
 800d442:	bf00      	nop
 800d444:	24004b00 	.word	0x24004b00
 800d448:	e000ed04 	.word	0xe000ed04

0800d44c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d452:	2300      	movs	r3, #0
 800d454:	607b      	str	r3, [r7, #4]
 800d456:	e00c      	b.n	800d472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	4613      	mov	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4413      	add	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	4a12      	ldr	r2, [pc, #72]	; (800d4ac <prvInitialiseTaskLists+0x60>)
 800d464:	4413      	add	r3, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f7fd ffb6 	bl	800b3d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3301      	adds	r3, #1
 800d470:	607b      	str	r3, [r7, #4]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b37      	cmp	r3, #55	; 0x37
 800d476:	d9ef      	bls.n	800d458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d478:	480d      	ldr	r0, [pc, #52]	; (800d4b0 <prvInitialiseTaskLists+0x64>)
 800d47a:	f7fd ffad 	bl	800b3d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d47e:	480d      	ldr	r0, [pc, #52]	; (800d4b4 <prvInitialiseTaskLists+0x68>)
 800d480:	f7fd ffaa 	bl	800b3d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d484:	480c      	ldr	r0, [pc, #48]	; (800d4b8 <prvInitialiseTaskLists+0x6c>)
 800d486:	f7fd ffa7 	bl	800b3d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d48a:	480c      	ldr	r0, [pc, #48]	; (800d4bc <prvInitialiseTaskLists+0x70>)
 800d48c:	f7fd ffa4 	bl	800b3d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d490:	480b      	ldr	r0, [pc, #44]	; (800d4c0 <prvInitialiseTaskLists+0x74>)
 800d492:	f7fd ffa1 	bl	800b3d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d496:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <prvInitialiseTaskLists+0x78>)
 800d498:	4a05      	ldr	r2, [pc, #20]	; (800d4b0 <prvInitialiseTaskLists+0x64>)
 800d49a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d49c:	4b0a      	ldr	r3, [pc, #40]	; (800d4c8 <prvInitialiseTaskLists+0x7c>)
 800d49e:	4a05      	ldr	r2, [pc, #20]	; (800d4b4 <prvInitialiseTaskLists+0x68>)
 800d4a0:	601a      	str	r2, [r3, #0]
}
 800d4a2:	bf00      	nop
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	24004b00 	.word	0x24004b00
 800d4b0:	24004f60 	.word	0x24004f60
 800d4b4:	24004f74 	.word	0x24004f74
 800d4b8:	24004f90 	.word	0x24004f90
 800d4bc:	24004fa4 	.word	0x24004fa4
 800d4c0:	24004fbc 	.word	0x24004fbc
 800d4c4:	24004f88 	.word	0x24004f88
 800d4c8:	24004f8c 	.word	0x24004f8c

0800d4cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4d2:	e019      	b.n	800d508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4d4:	f7fe f95e 	bl	800b794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4d8:	4b10      	ldr	r3, [pc, #64]	; (800d51c <prvCheckTasksWaitingTermination+0x50>)
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe f801 	bl	800b4ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4ea:	4b0d      	ldr	r3, [pc, #52]	; (800d520 <prvCheckTasksWaitingTermination+0x54>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	4a0b      	ldr	r2, [pc, #44]	; (800d520 <prvCheckTasksWaitingTermination+0x54>)
 800d4f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4f4:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <prvCheckTasksWaitingTermination+0x58>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	4a0a      	ldr	r2, [pc, #40]	; (800d524 <prvCheckTasksWaitingTermination+0x58>)
 800d4fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4fe:	f7fe f979 	bl	800b7f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 f810 	bl	800d528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d508:	4b06      	ldr	r3, [pc, #24]	; (800d524 <prvCheckTasksWaitingTermination+0x58>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1e1      	bne.n	800d4d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d510:	bf00      	nop
 800d512:	bf00      	nop
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	24004fa4 	.word	0x24004fa4
 800d520:	24004fd0 	.word	0x24004fd0
 800d524:	24004fb8 	.word	0x24004fb8

0800d528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d536:	2b00      	cmp	r3, #0
 800d538:	d108      	bne.n	800d54c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fd fe2c 	bl	800b19c <vPortFree>
				vPortFree( pxTCB );
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7fd fe29 	bl	800b19c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d54a:	e018      	b.n	800d57e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d552:	2b01      	cmp	r3, #1
 800d554:	d103      	bne.n	800d55e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7fd fe20 	bl	800b19c <vPortFree>
	}
 800d55c:	e00f      	b.n	800d57e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d564:	2b02      	cmp	r3, #2
 800d566:	d00a      	beq.n	800d57e <prvDeleteTCB+0x56>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	60fb      	str	r3, [r7, #12]
}
 800d57a:	bf00      	nop
 800d57c:	e7fe      	b.n	800d57c <prvDeleteTCB+0x54>
	}
 800d57e:	bf00      	nop
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
	...

0800d588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d58e:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <prvResetNextTaskUnblockTime+0x38>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d104      	bne.n	800d5a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d598:	4b0a      	ldr	r3, [pc, #40]	; (800d5c4 <prvResetNextTaskUnblockTime+0x3c>)
 800d59a:	f04f 32ff 	mov.w	r2, #4294967295
 800d59e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5a0:	e008      	b.n	800d5b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5a2:	4b07      	ldr	r3, [pc, #28]	; (800d5c0 <prvResetNextTaskUnblockTime+0x38>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	4a04      	ldr	r2, [pc, #16]	; (800d5c4 <prvResetNextTaskUnblockTime+0x3c>)
 800d5b2:	6013      	str	r3, [r2, #0]
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	24004f88 	.word	0x24004f88
 800d5c4:	24004ff0 	.word	0x24004ff0

0800d5c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5ce:	4b0b      	ldr	r3, [pc, #44]	; (800d5fc <xTaskGetSchedulerState+0x34>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d102      	bne.n	800d5dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	607b      	str	r3, [r7, #4]
 800d5da:	e008      	b.n	800d5ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5dc:	4b08      	ldr	r3, [pc, #32]	; (800d600 <xTaskGetSchedulerState+0x38>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d102      	bne.n	800d5ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5e4:	2302      	movs	r3, #2
 800d5e6:	607b      	str	r3, [r7, #4]
 800d5e8:	e001      	b.n	800d5ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5ee:	687b      	ldr	r3, [r7, #4]
	}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	24004fdc 	.word	0x24004fdc
 800d600:	24004ff8 	.word	0x24004ff8

0800d604 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d610:	2300      	movs	r3, #0
 800d612:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d051      	beq.n	800d6be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d61e:	4b2a      	ldr	r3, [pc, #168]	; (800d6c8 <xTaskPriorityInherit+0xc4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d624:	429a      	cmp	r2, r3
 800d626:	d241      	bcs.n	800d6ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	699b      	ldr	r3, [r3, #24]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	db06      	blt.n	800d63e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d630:	4b25      	ldr	r3, [pc, #148]	; (800d6c8 <xTaskPriorityInherit+0xc4>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d636:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	6959      	ldr	r1, [r3, #20]
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d646:	4613      	mov	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4a1f      	ldr	r2, [pc, #124]	; (800d6cc <xTaskPriorityInherit+0xc8>)
 800d650:	4413      	add	r3, r2
 800d652:	4299      	cmp	r1, r3
 800d654:	d122      	bne.n	800d69c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	3304      	adds	r3, #4
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fd ff46 	bl	800b4ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d660:	4b19      	ldr	r3, [pc, #100]	; (800d6c8 <xTaskPriorityInherit+0xc4>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66e:	4b18      	ldr	r3, [pc, #96]	; (800d6d0 <xTaskPriorityInherit+0xcc>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	429a      	cmp	r2, r3
 800d674:	d903      	bls.n	800d67e <xTaskPriorityInherit+0x7a>
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67a:	4a15      	ldr	r2, [pc, #84]	; (800d6d0 <xTaskPriorityInherit+0xcc>)
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	4613      	mov	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4a10      	ldr	r2, [pc, #64]	; (800d6cc <xTaskPriorityInherit+0xc8>)
 800d68c:	441a      	add	r2, r3
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	3304      	adds	r3, #4
 800d692:	4619      	mov	r1, r3
 800d694:	4610      	mov	r0, r2
 800d696:	f7fd fecc 	bl	800b432 <vListInsertEnd>
 800d69a:	e004      	b.n	800d6a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d69c:	4b0a      	ldr	r3, [pc, #40]	; (800d6c8 <xTaskPriorityInherit+0xc4>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	e008      	b.n	800d6be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6b0:	4b05      	ldr	r3, [pc, #20]	; (800d6c8 <xTaskPriorityInherit+0xc4>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d201      	bcs.n	800d6be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6be:	68fb      	ldr	r3, [r7, #12]
	}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	24004afc 	.word	0x24004afc
 800d6cc:	24004b00 	.word	0x24004b00
 800d6d0:	24004fd8 	.word	0x24004fd8

0800d6d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d056      	beq.n	800d798 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6ea:	4b2e      	ldr	r3, [pc, #184]	; (800d7a4 <xTaskPriorityDisinherit+0xd0>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d00a      	beq.n	800d70a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	60fb      	str	r3, [r7, #12]
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10a      	bne.n	800d728 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d716:	f383 8811 	msr	BASEPRI, r3
 800d71a:	f3bf 8f6f 	isb	sy
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	60bb      	str	r3, [r7, #8]
}
 800d724:	bf00      	nop
 800d726:	e7fe      	b.n	800d726 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d72c:	1e5a      	subs	r2, r3, #1
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d02c      	beq.n	800d798 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d742:	2b00      	cmp	r3, #0
 800d744:	d128      	bne.n	800d798 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	3304      	adds	r3, #4
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fd fece 	bl	800b4ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d768:	4b0f      	ldr	r3, [pc, #60]	; (800d7a8 <xTaskPriorityDisinherit+0xd4>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d903      	bls.n	800d778 <xTaskPriorityDisinherit+0xa4>
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d774:	4a0c      	ldr	r2, [pc, #48]	; (800d7a8 <xTaskPriorityDisinherit+0xd4>)
 800d776:	6013      	str	r3, [r2, #0]
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d77c:	4613      	mov	r3, r2
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	4413      	add	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4a09      	ldr	r2, [pc, #36]	; (800d7ac <xTaskPriorityDisinherit+0xd8>)
 800d786:	441a      	add	r2, r3
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	3304      	adds	r3, #4
 800d78c:	4619      	mov	r1, r3
 800d78e:	4610      	mov	r0, r2
 800d790:	f7fd fe4f 	bl	800b432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d794:	2301      	movs	r3, #1
 800d796:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d798:	697b      	ldr	r3, [r7, #20]
	}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	24004afc 	.word	0x24004afc
 800d7a8:	24004fd8 	.word	0x24004fd8
 800d7ac:	24004b00 	.word	0x24004b00

0800d7b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b088      	sub	sp, #32
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d06a      	beq.n	800d89e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10a      	bne.n	800d7e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	60fb      	str	r3, [r7, #12]
}
 800d7e2:	bf00      	nop
 800d7e4:	e7fe      	b.n	800d7e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d902      	bls.n	800d7f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	61fb      	str	r3, [r7, #28]
 800d7f4:	e002      	b.n	800d7fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d800:	69fa      	ldr	r2, [r7, #28]
 800d802:	429a      	cmp	r2, r3
 800d804:	d04b      	beq.n	800d89e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d146      	bne.n	800d89e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d810:	4b25      	ldr	r3, [pc, #148]	; (800d8a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	69ba      	ldr	r2, [r7, #24]
 800d816:	429a      	cmp	r2, r3
 800d818:	d10a      	bne.n	800d830 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	60bb      	str	r3, [r7, #8]
}
 800d82c:	bf00      	nop
 800d82e:	e7fe      	b.n	800d82e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d834:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	69fa      	ldr	r2, [r7, #28]
 800d83a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	699b      	ldr	r3, [r3, #24]
 800d840:	2b00      	cmp	r3, #0
 800d842:	db04      	blt.n	800d84e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	6959      	ldr	r1, [r3, #20]
 800d852:	693a      	ldr	r2, [r7, #16]
 800d854:	4613      	mov	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4a13      	ldr	r2, [pc, #76]	; (800d8ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d85e:	4413      	add	r3, r2
 800d860:	4299      	cmp	r1, r3
 800d862:	d11c      	bne.n	800d89e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	3304      	adds	r3, #4
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fd fe3f 	bl	800b4ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d872:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	d903      	bls.n	800d882 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87e:	4a0c      	ldr	r2, [pc, #48]	; (800d8b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d880:	6013      	str	r3, [r2, #0]
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d886:	4613      	mov	r3, r2
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	4413      	add	r3, r2
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	4a07      	ldr	r2, [pc, #28]	; (800d8ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d890:	441a      	add	r2, r3
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	3304      	adds	r3, #4
 800d896:	4619      	mov	r1, r3
 800d898:	4610      	mov	r0, r2
 800d89a:	f7fd fdca 	bl	800b432 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d89e:	bf00      	nop
 800d8a0:	3720      	adds	r7, #32
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	24004afc 	.word	0x24004afc
 800d8ac:	24004b00 	.word	0x24004b00
 800d8b0:	24004fd8 	.word	0x24004fd8

0800d8b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d8b4:	b480      	push	{r7}
 800d8b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d8b8:	4b07      	ldr	r3, [pc, #28]	; (800d8d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d004      	beq.n	800d8ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d8c0:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8c6:	3201      	adds	r2, #1
 800d8c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d8ca:	4b03      	ldr	r3, [pc, #12]	; (800d8d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
	}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	24004afc 	.word	0x24004afc

0800d8dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8e6:	4b21      	ldr	r3, [pc, #132]	; (800d96c <prvAddCurrentTaskToDelayedList+0x90>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8ec:	4b20      	ldr	r3, [pc, #128]	; (800d970 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fd fdfa 	bl	800b4ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fe:	d10a      	bne.n	800d916 <prvAddCurrentTaskToDelayedList+0x3a>
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d007      	beq.n	800d916 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d906:	4b1a      	ldr	r3, [pc, #104]	; (800d970 <prvAddCurrentTaskToDelayedList+0x94>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3304      	adds	r3, #4
 800d90c:	4619      	mov	r1, r3
 800d90e:	4819      	ldr	r0, [pc, #100]	; (800d974 <prvAddCurrentTaskToDelayedList+0x98>)
 800d910:	f7fd fd8f 	bl	800b432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d914:	e026      	b.n	800d964 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d916:	68fa      	ldr	r2, [r7, #12]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4413      	add	r3, r2
 800d91c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d91e:	4b14      	ldr	r3, [pc, #80]	; (800d970 <prvAddCurrentTaskToDelayedList+0x94>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d209      	bcs.n	800d942 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d92e:	4b12      	ldr	r3, [pc, #72]	; (800d978 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	4b0f      	ldr	r3, [pc, #60]	; (800d970 <prvAddCurrentTaskToDelayedList+0x94>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	3304      	adds	r3, #4
 800d938:	4619      	mov	r1, r3
 800d93a:	4610      	mov	r0, r2
 800d93c:	f7fd fd9d 	bl	800b47a <vListInsert>
}
 800d940:	e010      	b.n	800d964 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d942:	4b0e      	ldr	r3, [pc, #56]	; (800d97c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	4b0a      	ldr	r3, [pc, #40]	; (800d970 <prvAddCurrentTaskToDelayedList+0x94>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3304      	adds	r3, #4
 800d94c:	4619      	mov	r1, r3
 800d94e:	4610      	mov	r0, r2
 800d950:	f7fd fd93 	bl	800b47a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d954:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d202      	bcs.n	800d964 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d95e:	4a08      	ldr	r2, [pc, #32]	; (800d980 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	6013      	str	r3, [r2, #0]
}
 800d964:	bf00      	nop
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	24004fd4 	.word	0x24004fd4
 800d970:	24004afc 	.word	0x24004afc
 800d974:	24004fbc 	.word	0x24004fbc
 800d978:	24004f8c 	.word	0x24004f8c
 800d97c:	24004f88 	.word	0x24004f88
 800d980:	24004ff0 	.word	0x24004ff0

0800d984 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b08a      	sub	sp, #40	; 0x28
 800d988:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d98a:	2300      	movs	r3, #0
 800d98c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d98e:	f000 fb07 	bl	800dfa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d992:	4b1c      	ldr	r3, [pc, #112]	; (800da04 <xTimerCreateTimerTask+0x80>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d021      	beq.n	800d9de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d99a:	2300      	movs	r3, #0
 800d99c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d9a2:	1d3a      	adds	r2, r7, #4
 800d9a4:	f107 0108 	add.w	r1, r7, #8
 800d9a8:	f107 030c 	add.w	r3, r7, #12
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fd fb0f 	bl	800afd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9b2:	6879      	ldr	r1, [r7, #4]
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	9202      	str	r2, [sp, #8]
 800d9ba:	9301      	str	r3, [sp, #4]
 800d9bc:	2302      	movs	r3, #2
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	460a      	mov	r2, r1
 800d9c4:	4910      	ldr	r1, [pc, #64]	; (800da08 <xTimerCreateTimerTask+0x84>)
 800d9c6:	4811      	ldr	r0, [pc, #68]	; (800da0c <xTimerCreateTimerTask+0x88>)
 800d9c8:	f7ff f814 	bl	800c9f4 <xTaskCreateStatic>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	4a10      	ldr	r2, [pc, #64]	; (800da10 <xTimerCreateTimerTask+0x8c>)
 800d9d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d9d2:	4b0f      	ldr	r3, [pc, #60]	; (800da10 <xTimerCreateTimerTask+0x8c>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10a      	bne.n	800d9fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	613b      	str	r3, [r7, #16]
}
 800d9f6:	bf00      	nop
 800d9f8:	e7fe      	b.n	800d9f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d9fa:	697b      	ldr	r3, [r7, #20]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3718      	adds	r7, #24
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	2400502c 	.word	0x2400502c
 800da08:	08014048 	.word	0x08014048
 800da0c:	0800db49 	.word	0x0800db49
 800da10:	24005030 	.word	0x24005030

0800da14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b08a      	sub	sp, #40	; 0x28
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da22:	2300      	movs	r3, #0
 800da24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10a      	bne.n	800da42 <xTimerGenericCommand+0x2e>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	623b      	str	r3, [r7, #32]
}
 800da3e:	bf00      	nop
 800da40:	e7fe      	b.n	800da40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da42:	4b1a      	ldr	r3, [pc, #104]	; (800daac <xTimerGenericCommand+0x98>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d02a      	beq.n	800daa0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	2b05      	cmp	r3, #5
 800da5a:	dc18      	bgt.n	800da8e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da5c:	f7ff fdb4 	bl	800d5c8 <xTaskGetSchedulerState>
 800da60:	4603      	mov	r3, r0
 800da62:	2b02      	cmp	r3, #2
 800da64:	d109      	bne.n	800da7a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da66:	4b11      	ldr	r3, [pc, #68]	; (800daac <xTimerGenericCommand+0x98>)
 800da68:	6818      	ldr	r0, [r3, #0]
 800da6a:	f107 0110 	add.w	r1, r7, #16
 800da6e:	2300      	movs	r3, #0
 800da70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da72:	f7fe f959 	bl	800bd28 <xQueueGenericSend>
 800da76:	6278      	str	r0, [r7, #36]	; 0x24
 800da78:	e012      	b.n	800daa0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da7a:	4b0c      	ldr	r3, [pc, #48]	; (800daac <xTimerGenericCommand+0x98>)
 800da7c:	6818      	ldr	r0, [r3, #0]
 800da7e:	f107 0110 	add.w	r1, r7, #16
 800da82:	2300      	movs	r3, #0
 800da84:	2200      	movs	r2, #0
 800da86:	f7fe f94f 	bl	800bd28 <xQueueGenericSend>
 800da8a:	6278      	str	r0, [r7, #36]	; 0x24
 800da8c:	e008      	b.n	800daa0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da8e:	4b07      	ldr	r3, [pc, #28]	; (800daac <xTimerGenericCommand+0x98>)
 800da90:	6818      	ldr	r0, [r3, #0]
 800da92:	f107 0110 	add.w	r1, r7, #16
 800da96:	2300      	movs	r3, #0
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	f7fe fa43 	bl	800bf24 <xQueueGenericSendFromISR>
 800da9e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3728      	adds	r7, #40	; 0x28
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	2400502c 	.word	0x2400502c

0800dab0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b088      	sub	sp, #32
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daba:	4b22      	ldr	r3, [pc, #136]	; (800db44 <prvProcessExpiredTimer+0x94>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	3304      	adds	r3, #4
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fd fd0f 	bl	800b4ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dad4:	f003 0304 	and.w	r3, r3, #4
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d022      	beq.n	800db22 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	699a      	ldr	r2, [r3, #24]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	18d1      	adds	r1, r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	683a      	ldr	r2, [r7, #0]
 800dae8:	6978      	ldr	r0, [r7, #20]
 800daea:	f000 f8d1 	bl	800dc90 <prvInsertTimerInActiveList>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d01f      	beq.n	800db34 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800daf4:	2300      	movs	r3, #0
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	2300      	movs	r3, #0
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	2100      	movs	r1, #0
 800dafe:	6978      	ldr	r0, [r7, #20]
 800db00:	f7ff ff88 	bl	800da14 <xTimerGenericCommand>
 800db04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d113      	bne.n	800db34 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	60fb      	str	r3, [r7, #12]
}
 800db1e:	bf00      	nop
 800db20:	e7fe      	b.n	800db20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db28:	f023 0301 	bic.w	r3, r3, #1
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	6a1b      	ldr	r3, [r3, #32]
 800db38:	6978      	ldr	r0, [r7, #20]
 800db3a:	4798      	blx	r3
}
 800db3c:	bf00      	nop
 800db3e:	3718      	adds	r7, #24
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	24005024 	.word	0x24005024

0800db48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db50:	f107 0308 	add.w	r3, r7, #8
 800db54:	4618      	mov	r0, r3
 800db56:	f000 f857 	bl	800dc08 <prvGetNextExpireTime>
 800db5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	4619      	mov	r1, r3
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f000 f803 	bl	800db6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db66:	f000 f8d5 	bl	800dd14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db6a:	e7f1      	b.n	800db50 <prvTimerTask+0x8>

0800db6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db76:	f7ff f945 	bl	800ce04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db7a:	f107 0308 	add.w	r3, r7, #8
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 f866 	bl	800dc50 <prvSampleTimeNow>
 800db84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d130      	bne.n	800dbee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10a      	bne.n	800dba8 <prvProcessTimerOrBlockTask+0x3c>
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	429a      	cmp	r2, r3
 800db98:	d806      	bhi.n	800dba8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db9a:	f7ff f941 	bl	800ce20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db9e:	68f9      	ldr	r1, [r7, #12]
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff ff85 	bl	800dab0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dba6:	e024      	b.n	800dbf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d008      	beq.n	800dbc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dbae:	4b13      	ldr	r3, [pc, #76]	; (800dbfc <prvProcessTimerOrBlockTask+0x90>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d101      	bne.n	800dbbc <prvProcessTimerOrBlockTask+0x50>
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e000      	b.n	800dbbe <prvProcessTimerOrBlockTask+0x52>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dbc0:	4b0f      	ldr	r3, [pc, #60]	; (800dc00 <prvProcessTimerOrBlockTask+0x94>)
 800dbc2:	6818      	ldr	r0, [r3, #0]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	f7fe fedd 	bl	800c98c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dbd2:	f7ff f925 	bl	800ce20 <xTaskResumeAll>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10a      	bne.n	800dbf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dbdc:	4b09      	ldr	r3, [pc, #36]	; (800dc04 <prvProcessTimerOrBlockTask+0x98>)
 800dbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	f3bf 8f6f 	isb	sy
}
 800dbec:	e001      	b.n	800dbf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dbee:	f7ff f917 	bl	800ce20 <xTaskResumeAll>
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	24005028 	.word	0x24005028
 800dc00:	2400502c 	.word	0x2400502c
 800dc04:	e000ed04 	.word	0xe000ed04

0800dc08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc10:	4b0e      	ldr	r3, [pc, #56]	; (800dc4c <prvGetNextExpireTime+0x44>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <prvGetNextExpireTime+0x16>
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	e000      	b.n	800dc20 <prvGetNextExpireTime+0x18>
 800dc1e:	2200      	movs	r2, #0
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d105      	bne.n	800dc38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc2c:	4b07      	ldr	r3, [pc, #28]	; (800dc4c <prvGetNextExpireTime+0x44>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60fb      	str	r3, [r7, #12]
 800dc36:	e001      	b.n	800dc3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	24005024 	.word	0x24005024

0800dc50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc58:	f7ff f980 	bl	800cf5c <xTaskGetTickCount>
 800dc5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc5e:	4b0b      	ldr	r3, [pc, #44]	; (800dc8c <prvSampleTimeNow+0x3c>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d205      	bcs.n	800dc74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc68:	f000 f936 	bl	800ded8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e002      	b.n	800dc7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc7a:	4a04      	ldr	r2, [pc, #16]	; (800dc8c <prvSampleTimeNow+0x3c>)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc80:	68fb      	ldr	r3, [r7, #12]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	24005034 	.word	0x24005034

0800dc90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
 800dc9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d812      	bhi.n	800dcdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	1ad2      	subs	r2, r2, r3
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d302      	bcc.n	800dcca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	617b      	str	r3, [r7, #20]
 800dcc8:	e01b      	b.n	800dd02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dcca:	4b10      	ldr	r3, [pc, #64]	; (800dd0c <prvInsertTimerInActiveList+0x7c>)
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	f7fd fbd0 	bl	800b47a <vListInsert>
 800dcda:	e012      	b.n	800dd02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d206      	bcs.n	800dcf2 <prvInsertTimerInActiveList+0x62>
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d302      	bcc.n	800dcf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dcec:	2301      	movs	r3, #1
 800dcee:	617b      	str	r3, [r7, #20]
 800dcf0:	e007      	b.n	800dd02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcf2:	4b07      	ldr	r3, [pc, #28]	; (800dd10 <prvInsertTimerInActiveList+0x80>)
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	f7fd fbbc 	bl	800b47a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd02:	697b      	ldr	r3, [r7, #20]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	24005028 	.word	0x24005028
 800dd10:	24005024 	.word	0x24005024

0800dd14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08e      	sub	sp, #56	; 0x38
 800dd18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd1a:	e0ca      	b.n	800deb2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	da18      	bge.n	800dd54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd22:	1d3b      	adds	r3, r7, #4
 800dd24:	3304      	adds	r3, #4
 800dd26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10a      	bne.n	800dd44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	61fb      	str	r3, [r7, #28]
}
 800dd40:	bf00      	nop
 800dd42:	e7fe      	b.n	800dd42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd4a:	6850      	ldr	r0, [r2, #4]
 800dd4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd4e:	6892      	ldr	r2, [r2, #8]
 800dd50:	4611      	mov	r1, r2
 800dd52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f2c0 80aa 	blt.w	800deb0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	695b      	ldr	r3, [r3, #20]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d004      	beq.n	800dd72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6a:	3304      	adds	r3, #4
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7fd fbbd 	bl	800b4ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd72:	463b      	mov	r3, r7
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7ff ff6b 	bl	800dc50 <prvSampleTimeNow>
 800dd7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b09      	cmp	r3, #9
 800dd80:	f200 8097 	bhi.w	800deb2 <prvProcessReceivedCommands+0x19e>
 800dd84:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <prvProcessReceivedCommands+0x78>)
 800dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8a:	bf00      	nop
 800dd8c:	0800ddb5 	.word	0x0800ddb5
 800dd90:	0800ddb5 	.word	0x0800ddb5
 800dd94:	0800ddb5 	.word	0x0800ddb5
 800dd98:	0800de29 	.word	0x0800de29
 800dd9c:	0800de3d 	.word	0x0800de3d
 800dda0:	0800de87 	.word	0x0800de87
 800dda4:	0800ddb5 	.word	0x0800ddb5
 800dda8:	0800ddb5 	.word	0x0800ddb5
 800ddac:	0800de29 	.word	0x0800de29
 800ddb0:	0800de3d 	.word	0x0800de3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddba:	f043 0301 	orr.w	r3, r3, #1
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	18d1      	adds	r1, r2, r3
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd4:	f7ff ff5c 	bl	800dc90 <prvInsertTimerInActiveList>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d069      	beq.n	800deb2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dde4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d05e      	beq.n	800deb2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf8:	699b      	ldr	r3, [r3, #24]
 800ddfa:	441a      	add	r2, r3
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	2300      	movs	r3, #0
 800de02:	2100      	movs	r1, #0
 800de04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de06:	f7ff fe05 	bl	800da14 <xTimerGenericCommand>
 800de0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d14f      	bne.n	800deb2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	61bb      	str	r3, [r7, #24]
}
 800de24:	bf00      	nop
 800de26:	e7fe      	b.n	800de26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de2e:	f023 0301 	bic.w	r3, r3, #1
 800de32:	b2da      	uxtb	r2, r3
 800de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800de3a:	e03a      	b.n	800deb2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de42:	f043 0301 	orr.w	r3, r3, #1
 800de46:	b2da      	uxtb	r2, r3
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10a      	bne.n	800de72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de60:	f383 8811 	msr	BASEPRI, r3
 800de64:	f3bf 8f6f 	isb	sy
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	617b      	str	r3, [r7, #20]
}
 800de6e:	bf00      	nop
 800de70:	e7fe      	b.n	800de70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	699a      	ldr	r2, [r3, #24]
 800de76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de78:	18d1      	adds	r1, r2, r3
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de80:	f7ff ff06 	bl	800dc90 <prvInsertTimerInActiveList>
					break;
 800de84:	e015      	b.n	800deb2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de8c:	f003 0302 	and.w	r3, r3, #2
 800de90:	2b00      	cmp	r3, #0
 800de92:	d103      	bne.n	800de9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800de94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de96:	f7fd f981 	bl	800b19c <vPortFree>
 800de9a:	e00a      	b.n	800deb2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dea2:	f023 0301 	bic.w	r3, r3, #1
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800deae:	e000      	b.n	800deb2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800deb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800deb2:	4b08      	ldr	r3, [pc, #32]	; (800ded4 <prvProcessReceivedCommands+0x1c0>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	1d39      	adds	r1, r7, #4
 800deb8:	2200      	movs	r2, #0
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe f95a 	bl	800c174 <xQueueReceive>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f47f af2a 	bne.w	800dd1c <prvProcessReceivedCommands+0x8>
	}
}
 800dec8:	bf00      	nop
 800deca:	bf00      	nop
 800decc:	3730      	adds	r7, #48	; 0x30
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	2400502c 	.word	0x2400502c

0800ded8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dede:	e048      	b.n	800df72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dee0:	4b2d      	ldr	r3, [pc, #180]	; (800df98 <prvSwitchTimerLists+0xc0>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deea:	4b2b      	ldr	r3, [pc, #172]	; (800df98 <prvSwitchTimerLists+0xc0>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3304      	adds	r3, #4
 800def8:	4618      	mov	r0, r3
 800defa:	f7fd faf7 	bl	800b4ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df0c:	f003 0304 	and.w	r3, r3, #4
 800df10:	2b00      	cmp	r3, #0
 800df12:	d02e      	beq.n	800df72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	699b      	ldr	r3, [r3, #24]
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	4413      	add	r3, r2
 800df1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df1e:	68ba      	ldr	r2, [r7, #8]
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	429a      	cmp	r2, r3
 800df24:	d90e      	bls.n	800df44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df32:	4b19      	ldr	r3, [pc, #100]	; (800df98 <prvSwitchTimerLists+0xc0>)
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3304      	adds	r3, #4
 800df3a:	4619      	mov	r1, r3
 800df3c:	4610      	mov	r0, r2
 800df3e:	f7fd fa9c 	bl	800b47a <vListInsert>
 800df42:	e016      	b.n	800df72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df44:	2300      	movs	r3, #0
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	2300      	movs	r3, #0
 800df4a:	693a      	ldr	r2, [r7, #16]
 800df4c:	2100      	movs	r1, #0
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f7ff fd60 	bl	800da14 <xTimerGenericCommand>
 800df54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10a      	bne.n	800df72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df60:	f383 8811 	msr	BASEPRI, r3
 800df64:	f3bf 8f6f 	isb	sy
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	603b      	str	r3, [r7, #0]
}
 800df6e:	bf00      	nop
 800df70:	e7fe      	b.n	800df70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df72:	4b09      	ldr	r3, [pc, #36]	; (800df98 <prvSwitchTimerLists+0xc0>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1b1      	bne.n	800dee0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df7c:	4b06      	ldr	r3, [pc, #24]	; (800df98 <prvSwitchTimerLists+0xc0>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df82:	4b06      	ldr	r3, [pc, #24]	; (800df9c <prvSwitchTimerLists+0xc4>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a04      	ldr	r2, [pc, #16]	; (800df98 <prvSwitchTimerLists+0xc0>)
 800df88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df8a:	4a04      	ldr	r2, [pc, #16]	; (800df9c <prvSwitchTimerLists+0xc4>)
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	6013      	str	r3, [r2, #0]
}
 800df90:	bf00      	nop
 800df92:	3718      	adds	r7, #24
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	24005024 	.word	0x24005024
 800df9c:	24005028 	.word	0x24005028

0800dfa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dfa6:	f7fd fbf5 	bl	800b794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dfaa:	4b15      	ldr	r3, [pc, #84]	; (800e000 <prvCheckForValidListAndQueue+0x60>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d120      	bne.n	800dff4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dfb2:	4814      	ldr	r0, [pc, #80]	; (800e004 <prvCheckForValidListAndQueue+0x64>)
 800dfb4:	f7fd fa10 	bl	800b3d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dfb8:	4813      	ldr	r0, [pc, #76]	; (800e008 <prvCheckForValidListAndQueue+0x68>)
 800dfba:	f7fd fa0d 	bl	800b3d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dfbe:	4b13      	ldr	r3, [pc, #76]	; (800e00c <prvCheckForValidListAndQueue+0x6c>)
 800dfc0:	4a10      	ldr	r2, [pc, #64]	; (800e004 <prvCheckForValidListAndQueue+0x64>)
 800dfc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dfc4:	4b12      	ldr	r3, [pc, #72]	; (800e010 <prvCheckForValidListAndQueue+0x70>)
 800dfc6:	4a10      	ldr	r2, [pc, #64]	; (800e008 <prvCheckForValidListAndQueue+0x68>)
 800dfc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	4b11      	ldr	r3, [pc, #68]	; (800e014 <prvCheckForValidListAndQueue+0x74>)
 800dfd0:	4a11      	ldr	r2, [pc, #68]	; (800e018 <prvCheckForValidListAndQueue+0x78>)
 800dfd2:	2110      	movs	r1, #16
 800dfd4:	200a      	movs	r0, #10
 800dfd6:	f7fd fd67 	bl	800baa8 <xQueueGenericCreateStatic>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	4a08      	ldr	r2, [pc, #32]	; (800e000 <prvCheckForValidListAndQueue+0x60>)
 800dfde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dfe0:	4b07      	ldr	r3, [pc, #28]	; (800e000 <prvCheckForValidListAndQueue+0x60>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d005      	beq.n	800dff4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dfe8:	4b05      	ldr	r3, [pc, #20]	; (800e000 <prvCheckForValidListAndQueue+0x60>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	490b      	ldr	r1, [pc, #44]	; (800e01c <prvCheckForValidListAndQueue+0x7c>)
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fe fc78 	bl	800c8e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dff4:	f7fd fbfe 	bl	800b7f4 <vPortExitCritical>
}
 800dff8:	bf00      	nop
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	2400502c 	.word	0x2400502c
 800e004:	24004ffc 	.word	0x24004ffc
 800e008:	24005010 	.word	0x24005010
 800e00c:	24005024 	.word	0x24005024
 800e010:	24005028 	.word	0x24005028
 800e014:	240050d8 	.word	0x240050d8
 800e018:	24005038 	.word	0x24005038
 800e01c:	08014050 	.word	0x08014050

0800e020 <__errno>:
 800e020:	4b01      	ldr	r3, [pc, #4]	; (800e028 <__errno+0x8>)
 800e022:	6818      	ldr	r0, [r3, #0]
 800e024:	4770      	bx	lr
 800e026:	bf00      	nop
 800e028:	24000020 	.word	0x24000020

0800e02c <__libc_init_array>:
 800e02c:	b570      	push	{r4, r5, r6, lr}
 800e02e:	4d0d      	ldr	r5, [pc, #52]	; (800e064 <__libc_init_array+0x38>)
 800e030:	4c0d      	ldr	r4, [pc, #52]	; (800e068 <__libc_init_array+0x3c>)
 800e032:	1b64      	subs	r4, r4, r5
 800e034:	10a4      	asrs	r4, r4, #2
 800e036:	2600      	movs	r6, #0
 800e038:	42a6      	cmp	r6, r4
 800e03a:	d109      	bne.n	800e050 <__libc_init_array+0x24>
 800e03c:	4d0b      	ldr	r5, [pc, #44]	; (800e06c <__libc_init_array+0x40>)
 800e03e:	4c0c      	ldr	r4, [pc, #48]	; (800e070 <__libc_init_array+0x44>)
 800e040:	f005 ff64 	bl	8013f0c <_init>
 800e044:	1b64      	subs	r4, r4, r5
 800e046:	10a4      	asrs	r4, r4, #2
 800e048:	2600      	movs	r6, #0
 800e04a:	42a6      	cmp	r6, r4
 800e04c:	d105      	bne.n	800e05a <__libc_init_array+0x2e>
 800e04e:	bd70      	pop	{r4, r5, r6, pc}
 800e050:	f855 3b04 	ldr.w	r3, [r5], #4
 800e054:	4798      	blx	r3
 800e056:	3601      	adds	r6, #1
 800e058:	e7ee      	b.n	800e038 <__libc_init_array+0xc>
 800e05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e05e:	4798      	blx	r3
 800e060:	3601      	adds	r6, #1
 800e062:	e7f2      	b.n	800e04a <__libc_init_array+0x1e>
 800e064:	08014c38 	.word	0x08014c38
 800e068:	08014c38 	.word	0x08014c38
 800e06c:	08014c38 	.word	0x08014c38
 800e070:	08014c3c 	.word	0x08014c3c

0800e074 <memcpy>:
 800e074:	440a      	add	r2, r1
 800e076:	4291      	cmp	r1, r2
 800e078:	f100 33ff 	add.w	r3, r0, #4294967295
 800e07c:	d100      	bne.n	800e080 <memcpy+0xc>
 800e07e:	4770      	bx	lr
 800e080:	b510      	push	{r4, lr}
 800e082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e08a:	4291      	cmp	r1, r2
 800e08c:	d1f9      	bne.n	800e082 <memcpy+0xe>
 800e08e:	bd10      	pop	{r4, pc}

0800e090 <memset>:
 800e090:	4402      	add	r2, r0
 800e092:	4603      	mov	r3, r0
 800e094:	4293      	cmp	r3, r2
 800e096:	d100      	bne.n	800e09a <memset+0xa>
 800e098:	4770      	bx	lr
 800e09a:	f803 1b01 	strb.w	r1, [r3], #1
 800e09e:	e7f9      	b.n	800e094 <memset+0x4>

0800e0a0 <__cvt>:
 800e0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a2:	ed2d 8b02 	vpush	{d8}
 800e0a6:	eeb0 8b40 	vmov.f64	d8, d0
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	4617      	mov	r7, r2
 800e0ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e0b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e0b2:	ee18 2a90 	vmov	r2, s17
 800e0b6:	f025 0520 	bic.w	r5, r5, #32
 800e0ba:	2a00      	cmp	r2, #0
 800e0bc:	bfb6      	itet	lt
 800e0be:	222d      	movlt	r2, #45	; 0x2d
 800e0c0:	2200      	movge	r2, #0
 800e0c2:	eeb1 8b40 	vneglt.f64	d8, d0
 800e0c6:	2d46      	cmp	r5, #70	; 0x46
 800e0c8:	460c      	mov	r4, r1
 800e0ca:	701a      	strb	r2, [r3, #0]
 800e0cc:	d004      	beq.n	800e0d8 <__cvt+0x38>
 800e0ce:	2d45      	cmp	r5, #69	; 0x45
 800e0d0:	d100      	bne.n	800e0d4 <__cvt+0x34>
 800e0d2:	3401      	adds	r4, #1
 800e0d4:	2102      	movs	r1, #2
 800e0d6:	e000      	b.n	800e0da <__cvt+0x3a>
 800e0d8:	2103      	movs	r1, #3
 800e0da:	ab03      	add	r3, sp, #12
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	ab02      	add	r3, sp, #8
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	4622      	mov	r2, r4
 800e0e4:	4633      	mov	r3, r6
 800e0e6:	eeb0 0b48 	vmov.f64	d0, d8
 800e0ea:	f001 fe31 	bl	800fd50 <_dtoa_r>
 800e0ee:	2d47      	cmp	r5, #71	; 0x47
 800e0f0:	d101      	bne.n	800e0f6 <__cvt+0x56>
 800e0f2:	07fb      	lsls	r3, r7, #31
 800e0f4:	d51a      	bpl.n	800e12c <__cvt+0x8c>
 800e0f6:	2d46      	cmp	r5, #70	; 0x46
 800e0f8:	eb00 0204 	add.w	r2, r0, r4
 800e0fc:	d10c      	bne.n	800e118 <__cvt+0x78>
 800e0fe:	7803      	ldrb	r3, [r0, #0]
 800e100:	2b30      	cmp	r3, #48	; 0x30
 800e102:	d107      	bne.n	800e114 <__cvt+0x74>
 800e104:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e10c:	bf1c      	itt	ne
 800e10e:	f1c4 0401 	rsbne	r4, r4, #1
 800e112:	6034      	strne	r4, [r6, #0]
 800e114:	6833      	ldr	r3, [r6, #0]
 800e116:	441a      	add	r2, r3
 800e118:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e120:	bf08      	it	eq
 800e122:	9203      	streq	r2, [sp, #12]
 800e124:	2130      	movs	r1, #48	; 0x30
 800e126:	9b03      	ldr	r3, [sp, #12]
 800e128:	4293      	cmp	r3, r2
 800e12a:	d307      	bcc.n	800e13c <__cvt+0x9c>
 800e12c:	9b03      	ldr	r3, [sp, #12]
 800e12e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e130:	1a1b      	subs	r3, r3, r0
 800e132:	6013      	str	r3, [r2, #0]
 800e134:	b005      	add	sp, #20
 800e136:	ecbd 8b02 	vpop	{d8}
 800e13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e13c:	1c5c      	adds	r4, r3, #1
 800e13e:	9403      	str	r4, [sp, #12]
 800e140:	7019      	strb	r1, [r3, #0]
 800e142:	e7f0      	b.n	800e126 <__cvt+0x86>

0800e144 <__exponent>:
 800e144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e146:	4603      	mov	r3, r0
 800e148:	2900      	cmp	r1, #0
 800e14a:	bfb8      	it	lt
 800e14c:	4249      	neglt	r1, r1
 800e14e:	f803 2b02 	strb.w	r2, [r3], #2
 800e152:	bfb4      	ite	lt
 800e154:	222d      	movlt	r2, #45	; 0x2d
 800e156:	222b      	movge	r2, #43	; 0x2b
 800e158:	2909      	cmp	r1, #9
 800e15a:	7042      	strb	r2, [r0, #1]
 800e15c:	dd2a      	ble.n	800e1b4 <__exponent+0x70>
 800e15e:	f10d 0407 	add.w	r4, sp, #7
 800e162:	46a4      	mov	ip, r4
 800e164:	270a      	movs	r7, #10
 800e166:	46a6      	mov	lr, r4
 800e168:	460a      	mov	r2, r1
 800e16a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e16e:	fb07 1516 	mls	r5, r7, r6, r1
 800e172:	3530      	adds	r5, #48	; 0x30
 800e174:	2a63      	cmp	r2, #99	; 0x63
 800e176:	f104 34ff 	add.w	r4, r4, #4294967295
 800e17a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e17e:	4631      	mov	r1, r6
 800e180:	dcf1      	bgt.n	800e166 <__exponent+0x22>
 800e182:	3130      	adds	r1, #48	; 0x30
 800e184:	f1ae 0502 	sub.w	r5, lr, #2
 800e188:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e18c:	1c44      	adds	r4, r0, #1
 800e18e:	4629      	mov	r1, r5
 800e190:	4561      	cmp	r1, ip
 800e192:	d30a      	bcc.n	800e1aa <__exponent+0x66>
 800e194:	f10d 0209 	add.w	r2, sp, #9
 800e198:	eba2 020e 	sub.w	r2, r2, lr
 800e19c:	4565      	cmp	r5, ip
 800e19e:	bf88      	it	hi
 800e1a0:	2200      	movhi	r2, #0
 800e1a2:	4413      	add	r3, r2
 800e1a4:	1a18      	subs	r0, r3, r0
 800e1a6:	b003      	add	sp, #12
 800e1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e1b2:	e7ed      	b.n	800e190 <__exponent+0x4c>
 800e1b4:	2330      	movs	r3, #48	; 0x30
 800e1b6:	3130      	adds	r1, #48	; 0x30
 800e1b8:	7083      	strb	r3, [r0, #2]
 800e1ba:	70c1      	strb	r1, [r0, #3]
 800e1bc:	1d03      	adds	r3, r0, #4
 800e1be:	e7f1      	b.n	800e1a4 <__exponent+0x60>

0800e1c0 <_printf_float>:
 800e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	b08b      	sub	sp, #44	; 0x2c
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e1cc:	4616      	mov	r6, r2
 800e1ce:	461f      	mov	r7, r3
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	f002 fe9b 	bl	8010f0c <_localeconv_r>
 800e1d6:	f8d0 b000 	ldr.w	fp, [r0]
 800e1da:	4658      	mov	r0, fp
 800e1dc:	f7f2 f880 	bl	80002e0 <strlen>
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	9308      	str	r3, [sp, #32]
 800e1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e1e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e1ec:	6822      	ldr	r2, [r4, #0]
 800e1ee:	3307      	adds	r3, #7
 800e1f0:	f023 0307 	bic.w	r3, r3, #7
 800e1f4:	f103 0108 	add.w	r1, r3, #8
 800e1f8:	f8c8 1000 	str.w	r1, [r8]
 800e1fc:	4682      	mov	sl, r0
 800e1fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e202:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e206:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e468 <_printf_float+0x2a8>
 800e20a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e20e:	eeb0 6bc0 	vabs.f64	d6, d0
 800e212:	eeb4 6b47 	vcmp.f64	d6, d7
 800e216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e21a:	dd24      	ble.n	800e266 <_printf_float+0xa6>
 800e21c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e224:	d502      	bpl.n	800e22c <_printf_float+0x6c>
 800e226:	232d      	movs	r3, #45	; 0x2d
 800e228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e22c:	4b90      	ldr	r3, [pc, #576]	; (800e470 <_printf_float+0x2b0>)
 800e22e:	4891      	ldr	r0, [pc, #580]	; (800e474 <_printf_float+0x2b4>)
 800e230:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e234:	bf94      	ite	ls
 800e236:	4698      	movls	r8, r3
 800e238:	4680      	movhi	r8, r0
 800e23a:	2303      	movs	r3, #3
 800e23c:	6123      	str	r3, [r4, #16]
 800e23e:	f022 0204 	bic.w	r2, r2, #4
 800e242:	2300      	movs	r3, #0
 800e244:	6022      	str	r2, [r4, #0]
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	9700      	str	r7, [sp, #0]
 800e24a:	4633      	mov	r3, r6
 800e24c:	aa09      	add	r2, sp, #36	; 0x24
 800e24e:	4621      	mov	r1, r4
 800e250:	4628      	mov	r0, r5
 800e252:	f000 f9d3 	bl	800e5fc <_printf_common>
 800e256:	3001      	adds	r0, #1
 800e258:	f040 808a 	bne.w	800e370 <_printf_float+0x1b0>
 800e25c:	f04f 30ff 	mov.w	r0, #4294967295
 800e260:	b00b      	add	sp, #44	; 0x2c
 800e262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e266:	eeb4 0b40 	vcmp.f64	d0, d0
 800e26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26e:	d709      	bvc.n	800e284 <_printf_float+0xc4>
 800e270:	ee10 3a90 	vmov	r3, s1
 800e274:	2b00      	cmp	r3, #0
 800e276:	bfbc      	itt	lt
 800e278:	232d      	movlt	r3, #45	; 0x2d
 800e27a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e27e:	487e      	ldr	r0, [pc, #504]	; (800e478 <_printf_float+0x2b8>)
 800e280:	4b7e      	ldr	r3, [pc, #504]	; (800e47c <_printf_float+0x2bc>)
 800e282:	e7d5      	b.n	800e230 <_printf_float+0x70>
 800e284:	6863      	ldr	r3, [r4, #4]
 800e286:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e28a:	9104      	str	r1, [sp, #16]
 800e28c:	1c59      	adds	r1, r3, #1
 800e28e:	d13c      	bne.n	800e30a <_printf_float+0x14a>
 800e290:	2306      	movs	r3, #6
 800e292:	6063      	str	r3, [r4, #4]
 800e294:	2300      	movs	r3, #0
 800e296:	9303      	str	r3, [sp, #12]
 800e298:	ab08      	add	r3, sp, #32
 800e29a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e29e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2a2:	ab07      	add	r3, sp, #28
 800e2a4:	6861      	ldr	r1, [r4, #4]
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	6022      	str	r2, [r4, #0]
 800e2aa:	f10d 031b 	add.w	r3, sp, #27
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f7ff fef6 	bl	800e0a0 <__cvt>
 800e2b4:	9b04      	ldr	r3, [sp, #16]
 800e2b6:	9907      	ldr	r1, [sp, #28]
 800e2b8:	2b47      	cmp	r3, #71	; 0x47
 800e2ba:	4680      	mov	r8, r0
 800e2bc:	d108      	bne.n	800e2d0 <_printf_float+0x110>
 800e2be:	1cc8      	adds	r0, r1, #3
 800e2c0:	db02      	blt.n	800e2c8 <_printf_float+0x108>
 800e2c2:	6863      	ldr	r3, [r4, #4]
 800e2c4:	4299      	cmp	r1, r3
 800e2c6:	dd41      	ble.n	800e34c <_printf_float+0x18c>
 800e2c8:	f1a9 0902 	sub.w	r9, r9, #2
 800e2cc:	fa5f f989 	uxtb.w	r9, r9
 800e2d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e2d4:	d820      	bhi.n	800e318 <_printf_float+0x158>
 800e2d6:	3901      	subs	r1, #1
 800e2d8:	464a      	mov	r2, r9
 800e2da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e2de:	9107      	str	r1, [sp, #28]
 800e2e0:	f7ff ff30 	bl	800e144 <__exponent>
 800e2e4:	9a08      	ldr	r2, [sp, #32]
 800e2e6:	9004      	str	r0, [sp, #16]
 800e2e8:	1813      	adds	r3, r2, r0
 800e2ea:	2a01      	cmp	r2, #1
 800e2ec:	6123      	str	r3, [r4, #16]
 800e2ee:	dc02      	bgt.n	800e2f6 <_printf_float+0x136>
 800e2f0:	6822      	ldr	r2, [r4, #0]
 800e2f2:	07d2      	lsls	r2, r2, #31
 800e2f4:	d501      	bpl.n	800e2fa <_printf_float+0x13a>
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	6123      	str	r3, [r4, #16]
 800e2fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0a2      	beq.n	800e248 <_printf_float+0x88>
 800e302:	232d      	movs	r3, #45	; 0x2d
 800e304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e308:	e79e      	b.n	800e248 <_printf_float+0x88>
 800e30a:	9904      	ldr	r1, [sp, #16]
 800e30c:	2947      	cmp	r1, #71	; 0x47
 800e30e:	d1c1      	bne.n	800e294 <_printf_float+0xd4>
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1bf      	bne.n	800e294 <_printf_float+0xd4>
 800e314:	2301      	movs	r3, #1
 800e316:	e7bc      	b.n	800e292 <_printf_float+0xd2>
 800e318:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e31c:	d118      	bne.n	800e350 <_printf_float+0x190>
 800e31e:	2900      	cmp	r1, #0
 800e320:	6863      	ldr	r3, [r4, #4]
 800e322:	dd0b      	ble.n	800e33c <_printf_float+0x17c>
 800e324:	6121      	str	r1, [r4, #16]
 800e326:	b913      	cbnz	r3, 800e32e <_printf_float+0x16e>
 800e328:	6822      	ldr	r2, [r4, #0]
 800e32a:	07d0      	lsls	r0, r2, #31
 800e32c:	d502      	bpl.n	800e334 <_printf_float+0x174>
 800e32e:	3301      	adds	r3, #1
 800e330:	440b      	add	r3, r1
 800e332:	6123      	str	r3, [r4, #16]
 800e334:	2300      	movs	r3, #0
 800e336:	65a1      	str	r1, [r4, #88]	; 0x58
 800e338:	9304      	str	r3, [sp, #16]
 800e33a:	e7de      	b.n	800e2fa <_printf_float+0x13a>
 800e33c:	b913      	cbnz	r3, 800e344 <_printf_float+0x184>
 800e33e:	6822      	ldr	r2, [r4, #0]
 800e340:	07d2      	lsls	r2, r2, #31
 800e342:	d501      	bpl.n	800e348 <_printf_float+0x188>
 800e344:	3302      	adds	r3, #2
 800e346:	e7f4      	b.n	800e332 <_printf_float+0x172>
 800e348:	2301      	movs	r3, #1
 800e34a:	e7f2      	b.n	800e332 <_printf_float+0x172>
 800e34c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e350:	9b08      	ldr	r3, [sp, #32]
 800e352:	4299      	cmp	r1, r3
 800e354:	db05      	blt.n	800e362 <_printf_float+0x1a2>
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	6121      	str	r1, [r4, #16]
 800e35a:	07d8      	lsls	r0, r3, #31
 800e35c:	d5ea      	bpl.n	800e334 <_printf_float+0x174>
 800e35e:	1c4b      	adds	r3, r1, #1
 800e360:	e7e7      	b.n	800e332 <_printf_float+0x172>
 800e362:	2900      	cmp	r1, #0
 800e364:	bfd4      	ite	le
 800e366:	f1c1 0202 	rsble	r2, r1, #2
 800e36a:	2201      	movgt	r2, #1
 800e36c:	4413      	add	r3, r2
 800e36e:	e7e0      	b.n	800e332 <_printf_float+0x172>
 800e370:	6823      	ldr	r3, [r4, #0]
 800e372:	055a      	lsls	r2, r3, #21
 800e374:	d407      	bmi.n	800e386 <_printf_float+0x1c6>
 800e376:	6923      	ldr	r3, [r4, #16]
 800e378:	4642      	mov	r2, r8
 800e37a:	4631      	mov	r1, r6
 800e37c:	4628      	mov	r0, r5
 800e37e:	47b8      	blx	r7
 800e380:	3001      	adds	r0, #1
 800e382:	d12a      	bne.n	800e3da <_printf_float+0x21a>
 800e384:	e76a      	b.n	800e25c <_printf_float+0x9c>
 800e386:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e38a:	f240 80e2 	bls.w	800e552 <_printf_float+0x392>
 800e38e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39a:	d133      	bne.n	800e404 <_printf_float+0x244>
 800e39c:	4a38      	ldr	r2, [pc, #224]	; (800e480 <_printf_float+0x2c0>)
 800e39e:	2301      	movs	r3, #1
 800e3a0:	4631      	mov	r1, r6
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	47b8      	blx	r7
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	f43f af58 	beq.w	800e25c <_printf_float+0x9c>
 800e3ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	db02      	blt.n	800e3ba <_printf_float+0x1fa>
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	07d8      	lsls	r0, r3, #31
 800e3b8:	d50f      	bpl.n	800e3da <_printf_float+0x21a>
 800e3ba:	4653      	mov	r3, sl
 800e3bc:	465a      	mov	r2, fp
 800e3be:	4631      	mov	r1, r6
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	47b8      	blx	r7
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	f43f af49 	beq.w	800e25c <_printf_float+0x9c>
 800e3ca:	f04f 0800 	mov.w	r8, #0
 800e3ce:	f104 091a 	add.w	r9, r4, #26
 800e3d2:	9b08      	ldr	r3, [sp, #32]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	4543      	cmp	r3, r8
 800e3d8:	dc09      	bgt.n	800e3ee <_printf_float+0x22e>
 800e3da:	6823      	ldr	r3, [r4, #0]
 800e3dc:	079b      	lsls	r3, r3, #30
 800e3de:	f100 8108 	bmi.w	800e5f2 <_printf_float+0x432>
 800e3e2:	68e0      	ldr	r0, [r4, #12]
 800e3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e6:	4298      	cmp	r0, r3
 800e3e8:	bfb8      	it	lt
 800e3ea:	4618      	movlt	r0, r3
 800e3ec:	e738      	b.n	800e260 <_printf_float+0xa0>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	464a      	mov	r2, r9
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	47b8      	blx	r7
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	f43f af2f 	beq.w	800e25c <_printf_float+0x9c>
 800e3fe:	f108 0801 	add.w	r8, r8, #1
 800e402:	e7e6      	b.n	800e3d2 <_printf_float+0x212>
 800e404:	9b07      	ldr	r3, [sp, #28]
 800e406:	2b00      	cmp	r3, #0
 800e408:	dc3c      	bgt.n	800e484 <_printf_float+0x2c4>
 800e40a:	4a1d      	ldr	r2, [pc, #116]	; (800e480 <_printf_float+0x2c0>)
 800e40c:	2301      	movs	r3, #1
 800e40e:	4631      	mov	r1, r6
 800e410:	4628      	mov	r0, r5
 800e412:	47b8      	blx	r7
 800e414:	3001      	adds	r0, #1
 800e416:	f43f af21 	beq.w	800e25c <_printf_float+0x9c>
 800e41a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e41e:	4313      	orrs	r3, r2
 800e420:	d102      	bne.n	800e428 <_printf_float+0x268>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	07d9      	lsls	r1, r3, #31
 800e426:	d5d8      	bpl.n	800e3da <_printf_float+0x21a>
 800e428:	4653      	mov	r3, sl
 800e42a:	465a      	mov	r2, fp
 800e42c:	4631      	mov	r1, r6
 800e42e:	4628      	mov	r0, r5
 800e430:	47b8      	blx	r7
 800e432:	3001      	adds	r0, #1
 800e434:	f43f af12 	beq.w	800e25c <_printf_float+0x9c>
 800e438:	f04f 0900 	mov.w	r9, #0
 800e43c:	f104 0a1a 	add.w	sl, r4, #26
 800e440:	9b07      	ldr	r3, [sp, #28]
 800e442:	425b      	negs	r3, r3
 800e444:	454b      	cmp	r3, r9
 800e446:	dc01      	bgt.n	800e44c <_printf_float+0x28c>
 800e448:	9b08      	ldr	r3, [sp, #32]
 800e44a:	e795      	b.n	800e378 <_printf_float+0x1b8>
 800e44c:	2301      	movs	r3, #1
 800e44e:	4652      	mov	r2, sl
 800e450:	4631      	mov	r1, r6
 800e452:	4628      	mov	r0, r5
 800e454:	47b8      	blx	r7
 800e456:	3001      	adds	r0, #1
 800e458:	f43f af00 	beq.w	800e25c <_printf_float+0x9c>
 800e45c:	f109 0901 	add.w	r9, r9, #1
 800e460:	e7ee      	b.n	800e440 <_printf_float+0x280>
 800e462:	bf00      	nop
 800e464:	f3af 8000 	nop.w
 800e468:	ffffffff 	.word	0xffffffff
 800e46c:	7fefffff 	.word	0x7fefffff
 800e470:	08014138 	.word	0x08014138
 800e474:	0801413c 	.word	0x0801413c
 800e478:	08014144 	.word	0x08014144
 800e47c:	08014140 	.word	0x08014140
 800e480:	08014539 	.word	0x08014539
 800e484:	9a08      	ldr	r2, [sp, #32]
 800e486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e488:	429a      	cmp	r2, r3
 800e48a:	bfa8      	it	ge
 800e48c:	461a      	movge	r2, r3
 800e48e:	2a00      	cmp	r2, #0
 800e490:	4691      	mov	r9, r2
 800e492:	dc38      	bgt.n	800e506 <_printf_float+0x346>
 800e494:	2300      	movs	r3, #0
 800e496:	9305      	str	r3, [sp, #20]
 800e498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e49c:	f104 021a 	add.w	r2, r4, #26
 800e4a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4a2:	9905      	ldr	r1, [sp, #20]
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	eba3 0309 	sub.w	r3, r3, r9
 800e4aa:	428b      	cmp	r3, r1
 800e4ac:	dc33      	bgt.n	800e516 <_printf_float+0x356>
 800e4ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	db3c      	blt.n	800e530 <_printf_float+0x370>
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	07da      	lsls	r2, r3, #31
 800e4ba:	d439      	bmi.n	800e530 <_printf_float+0x370>
 800e4bc:	9b08      	ldr	r3, [sp, #32]
 800e4be:	9a04      	ldr	r2, [sp, #16]
 800e4c0:	9907      	ldr	r1, [sp, #28]
 800e4c2:	1a9a      	subs	r2, r3, r2
 800e4c4:	eba3 0901 	sub.w	r9, r3, r1
 800e4c8:	4591      	cmp	r9, r2
 800e4ca:	bfa8      	it	ge
 800e4cc:	4691      	movge	r9, r2
 800e4ce:	f1b9 0f00 	cmp.w	r9, #0
 800e4d2:	dc35      	bgt.n	800e540 <_printf_float+0x380>
 800e4d4:	f04f 0800 	mov.w	r8, #0
 800e4d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4dc:	f104 0a1a 	add.w	sl, r4, #26
 800e4e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e4e4:	1a9b      	subs	r3, r3, r2
 800e4e6:	eba3 0309 	sub.w	r3, r3, r9
 800e4ea:	4543      	cmp	r3, r8
 800e4ec:	f77f af75 	ble.w	800e3da <_printf_float+0x21a>
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	4652      	mov	r2, sl
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	47b8      	blx	r7
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	f43f aeae 	beq.w	800e25c <_printf_float+0x9c>
 800e500:	f108 0801 	add.w	r8, r8, #1
 800e504:	e7ec      	b.n	800e4e0 <_printf_float+0x320>
 800e506:	4613      	mov	r3, r2
 800e508:	4631      	mov	r1, r6
 800e50a:	4642      	mov	r2, r8
 800e50c:	4628      	mov	r0, r5
 800e50e:	47b8      	blx	r7
 800e510:	3001      	adds	r0, #1
 800e512:	d1bf      	bne.n	800e494 <_printf_float+0x2d4>
 800e514:	e6a2      	b.n	800e25c <_printf_float+0x9c>
 800e516:	2301      	movs	r3, #1
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	9204      	str	r2, [sp, #16]
 800e51e:	47b8      	blx	r7
 800e520:	3001      	adds	r0, #1
 800e522:	f43f ae9b 	beq.w	800e25c <_printf_float+0x9c>
 800e526:	9b05      	ldr	r3, [sp, #20]
 800e528:	9a04      	ldr	r2, [sp, #16]
 800e52a:	3301      	adds	r3, #1
 800e52c:	9305      	str	r3, [sp, #20]
 800e52e:	e7b7      	b.n	800e4a0 <_printf_float+0x2e0>
 800e530:	4653      	mov	r3, sl
 800e532:	465a      	mov	r2, fp
 800e534:	4631      	mov	r1, r6
 800e536:	4628      	mov	r0, r5
 800e538:	47b8      	blx	r7
 800e53a:	3001      	adds	r0, #1
 800e53c:	d1be      	bne.n	800e4bc <_printf_float+0x2fc>
 800e53e:	e68d      	b.n	800e25c <_printf_float+0x9c>
 800e540:	9a04      	ldr	r2, [sp, #16]
 800e542:	464b      	mov	r3, r9
 800e544:	4442      	add	r2, r8
 800e546:	4631      	mov	r1, r6
 800e548:	4628      	mov	r0, r5
 800e54a:	47b8      	blx	r7
 800e54c:	3001      	adds	r0, #1
 800e54e:	d1c1      	bne.n	800e4d4 <_printf_float+0x314>
 800e550:	e684      	b.n	800e25c <_printf_float+0x9c>
 800e552:	9a08      	ldr	r2, [sp, #32]
 800e554:	2a01      	cmp	r2, #1
 800e556:	dc01      	bgt.n	800e55c <_printf_float+0x39c>
 800e558:	07db      	lsls	r3, r3, #31
 800e55a:	d537      	bpl.n	800e5cc <_printf_float+0x40c>
 800e55c:	2301      	movs	r3, #1
 800e55e:	4642      	mov	r2, r8
 800e560:	4631      	mov	r1, r6
 800e562:	4628      	mov	r0, r5
 800e564:	47b8      	blx	r7
 800e566:	3001      	adds	r0, #1
 800e568:	f43f ae78 	beq.w	800e25c <_printf_float+0x9c>
 800e56c:	4653      	mov	r3, sl
 800e56e:	465a      	mov	r2, fp
 800e570:	4631      	mov	r1, r6
 800e572:	4628      	mov	r0, r5
 800e574:	47b8      	blx	r7
 800e576:	3001      	adds	r0, #1
 800e578:	f43f ae70 	beq.w	800e25c <_printf_float+0x9c>
 800e57c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e580:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e588:	d01b      	beq.n	800e5c2 <_printf_float+0x402>
 800e58a:	9b08      	ldr	r3, [sp, #32]
 800e58c:	f108 0201 	add.w	r2, r8, #1
 800e590:	3b01      	subs	r3, #1
 800e592:	4631      	mov	r1, r6
 800e594:	4628      	mov	r0, r5
 800e596:	47b8      	blx	r7
 800e598:	3001      	adds	r0, #1
 800e59a:	d10e      	bne.n	800e5ba <_printf_float+0x3fa>
 800e59c:	e65e      	b.n	800e25c <_printf_float+0x9c>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	464a      	mov	r2, r9
 800e5a2:	4631      	mov	r1, r6
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	47b8      	blx	r7
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	f43f ae57 	beq.w	800e25c <_printf_float+0x9c>
 800e5ae:	f108 0801 	add.w	r8, r8, #1
 800e5b2:	9b08      	ldr	r3, [sp, #32]
 800e5b4:	3b01      	subs	r3, #1
 800e5b6:	4543      	cmp	r3, r8
 800e5b8:	dcf1      	bgt.n	800e59e <_printf_float+0x3de>
 800e5ba:	9b04      	ldr	r3, [sp, #16]
 800e5bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e5c0:	e6db      	b.n	800e37a <_printf_float+0x1ba>
 800e5c2:	f04f 0800 	mov.w	r8, #0
 800e5c6:	f104 091a 	add.w	r9, r4, #26
 800e5ca:	e7f2      	b.n	800e5b2 <_printf_float+0x3f2>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	4642      	mov	r2, r8
 800e5d0:	e7df      	b.n	800e592 <_printf_float+0x3d2>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	464a      	mov	r2, r9
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	4628      	mov	r0, r5
 800e5da:	47b8      	blx	r7
 800e5dc:	3001      	adds	r0, #1
 800e5de:	f43f ae3d 	beq.w	800e25c <_printf_float+0x9c>
 800e5e2:	f108 0801 	add.w	r8, r8, #1
 800e5e6:	68e3      	ldr	r3, [r4, #12]
 800e5e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5ea:	1a5b      	subs	r3, r3, r1
 800e5ec:	4543      	cmp	r3, r8
 800e5ee:	dcf0      	bgt.n	800e5d2 <_printf_float+0x412>
 800e5f0:	e6f7      	b.n	800e3e2 <_printf_float+0x222>
 800e5f2:	f04f 0800 	mov.w	r8, #0
 800e5f6:	f104 0919 	add.w	r9, r4, #25
 800e5fa:	e7f4      	b.n	800e5e6 <_printf_float+0x426>

0800e5fc <_printf_common>:
 800e5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e600:	4616      	mov	r6, r2
 800e602:	4699      	mov	r9, r3
 800e604:	688a      	ldr	r2, [r1, #8]
 800e606:	690b      	ldr	r3, [r1, #16]
 800e608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e60c:	4293      	cmp	r3, r2
 800e60e:	bfb8      	it	lt
 800e610:	4613      	movlt	r3, r2
 800e612:	6033      	str	r3, [r6, #0]
 800e614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e618:	4607      	mov	r7, r0
 800e61a:	460c      	mov	r4, r1
 800e61c:	b10a      	cbz	r2, 800e622 <_printf_common+0x26>
 800e61e:	3301      	adds	r3, #1
 800e620:	6033      	str	r3, [r6, #0]
 800e622:	6823      	ldr	r3, [r4, #0]
 800e624:	0699      	lsls	r1, r3, #26
 800e626:	bf42      	ittt	mi
 800e628:	6833      	ldrmi	r3, [r6, #0]
 800e62a:	3302      	addmi	r3, #2
 800e62c:	6033      	strmi	r3, [r6, #0]
 800e62e:	6825      	ldr	r5, [r4, #0]
 800e630:	f015 0506 	ands.w	r5, r5, #6
 800e634:	d106      	bne.n	800e644 <_printf_common+0x48>
 800e636:	f104 0a19 	add.w	sl, r4, #25
 800e63a:	68e3      	ldr	r3, [r4, #12]
 800e63c:	6832      	ldr	r2, [r6, #0]
 800e63e:	1a9b      	subs	r3, r3, r2
 800e640:	42ab      	cmp	r3, r5
 800e642:	dc26      	bgt.n	800e692 <_printf_common+0x96>
 800e644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e648:	1e13      	subs	r3, r2, #0
 800e64a:	6822      	ldr	r2, [r4, #0]
 800e64c:	bf18      	it	ne
 800e64e:	2301      	movne	r3, #1
 800e650:	0692      	lsls	r2, r2, #26
 800e652:	d42b      	bmi.n	800e6ac <_printf_common+0xb0>
 800e654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e658:	4649      	mov	r1, r9
 800e65a:	4638      	mov	r0, r7
 800e65c:	47c0      	blx	r8
 800e65e:	3001      	adds	r0, #1
 800e660:	d01e      	beq.n	800e6a0 <_printf_common+0xa4>
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	68e5      	ldr	r5, [r4, #12]
 800e666:	6832      	ldr	r2, [r6, #0]
 800e668:	f003 0306 	and.w	r3, r3, #6
 800e66c:	2b04      	cmp	r3, #4
 800e66e:	bf08      	it	eq
 800e670:	1aad      	subeq	r5, r5, r2
 800e672:	68a3      	ldr	r3, [r4, #8]
 800e674:	6922      	ldr	r2, [r4, #16]
 800e676:	bf0c      	ite	eq
 800e678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e67c:	2500      	movne	r5, #0
 800e67e:	4293      	cmp	r3, r2
 800e680:	bfc4      	itt	gt
 800e682:	1a9b      	subgt	r3, r3, r2
 800e684:	18ed      	addgt	r5, r5, r3
 800e686:	2600      	movs	r6, #0
 800e688:	341a      	adds	r4, #26
 800e68a:	42b5      	cmp	r5, r6
 800e68c:	d11a      	bne.n	800e6c4 <_printf_common+0xc8>
 800e68e:	2000      	movs	r0, #0
 800e690:	e008      	b.n	800e6a4 <_printf_common+0xa8>
 800e692:	2301      	movs	r3, #1
 800e694:	4652      	mov	r2, sl
 800e696:	4649      	mov	r1, r9
 800e698:	4638      	mov	r0, r7
 800e69a:	47c0      	blx	r8
 800e69c:	3001      	adds	r0, #1
 800e69e:	d103      	bne.n	800e6a8 <_printf_common+0xac>
 800e6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a8:	3501      	adds	r5, #1
 800e6aa:	e7c6      	b.n	800e63a <_printf_common+0x3e>
 800e6ac:	18e1      	adds	r1, r4, r3
 800e6ae:	1c5a      	adds	r2, r3, #1
 800e6b0:	2030      	movs	r0, #48	; 0x30
 800e6b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6b6:	4422      	add	r2, r4
 800e6b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6c0:	3302      	adds	r3, #2
 800e6c2:	e7c7      	b.n	800e654 <_printf_common+0x58>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	4622      	mov	r2, r4
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	47c0      	blx	r8
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	d0e6      	beq.n	800e6a0 <_printf_common+0xa4>
 800e6d2:	3601      	adds	r6, #1
 800e6d4:	e7d9      	b.n	800e68a <_printf_common+0x8e>
	...

0800e6d8 <_printf_i>:
 800e6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6dc:	7e0f      	ldrb	r7, [r1, #24]
 800e6de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e6e0:	2f78      	cmp	r7, #120	; 0x78
 800e6e2:	4691      	mov	r9, r2
 800e6e4:	4680      	mov	r8, r0
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	469a      	mov	sl, r3
 800e6ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e6ee:	d807      	bhi.n	800e700 <_printf_i+0x28>
 800e6f0:	2f62      	cmp	r7, #98	; 0x62
 800e6f2:	d80a      	bhi.n	800e70a <_printf_i+0x32>
 800e6f4:	2f00      	cmp	r7, #0
 800e6f6:	f000 80d8 	beq.w	800e8aa <_printf_i+0x1d2>
 800e6fa:	2f58      	cmp	r7, #88	; 0x58
 800e6fc:	f000 80a3 	beq.w	800e846 <_printf_i+0x16e>
 800e700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e708:	e03a      	b.n	800e780 <_printf_i+0xa8>
 800e70a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e70e:	2b15      	cmp	r3, #21
 800e710:	d8f6      	bhi.n	800e700 <_printf_i+0x28>
 800e712:	a101      	add	r1, pc, #4	; (adr r1, 800e718 <_printf_i+0x40>)
 800e714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e718:	0800e771 	.word	0x0800e771
 800e71c:	0800e785 	.word	0x0800e785
 800e720:	0800e701 	.word	0x0800e701
 800e724:	0800e701 	.word	0x0800e701
 800e728:	0800e701 	.word	0x0800e701
 800e72c:	0800e701 	.word	0x0800e701
 800e730:	0800e785 	.word	0x0800e785
 800e734:	0800e701 	.word	0x0800e701
 800e738:	0800e701 	.word	0x0800e701
 800e73c:	0800e701 	.word	0x0800e701
 800e740:	0800e701 	.word	0x0800e701
 800e744:	0800e891 	.word	0x0800e891
 800e748:	0800e7b5 	.word	0x0800e7b5
 800e74c:	0800e873 	.word	0x0800e873
 800e750:	0800e701 	.word	0x0800e701
 800e754:	0800e701 	.word	0x0800e701
 800e758:	0800e8b3 	.word	0x0800e8b3
 800e75c:	0800e701 	.word	0x0800e701
 800e760:	0800e7b5 	.word	0x0800e7b5
 800e764:	0800e701 	.word	0x0800e701
 800e768:	0800e701 	.word	0x0800e701
 800e76c:	0800e87b 	.word	0x0800e87b
 800e770:	682b      	ldr	r3, [r5, #0]
 800e772:	1d1a      	adds	r2, r3, #4
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	602a      	str	r2, [r5, #0]
 800e778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e77c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e780:	2301      	movs	r3, #1
 800e782:	e0a3      	b.n	800e8cc <_printf_i+0x1f4>
 800e784:	6820      	ldr	r0, [r4, #0]
 800e786:	6829      	ldr	r1, [r5, #0]
 800e788:	0606      	lsls	r6, r0, #24
 800e78a:	f101 0304 	add.w	r3, r1, #4
 800e78e:	d50a      	bpl.n	800e7a6 <_printf_i+0xce>
 800e790:	680e      	ldr	r6, [r1, #0]
 800e792:	602b      	str	r3, [r5, #0]
 800e794:	2e00      	cmp	r6, #0
 800e796:	da03      	bge.n	800e7a0 <_printf_i+0xc8>
 800e798:	232d      	movs	r3, #45	; 0x2d
 800e79a:	4276      	negs	r6, r6
 800e79c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7a0:	485e      	ldr	r0, [pc, #376]	; (800e91c <_printf_i+0x244>)
 800e7a2:	230a      	movs	r3, #10
 800e7a4:	e019      	b.n	800e7da <_printf_i+0x102>
 800e7a6:	680e      	ldr	r6, [r1, #0]
 800e7a8:	602b      	str	r3, [r5, #0]
 800e7aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e7ae:	bf18      	it	ne
 800e7b0:	b236      	sxthne	r6, r6
 800e7b2:	e7ef      	b.n	800e794 <_printf_i+0xbc>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	6820      	ldr	r0, [r4, #0]
 800e7b8:	1d19      	adds	r1, r3, #4
 800e7ba:	6029      	str	r1, [r5, #0]
 800e7bc:	0601      	lsls	r1, r0, #24
 800e7be:	d501      	bpl.n	800e7c4 <_printf_i+0xec>
 800e7c0:	681e      	ldr	r6, [r3, #0]
 800e7c2:	e002      	b.n	800e7ca <_printf_i+0xf2>
 800e7c4:	0646      	lsls	r6, r0, #25
 800e7c6:	d5fb      	bpl.n	800e7c0 <_printf_i+0xe8>
 800e7c8:	881e      	ldrh	r6, [r3, #0]
 800e7ca:	4854      	ldr	r0, [pc, #336]	; (800e91c <_printf_i+0x244>)
 800e7cc:	2f6f      	cmp	r7, #111	; 0x6f
 800e7ce:	bf0c      	ite	eq
 800e7d0:	2308      	moveq	r3, #8
 800e7d2:	230a      	movne	r3, #10
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7da:	6865      	ldr	r5, [r4, #4]
 800e7dc:	60a5      	str	r5, [r4, #8]
 800e7de:	2d00      	cmp	r5, #0
 800e7e0:	bfa2      	ittt	ge
 800e7e2:	6821      	ldrge	r1, [r4, #0]
 800e7e4:	f021 0104 	bicge.w	r1, r1, #4
 800e7e8:	6021      	strge	r1, [r4, #0]
 800e7ea:	b90e      	cbnz	r6, 800e7f0 <_printf_i+0x118>
 800e7ec:	2d00      	cmp	r5, #0
 800e7ee:	d04d      	beq.n	800e88c <_printf_i+0x1b4>
 800e7f0:	4615      	mov	r5, r2
 800e7f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7f6:	fb03 6711 	mls	r7, r3, r1, r6
 800e7fa:	5dc7      	ldrb	r7, [r0, r7]
 800e7fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e800:	4637      	mov	r7, r6
 800e802:	42bb      	cmp	r3, r7
 800e804:	460e      	mov	r6, r1
 800e806:	d9f4      	bls.n	800e7f2 <_printf_i+0x11a>
 800e808:	2b08      	cmp	r3, #8
 800e80a:	d10b      	bne.n	800e824 <_printf_i+0x14c>
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	07de      	lsls	r6, r3, #31
 800e810:	d508      	bpl.n	800e824 <_printf_i+0x14c>
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	6861      	ldr	r1, [r4, #4]
 800e816:	4299      	cmp	r1, r3
 800e818:	bfde      	ittt	le
 800e81a:	2330      	movle	r3, #48	; 0x30
 800e81c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e820:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e824:	1b52      	subs	r2, r2, r5
 800e826:	6122      	str	r2, [r4, #16]
 800e828:	f8cd a000 	str.w	sl, [sp]
 800e82c:	464b      	mov	r3, r9
 800e82e:	aa03      	add	r2, sp, #12
 800e830:	4621      	mov	r1, r4
 800e832:	4640      	mov	r0, r8
 800e834:	f7ff fee2 	bl	800e5fc <_printf_common>
 800e838:	3001      	adds	r0, #1
 800e83a:	d14c      	bne.n	800e8d6 <_printf_i+0x1fe>
 800e83c:	f04f 30ff 	mov.w	r0, #4294967295
 800e840:	b004      	add	sp, #16
 800e842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e846:	4835      	ldr	r0, [pc, #212]	; (800e91c <_printf_i+0x244>)
 800e848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e84c:	6829      	ldr	r1, [r5, #0]
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	f851 6b04 	ldr.w	r6, [r1], #4
 800e854:	6029      	str	r1, [r5, #0]
 800e856:	061d      	lsls	r5, r3, #24
 800e858:	d514      	bpl.n	800e884 <_printf_i+0x1ac>
 800e85a:	07df      	lsls	r7, r3, #31
 800e85c:	bf44      	itt	mi
 800e85e:	f043 0320 	orrmi.w	r3, r3, #32
 800e862:	6023      	strmi	r3, [r4, #0]
 800e864:	b91e      	cbnz	r6, 800e86e <_printf_i+0x196>
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	f023 0320 	bic.w	r3, r3, #32
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	2310      	movs	r3, #16
 800e870:	e7b0      	b.n	800e7d4 <_printf_i+0xfc>
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	f043 0320 	orr.w	r3, r3, #32
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	2378      	movs	r3, #120	; 0x78
 800e87c:	4828      	ldr	r0, [pc, #160]	; (800e920 <_printf_i+0x248>)
 800e87e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e882:	e7e3      	b.n	800e84c <_printf_i+0x174>
 800e884:	0659      	lsls	r1, r3, #25
 800e886:	bf48      	it	mi
 800e888:	b2b6      	uxthmi	r6, r6
 800e88a:	e7e6      	b.n	800e85a <_printf_i+0x182>
 800e88c:	4615      	mov	r5, r2
 800e88e:	e7bb      	b.n	800e808 <_printf_i+0x130>
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	6826      	ldr	r6, [r4, #0]
 800e894:	6961      	ldr	r1, [r4, #20]
 800e896:	1d18      	adds	r0, r3, #4
 800e898:	6028      	str	r0, [r5, #0]
 800e89a:	0635      	lsls	r5, r6, #24
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	d501      	bpl.n	800e8a4 <_printf_i+0x1cc>
 800e8a0:	6019      	str	r1, [r3, #0]
 800e8a2:	e002      	b.n	800e8aa <_printf_i+0x1d2>
 800e8a4:	0670      	lsls	r0, r6, #25
 800e8a6:	d5fb      	bpl.n	800e8a0 <_printf_i+0x1c8>
 800e8a8:	8019      	strh	r1, [r3, #0]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	6123      	str	r3, [r4, #16]
 800e8ae:	4615      	mov	r5, r2
 800e8b0:	e7ba      	b.n	800e828 <_printf_i+0x150>
 800e8b2:	682b      	ldr	r3, [r5, #0]
 800e8b4:	1d1a      	adds	r2, r3, #4
 800e8b6:	602a      	str	r2, [r5, #0]
 800e8b8:	681d      	ldr	r5, [r3, #0]
 800e8ba:	6862      	ldr	r2, [r4, #4]
 800e8bc:	2100      	movs	r1, #0
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f7f1 fd16 	bl	80002f0 <memchr>
 800e8c4:	b108      	cbz	r0, 800e8ca <_printf_i+0x1f2>
 800e8c6:	1b40      	subs	r0, r0, r5
 800e8c8:	6060      	str	r0, [r4, #4]
 800e8ca:	6863      	ldr	r3, [r4, #4]
 800e8cc:	6123      	str	r3, [r4, #16]
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8d4:	e7a8      	b.n	800e828 <_printf_i+0x150>
 800e8d6:	6923      	ldr	r3, [r4, #16]
 800e8d8:	462a      	mov	r2, r5
 800e8da:	4649      	mov	r1, r9
 800e8dc:	4640      	mov	r0, r8
 800e8de:	47d0      	blx	sl
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d0ab      	beq.n	800e83c <_printf_i+0x164>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	079b      	lsls	r3, r3, #30
 800e8e8:	d413      	bmi.n	800e912 <_printf_i+0x23a>
 800e8ea:	68e0      	ldr	r0, [r4, #12]
 800e8ec:	9b03      	ldr	r3, [sp, #12]
 800e8ee:	4298      	cmp	r0, r3
 800e8f0:	bfb8      	it	lt
 800e8f2:	4618      	movlt	r0, r3
 800e8f4:	e7a4      	b.n	800e840 <_printf_i+0x168>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	4649      	mov	r1, r9
 800e8fc:	4640      	mov	r0, r8
 800e8fe:	47d0      	blx	sl
 800e900:	3001      	adds	r0, #1
 800e902:	d09b      	beq.n	800e83c <_printf_i+0x164>
 800e904:	3501      	adds	r5, #1
 800e906:	68e3      	ldr	r3, [r4, #12]
 800e908:	9903      	ldr	r1, [sp, #12]
 800e90a:	1a5b      	subs	r3, r3, r1
 800e90c:	42ab      	cmp	r3, r5
 800e90e:	dcf2      	bgt.n	800e8f6 <_printf_i+0x21e>
 800e910:	e7eb      	b.n	800e8ea <_printf_i+0x212>
 800e912:	2500      	movs	r5, #0
 800e914:	f104 0619 	add.w	r6, r4, #25
 800e918:	e7f5      	b.n	800e906 <_printf_i+0x22e>
 800e91a:	bf00      	nop
 800e91c:	08014148 	.word	0x08014148
 800e920:	08014159 	.word	0x08014159

0800e924 <_scanf_float>:
 800e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e928:	b087      	sub	sp, #28
 800e92a:	4617      	mov	r7, r2
 800e92c:	9303      	str	r3, [sp, #12]
 800e92e:	688b      	ldr	r3, [r1, #8]
 800e930:	1e5a      	subs	r2, r3, #1
 800e932:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e936:	bf83      	ittte	hi
 800e938:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e93c:	195b      	addhi	r3, r3, r5
 800e93e:	9302      	strhi	r3, [sp, #8]
 800e940:	2300      	movls	r3, #0
 800e942:	bf86      	itte	hi
 800e944:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e948:	608b      	strhi	r3, [r1, #8]
 800e94a:	9302      	strls	r3, [sp, #8]
 800e94c:	680b      	ldr	r3, [r1, #0]
 800e94e:	468b      	mov	fp, r1
 800e950:	2500      	movs	r5, #0
 800e952:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e956:	f84b 3b1c 	str.w	r3, [fp], #28
 800e95a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e95e:	4680      	mov	r8, r0
 800e960:	460c      	mov	r4, r1
 800e962:	465e      	mov	r6, fp
 800e964:	46aa      	mov	sl, r5
 800e966:	46a9      	mov	r9, r5
 800e968:	9501      	str	r5, [sp, #4]
 800e96a:	68a2      	ldr	r2, [r4, #8]
 800e96c:	b152      	cbz	r2, 800e984 <_scanf_float+0x60>
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	2b4e      	cmp	r3, #78	; 0x4e
 800e974:	d864      	bhi.n	800ea40 <_scanf_float+0x11c>
 800e976:	2b40      	cmp	r3, #64	; 0x40
 800e978:	d83c      	bhi.n	800e9f4 <_scanf_float+0xd0>
 800e97a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e97e:	b2c8      	uxtb	r0, r1
 800e980:	280e      	cmp	r0, #14
 800e982:	d93a      	bls.n	800e9fa <_scanf_float+0xd6>
 800e984:	f1b9 0f00 	cmp.w	r9, #0
 800e988:	d003      	beq.n	800e992 <_scanf_float+0x6e>
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e990:	6023      	str	r3, [r4, #0]
 800e992:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e996:	f1ba 0f01 	cmp.w	sl, #1
 800e99a:	f200 8113 	bhi.w	800ebc4 <_scanf_float+0x2a0>
 800e99e:	455e      	cmp	r6, fp
 800e9a0:	f200 8105 	bhi.w	800ebae <_scanf_float+0x28a>
 800e9a4:	2501      	movs	r5, #1
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	b007      	add	sp, #28
 800e9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e9b2:	2a0d      	cmp	r2, #13
 800e9b4:	d8e6      	bhi.n	800e984 <_scanf_float+0x60>
 800e9b6:	a101      	add	r1, pc, #4	; (adr r1, 800e9bc <_scanf_float+0x98>)
 800e9b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e9bc:	0800eafb 	.word	0x0800eafb
 800e9c0:	0800e985 	.word	0x0800e985
 800e9c4:	0800e985 	.word	0x0800e985
 800e9c8:	0800e985 	.word	0x0800e985
 800e9cc:	0800eb5b 	.word	0x0800eb5b
 800e9d0:	0800eb33 	.word	0x0800eb33
 800e9d4:	0800e985 	.word	0x0800e985
 800e9d8:	0800e985 	.word	0x0800e985
 800e9dc:	0800eb09 	.word	0x0800eb09
 800e9e0:	0800e985 	.word	0x0800e985
 800e9e4:	0800e985 	.word	0x0800e985
 800e9e8:	0800e985 	.word	0x0800e985
 800e9ec:	0800e985 	.word	0x0800e985
 800e9f0:	0800eac1 	.word	0x0800eac1
 800e9f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e9f8:	e7db      	b.n	800e9b2 <_scanf_float+0x8e>
 800e9fa:	290e      	cmp	r1, #14
 800e9fc:	d8c2      	bhi.n	800e984 <_scanf_float+0x60>
 800e9fe:	a001      	add	r0, pc, #4	; (adr r0, 800ea04 <_scanf_float+0xe0>)
 800ea00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ea04:	0800eab3 	.word	0x0800eab3
 800ea08:	0800e985 	.word	0x0800e985
 800ea0c:	0800eab3 	.word	0x0800eab3
 800ea10:	0800eb47 	.word	0x0800eb47
 800ea14:	0800e985 	.word	0x0800e985
 800ea18:	0800ea61 	.word	0x0800ea61
 800ea1c:	0800ea9d 	.word	0x0800ea9d
 800ea20:	0800ea9d 	.word	0x0800ea9d
 800ea24:	0800ea9d 	.word	0x0800ea9d
 800ea28:	0800ea9d 	.word	0x0800ea9d
 800ea2c:	0800ea9d 	.word	0x0800ea9d
 800ea30:	0800ea9d 	.word	0x0800ea9d
 800ea34:	0800ea9d 	.word	0x0800ea9d
 800ea38:	0800ea9d 	.word	0x0800ea9d
 800ea3c:	0800ea9d 	.word	0x0800ea9d
 800ea40:	2b6e      	cmp	r3, #110	; 0x6e
 800ea42:	d809      	bhi.n	800ea58 <_scanf_float+0x134>
 800ea44:	2b60      	cmp	r3, #96	; 0x60
 800ea46:	d8b2      	bhi.n	800e9ae <_scanf_float+0x8a>
 800ea48:	2b54      	cmp	r3, #84	; 0x54
 800ea4a:	d077      	beq.n	800eb3c <_scanf_float+0x218>
 800ea4c:	2b59      	cmp	r3, #89	; 0x59
 800ea4e:	d199      	bne.n	800e984 <_scanf_float+0x60>
 800ea50:	2d07      	cmp	r5, #7
 800ea52:	d197      	bne.n	800e984 <_scanf_float+0x60>
 800ea54:	2508      	movs	r5, #8
 800ea56:	e029      	b.n	800eaac <_scanf_float+0x188>
 800ea58:	2b74      	cmp	r3, #116	; 0x74
 800ea5a:	d06f      	beq.n	800eb3c <_scanf_float+0x218>
 800ea5c:	2b79      	cmp	r3, #121	; 0x79
 800ea5e:	e7f6      	b.n	800ea4e <_scanf_float+0x12a>
 800ea60:	6821      	ldr	r1, [r4, #0]
 800ea62:	05c8      	lsls	r0, r1, #23
 800ea64:	d51a      	bpl.n	800ea9c <_scanf_float+0x178>
 800ea66:	9b02      	ldr	r3, [sp, #8]
 800ea68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ea6c:	6021      	str	r1, [r4, #0]
 800ea6e:	f109 0901 	add.w	r9, r9, #1
 800ea72:	b11b      	cbz	r3, 800ea7c <_scanf_float+0x158>
 800ea74:	3b01      	subs	r3, #1
 800ea76:	3201      	adds	r2, #1
 800ea78:	9302      	str	r3, [sp, #8]
 800ea7a:	60a2      	str	r2, [r4, #8]
 800ea7c:	68a3      	ldr	r3, [r4, #8]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	60a3      	str	r3, [r4, #8]
 800ea82:	6923      	ldr	r3, [r4, #16]
 800ea84:	3301      	adds	r3, #1
 800ea86:	6123      	str	r3, [r4, #16]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	607b      	str	r3, [r7, #4]
 800ea90:	f340 8084 	ble.w	800eb9c <_scanf_float+0x278>
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	3301      	adds	r3, #1
 800ea98:	603b      	str	r3, [r7, #0]
 800ea9a:	e766      	b.n	800e96a <_scanf_float+0x46>
 800ea9c:	eb1a 0f05 	cmn.w	sl, r5
 800eaa0:	f47f af70 	bne.w	800e984 <_scanf_float+0x60>
 800eaa4:	6822      	ldr	r2, [r4, #0]
 800eaa6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eaaa:	6022      	str	r2, [r4, #0]
 800eaac:	f806 3b01 	strb.w	r3, [r6], #1
 800eab0:	e7e4      	b.n	800ea7c <_scanf_float+0x158>
 800eab2:	6822      	ldr	r2, [r4, #0]
 800eab4:	0610      	lsls	r0, r2, #24
 800eab6:	f57f af65 	bpl.w	800e984 <_scanf_float+0x60>
 800eaba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eabe:	e7f4      	b.n	800eaaa <_scanf_float+0x186>
 800eac0:	f1ba 0f00 	cmp.w	sl, #0
 800eac4:	d10e      	bne.n	800eae4 <_scanf_float+0x1c0>
 800eac6:	f1b9 0f00 	cmp.w	r9, #0
 800eaca:	d10e      	bne.n	800eaea <_scanf_float+0x1c6>
 800eacc:	6822      	ldr	r2, [r4, #0]
 800eace:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ead2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ead6:	d108      	bne.n	800eaea <_scanf_float+0x1c6>
 800ead8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eadc:	6022      	str	r2, [r4, #0]
 800eade:	f04f 0a01 	mov.w	sl, #1
 800eae2:	e7e3      	b.n	800eaac <_scanf_float+0x188>
 800eae4:	f1ba 0f02 	cmp.w	sl, #2
 800eae8:	d055      	beq.n	800eb96 <_scanf_float+0x272>
 800eaea:	2d01      	cmp	r5, #1
 800eaec:	d002      	beq.n	800eaf4 <_scanf_float+0x1d0>
 800eaee:	2d04      	cmp	r5, #4
 800eaf0:	f47f af48 	bne.w	800e984 <_scanf_float+0x60>
 800eaf4:	3501      	adds	r5, #1
 800eaf6:	b2ed      	uxtb	r5, r5
 800eaf8:	e7d8      	b.n	800eaac <_scanf_float+0x188>
 800eafa:	f1ba 0f01 	cmp.w	sl, #1
 800eafe:	f47f af41 	bne.w	800e984 <_scanf_float+0x60>
 800eb02:	f04f 0a02 	mov.w	sl, #2
 800eb06:	e7d1      	b.n	800eaac <_scanf_float+0x188>
 800eb08:	b97d      	cbnz	r5, 800eb2a <_scanf_float+0x206>
 800eb0a:	f1b9 0f00 	cmp.w	r9, #0
 800eb0e:	f47f af3c 	bne.w	800e98a <_scanf_float+0x66>
 800eb12:	6822      	ldr	r2, [r4, #0]
 800eb14:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eb18:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eb1c:	f47f af39 	bne.w	800e992 <_scanf_float+0x6e>
 800eb20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb24:	6022      	str	r2, [r4, #0]
 800eb26:	2501      	movs	r5, #1
 800eb28:	e7c0      	b.n	800eaac <_scanf_float+0x188>
 800eb2a:	2d03      	cmp	r5, #3
 800eb2c:	d0e2      	beq.n	800eaf4 <_scanf_float+0x1d0>
 800eb2e:	2d05      	cmp	r5, #5
 800eb30:	e7de      	b.n	800eaf0 <_scanf_float+0x1cc>
 800eb32:	2d02      	cmp	r5, #2
 800eb34:	f47f af26 	bne.w	800e984 <_scanf_float+0x60>
 800eb38:	2503      	movs	r5, #3
 800eb3a:	e7b7      	b.n	800eaac <_scanf_float+0x188>
 800eb3c:	2d06      	cmp	r5, #6
 800eb3e:	f47f af21 	bne.w	800e984 <_scanf_float+0x60>
 800eb42:	2507      	movs	r5, #7
 800eb44:	e7b2      	b.n	800eaac <_scanf_float+0x188>
 800eb46:	6822      	ldr	r2, [r4, #0]
 800eb48:	0591      	lsls	r1, r2, #22
 800eb4a:	f57f af1b 	bpl.w	800e984 <_scanf_float+0x60>
 800eb4e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800eb52:	6022      	str	r2, [r4, #0]
 800eb54:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb58:	e7a8      	b.n	800eaac <_scanf_float+0x188>
 800eb5a:	6822      	ldr	r2, [r4, #0]
 800eb5c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800eb60:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800eb64:	d006      	beq.n	800eb74 <_scanf_float+0x250>
 800eb66:	0550      	lsls	r0, r2, #21
 800eb68:	f57f af0c 	bpl.w	800e984 <_scanf_float+0x60>
 800eb6c:	f1b9 0f00 	cmp.w	r9, #0
 800eb70:	f43f af0f 	beq.w	800e992 <_scanf_float+0x6e>
 800eb74:	0591      	lsls	r1, r2, #22
 800eb76:	bf58      	it	pl
 800eb78:	9901      	ldrpl	r1, [sp, #4]
 800eb7a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb7e:	bf58      	it	pl
 800eb80:	eba9 0101 	subpl.w	r1, r9, r1
 800eb84:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800eb88:	bf58      	it	pl
 800eb8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eb8e:	6022      	str	r2, [r4, #0]
 800eb90:	f04f 0900 	mov.w	r9, #0
 800eb94:	e78a      	b.n	800eaac <_scanf_float+0x188>
 800eb96:	f04f 0a03 	mov.w	sl, #3
 800eb9a:	e787      	b.n	800eaac <_scanf_float+0x188>
 800eb9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800eba0:	4639      	mov	r1, r7
 800eba2:	4640      	mov	r0, r8
 800eba4:	4798      	blx	r3
 800eba6:	2800      	cmp	r0, #0
 800eba8:	f43f aedf 	beq.w	800e96a <_scanf_float+0x46>
 800ebac:	e6ea      	b.n	800e984 <_scanf_float+0x60>
 800ebae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebb6:	463a      	mov	r2, r7
 800ebb8:	4640      	mov	r0, r8
 800ebba:	4798      	blx	r3
 800ebbc:	6923      	ldr	r3, [r4, #16]
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	6123      	str	r3, [r4, #16]
 800ebc2:	e6ec      	b.n	800e99e <_scanf_float+0x7a>
 800ebc4:	1e6b      	subs	r3, r5, #1
 800ebc6:	2b06      	cmp	r3, #6
 800ebc8:	d825      	bhi.n	800ec16 <_scanf_float+0x2f2>
 800ebca:	2d02      	cmp	r5, #2
 800ebcc:	d836      	bhi.n	800ec3c <_scanf_float+0x318>
 800ebce:	455e      	cmp	r6, fp
 800ebd0:	f67f aee8 	bls.w	800e9a4 <_scanf_float+0x80>
 800ebd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebdc:	463a      	mov	r2, r7
 800ebde:	4640      	mov	r0, r8
 800ebe0:	4798      	blx	r3
 800ebe2:	6923      	ldr	r3, [r4, #16]
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	6123      	str	r3, [r4, #16]
 800ebe8:	e7f1      	b.n	800ebce <_scanf_float+0x2aa>
 800ebea:	9802      	ldr	r0, [sp, #8]
 800ebec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ebf0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ebf4:	9002      	str	r0, [sp, #8]
 800ebf6:	463a      	mov	r2, r7
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	4798      	blx	r3
 800ebfc:	6923      	ldr	r3, [r4, #16]
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	6123      	str	r3, [r4, #16]
 800ec02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec06:	fa5f fa8a 	uxtb.w	sl, sl
 800ec0a:	f1ba 0f02 	cmp.w	sl, #2
 800ec0e:	d1ec      	bne.n	800ebea <_scanf_float+0x2c6>
 800ec10:	3d03      	subs	r5, #3
 800ec12:	b2ed      	uxtb	r5, r5
 800ec14:	1b76      	subs	r6, r6, r5
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	05da      	lsls	r2, r3, #23
 800ec1a:	d52f      	bpl.n	800ec7c <_scanf_float+0x358>
 800ec1c:	055b      	lsls	r3, r3, #21
 800ec1e:	d510      	bpl.n	800ec42 <_scanf_float+0x31e>
 800ec20:	455e      	cmp	r6, fp
 800ec22:	f67f aebf 	bls.w	800e9a4 <_scanf_float+0x80>
 800ec26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec2e:	463a      	mov	r2, r7
 800ec30:	4640      	mov	r0, r8
 800ec32:	4798      	blx	r3
 800ec34:	6923      	ldr	r3, [r4, #16]
 800ec36:	3b01      	subs	r3, #1
 800ec38:	6123      	str	r3, [r4, #16]
 800ec3a:	e7f1      	b.n	800ec20 <_scanf_float+0x2fc>
 800ec3c:	46aa      	mov	sl, r5
 800ec3e:	9602      	str	r6, [sp, #8]
 800ec40:	e7df      	b.n	800ec02 <_scanf_float+0x2de>
 800ec42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ec46:	6923      	ldr	r3, [r4, #16]
 800ec48:	2965      	cmp	r1, #101	; 0x65
 800ec4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec4e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ec52:	6123      	str	r3, [r4, #16]
 800ec54:	d00c      	beq.n	800ec70 <_scanf_float+0x34c>
 800ec56:	2945      	cmp	r1, #69	; 0x45
 800ec58:	d00a      	beq.n	800ec70 <_scanf_float+0x34c>
 800ec5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec5e:	463a      	mov	r2, r7
 800ec60:	4640      	mov	r0, r8
 800ec62:	4798      	blx	r3
 800ec64:	6923      	ldr	r3, [r4, #16]
 800ec66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ec6a:	3b01      	subs	r3, #1
 800ec6c:	1eb5      	subs	r5, r6, #2
 800ec6e:	6123      	str	r3, [r4, #16]
 800ec70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec74:	463a      	mov	r2, r7
 800ec76:	4640      	mov	r0, r8
 800ec78:	4798      	blx	r3
 800ec7a:	462e      	mov	r6, r5
 800ec7c:	6825      	ldr	r5, [r4, #0]
 800ec7e:	f015 0510 	ands.w	r5, r5, #16
 800ec82:	d14e      	bne.n	800ed22 <_scanf_float+0x3fe>
 800ec84:	7035      	strb	r5, [r6, #0]
 800ec86:	6823      	ldr	r3, [r4, #0]
 800ec88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ec8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec90:	d119      	bne.n	800ecc6 <_scanf_float+0x3a2>
 800ec92:	9b01      	ldr	r3, [sp, #4]
 800ec94:	454b      	cmp	r3, r9
 800ec96:	eba3 0209 	sub.w	r2, r3, r9
 800ec9a:	d121      	bne.n	800ece0 <_scanf_float+0x3bc>
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	4659      	mov	r1, fp
 800eca0:	4640      	mov	r0, r8
 800eca2:	f000 fee3 	bl	800fa6c <_strtod_r>
 800eca6:	6822      	ldr	r2, [r4, #0]
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	f012 0f02 	tst.w	r2, #2
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	d021      	beq.n	800ecf6 <_scanf_float+0x3d2>
 800ecb2:	9903      	ldr	r1, [sp, #12]
 800ecb4:	1d1a      	adds	r2, r3, #4
 800ecb6:	600a      	str	r2, [r1, #0]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	ed83 0b00 	vstr	d0, [r3]
 800ecbe:	68e3      	ldr	r3, [r4, #12]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	60e3      	str	r3, [r4, #12]
 800ecc4:	e66f      	b.n	800e9a6 <_scanf_float+0x82>
 800ecc6:	9b04      	ldr	r3, [sp, #16]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d0e7      	beq.n	800ec9c <_scanf_float+0x378>
 800eccc:	9905      	ldr	r1, [sp, #20]
 800ecce:	230a      	movs	r3, #10
 800ecd0:	462a      	mov	r2, r5
 800ecd2:	3101      	adds	r1, #1
 800ecd4:	4640      	mov	r0, r8
 800ecd6:	f000 ff51 	bl	800fb7c <_strtol_r>
 800ecda:	9b04      	ldr	r3, [sp, #16]
 800ecdc:	9e05      	ldr	r6, [sp, #20]
 800ecde:	1ac2      	subs	r2, r0, r3
 800ece0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ece4:	429e      	cmp	r6, r3
 800ece6:	bf28      	it	cs
 800ece8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ecec:	490e      	ldr	r1, [pc, #56]	; (800ed28 <_scanf_float+0x404>)
 800ecee:	4630      	mov	r0, r6
 800ecf0:	f000 f858 	bl	800eda4 <siprintf>
 800ecf4:	e7d2      	b.n	800ec9c <_scanf_float+0x378>
 800ecf6:	9903      	ldr	r1, [sp, #12]
 800ecf8:	f012 0f04 	tst.w	r2, #4
 800ecfc:	f103 0204 	add.w	r2, r3, #4
 800ed00:	600a      	str	r2, [r1, #0]
 800ed02:	d1d9      	bne.n	800ecb8 <_scanf_float+0x394>
 800ed04:	eeb4 0b40 	vcmp.f64	d0, d0
 800ed08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0c:	681e      	ldr	r6, [r3, #0]
 800ed0e:	d705      	bvc.n	800ed1c <_scanf_float+0x3f8>
 800ed10:	4806      	ldr	r0, [pc, #24]	; (800ed2c <_scanf_float+0x408>)
 800ed12:	f000 f80d 	bl	800ed30 <nanf>
 800ed16:	ed86 0a00 	vstr	s0, [r6]
 800ed1a:	e7d0      	b.n	800ecbe <_scanf_float+0x39a>
 800ed1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ed20:	e7f9      	b.n	800ed16 <_scanf_float+0x3f2>
 800ed22:	2500      	movs	r5, #0
 800ed24:	e63f      	b.n	800e9a6 <_scanf_float+0x82>
 800ed26:	bf00      	nop
 800ed28:	0801416a 	.word	0x0801416a
 800ed2c:	0801458b 	.word	0x0801458b

0800ed30 <nanf>:
 800ed30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ed38 <nanf+0x8>
 800ed34:	4770      	bx	lr
 800ed36:	bf00      	nop
 800ed38:	7fc00000 	.word	0x7fc00000

0800ed3c <sniprintf>:
 800ed3c:	b40c      	push	{r2, r3}
 800ed3e:	b530      	push	{r4, r5, lr}
 800ed40:	4b17      	ldr	r3, [pc, #92]	; (800eda0 <sniprintf+0x64>)
 800ed42:	1e0c      	subs	r4, r1, #0
 800ed44:	681d      	ldr	r5, [r3, #0]
 800ed46:	b09d      	sub	sp, #116	; 0x74
 800ed48:	da08      	bge.n	800ed5c <sniprintf+0x20>
 800ed4a:	238b      	movs	r3, #139	; 0x8b
 800ed4c:	602b      	str	r3, [r5, #0]
 800ed4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed52:	b01d      	add	sp, #116	; 0x74
 800ed54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed58:	b002      	add	sp, #8
 800ed5a:	4770      	bx	lr
 800ed5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ed60:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ed64:	bf14      	ite	ne
 800ed66:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ed6a:	4623      	moveq	r3, r4
 800ed6c:	9304      	str	r3, [sp, #16]
 800ed6e:	9307      	str	r3, [sp, #28]
 800ed70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed74:	9002      	str	r0, [sp, #8]
 800ed76:	9006      	str	r0, [sp, #24]
 800ed78:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ed7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ed7e:	ab21      	add	r3, sp, #132	; 0x84
 800ed80:	a902      	add	r1, sp, #8
 800ed82:	4628      	mov	r0, r5
 800ed84:	9301      	str	r3, [sp, #4]
 800ed86:	f002 ff01 	bl	8011b8c <_svfiprintf_r>
 800ed8a:	1c43      	adds	r3, r0, #1
 800ed8c:	bfbc      	itt	lt
 800ed8e:	238b      	movlt	r3, #139	; 0x8b
 800ed90:	602b      	strlt	r3, [r5, #0]
 800ed92:	2c00      	cmp	r4, #0
 800ed94:	d0dd      	beq.n	800ed52 <sniprintf+0x16>
 800ed96:	9b02      	ldr	r3, [sp, #8]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	701a      	strb	r2, [r3, #0]
 800ed9c:	e7d9      	b.n	800ed52 <sniprintf+0x16>
 800ed9e:	bf00      	nop
 800eda0:	24000020 	.word	0x24000020

0800eda4 <siprintf>:
 800eda4:	b40e      	push	{r1, r2, r3}
 800eda6:	b500      	push	{lr}
 800eda8:	b09c      	sub	sp, #112	; 0x70
 800edaa:	ab1d      	add	r3, sp, #116	; 0x74
 800edac:	9002      	str	r0, [sp, #8]
 800edae:	9006      	str	r0, [sp, #24]
 800edb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800edb4:	4809      	ldr	r0, [pc, #36]	; (800eddc <siprintf+0x38>)
 800edb6:	9107      	str	r1, [sp, #28]
 800edb8:	9104      	str	r1, [sp, #16]
 800edba:	4909      	ldr	r1, [pc, #36]	; (800ede0 <siprintf+0x3c>)
 800edbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800edc0:	9105      	str	r1, [sp, #20]
 800edc2:	6800      	ldr	r0, [r0, #0]
 800edc4:	9301      	str	r3, [sp, #4]
 800edc6:	a902      	add	r1, sp, #8
 800edc8:	f002 fee0 	bl	8011b8c <_svfiprintf_r>
 800edcc:	9b02      	ldr	r3, [sp, #8]
 800edce:	2200      	movs	r2, #0
 800edd0:	701a      	strb	r2, [r3, #0]
 800edd2:	b01c      	add	sp, #112	; 0x70
 800edd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800edd8:	b003      	add	sp, #12
 800edda:	4770      	bx	lr
 800eddc:	24000020 	.word	0x24000020
 800ede0:	ffff0208 	.word	0xffff0208

0800ede4 <siscanf>:
 800ede4:	b40e      	push	{r1, r2, r3}
 800ede6:	b510      	push	{r4, lr}
 800ede8:	b09f      	sub	sp, #124	; 0x7c
 800edea:	ac21      	add	r4, sp, #132	; 0x84
 800edec:	f44f 7101 	mov.w	r1, #516	; 0x204
 800edf0:	f854 2b04 	ldr.w	r2, [r4], #4
 800edf4:	9201      	str	r2, [sp, #4]
 800edf6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800edfa:	9004      	str	r0, [sp, #16]
 800edfc:	9008      	str	r0, [sp, #32]
 800edfe:	f7f1 fa6f 	bl	80002e0 <strlen>
 800ee02:	4b0c      	ldr	r3, [pc, #48]	; (800ee34 <siscanf+0x50>)
 800ee04:	9005      	str	r0, [sp, #20]
 800ee06:	9009      	str	r0, [sp, #36]	; 0x24
 800ee08:	930d      	str	r3, [sp, #52]	; 0x34
 800ee0a:	480b      	ldr	r0, [pc, #44]	; (800ee38 <siscanf+0x54>)
 800ee0c:	9a01      	ldr	r2, [sp, #4]
 800ee0e:	6800      	ldr	r0, [r0, #0]
 800ee10:	9403      	str	r4, [sp, #12]
 800ee12:	2300      	movs	r3, #0
 800ee14:	9311      	str	r3, [sp, #68]	; 0x44
 800ee16:	9316      	str	r3, [sp, #88]	; 0x58
 800ee18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ee20:	a904      	add	r1, sp, #16
 800ee22:	4623      	mov	r3, r4
 800ee24:	f003 f80c 	bl	8011e40 <__ssvfiscanf_r>
 800ee28:	b01f      	add	sp, #124	; 0x7c
 800ee2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee2e:	b003      	add	sp, #12
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	0800ee5f 	.word	0x0800ee5f
 800ee38:	24000020 	.word	0x24000020

0800ee3c <__sread>:
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	460c      	mov	r4, r1
 800ee40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee44:	f003 fac6 	bl	80123d4 <_read_r>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	bfab      	itete	ge
 800ee4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee50:	181b      	addge	r3, r3, r0
 800ee52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee56:	bfac      	ite	ge
 800ee58:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee5a:	81a3      	strhlt	r3, [r4, #12]
 800ee5c:	bd10      	pop	{r4, pc}

0800ee5e <__seofread>:
 800ee5e:	2000      	movs	r0, #0
 800ee60:	4770      	bx	lr

0800ee62 <__swrite>:
 800ee62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee66:	461f      	mov	r7, r3
 800ee68:	898b      	ldrh	r3, [r1, #12]
 800ee6a:	05db      	lsls	r3, r3, #23
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	4616      	mov	r6, r2
 800ee72:	d505      	bpl.n	800ee80 <__swrite+0x1e>
 800ee74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee78:	2302      	movs	r3, #2
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f002 f84a 	bl	8010f14 <_lseek_r>
 800ee80:	89a3      	ldrh	r3, [r4, #12]
 800ee82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee8a:	81a3      	strh	r3, [r4, #12]
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	463b      	mov	r3, r7
 800ee90:	4628      	mov	r0, r5
 800ee92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee96:	f000 bead 	b.w	800fbf4 <_write_r>

0800ee9a <__sseek>:
 800ee9a:	b510      	push	{r4, lr}
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea2:	f002 f837 	bl	8010f14 <_lseek_r>
 800eea6:	1c43      	adds	r3, r0, #1
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	bf15      	itete	ne
 800eeac:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eeb6:	81a3      	strheq	r3, [r4, #12]
 800eeb8:	bf18      	it	ne
 800eeba:	81a3      	strhne	r3, [r4, #12]
 800eebc:	bd10      	pop	{r4, pc}

0800eebe <__sclose>:
 800eebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec2:	f000 bea9 	b.w	800fc18 <_close_r>

0800eec6 <sulp>:
 800eec6:	b570      	push	{r4, r5, r6, lr}
 800eec8:	4604      	mov	r4, r0
 800eeca:	460d      	mov	r5, r1
 800eecc:	4616      	mov	r6, r2
 800eece:	ec45 4b10 	vmov	d0, r4, r5
 800eed2:	f002 fbbd 	bl	8011650 <__ulp>
 800eed6:	b17e      	cbz	r6, 800eef8 <sulp+0x32>
 800eed8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eedc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	dd09      	ble.n	800eef8 <sulp+0x32>
 800eee4:	051b      	lsls	r3, r3, #20
 800eee6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800eeea:	2000      	movs	r0, #0
 800eeec:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800eef0:	ec41 0b17 	vmov	d7, r0, r1
 800eef4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eef8:	bd70      	pop	{r4, r5, r6, pc}
 800eefa:	0000      	movs	r0, r0
 800eefc:	0000      	movs	r0, r0
	...

0800ef00 <_strtod_l>:
 800ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef04:	ed2d 8b0e 	vpush	{d8-d14}
 800ef08:	b097      	sub	sp, #92	; 0x5c
 800ef0a:	461f      	mov	r7, r3
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9312      	str	r3, [sp, #72]	; 0x48
 800ef10:	4ba1      	ldr	r3, [pc, #644]	; (800f198 <_strtod_l+0x298>)
 800ef12:	920d      	str	r2, [sp, #52]	; 0x34
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	9307      	str	r3, [sp, #28]
 800ef18:	4604      	mov	r4, r0
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	468b      	mov	fp, r1
 800ef1e:	f7f1 f9df 	bl	80002e0 <strlen>
 800ef22:	f04f 0800 	mov.w	r8, #0
 800ef26:	4605      	mov	r5, r0
 800ef28:	f04f 0900 	mov.w	r9, #0
 800ef2c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ef30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef32:	7813      	ldrb	r3, [r2, #0]
 800ef34:	2b2b      	cmp	r3, #43	; 0x2b
 800ef36:	d04d      	beq.n	800efd4 <_strtod_l+0xd4>
 800ef38:	d83a      	bhi.n	800efb0 <_strtod_l+0xb0>
 800ef3a:	2b0d      	cmp	r3, #13
 800ef3c:	d833      	bhi.n	800efa6 <_strtod_l+0xa6>
 800ef3e:	2b08      	cmp	r3, #8
 800ef40:	d833      	bhi.n	800efaa <_strtod_l+0xaa>
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d03d      	beq.n	800efc2 <_strtod_l+0xc2>
 800ef46:	2300      	movs	r3, #0
 800ef48:	9308      	str	r3, [sp, #32]
 800ef4a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ef4c:	7833      	ldrb	r3, [r6, #0]
 800ef4e:	2b30      	cmp	r3, #48	; 0x30
 800ef50:	f040 80b0 	bne.w	800f0b4 <_strtod_l+0x1b4>
 800ef54:	7873      	ldrb	r3, [r6, #1]
 800ef56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef5a:	2b58      	cmp	r3, #88	; 0x58
 800ef5c:	d167      	bne.n	800f02e <_strtod_l+0x12e>
 800ef5e:	9b08      	ldr	r3, [sp, #32]
 800ef60:	9301      	str	r3, [sp, #4]
 800ef62:	ab12      	add	r3, sp, #72	; 0x48
 800ef64:	9702      	str	r7, [sp, #8]
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	4a8c      	ldr	r2, [pc, #560]	; (800f19c <_strtod_l+0x29c>)
 800ef6a:	ab13      	add	r3, sp, #76	; 0x4c
 800ef6c:	a911      	add	r1, sp, #68	; 0x44
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f001 fcc4 	bl	80108fc <__gethex>
 800ef74:	f010 0507 	ands.w	r5, r0, #7
 800ef78:	4607      	mov	r7, r0
 800ef7a:	d005      	beq.n	800ef88 <_strtod_l+0x88>
 800ef7c:	2d06      	cmp	r5, #6
 800ef7e:	d12b      	bne.n	800efd8 <_strtod_l+0xd8>
 800ef80:	3601      	adds	r6, #1
 800ef82:	2300      	movs	r3, #0
 800ef84:	9611      	str	r6, [sp, #68]	; 0x44
 800ef86:	9308      	str	r3, [sp, #32]
 800ef88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	f040 854e 	bne.w	800fa2c <_strtod_l+0xb2c>
 800ef90:	9b08      	ldr	r3, [sp, #32]
 800ef92:	b1e3      	cbz	r3, 800efce <_strtod_l+0xce>
 800ef94:	ec49 8b17 	vmov	d7, r8, r9
 800ef98:	eeb1 0b47 	vneg.f64	d0, d7
 800ef9c:	b017      	add	sp, #92	; 0x5c
 800ef9e:	ecbd 8b0e 	vpop	{d8-d14}
 800efa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa6:	2b20      	cmp	r3, #32
 800efa8:	d1cd      	bne.n	800ef46 <_strtod_l+0x46>
 800efaa:	3201      	adds	r2, #1
 800efac:	9211      	str	r2, [sp, #68]	; 0x44
 800efae:	e7bf      	b.n	800ef30 <_strtod_l+0x30>
 800efb0:	2b2d      	cmp	r3, #45	; 0x2d
 800efb2:	d1c8      	bne.n	800ef46 <_strtod_l+0x46>
 800efb4:	2301      	movs	r3, #1
 800efb6:	9308      	str	r3, [sp, #32]
 800efb8:	1c53      	adds	r3, r2, #1
 800efba:	9311      	str	r3, [sp, #68]	; 0x44
 800efbc:	7853      	ldrb	r3, [r2, #1]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1c3      	bne.n	800ef4a <_strtod_l+0x4a>
 800efc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efc4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f040 852d 	bne.w	800fa28 <_strtod_l+0xb28>
 800efce:	ec49 8b10 	vmov	d0, r8, r9
 800efd2:	e7e3      	b.n	800ef9c <_strtod_l+0x9c>
 800efd4:	2300      	movs	r3, #0
 800efd6:	e7ee      	b.n	800efb6 <_strtod_l+0xb6>
 800efd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800efda:	b13a      	cbz	r2, 800efec <_strtod_l+0xec>
 800efdc:	2135      	movs	r1, #53	; 0x35
 800efde:	a814      	add	r0, sp, #80	; 0x50
 800efe0:	f002 fc3e 	bl	8011860 <__copybits>
 800efe4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800efe6:	4620      	mov	r0, r4
 800efe8:	f002 f800 	bl	8010fec <_Bfree>
 800efec:	3d01      	subs	r5, #1
 800efee:	2d04      	cmp	r5, #4
 800eff0:	d806      	bhi.n	800f000 <_strtod_l+0x100>
 800eff2:	e8df f005 	tbb	[pc, r5]
 800eff6:	030a      	.short	0x030a
 800eff8:	1714      	.short	0x1714
 800effa:	0a          	.byte	0x0a
 800effb:	00          	.byte	0x00
 800effc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f000:	073f      	lsls	r7, r7, #28
 800f002:	d5c1      	bpl.n	800ef88 <_strtod_l+0x88>
 800f004:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f008:	e7be      	b.n	800ef88 <_strtod_l+0x88>
 800f00a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f00e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f010:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f014:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f018:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f01c:	e7f0      	b.n	800f000 <_strtod_l+0x100>
 800f01e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f1a0 <_strtod_l+0x2a0>
 800f022:	e7ed      	b.n	800f000 <_strtod_l+0x100>
 800f024:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f028:	f04f 38ff 	mov.w	r8, #4294967295
 800f02c:	e7e8      	b.n	800f000 <_strtod_l+0x100>
 800f02e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f030:	1c5a      	adds	r2, r3, #1
 800f032:	9211      	str	r2, [sp, #68]	; 0x44
 800f034:	785b      	ldrb	r3, [r3, #1]
 800f036:	2b30      	cmp	r3, #48	; 0x30
 800f038:	d0f9      	beq.n	800f02e <_strtod_l+0x12e>
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d0a4      	beq.n	800ef88 <_strtod_l+0x88>
 800f03e:	2301      	movs	r3, #1
 800f040:	f04f 0a00 	mov.w	sl, #0
 800f044:	9304      	str	r3, [sp, #16]
 800f046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f048:	930a      	str	r3, [sp, #40]	; 0x28
 800f04a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f04e:	f8cd a018 	str.w	sl, [sp, #24]
 800f052:	220a      	movs	r2, #10
 800f054:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f056:	7807      	ldrb	r7, [r0, #0]
 800f058:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f05c:	b2d9      	uxtb	r1, r3
 800f05e:	2909      	cmp	r1, #9
 800f060:	d92a      	bls.n	800f0b8 <_strtod_l+0x1b8>
 800f062:	9907      	ldr	r1, [sp, #28]
 800f064:	462a      	mov	r2, r5
 800f066:	f003 fa17 	bl	8012498 <strncmp>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d033      	beq.n	800f0d6 <_strtod_l+0x1d6>
 800f06e:	2000      	movs	r0, #0
 800f070:	9b06      	ldr	r3, [sp, #24]
 800f072:	463a      	mov	r2, r7
 800f074:	4601      	mov	r1, r0
 800f076:	4607      	mov	r7, r0
 800f078:	2a65      	cmp	r2, #101	; 0x65
 800f07a:	d001      	beq.n	800f080 <_strtod_l+0x180>
 800f07c:	2a45      	cmp	r2, #69	; 0x45
 800f07e:	d117      	bne.n	800f0b0 <_strtod_l+0x1b0>
 800f080:	b91b      	cbnz	r3, 800f08a <_strtod_l+0x18a>
 800f082:	9b04      	ldr	r3, [sp, #16]
 800f084:	4303      	orrs	r3, r0
 800f086:	d09c      	beq.n	800efc2 <_strtod_l+0xc2>
 800f088:	2300      	movs	r3, #0
 800f08a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f08e:	f10b 0201 	add.w	r2, fp, #1
 800f092:	9211      	str	r2, [sp, #68]	; 0x44
 800f094:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f098:	2a2b      	cmp	r2, #43	; 0x2b
 800f09a:	d071      	beq.n	800f180 <_strtod_l+0x280>
 800f09c:	2a2d      	cmp	r2, #45	; 0x2d
 800f09e:	d077      	beq.n	800f190 <_strtod_l+0x290>
 800f0a0:	f04f 0e00 	mov.w	lr, #0
 800f0a4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f0a8:	2d09      	cmp	r5, #9
 800f0aa:	d97f      	bls.n	800f1ac <_strtod_l+0x2ac>
 800f0ac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f0b0:	2500      	movs	r5, #0
 800f0b2:	e09b      	b.n	800f1ec <_strtod_l+0x2ec>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	e7c3      	b.n	800f040 <_strtod_l+0x140>
 800f0b8:	9906      	ldr	r1, [sp, #24]
 800f0ba:	2908      	cmp	r1, #8
 800f0bc:	bfdd      	ittte	le
 800f0be:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f0c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800f0c4:	9309      	strle	r3, [sp, #36]	; 0x24
 800f0c6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f0ca:	9b06      	ldr	r3, [sp, #24]
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	9306      	str	r3, [sp, #24]
 800f0d2:	9011      	str	r0, [sp, #68]	; 0x44
 800f0d4:	e7be      	b.n	800f054 <_strtod_l+0x154>
 800f0d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0d8:	195a      	adds	r2, r3, r5
 800f0da:	9211      	str	r2, [sp, #68]	; 0x44
 800f0dc:	5d5a      	ldrb	r2, [r3, r5]
 800f0de:	9b06      	ldr	r3, [sp, #24]
 800f0e0:	b3a3      	cbz	r3, 800f14c <_strtod_l+0x24c>
 800f0e2:	4607      	mov	r7, r0
 800f0e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f0e8:	2909      	cmp	r1, #9
 800f0ea:	d912      	bls.n	800f112 <_strtod_l+0x212>
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	e7c3      	b.n	800f078 <_strtod_l+0x178>
 800f0f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0f2:	1c5a      	adds	r2, r3, #1
 800f0f4:	9211      	str	r2, [sp, #68]	; 0x44
 800f0f6:	785a      	ldrb	r2, [r3, #1]
 800f0f8:	3001      	adds	r0, #1
 800f0fa:	2a30      	cmp	r2, #48	; 0x30
 800f0fc:	d0f8      	beq.n	800f0f0 <_strtod_l+0x1f0>
 800f0fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f102:	2b08      	cmp	r3, #8
 800f104:	f200 8497 	bhi.w	800fa36 <_strtod_l+0xb36>
 800f108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f10a:	930a      	str	r3, [sp, #40]	; 0x28
 800f10c:	4607      	mov	r7, r0
 800f10e:	2000      	movs	r0, #0
 800f110:	4603      	mov	r3, r0
 800f112:	3a30      	subs	r2, #48	; 0x30
 800f114:	f100 0101 	add.w	r1, r0, #1
 800f118:	d012      	beq.n	800f140 <_strtod_l+0x240>
 800f11a:	440f      	add	r7, r1
 800f11c:	eb00 0c03 	add.w	ip, r0, r3
 800f120:	4619      	mov	r1, r3
 800f122:	250a      	movs	r5, #10
 800f124:	4561      	cmp	r1, ip
 800f126:	d113      	bne.n	800f150 <_strtod_l+0x250>
 800f128:	1819      	adds	r1, r3, r0
 800f12a:	2908      	cmp	r1, #8
 800f12c:	f103 0301 	add.w	r3, r3, #1
 800f130:	4403      	add	r3, r0
 800f132:	dc1c      	bgt.n	800f16e <_strtod_l+0x26e>
 800f134:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f136:	210a      	movs	r1, #10
 800f138:	fb01 2200 	mla	r2, r1, r0, r2
 800f13c:	9209      	str	r2, [sp, #36]	; 0x24
 800f13e:	2100      	movs	r1, #0
 800f140:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f142:	1c50      	adds	r0, r2, #1
 800f144:	9011      	str	r0, [sp, #68]	; 0x44
 800f146:	7852      	ldrb	r2, [r2, #1]
 800f148:	4608      	mov	r0, r1
 800f14a:	e7cb      	b.n	800f0e4 <_strtod_l+0x1e4>
 800f14c:	9806      	ldr	r0, [sp, #24]
 800f14e:	e7d4      	b.n	800f0fa <_strtod_l+0x1fa>
 800f150:	2908      	cmp	r1, #8
 800f152:	dc04      	bgt.n	800f15e <_strtod_l+0x25e>
 800f154:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f156:	436e      	muls	r6, r5
 800f158:	9609      	str	r6, [sp, #36]	; 0x24
 800f15a:	3101      	adds	r1, #1
 800f15c:	e7e2      	b.n	800f124 <_strtod_l+0x224>
 800f15e:	f101 0e01 	add.w	lr, r1, #1
 800f162:	f1be 0f10 	cmp.w	lr, #16
 800f166:	bfd8      	it	le
 800f168:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f16c:	e7f5      	b.n	800f15a <_strtod_l+0x25a>
 800f16e:	2b10      	cmp	r3, #16
 800f170:	bfdc      	itt	le
 800f172:	210a      	movle	r1, #10
 800f174:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f178:	e7e1      	b.n	800f13e <_strtod_l+0x23e>
 800f17a:	2700      	movs	r7, #0
 800f17c:	2101      	movs	r1, #1
 800f17e:	e780      	b.n	800f082 <_strtod_l+0x182>
 800f180:	f04f 0e00 	mov.w	lr, #0
 800f184:	f10b 0202 	add.w	r2, fp, #2
 800f188:	9211      	str	r2, [sp, #68]	; 0x44
 800f18a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f18e:	e789      	b.n	800f0a4 <_strtod_l+0x1a4>
 800f190:	f04f 0e01 	mov.w	lr, #1
 800f194:	e7f6      	b.n	800f184 <_strtod_l+0x284>
 800f196:	bf00      	nop
 800f198:	080143b8 	.word	0x080143b8
 800f19c:	08014170 	.word	0x08014170
 800f1a0:	7ff00000 	.word	0x7ff00000
 800f1a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1a6:	1c55      	adds	r5, r2, #1
 800f1a8:	9511      	str	r5, [sp, #68]	; 0x44
 800f1aa:	7852      	ldrb	r2, [r2, #1]
 800f1ac:	2a30      	cmp	r2, #48	; 0x30
 800f1ae:	d0f9      	beq.n	800f1a4 <_strtod_l+0x2a4>
 800f1b0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f1b4:	2d08      	cmp	r5, #8
 800f1b6:	f63f af7b 	bhi.w	800f0b0 <_strtod_l+0x1b0>
 800f1ba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f1be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1c0:	9207      	str	r2, [sp, #28]
 800f1c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1c4:	1c55      	adds	r5, r2, #1
 800f1c6:	9511      	str	r5, [sp, #68]	; 0x44
 800f1c8:	7852      	ldrb	r2, [r2, #1]
 800f1ca:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f1ce:	2e09      	cmp	r6, #9
 800f1d0:	d937      	bls.n	800f242 <_strtod_l+0x342>
 800f1d2:	9e07      	ldr	r6, [sp, #28]
 800f1d4:	1bad      	subs	r5, r5, r6
 800f1d6:	2d08      	cmp	r5, #8
 800f1d8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f1dc:	dc02      	bgt.n	800f1e4 <_strtod_l+0x2e4>
 800f1de:	4565      	cmp	r5, ip
 800f1e0:	bfa8      	it	ge
 800f1e2:	4665      	movge	r5, ip
 800f1e4:	f1be 0f00 	cmp.w	lr, #0
 800f1e8:	d000      	beq.n	800f1ec <_strtod_l+0x2ec>
 800f1ea:	426d      	negs	r5, r5
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d14d      	bne.n	800f28c <_strtod_l+0x38c>
 800f1f0:	9b04      	ldr	r3, [sp, #16]
 800f1f2:	4303      	orrs	r3, r0
 800f1f4:	f47f aec8 	bne.w	800ef88 <_strtod_l+0x88>
 800f1f8:	2900      	cmp	r1, #0
 800f1fa:	f47f aee2 	bne.w	800efc2 <_strtod_l+0xc2>
 800f1fe:	2a69      	cmp	r2, #105	; 0x69
 800f200:	d027      	beq.n	800f252 <_strtod_l+0x352>
 800f202:	dc24      	bgt.n	800f24e <_strtod_l+0x34e>
 800f204:	2a49      	cmp	r2, #73	; 0x49
 800f206:	d024      	beq.n	800f252 <_strtod_l+0x352>
 800f208:	2a4e      	cmp	r2, #78	; 0x4e
 800f20a:	f47f aeda 	bne.w	800efc2 <_strtod_l+0xc2>
 800f20e:	4996      	ldr	r1, [pc, #600]	; (800f468 <_strtod_l+0x568>)
 800f210:	a811      	add	r0, sp, #68	; 0x44
 800f212:	f001 fdcb 	bl	8010dac <__match>
 800f216:	2800      	cmp	r0, #0
 800f218:	f43f aed3 	beq.w	800efc2 <_strtod_l+0xc2>
 800f21c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	2b28      	cmp	r3, #40	; 0x28
 800f222:	d12d      	bne.n	800f280 <_strtod_l+0x380>
 800f224:	4991      	ldr	r1, [pc, #580]	; (800f46c <_strtod_l+0x56c>)
 800f226:	aa14      	add	r2, sp, #80	; 0x50
 800f228:	a811      	add	r0, sp, #68	; 0x44
 800f22a:	f001 fdd3 	bl	8010dd4 <__hexnan>
 800f22e:	2805      	cmp	r0, #5
 800f230:	d126      	bne.n	800f280 <_strtod_l+0x380>
 800f232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f234:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f238:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f23c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f240:	e6a2      	b.n	800ef88 <_strtod_l+0x88>
 800f242:	250a      	movs	r5, #10
 800f244:	fb05 250c 	mla	r5, r5, ip, r2
 800f248:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f24c:	e7b9      	b.n	800f1c2 <_strtod_l+0x2c2>
 800f24e:	2a6e      	cmp	r2, #110	; 0x6e
 800f250:	e7db      	b.n	800f20a <_strtod_l+0x30a>
 800f252:	4987      	ldr	r1, [pc, #540]	; (800f470 <_strtod_l+0x570>)
 800f254:	a811      	add	r0, sp, #68	; 0x44
 800f256:	f001 fda9 	bl	8010dac <__match>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	f43f aeb1 	beq.w	800efc2 <_strtod_l+0xc2>
 800f260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f262:	4984      	ldr	r1, [pc, #528]	; (800f474 <_strtod_l+0x574>)
 800f264:	3b01      	subs	r3, #1
 800f266:	a811      	add	r0, sp, #68	; 0x44
 800f268:	9311      	str	r3, [sp, #68]	; 0x44
 800f26a:	f001 fd9f 	bl	8010dac <__match>
 800f26e:	b910      	cbnz	r0, 800f276 <_strtod_l+0x376>
 800f270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f272:	3301      	adds	r3, #1
 800f274:	9311      	str	r3, [sp, #68]	; 0x44
 800f276:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f488 <_strtod_l+0x588>
 800f27a:	f04f 0800 	mov.w	r8, #0
 800f27e:	e683      	b.n	800ef88 <_strtod_l+0x88>
 800f280:	487d      	ldr	r0, [pc, #500]	; (800f478 <_strtod_l+0x578>)
 800f282:	f003 f8b9 	bl	80123f8 <nan>
 800f286:	ec59 8b10 	vmov	r8, r9, d0
 800f28a:	e67d      	b.n	800ef88 <_strtod_l+0x88>
 800f28c:	1bea      	subs	r2, r5, r7
 800f28e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f292:	9207      	str	r2, [sp, #28]
 800f294:	9a06      	ldr	r2, [sp, #24]
 800f296:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f29a:	2a00      	cmp	r2, #0
 800f29c:	bf08      	it	eq
 800f29e:	461a      	moveq	r2, r3
 800f2a0:	2b10      	cmp	r3, #16
 800f2a2:	9206      	str	r2, [sp, #24]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	bfa8      	it	ge
 800f2a8:	2210      	movge	r2, #16
 800f2aa:	2b09      	cmp	r3, #9
 800f2ac:	ec59 8b17 	vmov	r8, r9, d7
 800f2b0:	dd0c      	ble.n	800f2cc <_strtod_l+0x3cc>
 800f2b2:	4972      	ldr	r1, [pc, #456]	; (800f47c <_strtod_l+0x57c>)
 800f2b4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f2b8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f2bc:	ee06 aa90 	vmov	s13, sl
 800f2c0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f2c4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f2c8:	ec59 8b16 	vmov	r8, r9, d6
 800f2cc:	2b0f      	cmp	r3, #15
 800f2ce:	dc36      	bgt.n	800f33e <_strtod_l+0x43e>
 800f2d0:	9907      	ldr	r1, [sp, #28]
 800f2d2:	2900      	cmp	r1, #0
 800f2d4:	f43f ae58 	beq.w	800ef88 <_strtod_l+0x88>
 800f2d8:	dd23      	ble.n	800f322 <_strtod_l+0x422>
 800f2da:	2916      	cmp	r1, #22
 800f2dc:	dc0b      	bgt.n	800f2f6 <_strtod_l+0x3f6>
 800f2de:	4b67      	ldr	r3, [pc, #412]	; (800f47c <_strtod_l+0x57c>)
 800f2e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f2e4:	ed93 7b00 	vldr	d7, [r3]
 800f2e8:	ec49 8b16 	vmov	d6, r8, r9
 800f2ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2f0:	ec59 8b17 	vmov	r8, r9, d7
 800f2f4:	e648      	b.n	800ef88 <_strtod_l+0x88>
 800f2f6:	9807      	ldr	r0, [sp, #28]
 800f2f8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f2fc:	4281      	cmp	r1, r0
 800f2fe:	db1e      	blt.n	800f33e <_strtod_l+0x43e>
 800f300:	4a5e      	ldr	r2, [pc, #376]	; (800f47c <_strtod_l+0x57c>)
 800f302:	f1c3 030f 	rsb	r3, r3, #15
 800f306:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f30a:	ed91 7b00 	vldr	d7, [r1]
 800f30e:	ec49 8b16 	vmov	d6, r8, r9
 800f312:	1ac3      	subs	r3, r0, r3
 800f314:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f318:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f31c:	ed92 6b00 	vldr	d6, [r2]
 800f320:	e7e4      	b.n	800f2ec <_strtod_l+0x3ec>
 800f322:	9907      	ldr	r1, [sp, #28]
 800f324:	3116      	adds	r1, #22
 800f326:	db0a      	blt.n	800f33e <_strtod_l+0x43e>
 800f328:	4b54      	ldr	r3, [pc, #336]	; (800f47c <_strtod_l+0x57c>)
 800f32a:	1b7d      	subs	r5, r7, r5
 800f32c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f330:	ed95 7b00 	vldr	d7, [r5]
 800f334:	ec49 8b16 	vmov	d6, r8, r9
 800f338:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f33c:	e7d8      	b.n	800f2f0 <_strtod_l+0x3f0>
 800f33e:	9907      	ldr	r1, [sp, #28]
 800f340:	1a9a      	subs	r2, r3, r2
 800f342:	440a      	add	r2, r1
 800f344:	2a00      	cmp	r2, #0
 800f346:	dd6f      	ble.n	800f428 <_strtod_l+0x528>
 800f348:	f012 000f 	ands.w	r0, r2, #15
 800f34c:	d00a      	beq.n	800f364 <_strtod_l+0x464>
 800f34e:	494b      	ldr	r1, [pc, #300]	; (800f47c <_strtod_l+0x57c>)
 800f350:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f354:	ed91 7b00 	vldr	d7, [r1]
 800f358:	ec49 8b16 	vmov	d6, r8, r9
 800f35c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f360:	ec59 8b17 	vmov	r8, r9, d7
 800f364:	f032 020f 	bics.w	r2, r2, #15
 800f368:	d04f      	beq.n	800f40a <_strtod_l+0x50a>
 800f36a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f36e:	dd22      	ble.n	800f3b6 <_strtod_l+0x4b6>
 800f370:	2500      	movs	r5, #0
 800f372:	462e      	mov	r6, r5
 800f374:	9506      	str	r5, [sp, #24]
 800f376:	462f      	mov	r7, r5
 800f378:	2322      	movs	r3, #34	; 0x22
 800f37a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f488 <_strtod_l+0x588>
 800f37e:	6023      	str	r3, [r4, #0]
 800f380:	f04f 0800 	mov.w	r8, #0
 800f384:	9b06      	ldr	r3, [sp, #24]
 800f386:	2b00      	cmp	r3, #0
 800f388:	f43f adfe 	beq.w	800ef88 <_strtod_l+0x88>
 800f38c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f38e:	4620      	mov	r0, r4
 800f390:	f001 fe2c 	bl	8010fec <_Bfree>
 800f394:	4639      	mov	r1, r7
 800f396:	4620      	mov	r0, r4
 800f398:	f001 fe28 	bl	8010fec <_Bfree>
 800f39c:	4631      	mov	r1, r6
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f001 fe24 	bl	8010fec <_Bfree>
 800f3a4:	9906      	ldr	r1, [sp, #24]
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f001 fe20 	bl	8010fec <_Bfree>
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	f001 fe1c 	bl	8010fec <_Bfree>
 800f3b4:	e5e8      	b.n	800ef88 <_strtod_l+0x88>
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	ec49 8b17 	vmov	d7, r8, r9
 800f3bc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f480 <_strtod_l+0x580>
 800f3c0:	1112      	asrs	r2, r2, #4
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	2a01      	cmp	r2, #1
 800f3c6:	dc23      	bgt.n	800f410 <_strtod_l+0x510>
 800f3c8:	b108      	cbz	r0, 800f3ce <_strtod_l+0x4ce>
 800f3ca:	ec59 8b17 	vmov	r8, r9, d7
 800f3ce:	4a2c      	ldr	r2, [pc, #176]	; (800f480 <_strtod_l+0x580>)
 800f3d0:	482c      	ldr	r0, [pc, #176]	; (800f484 <_strtod_l+0x584>)
 800f3d2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f3d6:	ed92 7b00 	vldr	d7, [r2]
 800f3da:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f3de:	ec49 8b16 	vmov	d6, r8, r9
 800f3e2:	4a29      	ldr	r2, [pc, #164]	; (800f488 <_strtod_l+0x588>)
 800f3e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3e8:	ee17 1a90 	vmov	r1, s15
 800f3ec:	400a      	ands	r2, r1
 800f3ee:	4282      	cmp	r2, r0
 800f3f0:	ec59 8b17 	vmov	r8, r9, d7
 800f3f4:	d8bc      	bhi.n	800f370 <_strtod_l+0x470>
 800f3f6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f3fa:	4282      	cmp	r2, r0
 800f3fc:	bf86      	itte	hi
 800f3fe:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f48c <_strtod_l+0x58c>
 800f402:	f04f 38ff 	movhi.w	r8, #4294967295
 800f406:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f40a:	2200      	movs	r2, #0
 800f40c:	9204      	str	r2, [sp, #16]
 800f40e:	e078      	b.n	800f502 <_strtod_l+0x602>
 800f410:	07d6      	lsls	r6, r2, #31
 800f412:	d504      	bpl.n	800f41e <_strtod_l+0x51e>
 800f414:	ed9c 6b00 	vldr	d6, [ip]
 800f418:	2001      	movs	r0, #1
 800f41a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f41e:	3101      	adds	r1, #1
 800f420:	1052      	asrs	r2, r2, #1
 800f422:	f10c 0c08 	add.w	ip, ip, #8
 800f426:	e7cd      	b.n	800f3c4 <_strtod_l+0x4c4>
 800f428:	d0ef      	beq.n	800f40a <_strtod_l+0x50a>
 800f42a:	4252      	negs	r2, r2
 800f42c:	f012 000f 	ands.w	r0, r2, #15
 800f430:	d00a      	beq.n	800f448 <_strtod_l+0x548>
 800f432:	4912      	ldr	r1, [pc, #72]	; (800f47c <_strtod_l+0x57c>)
 800f434:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f438:	ed91 7b00 	vldr	d7, [r1]
 800f43c:	ec49 8b16 	vmov	d6, r8, r9
 800f440:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f444:	ec59 8b17 	vmov	r8, r9, d7
 800f448:	1112      	asrs	r2, r2, #4
 800f44a:	d0de      	beq.n	800f40a <_strtod_l+0x50a>
 800f44c:	2a1f      	cmp	r2, #31
 800f44e:	dd1f      	ble.n	800f490 <_strtod_l+0x590>
 800f450:	2500      	movs	r5, #0
 800f452:	462e      	mov	r6, r5
 800f454:	9506      	str	r5, [sp, #24]
 800f456:	462f      	mov	r7, r5
 800f458:	2322      	movs	r3, #34	; 0x22
 800f45a:	f04f 0800 	mov.w	r8, #0
 800f45e:	f04f 0900 	mov.w	r9, #0
 800f462:	6023      	str	r3, [r4, #0]
 800f464:	e78e      	b.n	800f384 <_strtod_l+0x484>
 800f466:	bf00      	nop
 800f468:	08014145 	.word	0x08014145
 800f46c:	08014184 	.word	0x08014184
 800f470:	0801413d 	.word	0x0801413d
 800f474:	080142c4 	.word	0x080142c4
 800f478:	0801458b 	.word	0x0801458b
 800f47c:	08014450 	.word	0x08014450
 800f480:	08014428 	.word	0x08014428
 800f484:	7ca00000 	.word	0x7ca00000
 800f488:	7ff00000 	.word	0x7ff00000
 800f48c:	7fefffff 	.word	0x7fefffff
 800f490:	f012 0110 	ands.w	r1, r2, #16
 800f494:	bf18      	it	ne
 800f496:	216a      	movne	r1, #106	; 0x6a
 800f498:	9104      	str	r1, [sp, #16]
 800f49a:	ec49 8b17 	vmov	d7, r8, r9
 800f49e:	49be      	ldr	r1, [pc, #760]	; (800f798 <_strtod_l+0x898>)
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	07d6      	lsls	r6, r2, #31
 800f4a4:	d504      	bpl.n	800f4b0 <_strtod_l+0x5b0>
 800f4a6:	ed91 6b00 	vldr	d6, [r1]
 800f4aa:	2001      	movs	r0, #1
 800f4ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f4b0:	1052      	asrs	r2, r2, #1
 800f4b2:	f101 0108 	add.w	r1, r1, #8
 800f4b6:	d1f4      	bne.n	800f4a2 <_strtod_l+0x5a2>
 800f4b8:	b108      	cbz	r0, 800f4be <_strtod_l+0x5be>
 800f4ba:	ec59 8b17 	vmov	r8, r9, d7
 800f4be:	9a04      	ldr	r2, [sp, #16]
 800f4c0:	b1c2      	cbz	r2, 800f4f4 <_strtod_l+0x5f4>
 800f4c2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f4c6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f4ca:	2a00      	cmp	r2, #0
 800f4cc:	4648      	mov	r0, r9
 800f4ce:	dd11      	ble.n	800f4f4 <_strtod_l+0x5f4>
 800f4d0:	2a1f      	cmp	r2, #31
 800f4d2:	f340 812e 	ble.w	800f732 <_strtod_l+0x832>
 800f4d6:	2a34      	cmp	r2, #52	; 0x34
 800f4d8:	bfde      	ittt	le
 800f4da:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f4de:	f04f 32ff 	movle.w	r2, #4294967295
 800f4e2:	fa02 f101 	lslle.w	r1, r2, r1
 800f4e6:	f04f 0800 	mov.w	r8, #0
 800f4ea:	bfcc      	ite	gt
 800f4ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f4f0:	ea01 0900 	andle.w	r9, r1, r0
 800f4f4:	ec49 8b17 	vmov	d7, r8, r9
 800f4f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f500:	d0a6      	beq.n	800f450 <_strtod_l+0x550>
 800f502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f504:	9200      	str	r2, [sp, #0]
 800f506:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f508:	9a06      	ldr	r2, [sp, #24]
 800f50a:	4620      	mov	r0, r4
 800f50c:	f001 fdd6 	bl	80110bc <__s2b>
 800f510:	9006      	str	r0, [sp, #24]
 800f512:	2800      	cmp	r0, #0
 800f514:	f43f af2c 	beq.w	800f370 <_strtod_l+0x470>
 800f518:	9b07      	ldr	r3, [sp, #28]
 800f51a:	1b7d      	subs	r5, r7, r5
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	bfb4      	ite	lt
 800f520:	462b      	movlt	r3, r5
 800f522:	2300      	movge	r3, #0
 800f524:	9309      	str	r3, [sp, #36]	; 0x24
 800f526:	9b07      	ldr	r3, [sp, #28]
 800f528:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f778 <_strtod_l+0x878>
 800f52c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f780 <_strtod_l+0x880>
 800f530:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f788 <_strtod_l+0x888>
 800f534:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f538:	2500      	movs	r5, #0
 800f53a:	930c      	str	r3, [sp, #48]	; 0x30
 800f53c:	462e      	mov	r6, r5
 800f53e:	9b06      	ldr	r3, [sp, #24]
 800f540:	4620      	mov	r0, r4
 800f542:	6859      	ldr	r1, [r3, #4]
 800f544:	f001 fd12 	bl	8010f6c <_Balloc>
 800f548:	4607      	mov	r7, r0
 800f54a:	2800      	cmp	r0, #0
 800f54c:	f43f af14 	beq.w	800f378 <_strtod_l+0x478>
 800f550:	9b06      	ldr	r3, [sp, #24]
 800f552:	691a      	ldr	r2, [r3, #16]
 800f554:	3202      	adds	r2, #2
 800f556:	f103 010c 	add.w	r1, r3, #12
 800f55a:	0092      	lsls	r2, r2, #2
 800f55c:	300c      	adds	r0, #12
 800f55e:	f7fe fd89 	bl	800e074 <memcpy>
 800f562:	ec49 8b10 	vmov	d0, r8, r9
 800f566:	aa14      	add	r2, sp, #80	; 0x50
 800f568:	a913      	add	r1, sp, #76	; 0x4c
 800f56a:	4620      	mov	r0, r4
 800f56c:	f002 f8ec 	bl	8011748 <__d2b>
 800f570:	ec49 8b18 	vmov	d8, r8, r9
 800f574:	9012      	str	r0, [sp, #72]	; 0x48
 800f576:	2800      	cmp	r0, #0
 800f578:	f43f aefe 	beq.w	800f378 <_strtod_l+0x478>
 800f57c:	2101      	movs	r1, #1
 800f57e:	4620      	mov	r0, r4
 800f580:	f001 fe36 	bl	80111f0 <__i2b>
 800f584:	4606      	mov	r6, r0
 800f586:	2800      	cmp	r0, #0
 800f588:	f43f aef6 	beq.w	800f378 <_strtod_l+0x478>
 800f58c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f58e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f590:	2b00      	cmp	r3, #0
 800f592:	bfab      	itete	ge
 800f594:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f596:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f598:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f59c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f5a0:	bfac      	ite	ge
 800f5a2:	eb03 0b02 	addge.w	fp, r3, r2
 800f5a6:	eba2 0a03 	sublt.w	sl, r2, r3
 800f5aa:	9a04      	ldr	r2, [sp, #16]
 800f5ac:	1a9b      	subs	r3, r3, r2
 800f5ae:	440b      	add	r3, r1
 800f5b0:	4a7a      	ldr	r2, [pc, #488]	; (800f79c <_strtod_l+0x89c>)
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f5ba:	f280 80cd 	bge.w	800f758 <_strtod_l+0x858>
 800f5be:	1ad2      	subs	r2, r2, r3
 800f5c0:	2a1f      	cmp	r2, #31
 800f5c2:	eba1 0102 	sub.w	r1, r1, r2
 800f5c6:	f04f 0001 	mov.w	r0, #1
 800f5ca:	f300 80b9 	bgt.w	800f740 <_strtod_l+0x840>
 800f5ce:	fa00 f302 	lsl.w	r3, r0, r2
 800f5d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f5d8:	eb0b 0301 	add.w	r3, fp, r1
 800f5dc:	9a04      	ldr	r2, [sp, #16]
 800f5de:	459b      	cmp	fp, r3
 800f5e0:	448a      	add	sl, r1
 800f5e2:	4492      	add	sl, r2
 800f5e4:	465a      	mov	r2, fp
 800f5e6:	bfa8      	it	ge
 800f5e8:	461a      	movge	r2, r3
 800f5ea:	4552      	cmp	r2, sl
 800f5ec:	bfa8      	it	ge
 800f5ee:	4652      	movge	r2, sl
 800f5f0:	2a00      	cmp	r2, #0
 800f5f2:	bfc2      	ittt	gt
 800f5f4:	1a9b      	subgt	r3, r3, r2
 800f5f6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f5fa:	ebab 0b02 	subgt.w	fp, fp, r2
 800f5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f600:	2a00      	cmp	r2, #0
 800f602:	dd18      	ble.n	800f636 <_strtod_l+0x736>
 800f604:	4631      	mov	r1, r6
 800f606:	4620      	mov	r0, r4
 800f608:	930f      	str	r3, [sp, #60]	; 0x3c
 800f60a:	f001 feb1 	bl	8011370 <__pow5mult>
 800f60e:	4606      	mov	r6, r0
 800f610:	2800      	cmp	r0, #0
 800f612:	f43f aeb1 	beq.w	800f378 <_strtod_l+0x478>
 800f616:	4601      	mov	r1, r0
 800f618:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f61a:	4620      	mov	r0, r4
 800f61c:	f001 fdfe 	bl	801121c <__multiply>
 800f620:	900e      	str	r0, [sp, #56]	; 0x38
 800f622:	2800      	cmp	r0, #0
 800f624:	f43f aea8 	beq.w	800f378 <_strtod_l+0x478>
 800f628:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f62a:	4620      	mov	r0, r4
 800f62c:	f001 fcde 	bl	8010fec <_Bfree>
 800f630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f634:	9212      	str	r2, [sp, #72]	; 0x48
 800f636:	2b00      	cmp	r3, #0
 800f638:	f300 8093 	bgt.w	800f762 <_strtod_l+0x862>
 800f63c:	9b07      	ldr	r3, [sp, #28]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	dd08      	ble.n	800f654 <_strtod_l+0x754>
 800f642:	4639      	mov	r1, r7
 800f644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f646:	4620      	mov	r0, r4
 800f648:	f001 fe92 	bl	8011370 <__pow5mult>
 800f64c:	4607      	mov	r7, r0
 800f64e:	2800      	cmp	r0, #0
 800f650:	f43f ae92 	beq.w	800f378 <_strtod_l+0x478>
 800f654:	f1ba 0f00 	cmp.w	sl, #0
 800f658:	dd08      	ble.n	800f66c <_strtod_l+0x76c>
 800f65a:	4639      	mov	r1, r7
 800f65c:	4652      	mov	r2, sl
 800f65e:	4620      	mov	r0, r4
 800f660:	f001 fee0 	bl	8011424 <__lshift>
 800f664:	4607      	mov	r7, r0
 800f666:	2800      	cmp	r0, #0
 800f668:	f43f ae86 	beq.w	800f378 <_strtod_l+0x478>
 800f66c:	f1bb 0f00 	cmp.w	fp, #0
 800f670:	dd08      	ble.n	800f684 <_strtod_l+0x784>
 800f672:	4631      	mov	r1, r6
 800f674:	465a      	mov	r2, fp
 800f676:	4620      	mov	r0, r4
 800f678:	f001 fed4 	bl	8011424 <__lshift>
 800f67c:	4606      	mov	r6, r0
 800f67e:	2800      	cmp	r0, #0
 800f680:	f43f ae7a 	beq.w	800f378 <_strtod_l+0x478>
 800f684:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f686:	463a      	mov	r2, r7
 800f688:	4620      	mov	r0, r4
 800f68a:	f001 ff57 	bl	801153c <__mdiff>
 800f68e:	4605      	mov	r5, r0
 800f690:	2800      	cmp	r0, #0
 800f692:	f43f ae71 	beq.w	800f378 <_strtod_l+0x478>
 800f696:	2300      	movs	r3, #0
 800f698:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f69c:	60c3      	str	r3, [r0, #12]
 800f69e:	4631      	mov	r1, r6
 800f6a0:	f001 ff30 	bl	8011504 <__mcmp>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	da7d      	bge.n	800f7a4 <_strtod_l+0x8a4>
 800f6a8:	ea5a 0308 	orrs.w	r3, sl, r8
 800f6ac:	f040 80a3 	bne.w	800f7f6 <_strtod_l+0x8f6>
 800f6b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f040 809e 	bne.w	800f7f6 <_strtod_l+0x8f6>
 800f6ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6be:	0d1b      	lsrs	r3, r3, #20
 800f6c0:	051b      	lsls	r3, r3, #20
 800f6c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f6c6:	f240 8096 	bls.w	800f7f6 <_strtod_l+0x8f6>
 800f6ca:	696b      	ldr	r3, [r5, #20]
 800f6cc:	b91b      	cbnz	r3, 800f6d6 <_strtod_l+0x7d6>
 800f6ce:	692b      	ldr	r3, [r5, #16]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	f340 8090 	ble.w	800f7f6 <_strtod_l+0x8f6>
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	2201      	movs	r2, #1
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f001 fea2 	bl	8011424 <__lshift>
 800f6e0:	4631      	mov	r1, r6
 800f6e2:	4605      	mov	r5, r0
 800f6e4:	f001 ff0e 	bl	8011504 <__mcmp>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	f340 8084 	ble.w	800f7f6 <_strtod_l+0x8f6>
 800f6ee:	9904      	ldr	r1, [sp, #16]
 800f6f0:	4a2b      	ldr	r2, [pc, #172]	; (800f7a0 <_strtod_l+0x8a0>)
 800f6f2:	464b      	mov	r3, r9
 800f6f4:	2900      	cmp	r1, #0
 800f6f6:	f000 809d 	beq.w	800f834 <_strtod_l+0x934>
 800f6fa:	ea02 0109 	and.w	r1, r2, r9
 800f6fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f702:	f300 8097 	bgt.w	800f834 <_strtod_l+0x934>
 800f706:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f70a:	f77f aea5 	ble.w	800f458 <_strtod_l+0x558>
 800f70e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f790 <_strtod_l+0x890>
 800f712:	ec49 8b16 	vmov	d6, r8, r9
 800f716:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f71a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f71e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f722:	4313      	orrs	r3, r2
 800f724:	bf08      	it	eq
 800f726:	2322      	moveq	r3, #34	; 0x22
 800f728:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f72c:	bf08      	it	eq
 800f72e:	6023      	streq	r3, [r4, #0]
 800f730:	e62c      	b.n	800f38c <_strtod_l+0x48c>
 800f732:	f04f 31ff 	mov.w	r1, #4294967295
 800f736:	fa01 f202 	lsl.w	r2, r1, r2
 800f73a:	ea02 0808 	and.w	r8, r2, r8
 800f73e:	e6d9      	b.n	800f4f4 <_strtod_l+0x5f4>
 800f740:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f744:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f748:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f74c:	33e2      	adds	r3, #226	; 0xe2
 800f74e:	fa00 f303 	lsl.w	r3, r0, r3
 800f752:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f756:	e73f      	b.n	800f5d8 <_strtod_l+0x6d8>
 800f758:	2200      	movs	r2, #0
 800f75a:	2301      	movs	r3, #1
 800f75c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f760:	e73a      	b.n	800f5d8 <_strtod_l+0x6d8>
 800f762:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f764:	461a      	mov	r2, r3
 800f766:	4620      	mov	r0, r4
 800f768:	f001 fe5c 	bl	8011424 <__lshift>
 800f76c:	9012      	str	r0, [sp, #72]	; 0x48
 800f76e:	2800      	cmp	r0, #0
 800f770:	f47f af64 	bne.w	800f63c <_strtod_l+0x73c>
 800f774:	e600      	b.n	800f378 <_strtod_l+0x478>
 800f776:	bf00      	nop
 800f778:	94a03595 	.word	0x94a03595
 800f77c:	3fcfffff 	.word	0x3fcfffff
 800f780:	94a03595 	.word	0x94a03595
 800f784:	3fdfffff 	.word	0x3fdfffff
 800f788:	35afe535 	.word	0x35afe535
 800f78c:	3fe00000 	.word	0x3fe00000
 800f790:	00000000 	.word	0x00000000
 800f794:	39500000 	.word	0x39500000
 800f798:	08014198 	.word	0x08014198
 800f79c:	fffffc02 	.word	0xfffffc02
 800f7a0:	7ff00000 	.word	0x7ff00000
 800f7a4:	46cb      	mov	fp, r9
 800f7a6:	d15f      	bne.n	800f868 <_strtod_l+0x968>
 800f7a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7ac:	f1ba 0f00 	cmp.w	sl, #0
 800f7b0:	d02a      	beq.n	800f808 <_strtod_l+0x908>
 800f7b2:	4aa7      	ldr	r2, [pc, #668]	; (800fa50 <_strtod_l+0xb50>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d12b      	bne.n	800f810 <_strtod_l+0x910>
 800f7b8:	9b04      	ldr	r3, [sp, #16]
 800f7ba:	4642      	mov	r2, r8
 800f7bc:	b1fb      	cbz	r3, 800f7fe <_strtod_l+0x8fe>
 800f7be:	4ba5      	ldr	r3, [pc, #660]	; (800fa54 <_strtod_l+0xb54>)
 800f7c0:	ea09 0303 	and.w	r3, r9, r3
 800f7c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f7c8:	f04f 31ff 	mov.w	r1, #4294967295
 800f7cc:	d81a      	bhi.n	800f804 <_strtod_l+0x904>
 800f7ce:	0d1b      	lsrs	r3, r3, #20
 800f7d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7d4:	fa01 f303 	lsl.w	r3, r1, r3
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d119      	bne.n	800f810 <_strtod_l+0x910>
 800f7dc:	4b9e      	ldr	r3, [pc, #632]	; (800fa58 <_strtod_l+0xb58>)
 800f7de:	459b      	cmp	fp, r3
 800f7e0:	d102      	bne.n	800f7e8 <_strtod_l+0x8e8>
 800f7e2:	3201      	adds	r2, #1
 800f7e4:	f43f adc8 	beq.w	800f378 <_strtod_l+0x478>
 800f7e8:	4b9a      	ldr	r3, [pc, #616]	; (800fa54 <_strtod_l+0xb54>)
 800f7ea:	ea0b 0303 	and.w	r3, fp, r3
 800f7ee:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f7f2:	f04f 0800 	mov.w	r8, #0
 800f7f6:	9b04      	ldr	r3, [sp, #16]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d188      	bne.n	800f70e <_strtod_l+0x80e>
 800f7fc:	e5c6      	b.n	800f38c <_strtod_l+0x48c>
 800f7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f802:	e7e9      	b.n	800f7d8 <_strtod_l+0x8d8>
 800f804:	460b      	mov	r3, r1
 800f806:	e7e7      	b.n	800f7d8 <_strtod_l+0x8d8>
 800f808:	ea53 0308 	orrs.w	r3, r3, r8
 800f80c:	f43f af6f 	beq.w	800f6ee <_strtod_l+0x7ee>
 800f810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f812:	b1cb      	cbz	r3, 800f848 <_strtod_l+0x948>
 800f814:	ea13 0f0b 	tst.w	r3, fp
 800f818:	d0ed      	beq.n	800f7f6 <_strtod_l+0x8f6>
 800f81a:	9a04      	ldr	r2, [sp, #16]
 800f81c:	4640      	mov	r0, r8
 800f81e:	4649      	mov	r1, r9
 800f820:	f1ba 0f00 	cmp.w	sl, #0
 800f824:	d014      	beq.n	800f850 <_strtod_l+0x950>
 800f826:	f7ff fb4e 	bl	800eec6 <sulp>
 800f82a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f82e:	ec59 8b17 	vmov	r8, r9, d7
 800f832:	e7e0      	b.n	800f7f6 <_strtod_l+0x8f6>
 800f834:	4013      	ands	r3, r2
 800f836:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f83a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f83e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f842:	f04f 38ff 	mov.w	r8, #4294967295
 800f846:	e7d6      	b.n	800f7f6 <_strtod_l+0x8f6>
 800f848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f84a:	ea13 0f08 	tst.w	r3, r8
 800f84e:	e7e3      	b.n	800f818 <_strtod_l+0x918>
 800f850:	f7ff fb39 	bl	800eec6 <sulp>
 800f854:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f858:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f860:	ec59 8b10 	vmov	r8, r9, d0
 800f864:	d1c7      	bne.n	800f7f6 <_strtod_l+0x8f6>
 800f866:	e5f7      	b.n	800f458 <_strtod_l+0x558>
 800f868:	4631      	mov	r1, r6
 800f86a:	4628      	mov	r0, r5
 800f86c:	f001 ffc8 	bl	8011800 <__ratio>
 800f870:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f874:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87c:	d865      	bhi.n	800f94a <_strtod_l+0xa4a>
 800f87e:	f1ba 0f00 	cmp.w	sl, #0
 800f882:	d042      	beq.n	800f90a <_strtod_l+0xa0a>
 800f884:	4b75      	ldr	r3, [pc, #468]	; (800fa5c <_strtod_l+0xb5c>)
 800f886:	2200      	movs	r2, #0
 800f888:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f88c:	4871      	ldr	r0, [pc, #452]	; (800fa54 <_strtod_l+0xb54>)
 800f88e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fa68 <_strtod_l+0xb68>
 800f892:	ea0b 0100 	and.w	r1, fp, r0
 800f896:	4561      	cmp	r1, ip
 800f898:	f040 808e 	bne.w	800f9b8 <_strtod_l+0xab8>
 800f89c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f8a0:	ec49 8b10 	vmov	d0, r8, r9
 800f8a4:	ec43 2b1c 	vmov	d12, r2, r3
 800f8a8:	910a      	str	r1, [sp, #40]	; 0x28
 800f8aa:	f001 fed1 	bl	8011650 <__ulp>
 800f8ae:	ec49 8b1e 	vmov	d14, r8, r9
 800f8b2:	4868      	ldr	r0, [pc, #416]	; (800fa54 <_strtod_l+0xb54>)
 800f8b4:	eeac eb00 	vfma.f64	d14, d12, d0
 800f8b8:	ee1e 3a90 	vmov	r3, s29
 800f8bc:	4a68      	ldr	r2, [pc, #416]	; (800fa60 <_strtod_l+0xb60>)
 800f8be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8c0:	4018      	ands	r0, r3
 800f8c2:	4290      	cmp	r0, r2
 800f8c4:	ec59 8b1e 	vmov	r8, r9, d14
 800f8c8:	d94e      	bls.n	800f968 <_strtod_l+0xa68>
 800f8ca:	ee18 3a90 	vmov	r3, s17
 800f8ce:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d104      	bne.n	800f8e0 <_strtod_l+0x9e0>
 800f8d6:	ee18 3a10 	vmov	r3, s16
 800f8da:	3301      	adds	r3, #1
 800f8dc:	f43f ad4c 	beq.w	800f378 <_strtod_l+0x478>
 800f8e0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fa58 <_strtod_l+0xb58>
 800f8e4:	f04f 38ff 	mov.w	r8, #4294967295
 800f8e8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f001 fb7e 	bl	8010fec <_Bfree>
 800f8f0:	4639      	mov	r1, r7
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f001 fb7a 	bl	8010fec <_Bfree>
 800f8f8:	4631      	mov	r1, r6
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f001 fb76 	bl	8010fec <_Bfree>
 800f900:	4629      	mov	r1, r5
 800f902:	4620      	mov	r0, r4
 800f904:	f001 fb72 	bl	8010fec <_Bfree>
 800f908:	e619      	b.n	800f53e <_strtod_l+0x63e>
 800f90a:	f1b8 0f00 	cmp.w	r8, #0
 800f90e:	d112      	bne.n	800f936 <_strtod_l+0xa36>
 800f910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f914:	b9b3      	cbnz	r3, 800f944 <_strtod_l+0xa44>
 800f916:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f91a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f926:	bf58      	it	pl
 800f928:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f92c:	eeb1 7b4d 	vneg.f64	d7, d13
 800f930:	ec53 2b17 	vmov	r2, r3, d7
 800f934:	e7aa      	b.n	800f88c <_strtod_l+0x98c>
 800f936:	f1b8 0f01 	cmp.w	r8, #1
 800f93a:	d103      	bne.n	800f944 <_strtod_l+0xa44>
 800f93c:	f1b9 0f00 	cmp.w	r9, #0
 800f940:	f43f ad8a 	beq.w	800f458 <_strtod_l+0x558>
 800f944:	4b47      	ldr	r3, [pc, #284]	; (800fa64 <_strtod_l+0xb64>)
 800f946:	2200      	movs	r2, #0
 800f948:	e79e      	b.n	800f888 <_strtod_l+0x988>
 800f94a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f94e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f952:	f1ba 0f00 	cmp.w	sl, #0
 800f956:	d104      	bne.n	800f962 <_strtod_l+0xa62>
 800f958:	eeb1 7b4d 	vneg.f64	d7, d13
 800f95c:	ec53 2b17 	vmov	r2, r3, d7
 800f960:	e794      	b.n	800f88c <_strtod_l+0x98c>
 800f962:	eeb0 7b4d 	vmov.f64	d7, d13
 800f966:	e7f9      	b.n	800f95c <_strtod_l+0xa5c>
 800f968:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f96c:	9b04      	ldr	r3, [sp, #16]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d1ba      	bne.n	800f8e8 <_strtod_l+0x9e8>
 800f972:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f976:	0d1b      	lsrs	r3, r3, #20
 800f978:	051b      	lsls	r3, r3, #20
 800f97a:	4299      	cmp	r1, r3
 800f97c:	d1b4      	bne.n	800f8e8 <_strtod_l+0x9e8>
 800f97e:	ec51 0b1d 	vmov	r0, r1, d13
 800f982:	f7f0 fed9 	bl	8000738 <__aeabi_d2lz>
 800f986:	f7f0 fe91 	bl	80006ac <__aeabi_l2d>
 800f98a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f98e:	ec41 0b17 	vmov	d7, r0, r1
 800f992:	ea43 0308 	orr.w	r3, r3, r8
 800f996:	ea53 030a 	orrs.w	r3, r3, sl
 800f99a:	ee3d db47 	vsub.f64	d13, d13, d7
 800f99e:	d03c      	beq.n	800fa1a <_strtod_l+0xb1a>
 800f9a0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800f9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a8:	f53f acf0 	bmi.w	800f38c <_strtod_l+0x48c>
 800f9ac:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800f9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9b4:	dd98      	ble.n	800f8e8 <_strtod_l+0x9e8>
 800f9b6:	e4e9      	b.n	800f38c <_strtod_l+0x48c>
 800f9b8:	9804      	ldr	r0, [sp, #16]
 800f9ba:	b1f0      	cbz	r0, 800f9fa <_strtod_l+0xafa>
 800f9bc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800f9c0:	d81b      	bhi.n	800f9fa <_strtod_l+0xafa>
 800f9c2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fa48 <_strtod_l+0xb48>
 800f9c6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800f9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ce:	d811      	bhi.n	800f9f4 <_strtod_l+0xaf4>
 800f9d0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800f9d4:	ee1d 3a10 	vmov	r3, s26
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	bf38      	it	cc
 800f9dc:	2301      	movcc	r3, #1
 800f9de:	ee0d 3a10 	vmov	s26, r3
 800f9e2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800f9e6:	f1ba 0f00 	cmp.w	sl, #0
 800f9ea:	d113      	bne.n	800fa14 <_strtod_l+0xb14>
 800f9ec:	eeb1 7b4d 	vneg.f64	d7, d13
 800f9f0:	ec53 2b17 	vmov	r2, r3, d7
 800f9f4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800f9f8:	1a43      	subs	r3, r0, r1
 800f9fa:	eeb0 0b48 	vmov.f64	d0, d8
 800f9fe:	ec43 2b1c 	vmov	d12, r2, r3
 800fa02:	910a      	str	r1, [sp, #40]	; 0x28
 800fa04:	f001 fe24 	bl	8011650 <__ulp>
 800fa08:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fa0a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fa0e:	ec59 8b18 	vmov	r8, r9, d8
 800fa12:	e7ab      	b.n	800f96c <_strtod_l+0xa6c>
 800fa14:	eeb0 7b4d 	vmov.f64	d7, d13
 800fa18:	e7ea      	b.n	800f9f0 <_strtod_l+0xaf0>
 800fa1a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fa1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa22:	f57f af61 	bpl.w	800f8e8 <_strtod_l+0x9e8>
 800fa26:	e4b1      	b.n	800f38c <_strtod_l+0x48c>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	9308      	str	r3, [sp, #32]
 800fa2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa30:	6013      	str	r3, [r2, #0]
 800fa32:	f7ff baad 	b.w	800ef90 <_strtod_l+0x90>
 800fa36:	2a65      	cmp	r2, #101	; 0x65
 800fa38:	f43f ab9f 	beq.w	800f17a <_strtod_l+0x27a>
 800fa3c:	2a45      	cmp	r2, #69	; 0x45
 800fa3e:	f43f ab9c 	beq.w	800f17a <_strtod_l+0x27a>
 800fa42:	2101      	movs	r1, #1
 800fa44:	f7ff bbd4 	b.w	800f1f0 <_strtod_l+0x2f0>
 800fa48:	ffc00000 	.word	0xffc00000
 800fa4c:	41dfffff 	.word	0x41dfffff
 800fa50:	000fffff 	.word	0x000fffff
 800fa54:	7ff00000 	.word	0x7ff00000
 800fa58:	7fefffff 	.word	0x7fefffff
 800fa5c:	3ff00000 	.word	0x3ff00000
 800fa60:	7c9fffff 	.word	0x7c9fffff
 800fa64:	bff00000 	.word	0xbff00000
 800fa68:	7fe00000 	.word	0x7fe00000

0800fa6c <_strtod_r>:
 800fa6c:	4b01      	ldr	r3, [pc, #4]	; (800fa74 <_strtod_r+0x8>)
 800fa6e:	f7ff ba47 	b.w	800ef00 <_strtod_l>
 800fa72:	bf00      	nop
 800fa74:	24000088 	.word	0x24000088

0800fa78 <_strtol_l.constprop.0>:
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa7e:	d001      	beq.n	800fa84 <_strtol_l.constprop.0+0xc>
 800fa80:	2b24      	cmp	r3, #36	; 0x24
 800fa82:	d906      	bls.n	800fa92 <_strtol_l.constprop.0+0x1a>
 800fa84:	f7fe facc 	bl	800e020 <__errno>
 800fa88:	2316      	movs	r3, #22
 800fa8a:	6003      	str	r3, [r0, #0]
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fb78 <_strtol_l.constprop.0+0x100>
 800fa96:	460d      	mov	r5, r1
 800fa98:	462e      	mov	r6, r5
 800fa9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800faa2:	f017 0708 	ands.w	r7, r7, #8
 800faa6:	d1f7      	bne.n	800fa98 <_strtol_l.constprop.0+0x20>
 800faa8:	2c2d      	cmp	r4, #45	; 0x2d
 800faaa:	d132      	bne.n	800fb12 <_strtol_l.constprop.0+0x9a>
 800faac:	782c      	ldrb	r4, [r5, #0]
 800faae:	2701      	movs	r7, #1
 800fab0:	1cb5      	adds	r5, r6, #2
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d05b      	beq.n	800fb6e <_strtol_l.constprop.0+0xf6>
 800fab6:	2b10      	cmp	r3, #16
 800fab8:	d109      	bne.n	800face <_strtol_l.constprop.0+0x56>
 800faba:	2c30      	cmp	r4, #48	; 0x30
 800fabc:	d107      	bne.n	800face <_strtol_l.constprop.0+0x56>
 800fabe:	782c      	ldrb	r4, [r5, #0]
 800fac0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fac4:	2c58      	cmp	r4, #88	; 0x58
 800fac6:	d14d      	bne.n	800fb64 <_strtol_l.constprop.0+0xec>
 800fac8:	786c      	ldrb	r4, [r5, #1]
 800faca:	2310      	movs	r3, #16
 800facc:	3502      	adds	r5, #2
 800face:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fad2:	f108 38ff 	add.w	r8, r8, #4294967295
 800fad6:	f04f 0c00 	mov.w	ip, #0
 800fada:	fbb8 f9f3 	udiv	r9, r8, r3
 800fade:	4666      	mov	r6, ip
 800fae0:	fb03 8a19 	mls	sl, r3, r9, r8
 800fae4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fae8:	f1be 0f09 	cmp.w	lr, #9
 800faec:	d816      	bhi.n	800fb1c <_strtol_l.constprop.0+0xa4>
 800faee:	4674      	mov	r4, lr
 800faf0:	42a3      	cmp	r3, r4
 800faf2:	dd24      	ble.n	800fb3e <_strtol_l.constprop.0+0xc6>
 800faf4:	f1bc 0f00 	cmp.w	ip, #0
 800faf8:	db1e      	blt.n	800fb38 <_strtol_l.constprop.0+0xc0>
 800fafa:	45b1      	cmp	r9, r6
 800fafc:	d31c      	bcc.n	800fb38 <_strtol_l.constprop.0+0xc0>
 800fafe:	d101      	bne.n	800fb04 <_strtol_l.constprop.0+0x8c>
 800fb00:	45a2      	cmp	sl, r4
 800fb02:	db19      	blt.n	800fb38 <_strtol_l.constprop.0+0xc0>
 800fb04:	fb06 4603 	mla	r6, r6, r3, r4
 800fb08:	f04f 0c01 	mov.w	ip, #1
 800fb0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb10:	e7e8      	b.n	800fae4 <_strtol_l.constprop.0+0x6c>
 800fb12:	2c2b      	cmp	r4, #43	; 0x2b
 800fb14:	bf04      	itt	eq
 800fb16:	782c      	ldrbeq	r4, [r5, #0]
 800fb18:	1cb5      	addeq	r5, r6, #2
 800fb1a:	e7ca      	b.n	800fab2 <_strtol_l.constprop.0+0x3a>
 800fb1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fb20:	f1be 0f19 	cmp.w	lr, #25
 800fb24:	d801      	bhi.n	800fb2a <_strtol_l.constprop.0+0xb2>
 800fb26:	3c37      	subs	r4, #55	; 0x37
 800fb28:	e7e2      	b.n	800faf0 <_strtol_l.constprop.0+0x78>
 800fb2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fb2e:	f1be 0f19 	cmp.w	lr, #25
 800fb32:	d804      	bhi.n	800fb3e <_strtol_l.constprop.0+0xc6>
 800fb34:	3c57      	subs	r4, #87	; 0x57
 800fb36:	e7db      	b.n	800faf0 <_strtol_l.constprop.0+0x78>
 800fb38:	f04f 3cff 	mov.w	ip, #4294967295
 800fb3c:	e7e6      	b.n	800fb0c <_strtol_l.constprop.0+0x94>
 800fb3e:	f1bc 0f00 	cmp.w	ip, #0
 800fb42:	da05      	bge.n	800fb50 <_strtol_l.constprop.0+0xd8>
 800fb44:	2322      	movs	r3, #34	; 0x22
 800fb46:	6003      	str	r3, [r0, #0]
 800fb48:	4646      	mov	r6, r8
 800fb4a:	b942      	cbnz	r2, 800fb5e <_strtol_l.constprop.0+0xe6>
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	e79e      	b.n	800fa8e <_strtol_l.constprop.0+0x16>
 800fb50:	b107      	cbz	r7, 800fb54 <_strtol_l.constprop.0+0xdc>
 800fb52:	4276      	negs	r6, r6
 800fb54:	2a00      	cmp	r2, #0
 800fb56:	d0f9      	beq.n	800fb4c <_strtol_l.constprop.0+0xd4>
 800fb58:	f1bc 0f00 	cmp.w	ip, #0
 800fb5c:	d000      	beq.n	800fb60 <_strtol_l.constprop.0+0xe8>
 800fb5e:	1e69      	subs	r1, r5, #1
 800fb60:	6011      	str	r1, [r2, #0]
 800fb62:	e7f3      	b.n	800fb4c <_strtol_l.constprop.0+0xd4>
 800fb64:	2430      	movs	r4, #48	; 0x30
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1b1      	bne.n	800face <_strtol_l.constprop.0+0x56>
 800fb6a:	2308      	movs	r3, #8
 800fb6c:	e7af      	b.n	800face <_strtol_l.constprop.0+0x56>
 800fb6e:	2c30      	cmp	r4, #48	; 0x30
 800fb70:	d0a5      	beq.n	800fabe <_strtol_l.constprop.0+0x46>
 800fb72:	230a      	movs	r3, #10
 800fb74:	e7ab      	b.n	800face <_strtol_l.constprop.0+0x56>
 800fb76:	bf00      	nop
 800fb78:	080141c1 	.word	0x080141c1

0800fb7c <_strtol_r>:
 800fb7c:	f7ff bf7c 	b.w	800fa78 <_strtol_l.constprop.0>

0800fb80 <_vsniprintf_r>:
 800fb80:	b530      	push	{r4, r5, lr}
 800fb82:	4614      	mov	r4, r2
 800fb84:	2c00      	cmp	r4, #0
 800fb86:	b09b      	sub	sp, #108	; 0x6c
 800fb88:	4605      	mov	r5, r0
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	da05      	bge.n	800fb9a <_vsniprintf_r+0x1a>
 800fb8e:	238b      	movs	r3, #139	; 0x8b
 800fb90:	6003      	str	r3, [r0, #0]
 800fb92:	f04f 30ff 	mov.w	r0, #4294967295
 800fb96:	b01b      	add	sp, #108	; 0x6c
 800fb98:	bd30      	pop	{r4, r5, pc}
 800fb9a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fb9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fba2:	bf14      	ite	ne
 800fba4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fba8:	4623      	moveq	r3, r4
 800fbaa:	9302      	str	r3, [sp, #8]
 800fbac:	9305      	str	r3, [sp, #20]
 800fbae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbb2:	9100      	str	r1, [sp, #0]
 800fbb4:	9104      	str	r1, [sp, #16]
 800fbb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fbba:	4669      	mov	r1, sp
 800fbbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fbbe:	f001 ffe5 	bl	8011b8c <_svfiprintf_r>
 800fbc2:	1c43      	adds	r3, r0, #1
 800fbc4:	bfbc      	itt	lt
 800fbc6:	238b      	movlt	r3, #139	; 0x8b
 800fbc8:	602b      	strlt	r3, [r5, #0]
 800fbca:	2c00      	cmp	r4, #0
 800fbcc:	d0e3      	beq.n	800fb96 <_vsniprintf_r+0x16>
 800fbce:	9b00      	ldr	r3, [sp, #0]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	701a      	strb	r2, [r3, #0]
 800fbd4:	e7df      	b.n	800fb96 <_vsniprintf_r+0x16>
	...

0800fbd8 <vsniprintf>:
 800fbd8:	b507      	push	{r0, r1, r2, lr}
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	4613      	mov	r3, r2
 800fbde:	460a      	mov	r2, r1
 800fbe0:	4601      	mov	r1, r0
 800fbe2:	4803      	ldr	r0, [pc, #12]	; (800fbf0 <vsniprintf+0x18>)
 800fbe4:	6800      	ldr	r0, [r0, #0]
 800fbe6:	f7ff ffcb 	bl	800fb80 <_vsniprintf_r>
 800fbea:	b003      	add	sp, #12
 800fbec:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbf0:	24000020 	.word	0x24000020

0800fbf4 <_write_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d07      	ldr	r5, [pc, #28]	; (800fc14 <_write_r+0x20>)
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	4608      	mov	r0, r1
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	602a      	str	r2, [r5, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	f7f2 fb65 	bl	80022d2 <_write>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_write_r+0x1e>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_write_r+0x1e>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	24005130 	.word	0x24005130

0800fc18 <_close_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d06      	ldr	r5, [pc, #24]	; (800fc34 <_close_r+0x1c>)
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	4604      	mov	r4, r0
 800fc20:	4608      	mov	r0, r1
 800fc22:	602b      	str	r3, [r5, #0]
 800fc24:	f7f2 fb71 	bl	800230a <_close>
 800fc28:	1c43      	adds	r3, r0, #1
 800fc2a:	d102      	bne.n	800fc32 <_close_r+0x1a>
 800fc2c:	682b      	ldr	r3, [r5, #0]
 800fc2e:	b103      	cbz	r3, 800fc32 <_close_r+0x1a>
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	bd38      	pop	{r3, r4, r5, pc}
 800fc34:	24005130 	.word	0x24005130

0800fc38 <quorem>:
 800fc38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc3c:	6903      	ldr	r3, [r0, #16]
 800fc3e:	690c      	ldr	r4, [r1, #16]
 800fc40:	42a3      	cmp	r3, r4
 800fc42:	4607      	mov	r7, r0
 800fc44:	f2c0 8081 	blt.w	800fd4a <quorem+0x112>
 800fc48:	3c01      	subs	r4, #1
 800fc4a:	f101 0814 	add.w	r8, r1, #20
 800fc4e:	f100 0514 	add.w	r5, r0, #20
 800fc52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc56:	9301      	str	r3, [sp, #4]
 800fc58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc60:	3301      	adds	r3, #1
 800fc62:	429a      	cmp	r2, r3
 800fc64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc6c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc70:	d331      	bcc.n	800fcd6 <quorem+0x9e>
 800fc72:	f04f 0e00 	mov.w	lr, #0
 800fc76:	4640      	mov	r0, r8
 800fc78:	46ac      	mov	ip, r5
 800fc7a:	46f2      	mov	sl, lr
 800fc7c:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc80:	b293      	uxth	r3, r2
 800fc82:	fb06 e303 	mla	r3, r6, r3, lr
 800fc86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	ebaa 0303 	sub.w	r3, sl, r3
 800fc90:	f8dc a000 	ldr.w	sl, [ip]
 800fc94:	0c12      	lsrs	r2, r2, #16
 800fc96:	fa13 f38a 	uxtah	r3, r3, sl
 800fc9a:	fb06 e202 	mla	r2, r6, r2, lr
 800fc9e:	9300      	str	r3, [sp, #0]
 800fca0:	9b00      	ldr	r3, [sp, #0]
 800fca2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fca6:	b292      	uxth	r2, r2
 800fca8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fcac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcb0:	f8bd 3000 	ldrh.w	r3, [sp]
 800fcb4:	4581      	cmp	r9, r0
 800fcb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcba:	f84c 3b04 	str.w	r3, [ip], #4
 800fcbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fcc2:	d2db      	bcs.n	800fc7c <quorem+0x44>
 800fcc4:	f855 300b 	ldr.w	r3, [r5, fp]
 800fcc8:	b92b      	cbnz	r3, 800fcd6 <quorem+0x9e>
 800fcca:	9b01      	ldr	r3, [sp, #4]
 800fccc:	3b04      	subs	r3, #4
 800fcce:	429d      	cmp	r5, r3
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	d32e      	bcc.n	800fd32 <quorem+0xfa>
 800fcd4:	613c      	str	r4, [r7, #16]
 800fcd6:	4638      	mov	r0, r7
 800fcd8:	f001 fc14 	bl	8011504 <__mcmp>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	db24      	blt.n	800fd2a <quorem+0xf2>
 800fce0:	3601      	adds	r6, #1
 800fce2:	4628      	mov	r0, r5
 800fce4:	f04f 0c00 	mov.w	ip, #0
 800fce8:	f858 2b04 	ldr.w	r2, [r8], #4
 800fcec:	f8d0 e000 	ldr.w	lr, [r0]
 800fcf0:	b293      	uxth	r3, r2
 800fcf2:	ebac 0303 	sub.w	r3, ip, r3
 800fcf6:	0c12      	lsrs	r2, r2, #16
 800fcf8:	fa13 f38e 	uxtah	r3, r3, lr
 800fcfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fd00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd0a:	45c1      	cmp	r9, r8
 800fd0c:	f840 3b04 	str.w	r3, [r0], #4
 800fd10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fd14:	d2e8      	bcs.n	800fce8 <quorem+0xb0>
 800fd16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd1e:	b922      	cbnz	r2, 800fd2a <quorem+0xf2>
 800fd20:	3b04      	subs	r3, #4
 800fd22:	429d      	cmp	r5, r3
 800fd24:	461a      	mov	r2, r3
 800fd26:	d30a      	bcc.n	800fd3e <quorem+0x106>
 800fd28:	613c      	str	r4, [r7, #16]
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	b003      	add	sp, #12
 800fd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd32:	6812      	ldr	r2, [r2, #0]
 800fd34:	3b04      	subs	r3, #4
 800fd36:	2a00      	cmp	r2, #0
 800fd38:	d1cc      	bne.n	800fcd4 <quorem+0x9c>
 800fd3a:	3c01      	subs	r4, #1
 800fd3c:	e7c7      	b.n	800fcce <quorem+0x96>
 800fd3e:	6812      	ldr	r2, [r2, #0]
 800fd40:	3b04      	subs	r3, #4
 800fd42:	2a00      	cmp	r2, #0
 800fd44:	d1f0      	bne.n	800fd28 <quorem+0xf0>
 800fd46:	3c01      	subs	r4, #1
 800fd48:	e7eb      	b.n	800fd22 <quorem+0xea>
 800fd4a:	2000      	movs	r0, #0
 800fd4c:	e7ee      	b.n	800fd2c <quorem+0xf4>
	...

0800fd50 <_dtoa_r>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	ed2d 8b02 	vpush	{d8}
 800fd58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fd5a:	b091      	sub	sp, #68	; 0x44
 800fd5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd60:	ec59 8b10 	vmov	r8, r9, d0
 800fd64:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800fd66:	9106      	str	r1, [sp, #24]
 800fd68:	4606      	mov	r6, r0
 800fd6a:	9208      	str	r2, [sp, #32]
 800fd6c:	930c      	str	r3, [sp, #48]	; 0x30
 800fd6e:	b975      	cbnz	r5, 800fd8e <_dtoa_r+0x3e>
 800fd70:	2010      	movs	r0, #16
 800fd72:	f001 f8e1 	bl	8010f38 <malloc>
 800fd76:	4602      	mov	r2, r0
 800fd78:	6270      	str	r0, [r6, #36]	; 0x24
 800fd7a:	b920      	cbnz	r0, 800fd86 <_dtoa_r+0x36>
 800fd7c:	4baa      	ldr	r3, [pc, #680]	; (8010028 <_dtoa_r+0x2d8>)
 800fd7e:	21ea      	movs	r1, #234	; 0xea
 800fd80:	48aa      	ldr	r0, [pc, #680]	; (801002c <_dtoa_r+0x2dc>)
 800fd82:	f002 fc59 	bl	8012638 <__assert_func>
 800fd86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd8a:	6005      	str	r5, [r0, #0]
 800fd8c:	60c5      	str	r5, [r0, #12]
 800fd8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fd90:	6819      	ldr	r1, [r3, #0]
 800fd92:	b151      	cbz	r1, 800fdaa <_dtoa_r+0x5a>
 800fd94:	685a      	ldr	r2, [r3, #4]
 800fd96:	604a      	str	r2, [r1, #4]
 800fd98:	2301      	movs	r3, #1
 800fd9a:	4093      	lsls	r3, r2
 800fd9c:	608b      	str	r3, [r1, #8]
 800fd9e:	4630      	mov	r0, r6
 800fda0:	f001 f924 	bl	8010fec <_Bfree>
 800fda4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fda6:	2200      	movs	r2, #0
 800fda8:	601a      	str	r2, [r3, #0]
 800fdaa:	f1b9 0300 	subs.w	r3, r9, #0
 800fdae:	bfbb      	ittet	lt
 800fdb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fdb4:	9303      	strlt	r3, [sp, #12]
 800fdb6:	2300      	movge	r3, #0
 800fdb8:	2201      	movlt	r2, #1
 800fdba:	bfac      	ite	ge
 800fdbc:	6023      	strge	r3, [r4, #0]
 800fdbe:	6022      	strlt	r2, [r4, #0]
 800fdc0:	4b9b      	ldr	r3, [pc, #620]	; (8010030 <_dtoa_r+0x2e0>)
 800fdc2:	9c03      	ldr	r4, [sp, #12]
 800fdc4:	43a3      	bics	r3, r4
 800fdc6:	d11c      	bne.n	800fe02 <_dtoa_r+0xb2>
 800fdc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fdca:	f242 730f 	movw	r3, #9999	; 0x270f
 800fdce:	6013      	str	r3, [r2, #0]
 800fdd0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800fdd4:	ea53 0308 	orrs.w	r3, r3, r8
 800fdd8:	f000 84fd 	beq.w	80107d6 <_dtoa_r+0xa86>
 800fddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fdde:	b963      	cbnz	r3, 800fdfa <_dtoa_r+0xaa>
 800fde0:	4b94      	ldr	r3, [pc, #592]	; (8010034 <_dtoa_r+0x2e4>)
 800fde2:	e01f      	b.n	800fe24 <_dtoa_r+0xd4>
 800fde4:	4b94      	ldr	r3, [pc, #592]	; (8010038 <_dtoa_r+0x2e8>)
 800fde6:	9301      	str	r3, [sp, #4]
 800fde8:	3308      	adds	r3, #8
 800fdea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fdec:	6013      	str	r3, [r2, #0]
 800fdee:	9801      	ldr	r0, [sp, #4]
 800fdf0:	b011      	add	sp, #68	; 0x44
 800fdf2:	ecbd 8b02 	vpop	{d8}
 800fdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdfa:	4b8e      	ldr	r3, [pc, #568]	; (8010034 <_dtoa_r+0x2e4>)
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	3303      	adds	r3, #3
 800fe00:	e7f3      	b.n	800fdea <_dtoa_r+0x9a>
 800fe02:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fe06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fe0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0e:	d10b      	bne.n	800fe28 <_dtoa_r+0xd8>
 800fe10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe12:	2301      	movs	r3, #1
 800fe14:	6013      	str	r3, [r2, #0]
 800fe16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 84d9 	beq.w	80107d0 <_dtoa_r+0xa80>
 800fe1e:	4887      	ldr	r0, [pc, #540]	; (801003c <_dtoa_r+0x2ec>)
 800fe20:	6018      	str	r0, [r3, #0]
 800fe22:	1e43      	subs	r3, r0, #1
 800fe24:	9301      	str	r3, [sp, #4]
 800fe26:	e7e2      	b.n	800fdee <_dtoa_r+0x9e>
 800fe28:	a90f      	add	r1, sp, #60	; 0x3c
 800fe2a:	aa0e      	add	r2, sp, #56	; 0x38
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	eeb0 0b48 	vmov.f64	d0, d8
 800fe32:	f001 fc89 	bl	8011748 <__d2b>
 800fe36:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800fe3a:	4605      	mov	r5, r0
 800fe3c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fe3e:	2900      	cmp	r1, #0
 800fe40:	d046      	beq.n	800fed0 <_dtoa_r+0x180>
 800fe42:	ee18 4a90 	vmov	r4, s17
 800fe46:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fe4a:	ec53 2b18 	vmov	r2, r3, d8
 800fe4e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800fe52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800fe5a:	2400      	movs	r4, #0
 800fe5c:	ec43 2b16 	vmov	d6, r2, r3
 800fe60:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800fe64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010010 <_dtoa_r+0x2c0>
 800fe68:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fe6c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8010018 <_dtoa_r+0x2c8>
 800fe70:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fe74:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010020 <_dtoa_r+0x2d0>
 800fe78:	ee07 1a90 	vmov	s15, r1
 800fe7c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fe80:	eeb0 7b46 	vmov.f64	d7, d6
 800fe84:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fe88:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fe8c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fe90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe94:	ee16 ba90 	vmov	fp, s13
 800fe98:	940a      	str	r4, [sp, #40]	; 0x28
 800fe9a:	d508      	bpl.n	800feae <_dtoa_r+0x15e>
 800fe9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fea0:	eeb4 6b47 	vcmp.f64	d6, d7
 800fea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea8:	bf18      	it	ne
 800feaa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800feae:	f1bb 0f16 	cmp.w	fp, #22
 800feb2:	d82f      	bhi.n	800ff14 <_dtoa_r+0x1c4>
 800feb4:	4b62      	ldr	r3, [pc, #392]	; (8010040 <_dtoa_r+0x2f0>)
 800feb6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800feba:	ed93 7b00 	vldr	d7, [r3]
 800febe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec6:	d501      	bpl.n	800fecc <_dtoa_r+0x17c>
 800fec8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fecc:	2300      	movs	r3, #0
 800fece:	e022      	b.n	800ff16 <_dtoa_r+0x1c6>
 800fed0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fed2:	4401      	add	r1, r0
 800fed4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800fed8:	2b20      	cmp	r3, #32
 800feda:	bfc1      	itttt	gt
 800fedc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fee0:	fa04 f303 	lslgt.w	r3, r4, r3
 800fee4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800fee8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800feec:	bfd6      	itet	le
 800feee:	f1c3 0320 	rsble	r3, r3, #32
 800fef2:	ea43 0808 	orrgt.w	r8, r3, r8
 800fef6:	fa08 f803 	lslle.w	r8, r8, r3
 800fefa:	ee07 8a90 	vmov	s15, r8
 800fefe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ff02:	3901      	subs	r1, #1
 800ff04:	ee17 4a90 	vmov	r4, s15
 800ff08:	ec53 2b17 	vmov	r2, r3, d7
 800ff0c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ff10:	2401      	movs	r4, #1
 800ff12:	e7a3      	b.n	800fe5c <_dtoa_r+0x10c>
 800ff14:	2301      	movs	r3, #1
 800ff16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff18:	1a43      	subs	r3, r0, r1
 800ff1a:	1e5a      	subs	r2, r3, #1
 800ff1c:	bf45      	ittet	mi
 800ff1e:	f1c3 0301 	rsbmi	r3, r3, #1
 800ff22:	9304      	strmi	r3, [sp, #16]
 800ff24:	2300      	movpl	r3, #0
 800ff26:	2300      	movmi	r3, #0
 800ff28:	9205      	str	r2, [sp, #20]
 800ff2a:	bf54      	ite	pl
 800ff2c:	9304      	strpl	r3, [sp, #16]
 800ff2e:	9305      	strmi	r3, [sp, #20]
 800ff30:	f1bb 0f00 	cmp.w	fp, #0
 800ff34:	db18      	blt.n	800ff68 <_dtoa_r+0x218>
 800ff36:	9b05      	ldr	r3, [sp, #20]
 800ff38:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800ff3c:	445b      	add	r3, fp
 800ff3e:	9305      	str	r3, [sp, #20]
 800ff40:	2300      	movs	r3, #0
 800ff42:	9a06      	ldr	r2, [sp, #24]
 800ff44:	2a09      	cmp	r2, #9
 800ff46:	d849      	bhi.n	800ffdc <_dtoa_r+0x28c>
 800ff48:	2a05      	cmp	r2, #5
 800ff4a:	bfc4      	itt	gt
 800ff4c:	3a04      	subgt	r2, #4
 800ff4e:	9206      	strgt	r2, [sp, #24]
 800ff50:	9a06      	ldr	r2, [sp, #24]
 800ff52:	f1a2 0202 	sub.w	r2, r2, #2
 800ff56:	bfcc      	ite	gt
 800ff58:	2400      	movgt	r4, #0
 800ff5a:	2401      	movle	r4, #1
 800ff5c:	2a03      	cmp	r2, #3
 800ff5e:	d848      	bhi.n	800fff2 <_dtoa_r+0x2a2>
 800ff60:	e8df f002 	tbb	[pc, r2]
 800ff64:	3a2c2e0b 	.word	0x3a2c2e0b
 800ff68:	9b04      	ldr	r3, [sp, #16]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	eba3 030b 	sub.w	r3, r3, fp
 800ff70:	9304      	str	r3, [sp, #16]
 800ff72:	9209      	str	r2, [sp, #36]	; 0x24
 800ff74:	f1cb 0300 	rsb	r3, fp, #0
 800ff78:	e7e3      	b.n	800ff42 <_dtoa_r+0x1f2>
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	9207      	str	r2, [sp, #28]
 800ff7e:	9a08      	ldr	r2, [sp, #32]
 800ff80:	2a00      	cmp	r2, #0
 800ff82:	dc39      	bgt.n	800fff8 <_dtoa_r+0x2a8>
 800ff84:	f04f 0a01 	mov.w	sl, #1
 800ff88:	46d1      	mov	r9, sl
 800ff8a:	4652      	mov	r2, sl
 800ff8c:	f8cd a020 	str.w	sl, [sp, #32]
 800ff90:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800ff92:	2100      	movs	r1, #0
 800ff94:	6079      	str	r1, [r7, #4]
 800ff96:	2004      	movs	r0, #4
 800ff98:	f100 0c14 	add.w	ip, r0, #20
 800ff9c:	4594      	cmp	ip, r2
 800ff9e:	6879      	ldr	r1, [r7, #4]
 800ffa0:	d92f      	bls.n	8010002 <_dtoa_r+0x2b2>
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	930d      	str	r3, [sp, #52]	; 0x34
 800ffa6:	f000 ffe1 	bl	8010f6c <_Balloc>
 800ffaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffac:	9001      	str	r0, [sp, #4]
 800ffae:	4602      	mov	r2, r0
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	d149      	bne.n	8010048 <_dtoa_r+0x2f8>
 800ffb4:	4b23      	ldr	r3, [pc, #140]	; (8010044 <_dtoa_r+0x2f4>)
 800ffb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ffba:	e6e1      	b.n	800fd80 <_dtoa_r+0x30>
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	e7dd      	b.n	800ff7c <_dtoa_r+0x22c>
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	9207      	str	r2, [sp, #28]
 800ffc4:	9a08      	ldr	r2, [sp, #32]
 800ffc6:	eb0b 0a02 	add.w	sl, fp, r2
 800ffca:	f10a 0901 	add.w	r9, sl, #1
 800ffce:	464a      	mov	r2, r9
 800ffd0:	2a01      	cmp	r2, #1
 800ffd2:	bfb8      	it	lt
 800ffd4:	2201      	movlt	r2, #1
 800ffd6:	e7db      	b.n	800ff90 <_dtoa_r+0x240>
 800ffd8:	2201      	movs	r2, #1
 800ffda:	e7f2      	b.n	800ffc2 <_dtoa_r+0x272>
 800ffdc:	2401      	movs	r4, #1
 800ffde:	2200      	movs	r2, #0
 800ffe0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800ffe4:	f04f 3aff 	mov.w	sl, #4294967295
 800ffe8:	2100      	movs	r1, #0
 800ffea:	46d1      	mov	r9, sl
 800ffec:	2212      	movs	r2, #18
 800ffee:	9108      	str	r1, [sp, #32]
 800fff0:	e7ce      	b.n	800ff90 <_dtoa_r+0x240>
 800fff2:	2201      	movs	r2, #1
 800fff4:	9207      	str	r2, [sp, #28]
 800fff6:	e7f5      	b.n	800ffe4 <_dtoa_r+0x294>
 800fff8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fffc:	46d1      	mov	r9, sl
 800fffe:	4652      	mov	r2, sl
 8010000:	e7c6      	b.n	800ff90 <_dtoa_r+0x240>
 8010002:	3101      	adds	r1, #1
 8010004:	6079      	str	r1, [r7, #4]
 8010006:	0040      	lsls	r0, r0, #1
 8010008:	e7c6      	b.n	800ff98 <_dtoa_r+0x248>
 801000a:	bf00      	nop
 801000c:	f3af 8000 	nop.w
 8010010:	636f4361 	.word	0x636f4361
 8010014:	3fd287a7 	.word	0x3fd287a7
 8010018:	8b60c8b3 	.word	0x8b60c8b3
 801001c:	3fc68a28 	.word	0x3fc68a28
 8010020:	509f79fb 	.word	0x509f79fb
 8010024:	3fd34413 	.word	0x3fd34413
 8010028:	080142ce 	.word	0x080142ce
 801002c:	080142e5 	.word	0x080142e5
 8010030:	7ff00000 	.word	0x7ff00000
 8010034:	080142ca 	.word	0x080142ca
 8010038:	080142c1 	.word	0x080142c1
 801003c:	0801453a 	.word	0x0801453a
 8010040:	08014450 	.word	0x08014450
 8010044:	08014340 	.word	0x08014340
 8010048:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801004a:	9901      	ldr	r1, [sp, #4]
 801004c:	6011      	str	r1, [r2, #0]
 801004e:	f1b9 0f0e 	cmp.w	r9, #14
 8010052:	d86c      	bhi.n	801012e <_dtoa_r+0x3de>
 8010054:	2c00      	cmp	r4, #0
 8010056:	d06a      	beq.n	801012e <_dtoa_r+0x3de>
 8010058:	f1bb 0f00 	cmp.w	fp, #0
 801005c:	f340 80a0 	ble.w	80101a0 <_dtoa_r+0x450>
 8010060:	49c1      	ldr	r1, [pc, #772]	; (8010368 <_dtoa_r+0x618>)
 8010062:	f00b 020f 	and.w	r2, fp, #15
 8010066:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801006a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801006e:	ed92 7b00 	vldr	d7, [r2]
 8010072:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010076:	f000 8087 	beq.w	8010188 <_dtoa_r+0x438>
 801007a:	4abc      	ldr	r2, [pc, #752]	; (801036c <_dtoa_r+0x61c>)
 801007c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010080:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010084:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010088:	f001 010f 	and.w	r1, r1, #15
 801008c:	2203      	movs	r2, #3
 801008e:	48b7      	ldr	r0, [pc, #732]	; (801036c <_dtoa_r+0x61c>)
 8010090:	2900      	cmp	r1, #0
 8010092:	d17b      	bne.n	801018c <_dtoa_r+0x43c>
 8010094:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010098:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801009c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80100a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80100a2:	2900      	cmp	r1, #0
 80100a4:	f000 80a2 	beq.w	80101ec <_dtoa_r+0x49c>
 80100a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80100ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80100b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80100b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b8:	f140 8098 	bpl.w	80101ec <_dtoa_r+0x49c>
 80100bc:	f1b9 0f00 	cmp.w	r9, #0
 80100c0:	f000 8094 	beq.w	80101ec <_dtoa_r+0x49c>
 80100c4:	f1ba 0f00 	cmp.w	sl, #0
 80100c8:	dd2f      	ble.n	801012a <_dtoa_r+0x3da>
 80100ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80100ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80100d6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80100da:	3201      	adds	r2, #1
 80100dc:	4650      	mov	r0, sl
 80100de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80100e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80100e6:	ee07 2a90 	vmov	s15, r2
 80100ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80100ee:	eea7 5b06 	vfma.f64	d5, d7, d6
 80100f2:	ee15 4a90 	vmov	r4, s11
 80100f6:	ec52 1b15 	vmov	r1, r2, d5
 80100fa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80100fe:	2800      	cmp	r0, #0
 8010100:	d177      	bne.n	80101f2 <_dtoa_r+0x4a2>
 8010102:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010106:	ee36 6b47 	vsub.f64	d6, d6, d7
 801010a:	ec42 1b17 	vmov	d7, r1, r2
 801010e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010116:	f300 8263 	bgt.w	80105e0 <_dtoa_r+0x890>
 801011a:	eeb1 7b47 	vneg.f64	d7, d7
 801011e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010126:	f100 8258 	bmi.w	80105da <_dtoa_r+0x88a>
 801012a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801012e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010130:	2a00      	cmp	r2, #0
 8010132:	f2c0 811d 	blt.w	8010370 <_dtoa_r+0x620>
 8010136:	f1bb 0f0e 	cmp.w	fp, #14
 801013a:	f300 8119 	bgt.w	8010370 <_dtoa_r+0x620>
 801013e:	4b8a      	ldr	r3, [pc, #552]	; (8010368 <_dtoa_r+0x618>)
 8010140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010144:	ed93 6b00 	vldr	d6, [r3]
 8010148:	9b08      	ldr	r3, [sp, #32]
 801014a:	2b00      	cmp	r3, #0
 801014c:	f280 80b7 	bge.w	80102be <_dtoa_r+0x56e>
 8010150:	f1b9 0f00 	cmp.w	r9, #0
 8010154:	f300 80b3 	bgt.w	80102be <_dtoa_r+0x56e>
 8010158:	f040 823f 	bne.w	80105da <_dtoa_r+0x88a>
 801015c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010160:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010164:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010168:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801016c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010170:	464c      	mov	r4, r9
 8010172:	464f      	mov	r7, r9
 8010174:	f280 8215 	bge.w	80105a2 <_dtoa_r+0x852>
 8010178:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801017c:	2331      	movs	r3, #49	; 0x31
 801017e:	f808 3b01 	strb.w	r3, [r8], #1
 8010182:	f10b 0b01 	add.w	fp, fp, #1
 8010186:	e211      	b.n	80105ac <_dtoa_r+0x85c>
 8010188:	2202      	movs	r2, #2
 801018a:	e780      	b.n	801008e <_dtoa_r+0x33e>
 801018c:	07cc      	lsls	r4, r1, #31
 801018e:	d504      	bpl.n	801019a <_dtoa_r+0x44a>
 8010190:	ed90 6b00 	vldr	d6, [r0]
 8010194:	3201      	adds	r2, #1
 8010196:	ee27 7b06 	vmul.f64	d7, d7, d6
 801019a:	1049      	asrs	r1, r1, #1
 801019c:	3008      	adds	r0, #8
 801019e:	e777      	b.n	8010090 <_dtoa_r+0x340>
 80101a0:	d022      	beq.n	80101e8 <_dtoa_r+0x498>
 80101a2:	f1cb 0100 	rsb	r1, fp, #0
 80101a6:	4a70      	ldr	r2, [pc, #448]	; (8010368 <_dtoa_r+0x618>)
 80101a8:	f001 000f 	and.w	r0, r1, #15
 80101ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80101b0:	ed92 7b00 	vldr	d7, [r2]
 80101b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80101b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101bc:	486b      	ldr	r0, [pc, #428]	; (801036c <_dtoa_r+0x61c>)
 80101be:	1109      	asrs	r1, r1, #4
 80101c0:	2400      	movs	r4, #0
 80101c2:	2202      	movs	r2, #2
 80101c4:	b929      	cbnz	r1, 80101d2 <_dtoa_r+0x482>
 80101c6:	2c00      	cmp	r4, #0
 80101c8:	f43f af6a 	beq.w	80100a0 <_dtoa_r+0x350>
 80101cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101d0:	e766      	b.n	80100a0 <_dtoa_r+0x350>
 80101d2:	07cf      	lsls	r7, r1, #31
 80101d4:	d505      	bpl.n	80101e2 <_dtoa_r+0x492>
 80101d6:	ed90 6b00 	vldr	d6, [r0]
 80101da:	3201      	adds	r2, #1
 80101dc:	2401      	movs	r4, #1
 80101de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101e2:	1049      	asrs	r1, r1, #1
 80101e4:	3008      	adds	r0, #8
 80101e6:	e7ed      	b.n	80101c4 <_dtoa_r+0x474>
 80101e8:	2202      	movs	r2, #2
 80101ea:	e759      	b.n	80100a0 <_dtoa_r+0x350>
 80101ec:	465f      	mov	r7, fp
 80101ee:	4648      	mov	r0, r9
 80101f0:	e775      	b.n	80100de <_dtoa_r+0x38e>
 80101f2:	ec42 1b17 	vmov	d7, r1, r2
 80101f6:	4a5c      	ldr	r2, [pc, #368]	; (8010368 <_dtoa_r+0x618>)
 80101f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80101fc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010200:	9a01      	ldr	r2, [sp, #4]
 8010202:	1814      	adds	r4, r2, r0
 8010204:	9a07      	ldr	r2, [sp, #28]
 8010206:	b352      	cbz	r2, 801025e <_dtoa_r+0x50e>
 8010208:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801020c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010210:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010214:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010218:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801021c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010220:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010224:	ee14 2a90 	vmov	r2, s9
 8010228:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801022c:	3230      	adds	r2, #48	; 0x30
 801022e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010232:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023a:	f808 2b01 	strb.w	r2, [r8], #1
 801023e:	d439      	bmi.n	80102b4 <_dtoa_r+0x564>
 8010240:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010244:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024c:	d472      	bmi.n	8010334 <_dtoa_r+0x5e4>
 801024e:	45a0      	cmp	r8, r4
 8010250:	f43f af6b 	beq.w	801012a <_dtoa_r+0x3da>
 8010254:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010258:	ee26 6b03 	vmul.f64	d6, d6, d3
 801025c:	e7e0      	b.n	8010220 <_dtoa_r+0x4d0>
 801025e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010262:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010266:	4621      	mov	r1, r4
 8010268:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801026c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010270:	ee14 2a90 	vmov	r2, s9
 8010274:	3230      	adds	r2, #48	; 0x30
 8010276:	f808 2b01 	strb.w	r2, [r8], #1
 801027a:	45a0      	cmp	r8, r4
 801027c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010280:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010284:	d118      	bne.n	80102b8 <_dtoa_r+0x568>
 8010286:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801028a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801028e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010296:	dc4d      	bgt.n	8010334 <_dtoa_r+0x5e4>
 8010298:	ee35 7b47 	vsub.f64	d7, d5, d7
 801029c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80102a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a4:	f57f af41 	bpl.w	801012a <_dtoa_r+0x3da>
 80102a8:	4688      	mov	r8, r1
 80102aa:	3901      	subs	r1, #1
 80102ac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80102b0:	2b30      	cmp	r3, #48	; 0x30
 80102b2:	d0f9      	beq.n	80102a8 <_dtoa_r+0x558>
 80102b4:	46bb      	mov	fp, r7
 80102b6:	e02a      	b.n	801030e <_dtoa_r+0x5be>
 80102b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80102bc:	e7d6      	b.n	801026c <_dtoa_r+0x51c>
 80102be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80102c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80102ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80102ce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80102d2:	ee15 3a10 	vmov	r3, s10
 80102d6:	3330      	adds	r3, #48	; 0x30
 80102d8:	f808 3b01 	strb.w	r3, [r8], #1
 80102dc:	9b01      	ldr	r3, [sp, #4]
 80102de:	eba8 0303 	sub.w	r3, r8, r3
 80102e2:	4599      	cmp	r9, r3
 80102e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80102e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80102ec:	d133      	bne.n	8010356 <_dtoa_r+0x606>
 80102ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80102f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80102f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102fa:	dc1a      	bgt.n	8010332 <_dtoa_r+0x5e2>
 80102fc:	eeb4 7b46 	vcmp.f64	d7, d6
 8010300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010304:	d103      	bne.n	801030e <_dtoa_r+0x5be>
 8010306:	ee15 3a10 	vmov	r3, s10
 801030a:	07d9      	lsls	r1, r3, #31
 801030c:	d411      	bmi.n	8010332 <_dtoa_r+0x5e2>
 801030e:	4629      	mov	r1, r5
 8010310:	4630      	mov	r0, r6
 8010312:	f000 fe6b 	bl	8010fec <_Bfree>
 8010316:	2300      	movs	r3, #0
 8010318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801031a:	f888 3000 	strb.w	r3, [r8]
 801031e:	f10b 0301 	add.w	r3, fp, #1
 8010322:	6013      	str	r3, [r2, #0]
 8010324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010326:	2b00      	cmp	r3, #0
 8010328:	f43f ad61 	beq.w	800fdee <_dtoa_r+0x9e>
 801032c:	f8c3 8000 	str.w	r8, [r3]
 8010330:	e55d      	b.n	800fdee <_dtoa_r+0x9e>
 8010332:	465f      	mov	r7, fp
 8010334:	4643      	mov	r3, r8
 8010336:	4698      	mov	r8, r3
 8010338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801033c:	2a39      	cmp	r2, #57	; 0x39
 801033e:	d106      	bne.n	801034e <_dtoa_r+0x5fe>
 8010340:	9a01      	ldr	r2, [sp, #4]
 8010342:	429a      	cmp	r2, r3
 8010344:	d1f7      	bne.n	8010336 <_dtoa_r+0x5e6>
 8010346:	9901      	ldr	r1, [sp, #4]
 8010348:	2230      	movs	r2, #48	; 0x30
 801034a:	3701      	adds	r7, #1
 801034c:	700a      	strb	r2, [r1, #0]
 801034e:	781a      	ldrb	r2, [r3, #0]
 8010350:	3201      	adds	r2, #1
 8010352:	701a      	strb	r2, [r3, #0]
 8010354:	e7ae      	b.n	80102b4 <_dtoa_r+0x564>
 8010356:	ee27 7b04 	vmul.f64	d7, d7, d4
 801035a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801035e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010362:	d1b2      	bne.n	80102ca <_dtoa_r+0x57a>
 8010364:	e7d3      	b.n	801030e <_dtoa_r+0x5be>
 8010366:	bf00      	nop
 8010368:	08014450 	.word	0x08014450
 801036c:	08014428 	.word	0x08014428
 8010370:	9907      	ldr	r1, [sp, #28]
 8010372:	2900      	cmp	r1, #0
 8010374:	f000 80d0 	beq.w	8010518 <_dtoa_r+0x7c8>
 8010378:	9906      	ldr	r1, [sp, #24]
 801037a:	2901      	cmp	r1, #1
 801037c:	f300 80b4 	bgt.w	80104e8 <_dtoa_r+0x798>
 8010380:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010382:	2900      	cmp	r1, #0
 8010384:	f000 80ac 	beq.w	80104e0 <_dtoa_r+0x790>
 8010388:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801038c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010390:	461c      	mov	r4, r3
 8010392:	930a      	str	r3, [sp, #40]	; 0x28
 8010394:	9b04      	ldr	r3, [sp, #16]
 8010396:	4413      	add	r3, r2
 8010398:	9304      	str	r3, [sp, #16]
 801039a:	9b05      	ldr	r3, [sp, #20]
 801039c:	2101      	movs	r1, #1
 801039e:	4413      	add	r3, r2
 80103a0:	4630      	mov	r0, r6
 80103a2:	9305      	str	r3, [sp, #20]
 80103a4:	f000 ff24 	bl	80111f0 <__i2b>
 80103a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103aa:	4607      	mov	r7, r0
 80103ac:	f1b8 0f00 	cmp.w	r8, #0
 80103b0:	dd0d      	ble.n	80103ce <_dtoa_r+0x67e>
 80103b2:	9a05      	ldr	r2, [sp, #20]
 80103b4:	2a00      	cmp	r2, #0
 80103b6:	dd0a      	ble.n	80103ce <_dtoa_r+0x67e>
 80103b8:	4542      	cmp	r2, r8
 80103ba:	9904      	ldr	r1, [sp, #16]
 80103bc:	bfa8      	it	ge
 80103be:	4642      	movge	r2, r8
 80103c0:	1a89      	subs	r1, r1, r2
 80103c2:	9104      	str	r1, [sp, #16]
 80103c4:	9905      	ldr	r1, [sp, #20]
 80103c6:	eba8 0802 	sub.w	r8, r8, r2
 80103ca:	1a8a      	subs	r2, r1, r2
 80103cc:	9205      	str	r2, [sp, #20]
 80103ce:	b303      	cbz	r3, 8010412 <_dtoa_r+0x6c2>
 80103d0:	9a07      	ldr	r2, [sp, #28]
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	f000 80a5 	beq.w	8010522 <_dtoa_r+0x7d2>
 80103d8:	2c00      	cmp	r4, #0
 80103da:	dd13      	ble.n	8010404 <_dtoa_r+0x6b4>
 80103dc:	4639      	mov	r1, r7
 80103de:	4622      	mov	r2, r4
 80103e0:	4630      	mov	r0, r6
 80103e2:	930d      	str	r3, [sp, #52]	; 0x34
 80103e4:	f000 ffc4 	bl	8011370 <__pow5mult>
 80103e8:	462a      	mov	r2, r5
 80103ea:	4601      	mov	r1, r0
 80103ec:	4607      	mov	r7, r0
 80103ee:	4630      	mov	r0, r6
 80103f0:	f000 ff14 	bl	801121c <__multiply>
 80103f4:	4629      	mov	r1, r5
 80103f6:	900a      	str	r0, [sp, #40]	; 0x28
 80103f8:	4630      	mov	r0, r6
 80103fa:	f000 fdf7 	bl	8010fec <_Bfree>
 80103fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010402:	4615      	mov	r5, r2
 8010404:	1b1a      	subs	r2, r3, r4
 8010406:	d004      	beq.n	8010412 <_dtoa_r+0x6c2>
 8010408:	4629      	mov	r1, r5
 801040a:	4630      	mov	r0, r6
 801040c:	f000 ffb0 	bl	8011370 <__pow5mult>
 8010410:	4605      	mov	r5, r0
 8010412:	2101      	movs	r1, #1
 8010414:	4630      	mov	r0, r6
 8010416:	f000 feeb 	bl	80111f0 <__i2b>
 801041a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801041c:	2b00      	cmp	r3, #0
 801041e:	4604      	mov	r4, r0
 8010420:	f340 8081 	ble.w	8010526 <_dtoa_r+0x7d6>
 8010424:	461a      	mov	r2, r3
 8010426:	4601      	mov	r1, r0
 8010428:	4630      	mov	r0, r6
 801042a:	f000 ffa1 	bl	8011370 <__pow5mult>
 801042e:	9b06      	ldr	r3, [sp, #24]
 8010430:	2b01      	cmp	r3, #1
 8010432:	4604      	mov	r4, r0
 8010434:	dd7a      	ble.n	801052c <_dtoa_r+0x7dc>
 8010436:	2300      	movs	r3, #0
 8010438:	930a      	str	r3, [sp, #40]	; 0x28
 801043a:	6922      	ldr	r2, [r4, #16]
 801043c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010440:	6910      	ldr	r0, [r2, #16]
 8010442:	f000 fe85 	bl	8011150 <__hi0bits>
 8010446:	f1c0 0020 	rsb	r0, r0, #32
 801044a:	9b05      	ldr	r3, [sp, #20]
 801044c:	4418      	add	r0, r3
 801044e:	f010 001f 	ands.w	r0, r0, #31
 8010452:	f000 808c 	beq.w	801056e <_dtoa_r+0x81e>
 8010456:	f1c0 0220 	rsb	r2, r0, #32
 801045a:	2a04      	cmp	r2, #4
 801045c:	f340 8085 	ble.w	801056a <_dtoa_r+0x81a>
 8010460:	f1c0 001c 	rsb	r0, r0, #28
 8010464:	9b04      	ldr	r3, [sp, #16]
 8010466:	4403      	add	r3, r0
 8010468:	9304      	str	r3, [sp, #16]
 801046a:	9b05      	ldr	r3, [sp, #20]
 801046c:	4403      	add	r3, r0
 801046e:	4480      	add	r8, r0
 8010470:	9305      	str	r3, [sp, #20]
 8010472:	9b04      	ldr	r3, [sp, #16]
 8010474:	2b00      	cmp	r3, #0
 8010476:	dd05      	ble.n	8010484 <_dtoa_r+0x734>
 8010478:	4629      	mov	r1, r5
 801047a:	461a      	mov	r2, r3
 801047c:	4630      	mov	r0, r6
 801047e:	f000 ffd1 	bl	8011424 <__lshift>
 8010482:	4605      	mov	r5, r0
 8010484:	9b05      	ldr	r3, [sp, #20]
 8010486:	2b00      	cmp	r3, #0
 8010488:	dd05      	ble.n	8010496 <_dtoa_r+0x746>
 801048a:	4621      	mov	r1, r4
 801048c:	461a      	mov	r2, r3
 801048e:	4630      	mov	r0, r6
 8010490:	f000 ffc8 	bl	8011424 <__lshift>
 8010494:	4604      	mov	r4, r0
 8010496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010498:	2b00      	cmp	r3, #0
 801049a:	d06a      	beq.n	8010572 <_dtoa_r+0x822>
 801049c:	4621      	mov	r1, r4
 801049e:	4628      	mov	r0, r5
 80104a0:	f001 f830 	bl	8011504 <__mcmp>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	da64      	bge.n	8010572 <_dtoa_r+0x822>
 80104a8:	2300      	movs	r3, #0
 80104aa:	4629      	mov	r1, r5
 80104ac:	220a      	movs	r2, #10
 80104ae:	4630      	mov	r0, r6
 80104b0:	f000 fdbe 	bl	8011030 <__multadd>
 80104b4:	9b07      	ldr	r3, [sp, #28]
 80104b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104ba:	4605      	mov	r5, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f000 8191 	beq.w	80107e4 <_dtoa_r+0xa94>
 80104c2:	4639      	mov	r1, r7
 80104c4:	2300      	movs	r3, #0
 80104c6:	220a      	movs	r2, #10
 80104c8:	4630      	mov	r0, r6
 80104ca:	f000 fdb1 	bl	8011030 <__multadd>
 80104ce:	f1ba 0f00 	cmp.w	sl, #0
 80104d2:	4607      	mov	r7, r0
 80104d4:	f300 808d 	bgt.w	80105f2 <_dtoa_r+0x8a2>
 80104d8:	9b06      	ldr	r3, [sp, #24]
 80104da:	2b02      	cmp	r3, #2
 80104dc:	dc50      	bgt.n	8010580 <_dtoa_r+0x830>
 80104de:	e088      	b.n	80105f2 <_dtoa_r+0x8a2>
 80104e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80104e6:	e751      	b.n	801038c <_dtoa_r+0x63c>
 80104e8:	f109 34ff 	add.w	r4, r9, #4294967295
 80104ec:	42a3      	cmp	r3, r4
 80104ee:	bfbf      	itttt	lt
 80104f0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80104f2:	1ae3      	sublt	r3, r4, r3
 80104f4:	18d2      	addlt	r2, r2, r3
 80104f6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80104f8:	bfb6      	itet	lt
 80104fa:	4623      	movlt	r3, r4
 80104fc:	1b1c      	subge	r4, r3, r4
 80104fe:	2400      	movlt	r4, #0
 8010500:	f1b9 0f00 	cmp.w	r9, #0
 8010504:	bfb5      	itete	lt
 8010506:	9a04      	ldrlt	r2, [sp, #16]
 8010508:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801050c:	eba2 0809 	sublt.w	r8, r2, r9
 8010510:	464a      	movge	r2, r9
 8010512:	bfb8      	it	lt
 8010514:	2200      	movlt	r2, #0
 8010516:	e73c      	b.n	8010392 <_dtoa_r+0x642>
 8010518:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801051c:	9f07      	ldr	r7, [sp, #28]
 801051e:	461c      	mov	r4, r3
 8010520:	e744      	b.n	80103ac <_dtoa_r+0x65c>
 8010522:	461a      	mov	r2, r3
 8010524:	e770      	b.n	8010408 <_dtoa_r+0x6b8>
 8010526:	9b06      	ldr	r3, [sp, #24]
 8010528:	2b01      	cmp	r3, #1
 801052a:	dc18      	bgt.n	801055e <_dtoa_r+0x80e>
 801052c:	9b02      	ldr	r3, [sp, #8]
 801052e:	b9b3      	cbnz	r3, 801055e <_dtoa_r+0x80e>
 8010530:	9b03      	ldr	r3, [sp, #12]
 8010532:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010536:	b9a2      	cbnz	r2, 8010562 <_dtoa_r+0x812>
 8010538:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801053c:	0d12      	lsrs	r2, r2, #20
 801053e:	0512      	lsls	r2, r2, #20
 8010540:	b18a      	cbz	r2, 8010566 <_dtoa_r+0x816>
 8010542:	9b04      	ldr	r3, [sp, #16]
 8010544:	3301      	adds	r3, #1
 8010546:	9304      	str	r3, [sp, #16]
 8010548:	9b05      	ldr	r3, [sp, #20]
 801054a:	3301      	adds	r3, #1
 801054c:	9305      	str	r3, [sp, #20]
 801054e:	2301      	movs	r3, #1
 8010550:	930a      	str	r3, [sp, #40]	; 0x28
 8010552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010554:	2b00      	cmp	r3, #0
 8010556:	f47f af70 	bne.w	801043a <_dtoa_r+0x6ea>
 801055a:	2001      	movs	r0, #1
 801055c:	e775      	b.n	801044a <_dtoa_r+0x6fa>
 801055e:	2300      	movs	r3, #0
 8010560:	e7f6      	b.n	8010550 <_dtoa_r+0x800>
 8010562:	9b02      	ldr	r3, [sp, #8]
 8010564:	e7f4      	b.n	8010550 <_dtoa_r+0x800>
 8010566:	920a      	str	r2, [sp, #40]	; 0x28
 8010568:	e7f3      	b.n	8010552 <_dtoa_r+0x802>
 801056a:	d082      	beq.n	8010472 <_dtoa_r+0x722>
 801056c:	4610      	mov	r0, r2
 801056e:	301c      	adds	r0, #28
 8010570:	e778      	b.n	8010464 <_dtoa_r+0x714>
 8010572:	f1b9 0f00 	cmp.w	r9, #0
 8010576:	dc37      	bgt.n	80105e8 <_dtoa_r+0x898>
 8010578:	9b06      	ldr	r3, [sp, #24]
 801057a:	2b02      	cmp	r3, #2
 801057c:	dd34      	ble.n	80105e8 <_dtoa_r+0x898>
 801057e:	46ca      	mov	sl, r9
 8010580:	f1ba 0f00 	cmp.w	sl, #0
 8010584:	d10d      	bne.n	80105a2 <_dtoa_r+0x852>
 8010586:	4621      	mov	r1, r4
 8010588:	4653      	mov	r3, sl
 801058a:	2205      	movs	r2, #5
 801058c:	4630      	mov	r0, r6
 801058e:	f000 fd4f 	bl	8011030 <__multadd>
 8010592:	4601      	mov	r1, r0
 8010594:	4604      	mov	r4, r0
 8010596:	4628      	mov	r0, r5
 8010598:	f000 ffb4 	bl	8011504 <__mcmp>
 801059c:	2800      	cmp	r0, #0
 801059e:	f73f adeb 	bgt.w	8010178 <_dtoa_r+0x428>
 80105a2:	9b08      	ldr	r3, [sp, #32]
 80105a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80105a8:	ea6f 0b03 	mvn.w	fp, r3
 80105ac:	f04f 0900 	mov.w	r9, #0
 80105b0:	4621      	mov	r1, r4
 80105b2:	4630      	mov	r0, r6
 80105b4:	f000 fd1a 	bl	8010fec <_Bfree>
 80105b8:	2f00      	cmp	r7, #0
 80105ba:	f43f aea8 	beq.w	801030e <_dtoa_r+0x5be>
 80105be:	f1b9 0f00 	cmp.w	r9, #0
 80105c2:	d005      	beq.n	80105d0 <_dtoa_r+0x880>
 80105c4:	45b9      	cmp	r9, r7
 80105c6:	d003      	beq.n	80105d0 <_dtoa_r+0x880>
 80105c8:	4649      	mov	r1, r9
 80105ca:	4630      	mov	r0, r6
 80105cc:	f000 fd0e 	bl	8010fec <_Bfree>
 80105d0:	4639      	mov	r1, r7
 80105d2:	4630      	mov	r0, r6
 80105d4:	f000 fd0a 	bl	8010fec <_Bfree>
 80105d8:	e699      	b.n	801030e <_dtoa_r+0x5be>
 80105da:	2400      	movs	r4, #0
 80105dc:	4627      	mov	r7, r4
 80105de:	e7e0      	b.n	80105a2 <_dtoa_r+0x852>
 80105e0:	46bb      	mov	fp, r7
 80105e2:	4604      	mov	r4, r0
 80105e4:	4607      	mov	r7, r0
 80105e6:	e5c7      	b.n	8010178 <_dtoa_r+0x428>
 80105e8:	9b07      	ldr	r3, [sp, #28]
 80105ea:	46ca      	mov	sl, r9
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	f000 8100 	beq.w	80107f2 <_dtoa_r+0xaa2>
 80105f2:	f1b8 0f00 	cmp.w	r8, #0
 80105f6:	dd05      	ble.n	8010604 <_dtoa_r+0x8b4>
 80105f8:	4639      	mov	r1, r7
 80105fa:	4642      	mov	r2, r8
 80105fc:	4630      	mov	r0, r6
 80105fe:	f000 ff11 	bl	8011424 <__lshift>
 8010602:	4607      	mov	r7, r0
 8010604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010606:	2b00      	cmp	r3, #0
 8010608:	d05d      	beq.n	80106c6 <_dtoa_r+0x976>
 801060a:	6879      	ldr	r1, [r7, #4]
 801060c:	4630      	mov	r0, r6
 801060e:	f000 fcad 	bl	8010f6c <_Balloc>
 8010612:	4680      	mov	r8, r0
 8010614:	b928      	cbnz	r0, 8010622 <_dtoa_r+0x8d2>
 8010616:	4b82      	ldr	r3, [pc, #520]	; (8010820 <_dtoa_r+0xad0>)
 8010618:	4602      	mov	r2, r0
 801061a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801061e:	f7ff bbaf 	b.w	800fd80 <_dtoa_r+0x30>
 8010622:	693a      	ldr	r2, [r7, #16]
 8010624:	3202      	adds	r2, #2
 8010626:	0092      	lsls	r2, r2, #2
 8010628:	f107 010c 	add.w	r1, r7, #12
 801062c:	300c      	adds	r0, #12
 801062e:	f7fd fd21 	bl	800e074 <memcpy>
 8010632:	2201      	movs	r2, #1
 8010634:	4641      	mov	r1, r8
 8010636:	4630      	mov	r0, r6
 8010638:	f000 fef4 	bl	8011424 <__lshift>
 801063c:	9b01      	ldr	r3, [sp, #4]
 801063e:	3301      	adds	r3, #1
 8010640:	9304      	str	r3, [sp, #16]
 8010642:	9b01      	ldr	r3, [sp, #4]
 8010644:	4453      	add	r3, sl
 8010646:	9308      	str	r3, [sp, #32]
 8010648:	9b02      	ldr	r3, [sp, #8]
 801064a:	f003 0301 	and.w	r3, r3, #1
 801064e:	46b9      	mov	r9, r7
 8010650:	9307      	str	r3, [sp, #28]
 8010652:	4607      	mov	r7, r0
 8010654:	9b04      	ldr	r3, [sp, #16]
 8010656:	4621      	mov	r1, r4
 8010658:	3b01      	subs	r3, #1
 801065a:	4628      	mov	r0, r5
 801065c:	9302      	str	r3, [sp, #8]
 801065e:	f7ff faeb 	bl	800fc38 <quorem>
 8010662:	4603      	mov	r3, r0
 8010664:	3330      	adds	r3, #48	; 0x30
 8010666:	9005      	str	r0, [sp, #20]
 8010668:	4649      	mov	r1, r9
 801066a:	4628      	mov	r0, r5
 801066c:	9309      	str	r3, [sp, #36]	; 0x24
 801066e:	f000 ff49 	bl	8011504 <__mcmp>
 8010672:	463a      	mov	r2, r7
 8010674:	4682      	mov	sl, r0
 8010676:	4621      	mov	r1, r4
 8010678:	4630      	mov	r0, r6
 801067a:	f000 ff5f 	bl	801153c <__mdiff>
 801067e:	68c2      	ldr	r2, [r0, #12]
 8010680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010682:	4680      	mov	r8, r0
 8010684:	bb0a      	cbnz	r2, 80106ca <_dtoa_r+0x97a>
 8010686:	4601      	mov	r1, r0
 8010688:	4628      	mov	r0, r5
 801068a:	f000 ff3b 	bl	8011504 <__mcmp>
 801068e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010690:	4602      	mov	r2, r0
 8010692:	4641      	mov	r1, r8
 8010694:	4630      	mov	r0, r6
 8010696:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801069a:	f000 fca7 	bl	8010fec <_Bfree>
 801069e:	9b06      	ldr	r3, [sp, #24]
 80106a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80106a6:	ea43 0102 	orr.w	r1, r3, r2
 80106aa:	9b07      	ldr	r3, [sp, #28]
 80106ac:	430b      	orrs	r3, r1
 80106ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106b0:	d10d      	bne.n	80106ce <_dtoa_r+0x97e>
 80106b2:	2b39      	cmp	r3, #57	; 0x39
 80106b4:	d029      	beq.n	801070a <_dtoa_r+0x9ba>
 80106b6:	f1ba 0f00 	cmp.w	sl, #0
 80106ba:	dd01      	ble.n	80106c0 <_dtoa_r+0x970>
 80106bc:	9b05      	ldr	r3, [sp, #20]
 80106be:	3331      	adds	r3, #49	; 0x31
 80106c0:	9a02      	ldr	r2, [sp, #8]
 80106c2:	7013      	strb	r3, [r2, #0]
 80106c4:	e774      	b.n	80105b0 <_dtoa_r+0x860>
 80106c6:	4638      	mov	r0, r7
 80106c8:	e7b8      	b.n	801063c <_dtoa_r+0x8ec>
 80106ca:	2201      	movs	r2, #1
 80106cc:	e7e1      	b.n	8010692 <_dtoa_r+0x942>
 80106ce:	f1ba 0f00 	cmp.w	sl, #0
 80106d2:	db06      	blt.n	80106e2 <_dtoa_r+0x992>
 80106d4:	9906      	ldr	r1, [sp, #24]
 80106d6:	ea41 0a0a 	orr.w	sl, r1, sl
 80106da:	9907      	ldr	r1, [sp, #28]
 80106dc:	ea5a 0101 	orrs.w	r1, sl, r1
 80106e0:	d120      	bne.n	8010724 <_dtoa_r+0x9d4>
 80106e2:	2a00      	cmp	r2, #0
 80106e4:	ddec      	ble.n	80106c0 <_dtoa_r+0x970>
 80106e6:	4629      	mov	r1, r5
 80106e8:	2201      	movs	r2, #1
 80106ea:	4630      	mov	r0, r6
 80106ec:	9304      	str	r3, [sp, #16]
 80106ee:	f000 fe99 	bl	8011424 <__lshift>
 80106f2:	4621      	mov	r1, r4
 80106f4:	4605      	mov	r5, r0
 80106f6:	f000 ff05 	bl	8011504 <__mcmp>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	9b04      	ldr	r3, [sp, #16]
 80106fe:	dc02      	bgt.n	8010706 <_dtoa_r+0x9b6>
 8010700:	d1de      	bne.n	80106c0 <_dtoa_r+0x970>
 8010702:	07da      	lsls	r2, r3, #31
 8010704:	d5dc      	bpl.n	80106c0 <_dtoa_r+0x970>
 8010706:	2b39      	cmp	r3, #57	; 0x39
 8010708:	d1d8      	bne.n	80106bc <_dtoa_r+0x96c>
 801070a:	9a02      	ldr	r2, [sp, #8]
 801070c:	2339      	movs	r3, #57	; 0x39
 801070e:	7013      	strb	r3, [r2, #0]
 8010710:	4643      	mov	r3, r8
 8010712:	4698      	mov	r8, r3
 8010714:	3b01      	subs	r3, #1
 8010716:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801071a:	2a39      	cmp	r2, #57	; 0x39
 801071c:	d051      	beq.n	80107c2 <_dtoa_r+0xa72>
 801071e:	3201      	adds	r2, #1
 8010720:	701a      	strb	r2, [r3, #0]
 8010722:	e745      	b.n	80105b0 <_dtoa_r+0x860>
 8010724:	2a00      	cmp	r2, #0
 8010726:	dd03      	ble.n	8010730 <_dtoa_r+0x9e0>
 8010728:	2b39      	cmp	r3, #57	; 0x39
 801072a:	d0ee      	beq.n	801070a <_dtoa_r+0x9ba>
 801072c:	3301      	adds	r3, #1
 801072e:	e7c7      	b.n	80106c0 <_dtoa_r+0x970>
 8010730:	9a04      	ldr	r2, [sp, #16]
 8010732:	9908      	ldr	r1, [sp, #32]
 8010734:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010738:	428a      	cmp	r2, r1
 801073a:	d02b      	beq.n	8010794 <_dtoa_r+0xa44>
 801073c:	4629      	mov	r1, r5
 801073e:	2300      	movs	r3, #0
 8010740:	220a      	movs	r2, #10
 8010742:	4630      	mov	r0, r6
 8010744:	f000 fc74 	bl	8011030 <__multadd>
 8010748:	45b9      	cmp	r9, r7
 801074a:	4605      	mov	r5, r0
 801074c:	f04f 0300 	mov.w	r3, #0
 8010750:	f04f 020a 	mov.w	r2, #10
 8010754:	4649      	mov	r1, r9
 8010756:	4630      	mov	r0, r6
 8010758:	d107      	bne.n	801076a <_dtoa_r+0xa1a>
 801075a:	f000 fc69 	bl	8011030 <__multadd>
 801075e:	4681      	mov	r9, r0
 8010760:	4607      	mov	r7, r0
 8010762:	9b04      	ldr	r3, [sp, #16]
 8010764:	3301      	adds	r3, #1
 8010766:	9304      	str	r3, [sp, #16]
 8010768:	e774      	b.n	8010654 <_dtoa_r+0x904>
 801076a:	f000 fc61 	bl	8011030 <__multadd>
 801076e:	4639      	mov	r1, r7
 8010770:	4681      	mov	r9, r0
 8010772:	2300      	movs	r3, #0
 8010774:	220a      	movs	r2, #10
 8010776:	4630      	mov	r0, r6
 8010778:	f000 fc5a 	bl	8011030 <__multadd>
 801077c:	4607      	mov	r7, r0
 801077e:	e7f0      	b.n	8010762 <_dtoa_r+0xa12>
 8010780:	f1ba 0f00 	cmp.w	sl, #0
 8010784:	9a01      	ldr	r2, [sp, #4]
 8010786:	bfcc      	ite	gt
 8010788:	46d0      	movgt	r8, sl
 801078a:	f04f 0801 	movle.w	r8, #1
 801078e:	4490      	add	r8, r2
 8010790:	f04f 0900 	mov.w	r9, #0
 8010794:	4629      	mov	r1, r5
 8010796:	2201      	movs	r2, #1
 8010798:	4630      	mov	r0, r6
 801079a:	9302      	str	r3, [sp, #8]
 801079c:	f000 fe42 	bl	8011424 <__lshift>
 80107a0:	4621      	mov	r1, r4
 80107a2:	4605      	mov	r5, r0
 80107a4:	f000 feae 	bl	8011504 <__mcmp>
 80107a8:	2800      	cmp	r0, #0
 80107aa:	dcb1      	bgt.n	8010710 <_dtoa_r+0x9c0>
 80107ac:	d102      	bne.n	80107b4 <_dtoa_r+0xa64>
 80107ae:	9b02      	ldr	r3, [sp, #8]
 80107b0:	07db      	lsls	r3, r3, #31
 80107b2:	d4ad      	bmi.n	8010710 <_dtoa_r+0x9c0>
 80107b4:	4643      	mov	r3, r8
 80107b6:	4698      	mov	r8, r3
 80107b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107bc:	2a30      	cmp	r2, #48	; 0x30
 80107be:	d0fa      	beq.n	80107b6 <_dtoa_r+0xa66>
 80107c0:	e6f6      	b.n	80105b0 <_dtoa_r+0x860>
 80107c2:	9a01      	ldr	r2, [sp, #4]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d1a4      	bne.n	8010712 <_dtoa_r+0x9c2>
 80107c8:	f10b 0b01 	add.w	fp, fp, #1
 80107cc:	2331      	movs	r3, #49	; 0x31
 80107ce:	e778      	b.n	80106c2 <_dtoa_r+0x972>
 80107d0:	4b14      	ldr	r3, [pc, #80]	; (8010824 <_dtoa_r+0xad4>)
 80107d2:	f7ff bb27 	b.w	800fe24 <_dtoa_r+0xd4>
 80107d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f47f ab03 	bne.w	800fde4 <_dtoa_r+0x94>
 80107de:	4b12      	ldr	r3, [pc, #72]	; (8010828 <_dtoa_r+0xad8>)
 80107e0:	f7ff bb20 	b.w	800fe24 <_dtoa_r+0xd4>
 80107e4:	f1ba 0f00 	cmp.w	sl, #0
 80107e8:	dc03      	bgt.n	80107f2 <_dtoa_r+0xaa2>
 80107ea:	9b06      	ldr	r3, [sp, #24]
 80107ec:	2b02      	cmp	r3, #2
 80107ee:	f73f aec7 	bgt.w	8010580 <_dtoa_r+0x830>
 80107f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80107f6:	4621      	mov	r1, r4
 80107f8:	4628      	mov	r0, r5
 80107fa:	f7ff fa1d 	bl	800fc38 <quorem>
 80107fe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010802:	f808 3b01 	strb.w	r3, [r8], #1
 8010806:	9a01      	ldr	r2, [sp, #4]
 8010808:	eba8 0202 	sub.w	r2, r8, r2
 801080c:	4592      	cmp	sl, r2
 801080e:	ddb7      	ble.n	8010780 <_dtoa_r+0xa30>
 8010810:	4629      	mov	r1, r5
 8010812:	2300      	movs	r3, #0
 8010814:	220a      	movs	r2, #10
 8010816:	4630      	mov	r0, r6
 8010818:	f000 fc0a 	bl	8011030 <__multadd>
 801081c:	4605      	mov	r5, r0
 801081e:	e7ea      	b.n	80107f6 <_dtoa_r+0xaa6>
 8010820:	08014340 	.word	0x08014340
 8010824:	08014539 	.word	0x08014539
 8010828:	080142c1 	.word	0x080142c1

0801082c <rshift>:
 801082c:	6903      	ldr	r3, [r0, #16]
 801082e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010836:	ea4f 1261 	mov.w	r2, r1, asr #5
 801083a:	f100 0414 	add.w	r4, r0, #20
 801083e:	dd45      	ble.n	80108cc <rshift+0xa0>
 8010840:	f011 011f 	ands.w	r1, r1, #31
 8010844:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010848:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801084c:	d10c      	bne.n	8010868 <rshift+0x3c>
 801084e:	f100 0710 	add.w	r7, r0, #16
 8010852:	4629      	mov	r1, r5
 8010854:	42b1      	cmp	r1, r6
 8010856:	d334      	bcc.n	80108c2 <rshift+0x96>
 8010858:	1a9b      	subs	r3, r3, r2
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	1eea      	subs	r2, r5, #3
 801085e:	4296      	cmp	r6, r2
 8010860:	bf38      	it	cc
 8010862:	2300      	movcc	r3, #0
 8010864:	4423      	add	r3, r4
 8010866:	e015      	b.n	8010894 <rshift+0x68>
 8010868:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801086c:	f1c1 0820 	rsb	r8, r1, #32
 8010870:	40cf      	lsrs	r7, r1
 8010872:	f105 0e04 	add.w	lr, r5, #4
 8010876:	46a1      	mov	r9, r4
 8010878:	4576      	cmp	r6, lr
 801087a:	46f4      	mov	ip, lr
 801087c:	d815      	bhi.n	80108aa <rshift+0x7e>
 801087e:	1a9a      	subs	r2, r3, r2
 8010880:	0092      	lsls	r2, r2, #2
 8010882:	3a04      	subs	r2, #4
 8010884:	3501      	adds	r5, #1
 8010886:	42ae      	cmp	r6, r5
 8010888:	bf38      	it	cc
 801088a:	2200      	movcc	r2, #0
 801088c:	18a3      	adds	r3, r4, r2
 801088e:	50a7      	str	r7, [r4, r2]
 8010890:	b107      	cbz	r7, 8010894 <rshift+0x68>
 8010892:	3304      	adds	r3, #4
 8010894:	1b1a      	subs	r2, r3, r4
 8010896:	42a3      	cmp	r3, r4
 8010898:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801089c:	bf08      	it	eq
 801089e:	2300      	moveq	r3, #0
 80108a0:	6102      	str	r2, [r0, #16]
 80108a2:	bf08      	it	eq
 80108a4:	6143      	streq	r3, [r0, #20]
 80108a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108aa:	f8dc c000 	ldr.w	ip, [ip]
 80108ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80108b2:	ea4c 0707 	orr.w	r7, ip, r7
 80108b6:	f849 7b04 	str.w	r7, [r9], #4
 80108ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80108be:	40cf      	lsrs	r7, r1
 80108c0:	e7da      	b.n	8010878 <rshift+0x4c>
 80108c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80108c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80108ca:	e7c3      	b.n	8010854 <rshift+0x28>
 80108cc:	4623      	mov	r3, r4
 80108ce:	e7e1      	b.n	8010894 <rshift+0x68>

080108d0 <__hexdig_fun>:
 80108d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80108d4:	2b09      	cmp	r3, #9
 80108d6:	d802      	bhi.n	80108de <__hexdig_fun+0xe>
 80108d8:	3820      	subs	r0, #32
 80108da:	b2c0      	uxtb	r0, r0
 80108dc:	4770      	bx	lr
 80108de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80108e2:	2b05      	cmp	r3, #5
 80108e4:	d801      	bhi.n	80108ea <__hexdig_fun+0x1a>
 80108e6:	3847      	subs	r0, #71	; 0x47
 80108e8:	e7f7      	b.n	80108da <__hexdig_fun+0xa>
 80108ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80108ee:	2b05      	cmp	r3, #5
 80108f0:	d801      	bhi.n	80108f6 <__hexdig_fun+0x26>
 80108f2:	3827      	subs	r0, #39	; 0x27
 80108f4:	e7f1      	b.n	80108da <__hexdig_fun+0xa>
 80108f6:	2000      	movs	r0, #0
 80108f8:	4770      	bx	lr
	...

080108fc <__gethex>:
 80108fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010900:	ed2d 8b02 	vpush	{d8}
 8010904:	b089      	sub	sp, #36	; 0x24
 8010906:	ee08 0a10 	vmov	s16, r0
 801090a:	9304      	str	r3, [sp, #16]
 801090c:	4bb4      	ldr	r3, [pc, #720]	; (8010be0 <__gethex+0x2e4>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	9301      	str	r3, [sp, #4]
 8010912:	4618      	mov	r0, r3
 8010914:	468b      	mov	fp, r1
 8010916:	4690      	mov	r8, r2
 8010918:	f7ef fce2 	bl	80002e0 <strlen>
 801091c:	9b01      	ldr	r3, [sp, #4]
 801091e:	f8db 2000 	ldr.w	r2, [fp]
 8010922:	4403      	add	r3, r0
 8010924:	4682      	mov	sl, r0
 8010926:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801092a:	9305      	str	r3, [sp, #20]
 801092c:	1c93      	adds	r3, r2, #2
 801092e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010932:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010936:	32fe      	adds	r2, #254	; 0xfe
 8010938:	18d1      	adds	r1, r2, r3
 801093a:	461f      	mov	r7, r3
 801093c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010940:	9100      	str	r1, [sp, #0]
 8010942:	2830      	cmp	r0, #48	; 0x30
 8010944:	d0f8      	beq.n	8010938 <__gethex+0x3c>
 8010946:	f7ff ffc3 	bl	80108d0 <__hexdig_fun>
 801094a:	4604      	mov	r4, r0
 801094c:	2800      	cmp	r0, #0
 801094e:	d13a      	bne.n	80109c6 <__gethex+0xca>
 8010950:	9901      	ldr	r1, [sp, #4]
 8010952:	4652      	mov	r2, sl
 8010954:	4638      	mov	r0, r7
 8010956:	f001 fd9f 	bl	8012498 <strncmp>
 801095a:	4605      	mov	r5, r0
 801095c:	2800      	cmp	r0, #0
 801095e:	d168      	bne.n	8010a32 <__gethex+0x136>
 8010960:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010964:	eb07 060a 	add.w	r6, r7, sl
 8010968:	f7ff ffb2 	bl	80108d0 <__hexdig_fun>
 801096c:	2800      	cmp	r0, #0
 801096e:	d062      	beq.n	8010a36 <__gethex+0x13a>
 8010970:	4633      	mov	r3, r6
 8010972:	7818      	ldrb	r0, [r3, #0]
 8010974:	2830      	cmp	r0, #48	; 0x30
 8010976:	461f      	mov	r7, r3
 8010978:	f103 0301 	add.w	r3, r3, #1
 801097c:	d0f9      	beq.n	8010972 <__gethex+0x76>
 801097e:	f7ff ffa7 	bl	80108d0 <__hexdig_fun>
 8010982:	2301      	movs	r3, #1
 8010984:	fab0 f480 	clz	r4, r0
 8010988:	0964      	lsrs	r4, r4, #5
 801098a:	4635      	mov	r5, r6
 801098c:	9300      	str	r3, [sp, #0]
 801098e:	463a      	mov	r2, r7
 8010990:	4616      	mov	r6, r2
 8010992:	3201      	adds	r2, #1
 8010994:	7830      	ldrb	r0, [r6, #0]
 8010996:	f7ff ff9b 	bl	80108d0 <__hexdig_fun>
 801099a:	2800      	cmp	r0, #0
 801099c:	d1f8      	bne.n	8010990 <__gethex+0x94>
 801099e:	9901      	ldr	r1, [sp, #4]
 80109a0:	4652      	mov	r2, sl
 80109a2:	4630      	mov	r0, r6
 80109a4:	f001 fd78 	bl	8012498 <strncmp>
 80109a8:	b980      	cbnz	r0, 80109cc <__gethex+0xd0>
 80109aa:	b94d      	cbnz	r5, 80109c0 <__gethex+0xc4>
 80109ac:	eb06 050a 	add.w	r5, r6, sl
 80109b0:	462a      	mov	r2, r5
 80109b2:	4616      	mov	r6, r2
 80109b4:	3201      	adds	r2, #1
 80109b6:	7830      	ldrb	r0, [r6, #0]
 80109b8:	f7ff ff8a 	bl	80108d0 <__hexdig_fun>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d1f8      	bne.n	80109b2 <__gethex+0xb6>
 80109c0:	1bad      	subs	r5, r5, r6
 80109c2:	00ad      	lsls	r5, r5, #2
 80109c4:	e004      	b.n	80109d0 <__gethex+0xd4>
 80109c6:	2400      	movs	r4, #0
 80109c8:	4625      	mov	r5, r4
 80109ca:	e7e0      	b.n	801098e <__gethex+0x92>
 80109cc:	2d00      	cmp	r5, #0
 80109ce:	d1f7      	bne.n	80109c0 <__gethex+0xc4>
 80109d0:	7833      	ldrb	r3, [r6, #0]
 80109d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80109d6:	2b50      	cmp	r3, #80	; 0x50
 80109d8:	d13b      	bne.n	8010a52 <__gethex+0x156>
 80109da:	7873      	ldrb	r3, [r6, #1]
 80109dc:	2b2b      	cmp	r3, #43	; 0x2b
 80109de:	d02c      	beq.n	8010a3a <__gethex+0x13e>
 80109e0:	2b2d      	cmp	r3, #45	; 0x2d
 80109e2:	d02e      	beq.n	8010a42 <__gethex+0x146>
 80109e4:	1c71      	adds	r1, r6, #1
 80109e6:	f04f 0900 	mov.w	r9, #0
 80109ea:	7808      	ldrb	r0, [r1, #0]
 80109ec:	f7ff ff70 	bl	80108d0 <__hexdig_fun>
 80109f0:	1e43      	subs	r3, r0, #1
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	2b18      	cmp	r3, #24
 80109f6:	d82c      	bhi.n	8010a52 <__gethex+0x156>
 80109f8:	f1a0 0210 	sub.w	r2, r0, #16
 80109fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010a00:	f7ff ff66 	bl	80108d0 <__hexdig_fun>
 8010a04:	1e43      	subs	r3, r0, #1
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	2b18      	cmp	r3, #24
 8010a0a:	d91d      	bls.n	8010a48 <__gethex+0x14c>
 8010a0c:	f1b9 0f00 	cmp.w	r9, #0
 8010a10:	d000      	beq.n	8010a14 <__gethex+0x118>
 8010a12:	4252      	negs	r2, r2
 8010a14:	4415      	add	r5, r2
 8010a16:	f8cb 1000 	str.w	r1, [fp]
 8010a1a:	b1e4      	cbz	r4, 8010a56 <__gethex+0x15a>
 8010a1c:	9b00      	ldr	r3, [sp, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	bf14      	ite	ne
 8010a22:	2700      	movne	r7, #0
 8010a24:	2706      	moveq	r7, #6
 8010a26:	4638      	mov	r0, r7
 8010a28:	b009      	add	sp, #36	; 0x24
 8010a2a:	ecbd 8b02 	vpop	{d8}
 8010a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a32:	463e      	mov	r6, r7
 8010a34:	4625      	mov	r5, r4
 8010a36:	2401      	movs	r4, #1
 8010a38:	e7ca      	b.n	80109d0 <__gethex+0xd4>
 8010a3a:	f04f 0900 	mov.w	r9, #0
 8010a3e:	1cb1      	adds	r1, r6, #2
 8010a40:	e7d3      	b.n	80109ea <__gethex+0xee>
 8010a42:	f04f 0901 	mov.w	r9, #1
 8010a46:	e7fa      	b.n	8010a3e <__gethex+0x142>
 8010a48:	230a      	movs	r3, #10
 8010a4a:	fb03 0202 	mla	r2, r3, r2, r0
 8010a4e:	3a10      	subs	r2, #16
 8010a50:	e7d4      	b.n	80109fc <__gethex+0x100>
 8010a52:	4631      	mov	r1, r6
 8010a54:	e7df      	b.n	8010a16 <__gethex+0x11a>
 8010a56:	1bf3      	subs	r3, r6, r7
 8010a58:	3b01      	subs	r3, #1
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	2b07      	cmp	r3, #7
 8010a5e:	dc0b      	bgt.n	8010a78 <__gethex+0x17c>
 8010a60:	ee18 0a10 	vmov	r0, s16
 8010a64:	f000 fa82 	bl	8010f6c <_Balloc>
 8010a68:	4604      	mov	r4, r0
 8010a6a:	b940      	cbnz	r0, 8010a7e <__gethex+0x182>
 8010a6c:	4b5d      	ldr	r3, [pc, #372]	; (8010be4 <__gethex+0x2e8>)
 8010a6e:	4602      	mov	r2, r0
 8010a70:	21de      	movs	r1, #222	; 0xde
 8010a72:	485d      	ldr	r0, [pc, #372]	; (8010be8 <__gethex+0x2ec>)
 8010a74:	f001 fde0 	bl	8012638 <__assert_func>
 8010a78:	3101      	adds	r1, #1
 8010a7a:	105b      	asrs	r3, r3, #1
 8010a7c:	e7ee      	b.n	8010a5c <__gethex+0x160>
 8010a7e:	f100 0914 	add.w	r9, r0, #20
 8010a82:	f04f 0b00 	mov.w	fp, #0
 8010a86:	f1ca 0301 	rsb	r3, sl, #1
 8010a8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8010a8e:	f8cd b000 	str.w	fp, [sp]
 8010a92:	9306      	str	r3, [sp, #24]
 8010a94:	42b7      	cmp	r7, r6
 8010a96:	d340      	bcc.n	8010b1a <__gethex+0x21e>
 8010a98:	9802      	ldr	r0, [sp, #8]
 8010a9a:	9b00      	ldr	r3, [sp, #0]
 8010a9c:	f840 3b04 	str.w	r3, [r0], #4
 8010aa0:	eba0 0009 	sub.w	r0, r0, r9
 8010aa4:	1080      	asrs	r0, r0, #2
 8010aa6:	0146      	lsls	r6, r0, #5
 8010aa8:	6120      	str	r0, [r4, #16]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f000 fb50 	bl	8011150 <__hi0bits>
 8010ab0:	1a30      	subs	r0, r6, r0
 8010ab2:	f8d8 6000 	ldr.w	r6, [r8]
 8010ab6:	42b0      	cmp	r0, r6
 8010ab8:	dd63      	ble.n	8010b82 <__gethex+0x286>
 8010aba:	1b87      	subs	r7, r0, r6
 8010abc:	4639      	mov	r1, r7
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f000 fef1 	bl	80118a6 <__any_on>
 8010ac4:	4682      	mov	sl, r0
 8010ac6:	b1a8      	cbz	r0, 8010af4 <__gethex+0x1f8>
 8010ac8:	1e7b      	subs	r3, r7, #1
 8010aca:	1159      	asrs	r1, r3, #5
 8010acc:	f003 021f 	and.w	r2, r3, #31
 8010ad0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010ad4:	f04f 0a01 	mov.w	sl, #1
 8010ad8:	fa0a f202 	lsl.w	r2, sl, r2
 8010adc:	420a      	tst	r2, r1
 8010ade:	d009      	beq.n	8010af4 <__gethex+0x1f8>
 8010ae0:	4553      	cmp	r3, sl
 8010ae2:	dd05      	ble.n	8010af0 <__gethex+0x1f4>
 8010ae4:	1eb9      	subs	r1, r7, #2
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	f000 fedd 	bl	80118a6 <__any_on>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d145      	bne.n	8010b7c <__gethex+0x280>
 8010af0:	f04f 0a02 	mov.w	sl, #2
 8010af4:	4639      	mov	r1, r7
 8010af6:	4620      	mov	r0, r4
 8010af8:	f7ff fe98 	bl	801082c <rshift>
 8010afc:	443d      	add	r5, r7
 8010afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b02:	42ab      	cmp	r3, r5
 8010b04:	da4c      	bge.n	8010ba0 <__gethex+0x2a4>
 8010b06:	ee18 0a10 	vmov	r0, s16
 8010b0a:	4621      	mov	r1, r4
 8010b0c:	f000 fa6e 	bl	8010fec <_Bfree>
 8010b10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b12:	2300      	movs	r3, #0
 8010b14:	6013      	str	r3, [r2, #0]
 8010b16:	27a3      	movs	r7, #163	; 0xa3
 8010b18:	e785      	b.n	8010a26 <__gethex+0x12a>
 8010b1a:	1e73      	subs	r3, r6, #1
 8010b1c:	9a05      	ldr	r2, [sp, #20]
 8010b1e:	9303      	str	r3, [sp, #12]
 8010b20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d019      	beq.n	8010b5c <__gethex+0x260>
 8010b28:	f1bb 0f20 	cmp.w	fp, #32
 8010b2c:	d107      	bne.n	8010b3e <__gethex+0x242>
 8010b2e:	9b02      	ldr	r3, [sp, #8]
 8010b30:	9a00      	ldr	r2, [sp, #0]
 8010b32:	f843 2b04 	str.w	r2, [r3], #4
 8010b36:	9302      	str	r3, [sp, #8]
 8010b38:	2300      	movs	r3, #0
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	469b      	mov	fp, r3
 8010b3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010b42:	f7ff fec5 	bl	80108d0 <__hexdig_fun>
 8010b46:	9b00      	ldr	r3, [sp, #0]
 8010b48:	f000 000f 	and.w	r0, r0, #15
 8010b4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8010b50:	4303      	orrs	r3, r0
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	f10b 0b04 	add.w	fp, fp, #4
 8010b58:	9b03      	ldr	r3, [sp, #12]
 8010b5a:	e00d      	b.n	8010b78 <__gethex+0x27c>
 8010b5c:	9b03      	ldr	r3, [sp, #12]
 8010b5e:	9a06      	ldr	r2, [sp, #24]
 8010b60:	4413      	add	r3, r2
 8010b62:	42bb      	cmp	r3, r7
 8010b64:	d3e0      	bcc.n	8010b28 <__gethex+0x22c>
 8010b66:	4618      	mov	r0, r3
 8010b68:	9901      	ldr	r1, [sp, #4]
 8010b6a:	9307      	str	r3, [sp, #28]
 8010b6c:	4652      	mov	r2, sl
 8010b6e:	f001 fc93 	bl	8012498 <strncmp>
 8010b72:	9b07      	ldr	r3, [sp, #28]
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d1d7      	bne.n	8010b28 <__gethex+0x22c>
 8010b78:	461e      	mov	r6, r3
 8010b7a:	e78b      	b.n	8010a94 <__gethex+0x198>
 8010b7c:	f04f 0a03 	mov.w	sl, #3
 8010b80:	e7b8      	b.n	8010af4 <__gethex+0x1f8>
 8010b82:	da0a      	bge.n	8010b9a <__gethex+0x29e>
 8010b84:	1a37      	subs	r7, r6, r0
 8010b86:	4621      	mov	r1, r4
 8010b88:	ee18 0a10 	vmov	r0, s16
 8010b8c:	463a      	mov	r2, r7
 8010b8e:	f000 fc49 	bl	8011424 <__lshift>
 8010b92:	1bed      	subs	r5, r5, r7
 8010b94:	4604      	mov	r4, r0
 8010b96:	f100 0914 	add.w	r9, r0, #20
 8010b9a:	f04f 0a00 	mov.w	sl, #0
 8010b9e:	e7ae      	b.n	8010afe <__gethex+0x202>
 8010ba0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010ba4:	42a8      	cmp	r0, r5
 8010ba6:	dd72      	ble.n	8010c8e <__gethex+0x392>
 8010ba8:	1b45      	subs	r5, r0, r5
 8010baa:	42ae      	cmp	r6, r5
 8010bac:	dc36      	bgt.n	8010c1c <__gethex+0x320>
 8010bae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bb2:	2b02      	cmp	r3, #2
 8010bb4:	d02a      	beq.n	8010c0c <__gethex+0x310>
 8010bb6:	2b03      	cmp	r3, #3
 8010bb8:	d02c      	beq.n	8010c14 <__gethex+0x318>
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d11c      	bne.n	8010bf8 <__gethex+0x2fc>
 8010bbe:	42ae      	cmp	r6, r5
 8010bc0:	d11a      	bne.n	8010bf8 <__gethex+0x2fc>
 8010bc2:	2e01      	cmp	r6, #1
 8010bc4:	d112      	bne.n	8010bec <__gethex+0x2f0>
 8010bc6:	9a04      	ldr	r2, [sp, #16]
 8010bc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bcc:	6013      	str	r3, [r2, #0]
 8010bce:	2301      	movs	r3, #1
 8010bd0:	6123      	str	r3, [r4, #16]
 8010bd2:	f8c9 3000 	str.w	r3, [r9]
 8010bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010bd8:	2762      	movs	r7, #98	; 0x62
 8010bda:	601c      	str	r4, [r3, #0]
 8010bdc:	e723      	b.n	8010a26 <__gethex+0x12a>
 8010bde:	bf00      	nop
 8010be0:	080143b8 	.word	0x080143b8
 8010be4:	08014340 	.word	0x08014340
 8010be8:	08014351 	.word	0x08014351
 8010bec:	1e71      	subs	r1, r6, #1
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f000 fe59 	bl	80118a6 <__any_on>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	d1e6      	bne.n	8010bc6 <__gethex+0x2ca>
 8010bf8:	ee18 0a10 	vmov	r0, s16
 8010bfc:	4621      	mov	r1, r4
 8010bfe:	f000 f9f5 	bl	8010fec <_Bfree>
 8010c02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c04:	2300      	movs	r3, #0
 8010c06:	6013      	str	r3, [r2, #0]
 8010c08:	2750      	movs	r7, #80	; 0x50
 8010c0a:	e70c      	b.n	8010a26 <__gethex+0x12a>
 8010c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1f2      	bne.n	8010bf8 <__gethex+0x2fc>
 8010c12:	e7d8      	b.n	8010bc6 <__gethex+0x2ca>
 8010c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1d5      	bne.n	8010bc6 <__gethex+0x2ca>
 8010c1a:	e7ed      	b.n	8010bf8 <__gethex+0x2fc>
 8010c1c:	1e6f      	subs	r7, r5, #1
 8010c1e:	f1ba 0f00 	cmp.w	sl, #0
 8010c22:	d131      	bne.n	8010c88 <__gethex+0x38c>
 8010c24:	b127      	cbz	r7, 8010c30 <__gethex+0x334>
 8010c26:	4639      	mov	r1, r7
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f000 fe3c 	bl	80118a6 <__any_on>
 8010c2e:	4682      	mov	sl, r0
 8010c30:	117b      	asrs	r3, r7, #5
 8010c32:	2101      	movs	r1, #1
 8010c34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010c38:	f007 071f 	and.w	r7, r7, #31
 8010c3c:	fa01 f707 	lsl.w	r7, r1, r7
 8010c40:	421f      	tst	r7, r3
 8010c42:	4629      	mov	r1, r5
 8010c44:	4620      	mov	r0, r4
 8010c46:	bf18      	it	ne
 8010c48:	f04a 0a02 	orrne.w	sl, sl, #2
 8010c4c:	1b76      	subs	r6, r6, r5
 8010c4e:	f7ff fded 	bl	801082c <rshift>
 8010c52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010c56:	2702      	movs	r7, #2
 8010c58:	f1ba 0f00 	cmp.w	sl, #0
 8010c5c:	d048      	beq.n	8010cf0 <__gethex+0x3f4>
 8010c5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c62:	2b02      	cmp	r3, #2
 8010c64:	d015      	beq.n	8010c92 <__gethex+0x396>
 8010c66:	2b03      	cmp	r3, #3
 8010c68:	d017      	beq.n	8010c9a <__gethex+0x39e>
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d109      	bne.n	8010c82 <__gethex+0x386>
 8010c6e:	f01a 0f02 	tst.w	sl, #2
 8010c72:	d006      	beq.n	8010c82 <__gethex+0x386>
 8010c74:	f8d9 0000 	ldr.w	r0, [r9]
 8010c78:	ea4a 0a00 	orr.w	sl, sl, r0
 8010c7c:	f01a 0f01 	tst.w	sl, #1
 8010c80:	d10e      	bne.n	8010ca0 <__gethex+0x3a4>
 8010c82:	f047 0710 	orr.w	r7, r7, #16
 8010c86:	e033      	b.n	8010cf0 <__gethex+0x3f4>
 8010c88:	f04f 0a01 	mov.w	sl, #1
 8010c8c:	e7d0      	b.n	8010c30 <__gethex+0x334>
 8010c8e:	2701      	movs	r7, #1
 8010c90:	e7e2      	b.n	8010c58 <__gethex+0x35c>
 8010c92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c94:	f1c3 0301 	rsb	r3, r3, #1
 8010c98:	9315      	str	r3, [sp, #84]	; 0x54
 8010c9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d0f0      	beq.n	8010c82 <__gethex+0x386>
 8010ca0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010ca4:	f104 0314 	add.w	r3, r4, #20
 8010ca8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010cac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010cb0:	f04f 0c00 	mov.w	ip, #0
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010cbe:	d01c      	beq.n	8010cfa <__gethex+0x3fe>
 8010cc0:	3201      	adds	r2, #1
 8010cc2:	6002      	str	r2, [r0, #0]
 8010cc4:	2f02      	cmp	r7, #2
 8010cc6:	f104 0314 	add.w	r3, r4, #20
 8010cca:	d13f      	bne.n	8010d4c <__gethex+0x450>
 8010ccc:	f8d8 2000 	ldr.w	r2, [r8]
 8010cd0:	3a01      	subs	r2, #1
 8010cd2:	42b2      	cmp	r2, r6
 8010cd4:	d10a      	bne.n	8010cec <__gethex+0x3f0>
 8010cd6:	1171      	asrs	r1, r6, #5
 8010cd8:	2201      	movs	r2, #1
 8010cda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010cde:	f006 061f 	and.w	r6, r6, #31
 8010ce2:	fa02 f606 	lsl.w	r6, r2, r6
 8010ce6:	421e      	tst	r6, r3
 8010ce8:	bf18      	it	ne
 8010cea:	4617      	movne	r7, r2
 8010cec:	f047 0720 	orr.w	r7, r7, #32
 8010cf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010cf2:	601c      	str	r4, [r3, #0]
 8010cf4:	9b04      	ldr	r3, [sp, #16]
 8010cf6:	601d      	str	r5, [r3, #0]
 8010cf8:	e695      	b.n	8010a26 <__gethex+0x12a>
 8010cfa:	4299      	cmp	r1, r3
 8010cfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8010d00:	d8d8      	bhi.n	8010cb4 <__gethex+0x3b8>
 8010d02:	68a3      	ldr	r3, [r4, #8]
 8010d04:	459b      	cmp	fp, r3
 8010d06:	db19      	blt.n	8010d3c <__gethex+0x440>
 8010d08:	6861      	ldr	r1, [r4, #4]
 8010d0a:	ee18 0a10 	vmov	r0, s16
 8010d0e:	3101      	adds	r1, #1
 8010d10:	f000 f92c 	bl	8010f6c <_Balloc>
 8010d14:	4681      	mov	r9, r0
 8010d16:	b918      	cbnz	r0, 8010d20 <__gethex+0x424>
 8010d18:	4b1a      	ldr	r3, [pc, #104]	; (8010d84 <__gethex+0x488>)
 8010d1a:	4602      	mov	r2, r0
 8010d1c:	2184      	movs	r1, #132	; 0x84
 8010d1e:	e6a8      	b.n	8010a72 <__gethex+0x176>
 8010d20:	6922      	ldr	r2, [r4, #16]
 8010d22:	3202      	adds	r2, #2
 8010d24:	f104 010c 	add.w	r1, r4, #12
 8010d28:	0092      	lsls	r2, r2, #2
 8010d2a:	300c      	adds	r0, #12
 8010d2c:	f7fd f9a2 	bl	800e074 <memcpy>
 8010d30:	4621      	mov	r1, r4
 8010d32:	ee18 0a10 	vmov	r0, s16
 8010d36:	f000 f959 	bl	8010fec <_Bfree>
 8010d3a:	464c      	mov	r4, r9
 8010d3c:	6923      	ldr	r3, [r4, #16]
 8010d3e:	1c5a      	adds	r2, r3, #1
 8010d40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d44:	6122      	str	r2, [r4, #16]
 8010d46:	2201      	movs	r2, #1
 8010d48:	615a      	str	r2, [r3, #20]
 8010d4a:	e7bb      	b.n	8010cc4 <__gethex+0x3c8>
 8010d4c:	6922      	ldr	r2, [r4, #16]
 8010d4e:	455a      	cmp	r2, fp
 8010d50:	dd0b      	ble.n	8010d6a <__gethex+0x46e>
 8010d52:	2101      	movs	r1, #1
 8010d54:	4620      	mov	r0, r4
 8010d56:	f7ff fd69 	bl	801082c <rshift>
 8010d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d5e:	3501      	adds	r5, #1
 8010d60:	42ab      	cmp	r3, r5
 8010d62:	f6ff aed0 	blt.w	8010b06 <__gethex+0x20a>
 8010d66:	2701      	movs	r7, #1
 8010d68:	e7c0      	b.n	8010cec <__gethex+0x3f0>
 8010d6a:	f016 061f 	ands.w	r6, r6, #31
 8010d6e:	d0fa      	beq.n	8010d66 <__gethex+0x46a>
 8010d70:	4453      	add	r3, sl
 8010d72:	f1c6 0620 	rsb	r6, r6, #32
 8010d76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010d7a:	f000 f9e9 	bl	8011150 <__hi0bits>
 8010d7e:	42b0      	cmp	r0, r6
 8010d80:	dbe7      	blt.n	8010d52 <__gethex+0x456>
 8010d82:	e7f0      	b.n	8010d66 <__gethex+0x46a>
 8010d84:	08014340 	.word	0x08014340

08010d88 <L_shift>:
 8010d88:	f1c2 0208 	rsb	r2, r2, #8
 8010d8c:	0092      	lsls	r2, r2, #2
 8010d8e:	b570      	push	{r4, r5, r6, lr}
 8010d90:	f1c2 0620 	rsb	r6, r2, #32
 8010d94:	6843      	ldr	r3, [r0, #4]
 8010d96:	6804      	ldr	r4, [r0, #0]
 8010d98:	fa03 f506 	lsl.w	r5, r3, r6
 8010d9c:	432c      	orrs	r4, r5
 8010d9e:	40d3      	lsrs	r3, r2
 8010da0:	6004      	str	r4, [r0, #0]
 8010da2:	f840 3f04 	str.w	r3, [r0, #4]!
 8010da6:	4288      	cmp	r0, r1
 8010da8:	d3f4      	bcc.n	8010d94 <L_shift+0xc>
 8010daa:	bd70      	pop	{r4, r5, r6, pc}

08010dac <__match>:
 8010dac:	b530      	push	{r4, r5, lr}
 8010dae:	6803      	ldr	r3, [r0, #0]
 8010db0:	3301      	adds	r3, #1
 8010db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010db6:	b914      	cbnz	r4, 8010dbe <__match+0x12>
 8010db8:	6003      	str	r3, [r0, #0]
 8010dba:	2001      	movs	r0, #1
 8010dbc:	bd30      	pop	{r4, r5, pc}
 8010dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010dc6:	2d19      	cmp	r5, #25
 8010dc8:	bf98      	it	ls
 8010dca:	3220      	addls	r2, #32
 8010dcc:	42a2      	cmp	r2, r4
 8010dce:	d0f0      	beq.n	8010db2 <__match+0x6>
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	e7f3      	b.n	8010dbc <__match+0x10>

08010dd4 <__hexnan>:
 8010dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd8:	680b      	ldr	r3, [r1, #0]
 8010dda:	115e      	asrs	r6, r3, #5
 8010ddc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010de0:	f013 031f 	ands.w	r3, r3, #31
 8010de4:	b087      	sub	sp, #28
 8010de6:	bf18      	it	ne
 8010de8:	3604      	addne	r6, #4
 8010dea:	2500      	movs	r5, #0
 8010dec:	1f37      	subs	r7, r6, #4
 8010dee:	4690      	mov	r8, r2
 8010df0:	6802      	ldr	r2, [r0, #0]
 8010df2:	9301      	str	r3, [sp, #4]
 8010df4:	4682      	mov	sl, r0
 8010df6:	f846 5c04 	str.w	r5, [r6, #-4]
 8010dfa:	46b9      	mov	r9, r7
 8010dfc:	463c      	mov	r4, r7
 8010dfe:	9502      	str	r5, [sp, #8]
 8010e00:	46ab      	mov	fp, r5
 8010e02:	7851      	ldrb	r1, [r2, #1]
 8010e04:	1c53      	adds	r3, r2, #1
 8010e06:	9303      	str	r3, [sp, #12]
 8010e08:	b341      	cbz	r1, 8010e5c <__hexnan+0x88>
 8010e0a:	4608      	mov	r0, r1
 8010e0c:	9205      	str	r2, [sp, #20]
 8010e0e:	9104      	str	r1, [sp, #16]
 8010e10:	f7ff fd5e 	bl	80108d0 <__hexdig_fun>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d14f      	bne.n	8010eb8 <__hexnan+0xe4>
 8010e18:	9904      	ldr	r1, [sp, #16]
 8010e1a:	9a05      	ldr	r2, [sp, #20]
 8010e1c:	2920      	cmp	r1, #32
 8010e1e:	d818      	bhi.n	8010e52 <__hexnan+0x7e>
 8010e20:	9b02      	ldr	r3, [sp, #8]
 8010e22:	459b      	cmp	fp, r3
 8010e24:	dd13      	ble.n	8010e4e <__hexnan+0x7a>
 8010e26:	454c      	cmp	r4, r9
 8010e28:	d206      	bcs.n	8010e38 <__hexnan+0x64>
 8010e2a:	2d07      	cmp	r5, #7
 8010e2c:	dc04      	bgt.n	8010e38 <__hexnan+0x64>
 8010e2e:	462a      	mov	r2, r5
 8010e30:	4649      	mov	r1, r9
 8010e32:	4620      	mov	r0, r4
 8010e34:	f7ff ffa8 	bl	8010d88 <L_shift>
 8010e38:	4544      	cmp	r4, r8
 8010e3a:	d950      	bls.n	8010ede <__hexnan+0x10a>
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	f1a4 0904 	sub.w	r9, r4, #4
 8010e42:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e46:	f8cd b008 	str.w	fp, [sp, #8]
 8010e4a:	464c      	mov	r4, r9
 8010e4c:	461d      	mov	r5, r3
 8010e4e:	9a03      	ldr	r2, [sp, #12]
 8010e50:	e7d7      	b.n	8010e02 <__hexnan+0x2e>
 8010e52:	2929      	cmp	r1, #41	; 0x29
 8010e54:	d156      	bne.n	8010f04 <__hexnan+0x130>
 8010e56:	3202      	adds	r2, #2
 8010e58:	f8ca 2000 	str.w	r2, [sl]
 8010e5c:	f1bb 0f00 	cmp.w	fp, #0
 8010e60:	d050      	beq.n	8010f04 <__hexnan+0x130>
 8010e62:	454c      	cmp	r4, r9
 8010e64:	d206      	bcs.n	8010e74 <__hexnan+0xa0>
 8010e66:	2d07      	cmp	r5, #7
 8010e68:	dc04      	bgt.n	8010e74 <__hexnan+0xa0>
 8010e6a:	462a      	mov	r2, r5
 8010e6c:	4649      	mov	r1, r9
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f7ff ff8a 	bl	8010d88 <L_shift>
 8010e74:	4544      	cmp	r4, r8
 8010e76:	d934      	bls.n	8010ee2 <__hexnan+0x10e>
 8010e78:	f1a8 0204 	sub.w	r2, r8, #4
 8010e7c:	4623      	mov	r3, r4
 8010e7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010e82:	f842 1f04 	str.w	r1, [r2, #4]!
 8010e86:	429f      	cmp	r7, r3
 8010e88:	d2f9      	bcs.n	8010e7e <__hexnan+0xaa>
 8010e8a:	1b3b      	subs	r3, r7, r4
 8010e8c:	f023 0303 	bic.w	r3, r3, #3
 8010e90:	3304      	adds	r3, #4
 8010e92:	3401      	adds	r4, #1
 8010e94:	3e03      	subs	r6, #3
 8010e96:	42b4      	cmp	r4, r6
 8010e98:	bf88      	it	hi
 8010e9a:	2304      	movhi	r3, #4
 8010e9c:	4443      	add	r3, r8
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f843 2b04 	str.w	r2, [r3], #4
 8010ea4:	429f      	cmp	r7, r3
 8010ea6:	d2fb      	bcs.n	8010ea0 <__hexnan+0xcc>
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	b91b      	cbnz	r3, 8010eb4 <__hexnan+0xe0>
 8010eac:	4547      	cmp	r7, r8
 8010eae:	d127      	bne.n	8010f00 <__hexnan+0x12c>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	603b      	str	r3, [r7, #0]
 8010eb4:	2005      	movs	r0, #5
 8010eb6:	e026      	b.n	8010f06 <__hexnan+0x132>
 8010eb8:	3501      	adds	r5, #1
 8010eba:	2d08      	cmp	r5, #8
 8010ebc:	f10b 0b01 	add.w	fp, fp, #1
 8010ec0:	dd06      	ble.n	8010ed0 <__hexnan+0xfc>
 8010ec2:	4544      	cmp	r4, r8
 8010ec4:	d9c3      	bls.n	8010e4e <__hexnan+0x7a>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ecc:	2501      	movs	r5, #1
 8010ece:	3c04      	subs	r4, #4
 8010ed0:	6822      	ldr	r2, [r4, #0]
 8010ed2:	f000 000f 	and.w	r0, r0, #15
 8010ed6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010eda:	6022      	str	r2, [r4, #0]
 8010edc:	e7b7      	b.n	8010e4e <__hexnan+0x7a>
 8010ede:	2508      	movs	r5, #8
 8010ee0:	e7b5      	b.n	8010e4e <__hexnan+0x7a>
 8010ee2:	9b01      	ldr	r3, [sp, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d0df      	beq.n	8010ea8 <__hexnan+0xd4>
 8010ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8010eec:	f1c3 0320 	rsb	r3, r3, #32
 8010ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8010ef4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010ef8:	401a      	ands	r2, r3
 8010efa:	f846 2c04 	str.w	r2, [r6, #-4]
 8010efe:	e7d3      	b.n	8010ea8 <__hexnan+0xd4>
 8010f00:	3f04      	subs	r7, #4
 8010f02:	e7d1      	b.n	8010ea8 <__hexnan+0xd4>
 8010f04:	2004      	movs	r0, #4
 8010f06:	b007      	add	sp, #28
 8010f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f0c <_localeconv_r>:
 8010f0c:	4800      	ldr	r0, [pc, #0]	; (8010f10 <_localeconv_r+0x4>)
 8010f0e:	4770      	bx	lr
 8010f10:	24000178 	.word	0x24000178

08010f14 <_lseek_r>:
 8010f14:	b538      	push	{r3, r4, r5, lr}
 8010f16:	4d07      	ldr	r5, [pc, #28]	; (8010f34 <_lseek_r+0x20>)
 8010f18:	4604      	mov	r4, r0
 8010f1a:	4608      	mov	r0, r1
 8010f1c:	4611      	mov	r1, r2
 8010f1e:	2200      	movs	r2, #0
 8010f20:	602a      	str	r2, [r5, #0]
 8010f22:	461a      	mov	r2, r3
 8010f24:	f7f1 fa18 	bl	8002358 <_lseek>
 8010f28:	1c43      	adds	r3, r0, #1
 8010f2a:	d102      	bne.n	8010f32 <_lseek_r+0x1e>
 8010f2c:	682b      	ldr	r3, [r5, #0]
 8010f2e:	b103      	cbz	r3, 8010f32 <_lseek_r+0x1e>
 8010f30:	6023      	str	r3, [r4, #0]
 8010f32:	bd38      	pop	{r3, r4, r5, pc}
 8010f34:	24005130 	.word	0x24005130

08010f38 <malloc>:
 8010f38:	4b02      	ldr	r3, [pc, #8]	; (8010f44 <malloc+0xc>)
 8010f3a:	4601      	mov	r1, r0
 8010f3c:	6818      	ldr	r0, [r3, #0]
 8010f3e:	f000 bd55 	b.w	80119ec <_malloc_r>
 8010f42:	bf00      	nop
 8010f44:	24000020 	.word	0x24000020

08010f48 <__ascii_mbtowc>:
 8010f48:	b082      	sub	sp, #8
 8010f4a:	b901      	cbnz	r1, 8010f4e <__ascii_mbtowc+0x6>
 8010f4c:	a901      	add	r1, sp, #4
 8010f4e:	b142      	cbz	r2, 8010f62 <__ascii_mbtowc+0x1a>
 8010f50:	b14b      	cbz	r3, 8010f66 <__ascii_mbtowc+0x1e>
 8010f52:	7813      	ldrb	r3, [r2, #0]
 8010f54:	600b      	str	r3, [r1, #0]
 8010f56:	7812      	ldrb	r2, [r2, #0]
 8010f58:	1e10      	subs	r0, r2, #0
 8010f5a:	bf18      	it	ne
 8010f5c:	2001      	movne	r0, #1
 8010f5e:	b002      	add	sp, #8
 8010f60:	4770      	bx	lr
 8010f62:	4610      	mov	r0, r2
 8010f64:	e7fb      	b.n	8010f5e <__ascii_mbtowc+0x16>
 8010f66:	f06f 0001 	mvn.w	r0, #1
 8010f6a:	e7f8      	b.n	8010f5e <__ascii_mbtowc+0x16>

08010f6c <_Balloc>:
 8010f6c:	b570      	push	{r4, r5, r6, lr}
 8010f6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010f70:	4604      	mov	r4, r0
 8010f72:	460d      	mov	r5, r1
 8010f74:	b976      	cbnz	r6, 8010f94 <_Balloc+0x28>
 8010f76:	2010      	movs	r0, #16
 8010f78:	f7ff ffde 	bl	8010f38 <malloc>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	6260      	str	r0, [r4, #36]	; 0x24
 8010f80:	b920      	cbnz	r0, 8010f8c <_Balloc+0x20>
 8010f82:	4b18      	ldr	r3, [pc, #96]	; (8010fe4 <_Balloc+0x78>)
 8010f84:	4818      	ldr	r0, [pc, #96]	; (8010fe8 <_Balloc+0x7c>)
 8010f86:	2166      	movs	r1, #102	; 0x66
 8010f88:	f001 fb56 	bl	8012638 <__assert_func>
 8010f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f90:	6006      	str	r6, [r0, #0]
 8010f92:	60c6      	str	r6, [r0, #12]
 8010f94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010f96:	68f3      	ldr	r3, [r6, #12]
 8010f98:	b183      	cbz	r3, 8010fbc <_Balloc+0x50>
 8010f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010fa2:	b9b8      	cbnz	r0, 8010fd4 <_Balloc+0x68>
 8010fa4:	2101      	movs	r1, #1
 8010fa6:	fa01 f605 	lsl.w	r6, r1, r5
 8010faa:	1d72      	adds	r2, r6, #5
 8010fac:	0092      	lsls	r2, r2, #2
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f000 fc9a 	bl	80118e8 <_calloc_r>
 8010fb4:	b160      	cbz	r0, 8010fd0 <_Balloc+0x64>
 8010fb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010fba:	e00e      	b.n	8010fda <_Balloc+0x6e>
 8010fbc:	2221      	movs	r2, #33	; 0x21
 8010fbe:	2104      	movs	r1, #4
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f000 fc91 	bl	80118e8 <_calloc_r>
 8010fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fc8:	60f0      	str	r0, [r6, #12]
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d1e4      	bne.n	8010f9a <_Balloc+0x2e>
 8010fd0:	2000      	movs	r0, #0
 8010fd2:	bd70      	pop	{r4, r5, r6, pc}
 8010fd4:	6802      	ldr	r2, [r0, #0]
 8010fd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fda:	2300      	movs	r3, #0
 8010fdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fe0:	e7f7      	b.n	8010fd2 <_Balloc+0x66>
 8010fe2:	bf00      	nop
 8010fe4:	080142ce 	.word	0x080142ce
 8010fe8:	080143cc 	.word	0x080143cc

08010fec <_Bfree>:
 8010fec:	b570      	push	{r4, r5, r6, lr}
 8010fee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ff0:	4605      	mov	r5, r0
 8010ff2:	460c      	mov	r4, r1
 8010ff4:	b976      	cbnz	r6, 8011014 <_Bfree+0x28>
 8010ff6:	2010      	movs	r0, #16
 8010ff8:	f7ff ff9e 	bl	8010f38 <malloc>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	6268      	str	r0, [r5, #36]	; 0x24
 8011000:	b920      	cbnz	r0, 801100c <_Bfree+0x20>
 8011002:	4b09      	ldr	r3, [pc, #36]	; (8011028 <_Bfree+0x3c>)
 8011004:	4809      	ldr	r0, [pc, #36]	; (801102c <_Bfree+0x40>)
 8011006:	218a      	movs	r1, #138	; 0x8a
 8011008:	f001 fb16 	bl	8012638 <__assert_func>
 801100c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011010:	6006      	str	r6, [r0, #0]
 8011012:	60c6      	str	r6, [r0, #12]
 8011014:	b13c      	cbz	r4, 8011026 <_Bfree+0x3a>
 8011016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011018:	6862      	ldr	r2, [r4, #4]
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011020:	6021      	str	r1, [r4, #0]
 8011022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011026:	bd70      	pop	{r4, r5, r6, pc}
 8011028:	080142ce 	.word	0x080142ce
 801102c:	080143cc 	.word	0x080143cc

08011030 <__multadd>:
 8011030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011034:	690d      	ldr	r5, [r1, #16]
 8011036:	4607      	mov	r7, r0
 8011038:	460c      	mov	r4, r1
 801103a:	461e      	mov	r6, r3
 801103c:	f101 0c14 	add.w	ip, r1, #20
 8011040:	2000      	movs	r0, #0
 8011042:	f8dc 3000 	ldr.w	r3, [ip]
 8011046:	b299      	uxth	r1, r3
 8011048:	fb02 6101 	mla	r1, r2, r1, r6
 801104c:	0c1e      	lsrs	r6, r3, #16
 801104e:	0c0b      	lsrs	r3, r1, #16
 8011050:	fb02 3306 	mla	r3, r2, r6, r3
 8011054:	b289      	uxth	r1, r1
 8011056:	3001      	adds	r0, #1
 8011058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801105c:	4285      	cmp	r5, r0
 801105e:	f84c 1b04 	str.w	r1, [ip], #4
 8011062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011066:	dcec      	bgt.n	8011042 <__multadd+0x12>
 8011068:	b30e      	cbz	r6, 80110ae <__multadd+0x7e>
 801106a:	68a3      	ldr	r3, [r4, #8]
 801106c:	42ab      	cmp	r3, r5
 801106e:	dc19      	bgt.n	80110a4 <__multadd+0x74>
 8011070:	6861      	ldr	r1, [r4, #4]
 8011072:	4638      	mov	r0, r7
 8011074:	3101      	adds	r1, #1
 8011076:	f7ff ff79 	bl	8010f6c <_Balloc>
 801107a:	4680      	mov	r8, r0
 801107c:	b928      	cbnz	r0, 801108a <__multadd+0x5a>
 801107e:	4602      	mov	r2, r0
 8011080:	4b0c      	ldr	r3, [pc, #48]	; (80110b4 <__multadd+0x84>)
 8011082:	480d      	ldr	r0, [pc, #52]	; (80110b8 <__multadd+0x88>)
 8011084:	21b5      	movs	r1, #181	; 0xb5
 8011086:	f001 fad7 	bl	8012638 <__assert_func>
 801108a:	6922      	ldr	r2, [r4, #16]
 801108c:	3202      	adds	r2, #2
 801108e:	f104 010c 	add.w	r1, r4, #12
 8011092:	0092      	lsls	r2, r2, #2
 8011094:	300c      	adds	r0, #12
 8011096:	f7fc ffed 	bl	800e074 <memcpy>
 801109a:	4621      	mov	r1, r4
 801109c:	4638      	mov	r0, r7
 801109e:	f7ff ffa5 	bl	8010fec <_Bfree>
 80110a2:	4644      	mov	r4, r8
 80110a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80110a8:	3501      	adds	r5, #1
 80110aa:	615e      	str	r6, [r3, #20]
 80110ac:	6125      	str	r5, [r4, #16]
 80110ae:	4620      	mov	r0, r4
 80110b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b4:	08014340 	.word	0x08014340
 80110b8:	080143cc 	.word	0x080143cc

080110bc <__s2b>:
 80110bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c0:	460c      	mov	r4, r1
 80110c2:	4615      	mov	r5, r2
 80110c4:	461f      	mov	r7, r3
 80110c6:	2209      	movs	r2, #9
 80110c8:	3308      	adds	r3, #8
 80110ca:	4606      	mov	r6, r0
 80110cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80110d0:	2100      	movs	r1, #0
 80110d2:	2201      	movs	r2, #1
 80110d4:	429a      	cmp	r2, r3
 80110d6:	db09      	blt.n	80110ec <__s2b+0x30>
 80110d8:	4630      	mov	r0, r6
 80110da:	f7ff ff47 	bl	8010f6c <_Balloc>
 80110de:	b940      	cbnz	r0, 80110f2 <__s2b+0x36>
 80110e0:	4602      	mov	r2, r0
 80110e2:	4b19      	ldr	r3, [pc, #100]	; (8011148 <__s2b+0x8c>)
 80110e4:	4819      	ldr	r0, [pc, #100]	; (801114c <__s2b+0x90>)
 80110e6:	21ce      	movs	r1, #206	; 0xce
 80110e8:	f001 faa6 	bl	8012638 <__assert_func>
 80110ec:	0052      	lsls	r2, r2, #1
 80110ee:	3101      	adds	r1, #1
 80110f0:	e7f0      	b.n	80110d4 <__s2b+0x18>
 80110f2:	9b08      	ldr	r3, [sp, #32]
 80110f4:	6143      	str	r3, [r0, #20]
 80110f6:	2d09      	cmp	r5, #9
 80110f8:	f04f 0301 	mov.w	r3, #1
 80110fc:	6103      	str	r3, [r0, #16]
 80110fe:	dd16      	ble.n	801112e <__s2b+0x72>
 8011100:	f104 0909 	add.w	r9, r4, #9
 8011104:	46c8      	mov	r8, r9
 8011106:	442c      	add	r4, r5
 8011108:	f818 3b01 	ldrb.w	r3, [r8], #1
 801110c:	4601      	mov	r1, r0
 801110e:	3b30      	subs	r3, #48	; 0x30
 8011110:	220a      	movs	r2, #10
 8011112:	4630      	mov	r0, r6
 8011114:	f7ff ff8c 	bl	8011030 <__multadd>
 8011118:	45a0      	cmp	r8, r4
 801111a:	d1f5      	bne.n	8011108 <__s2b+0x4c>
 801111c:	f1a5 0408 	sub.w	r4, r5, #8
 8011120:	444c      	add	r4, r9
 8011122:	1b2d      	subs	r5, r5, r4
 8011124:	1963      	adds	r3, r4, r5
 8011126:	42bb      	cmp	r3, r7
 8011128:	db04      	blt.n	8011134 <__s2b+0x78>
 801112a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801112e:	340a      	adds	r4, #10
 8011130:	2509      	movs	r5, #9
 8011132:	e7f6      	b.n	8011122 <__s2b+0x66>
 8011134:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011138:	4601      	mov	r1, r0
 801113a:	3b30      	subs	r3, #48	; 0x30
 801113c:	220a      	movs	r2, #10
 801113e:	4630      	mov	r0, r6
 8011140:	f7ff ff76 	bl	8011030 <__multadd>
 8011144:	e7ee      	b.n	8011124 <__s2b+0x68>
 8011146:	bf00      	nop
 8011148:	08014340 	.word	0x08014340
 801114c:	080143cc 	.word	0x080143cc

08011150 <__hi0bits>:
 8011150:	0c03      	lsrs	r3, r0, #16
 8011152:	041b      	lsls	r3, r3, #16
 8011154:	b9d3      	cbnz	r3, 801118c <__hi0bits+0x3c>
 8011156:	0400      	lsls	r0, r0, #16
 8011158:	2310      	movs	r3, #16
 801115a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801115e:	bf04      	itt	eq
 8011160:	0200      	lsleq	r0, r0, #8
 8011162:	3308      	addeq	r3, #8
 8011164:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011168:	bf04      	itt	eq
 801116a:	0100      	lsleq	r0, r0, #4
 801116c:	3304      	addeq	r3, #4
 801116e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011172:	bf04      	itt	eq
 8011174:	0080      	lsleq	r0, r0, #2
 8011176:	3302      	addeq	r3, #2
 8011178:	2800      	cmp	r0, #0
 801117a:	db05      	blt.n	8011188 <__hi0bits+0x38>
 801117c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011180:	f103 0301 	add.w	r3, r3, #1
 8011184:	bf08      	it	eq
 8011186:	2320      	moveq	r3, #32
 8011188:	4618      	mov	r0, r3
 801118a:	4770      	bx	lr
 801118c:	2300      	movs	r3, #0
 801118e:	e7e4      	b.n	801115a <__hi0bits+0xa>

08011190 <__lo0bits>:
 8011190:	6803      	ldr	r3, [r0, #0]
 8011192:	f013 0207 	ands.w	r2, r3, #7
 8011196:	4601      	mov	r1, r0
 8011198:	d00b      	beq.n	80111b2 <__lo0bits+0x22>
 801119a:	07da      	lsls	r2, r3, #31
 801119c:	d423      	bmi.n	80111e6 <__lo0bits+0x56>
 801119e:	0798      	lsls	r0, r3, #30
 80111a0:	bf49      	itett	mi
 80111a2:	085b      	lsrmi	r3, r3, #1
 80111a4:	089b      	lsrpl	r3, r3, #2
 80111a6:	2001      	movmi	r0, #1
 80111a8:	600b      	strmi	r3, [r1, #0]
 80111aa:	bf5c      	itt	pl
 80111ac:	600b      	strpl	r3, [r1, #0]
 80111ae:	2002      	movpl	r0, #2
 80111b0:	4770      	bx	lr
 80111b2:	b298      	uxth	r0, r3
 80111b4:	b9a8      	cbnz	r0, 80111e2 <__lo0bits+0x52>
 80111b6:	0c1b      	lsrs	r3, r3, #16
 80111b8:	2010      	movs	r0, #16
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	b90a      	cbnz	r2, 80111c2 <__lo0bits+0x32>
 80111be:	3008      	adds	r0, #8
 80111c0:	0a1b      	lsrs	r3, r3, #8
 80111c2:	071a      	lsls	r2, r3, #28
 80111c4:	bf04      	itt	eq
 80111c6:	091b      	lsreq	r3, r3, #4
 80111c8:	3004      	addeq	r0, #4
 80111ca:	079a      	lsls	r2, r3, #30
 80111cc:	bf04      	itt	eq
 80111ce:	089b      	lsreq	r3, r3, #2
 80111d0:	3002      	addeq	r0, #2
 80111d2:	07da      	lsls	r2, r3, #31
 80111d4:	d403      	bmi.n	80111de <__lo0bits+0x4e>
 80111d6:	085b      	lsrs	r3, r3, #1
 80111d8:	f100 0001 	add.w	r0, r0, #1
 80111dc:	d005      	beq.n	80111ea <__lo0bits+0x5a>
 80111de:	600b      	str	r3, [r1, #0]
 80111e0:	4770      	bx	lr
 80111e2:	4610      	mov	r0, r2
 80111e4:	e7e9      	b.n	80111ba <__lo0bits+0x2a>
 80111e6:	2000      	movs	r0, #0
 80111e8:	4770      	bx	lr
 80111ea:	2020      	movs	r0, #32
 80111ec:	4770      	bx	lr
	...

080111f0 <__i2b>:
 80111f0:	b510      	push	{r4, lr}
 80111f2:	460c      	mov	r4, r1
 80111f4:	2101      	movs	r1, #1
 80111f6:	f7ff feb9 	bl	8010f6c <_Balloc>
 80111fa:	4602      	mov	r2, r0
 80111fc:	b928      	cbnz	r0, 801120a <__i2b+0x1a>
 80111fe:	4b05      	ldr	r3, [pc, #20]	; (8011214 <__i2b+0x24>)
 8011200:	4805      	ldr	r0, [pc, #20]	; (8011218 <__i2b+0x28>)
 8011202:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011206:	f001 fa17 	bl	8012638 <__assert_func>
 801120a:	2301      	movs	r3, #1
 801120c:	6144      	str	r4, [r0, #20]
 801120e:	6103      	str	r3, [r0, #16]
 8011210:	bd10      	pop	{r4, pc}
 8011212:	bf00      	nop
 8011214:	08014340 	.word	0x08014340
 8011218:	080143cc 	.word	0x080143cc

0801121c <__multiply>:
 801121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011220:	4691      	mov	r9, r2
 8011222:	690a      	ldr	r2, [r1, #16]
 8011224:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011228:	429a      	cmp	r2, r3
 801122a:	bfb8      	it	lt
 801122c:	460b      	movlt	r3, r1
 801122e:	460c      	mov	r4, r1
 8011230:	bfbc      	itt	lt
 8011232:	464c      	movlt	r4, r9
 8011234:	4699      	movlt	r9, r3
 8011236:	6927      	ldr	r7, [r4, #16]
 8011238:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801123c:	68a3      	ldr	r3, [r4, #8]
 801123e:	6861      	ldr	r1, [r4, #4]
 8011240:	eb07 060a 	add.w	r6, r7, sl
 8011244:	42b3      	cmp	r3, r6
 8011246:	b085      	sub	sp, #20
 8011248:	bfb8      	it	lt
 801124a:	3101      	addlt	r1, #1
 801124c:	f7ff fe8e 	bl	8010f6c <_Balloc>
 8011250:	b930      	cbnz	r0, 8011260 <__multiply+0x44>
 8011252:	4602      	mov	r2, r0
 8011254:	4b44      	ldr	r3, [pc, #272]	; (8011368 <__multiply+0x14c>)
 8011256:	4845      	ldr	r0, [pc, #276]	; (801136c <__multiply+0x150>)
 8011258:	f240 115d 	movw	r1, #349	; 0x15d
 801125c:	f001 f9ec 	bl	8012638 <__assert_func>
 8011260:	f100 0514 	add.w	r5, r0, #20
 8011264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011268:	462b      	mov	r3, r5
 801126a:	2200      	movs	r2, #0
 801126c:	4543      	cmp	r3, r8
 801126e:	d321      	bcc.n	80112b4 <__multiply+0x98>
 8011270:	f104 0314 	add.w	r3, r4, #20
 8011274:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011278:	f109 0314 	add.w	r3, r9, #20
 801127c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011280:	9202      	str	r2, [sp, #8]
 8011282:	1b3a      	subs	r2, r7, r4
 8011284:	3a15      	subs	r2, #21
 8011286:	f022 0203 	bic.w	r2, r2, #3
 801128a:	3204      	adds	r2, #4
 801128c:	f104 0115 	add.w	r1, r4, #21
 8011290:	428f      	cmp	r7, r1
 8011292:	bf38      	it	cc
 8011294:	2204      	movcc	r2, #4
 8011296:	9201      	str	r2, [sp, #4]
 8011298:	9a02      	ldr	r2, [sp, #8]
 801129a:	9303      	str	r3, [sp, #12]
 801129c:	429a      	cmp	r2, r3
 801129e:	d80c      	bhi.n	80112ba <__multiply+0x9e>
 80112a0:	2e00      	cmp	r6, #0
 80112a2:	dd03      	ble.n	80112ac <__multiply+0x90>
 80112a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d05a      	beq.n	8011362 <__multiply+0x146>
 80112ac:	6106      	str	r6, [r0, #16]
 80112ae:	b005      	add	sp, #20
 80112b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b4:	f843 2b04 	str.w	r2, [r3], #4
 80112b8:	e7d8      	b.n	801126c <__multiply+0x50>
 80112ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80112be:	f1ba 0f00 	cmp.w	sl, #0
 80112c2:	d024      	beq.n	801130e <__multiply+0xf2>
 80112c4:	f104 0e14 	add.w	lr, r4, #20
 80112c8:	46a9      	mov	r9, r5
 80112ca:	f04f 0c00 	mov.w	ip, #0
 80112ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80112d2:	f8d9 1000 	ldr.w	r1, [r9]
 80112d6:	fa1f fb82 	uxth.w	fp, r2
 80112da:	b289      	uxth	r1, r1
 80112dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80112e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80112e4:	f8d9 2000 	ldr.w	r2, [r9]
 80112e8:	4461      	add	r1, ip
 80112ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80112ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80112f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80112f6:	b289      	uxth	r1, r1
 80112f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80112fc:	4577      	cmp	r7, lr
 80112fe:	f849 1b04 	str.w	r1, [r9], #4
 8011302:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011306:	d8e2      	bhi.n	80112ce <__multiply+0xb2>
 8011308:	9a01      	ldr	r2, [sp, #4]
 801130a:	f845 c002 	str.w	ip, [r5, r2]
 801130e:	9a03      	ldr	r2, [sp, #12]
 8011310:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011314:	3304      	adds	r3, #4
 8011316:	f1b9 0f00 	cmp.w	r9, #0
 801131a:	d020      	beq.n	801135e <__multiply+0x142>
 801131c:	6829      	ldr	r1, [r5, #0]
 801131e:	f104 0c14 	add.w	ip, r4, #20
 8011322:	46ae      	mov	lr, r5
 8011324:	f04f 0a00 	mov.w	sl, #0
 8011328:	f8bc b000 	ldrh.w	fp, [ip]
 801132c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011330:	fb09 220b 	mla	r2, r9, fp, r2
 8011334:	4492      	add	sl, r2
 8011336:	b289      	uxth	r1, r1
 8011338:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801133c:	f84e 1b04 	str.w	r1, [lr], #4
 8011340:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011344:	f8be 1000 	ldrh.w	r1, [lr]
 8011348:	0c12      	lsrs	r2, r2, #16
 801134a:	fb09 1102 	mla	r1, r9, r2, r1
 801134e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011352:	4567      	cmp	r7, ip
 8011354:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011358:	d8e6      	bhi.n	8011328 <__multiply+0x10c>
 801135a:	9a01      	ldr	r2, [sp, #4]
 801135c:	50a9      	str	r1, [r5, r2]
 801135e:	3504      	adds	r5, #4
 8011360:	e79a      	b.n	8011298 <__multiply+0x7c>
 8011362:	3e01      	subs	r6, #1
 8011364:	e79c      	b.n	80112a0 <__multiply+0x84>
 8011366:	bf00      	nop
 8011368:	08014340 	.word	0x08014340
 801136c:	080143cc 	.word	0x080143cc

08011370 <__pow5mult>:
 8011370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011374:	4615      	mov	r5, r2
 8011376:	f012 0203 	ands.w	r2, r2, #3
 801137a:	4606      	mov	r6, r0
 801137c:	460f      	mov	r7, r1
 801137e:	d007      	beq.n	8011390 <__pow5mult+0x20>
 8011380:	4c25      	ldr	r4, [pc, #148]	; (8011418 <__pow5mult+0xa8>)
 8011382:	3a01      	subs	r2, #1
 8011384:	2300      	movs	r3, #0
 8011386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801138a:	f7ff fe51 	bl	8011030 <__multadd>
 801138e:	4607      	mov	r7, r0
 8011390:	10ad      	asrs	r5, r5, #2
 8011392:	d03d      	beq.n	8011410 <__pow5mult+0xa0>
 8011394:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011396:	b97c      	cbnz	r4, 80113b8 <__pow5mult+0x48>
 8011398:	2010      	movs	r0, #16
 801139a:	f7ff fdcd 	bl	8010f38 <malloc>
 801139e:	4602      	mov	r2, r0
 80113a0:	6270      	str	r0, [r6, #36]	; 0x24
 80113a2:	b928      	cbnz	r0, 80113b0 <__pow5mult+0x40>
 80113a4:	4b1d      	ldr	r3, [pc, #116]	; (801141c <__pow5mult+0xac>)
 80113a6:	481e      	ldr	r0, [pc, #120]	; (8011420 <__pow5mult+0xb0>)
 80113a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80113ac:	f001 f944 	bl	8012638 <__assert_func>
 80113b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113b4:	6004      	str	r4, [r0, #0]
 80113b6:	60c4      	str	r4, [r0, #12]
 80113b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80113bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113c0:	b94c      	cbnz	r4, 80113d6 <__pow5mult+0x66>
 80113c2:	f240 2171 	movw	r1, #625	; 0x271
 80113c6:	4630      	mov	r0, r6
 80113c8:	f7ff ff12 	bl	80111f0 <__i2b>
 80113cc:	2300      	movs	r3, #0
 80113ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80113d2:	4604      	mov	r4, r0
 80113d4:	6003      	str	r3, [r0, #0]
 80113d6:	f04f 0900 	mov.w	r9, #0
 80113da:	07eb      	lsls	r3, r5, #31
 80113dc:	d50a      	bpl.n	80113f4 <__pow5mult+0x84>
 80113de:	4639      	mov	r1, r7
 80113e0:	4622      	mov	r2, r4
 80113e2:	4630      	mov	r0, r6
 80113e4:	f7ff ff1a 	bl	801121c <__multiply>
 80113e8:	4639      	mov	r1, r7
 80113ea:	4680      	mov	r8, r0
 80113ec:	4630      	mov	r0, r6
 80113ee:	f7ff fdfd 	bl	8010fec <_Bfree>
 80113f2:	4647      	mov	r7, r8
 80113f4:	106d      	asrs	r5, r5, #1
 80113f6:	d00b      	beq.n	8011410 <__pow5mult+0xa0>
 80113f8:	6820      	ldr	r0, [r4, #0]
 80113fa:	b938      	cbnz	r0, 801140c <__pow5mult+0x9c>
 80113fc:	4622      	mov	r2, r4
 80113fe:	4621      	mov	r1, r4
 8011400:	4630      	mov	r0, r6
 8011402:	f7ff ff0b 	bl	801121c <__multiply>
 8011406:	6020      	str	r0, [r4, #0]
 8011408:	f8c0 9000 	str.w	r9, [r0]
 801140c:	4604      	mov	r4, r0
 801140e:	e7e4      	b.n	80113da <__pow5mult+0x6a>
 8011410:	4638      	mov	r0, r7
 8011412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011416:	bf00      	nop
 8011418:	08014518 	.word	0x08014518
 801141c:	080142ce 	.word	0x080142ce
 8011420:	080143cc 	.word	0x080143cc

08011424 <__lshift>:
 8011424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011428:	460c      	mov	r4, r1
 801142a:	6849      	ldr	r1, [r1, #4]
 801142c:	6923      	ldr	r3, [r4, #16]
 801142e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011432:	68a3      	ldr	r3, [r4, #8]
 8011434:	4607      	mov	r7, r0
 8011436:	4691      	mov	r9, r2
 8011438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801143c:	f108 0601 	add.w	r6, r8, #1
 8011440:	42b3      	cmp	r3, r6
 8011442:	db0b      	blt.n	801145c <__lshift+0x38>
 8011444:	4638      	mov	r0, r7
 8011446:	f7ff fd91 	bl	8010f6c <_Balloc>
 801144a:	4605      	mov	r5, r0
 801144c:	b948      	cbnz	r0, 8011462 <__lshift+0x3e>
 801144e:	4602      	mov	r2, r0
 8011450:	4b2a      	ldr	r3, [pc, #168]	; (80114fc <__lshift+0xd8>)
 8011452:	482b      	ldr	r0, [pc, #172]	; (8011500 <__lshift+0xdc>)
 8011454:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011458:	f001 f8ee 	bl	8012638 <__assert_func>
 801145c:	3101      	adds	r1, #1
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	e7ee      	b.n	8011440 <__lshift+0x1c>
 8011462:	2300      	movs	r3, #0
 8011464:	f100 0114 	add.w	r1, r0, #20
 8011468:	f100 0210 	add.w	r2, r0, #16
 801146c:	4618      	mov	r0, r3
 801146e:	4553      	cmp	r3, sl
 8011470:	db37      	blt.n	80114e2 <__lshift+0xbe>
 8011472:	6920      	ldr	r0, [r4, #16]
 8011474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011478:	f104 0314 	add.w	r3, r4, #20
 801147c:	f019 091f 	ands.w	r9, r9, #31
 8011480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011484:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011488:	d02f      	beq.n	80114ea <__lshift+0xc6>
 801148a:	f1c9 0e20 	rsb	lr, r9, #32
 801148e:	468a      	mov	sl, r1
 8011490:	f04f 0c00 	mov.w	ip, #0
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	fa02 f209 	lsl.w	r2, r2, r9
 801149a:	ea42 020c 	orr.w	r2, r2, ip
 801149e:	f84a 2b04 	str.w	r2, [sl], #4
 80114a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80114a6:	4298      	cmp	r0, r3
 80114a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80114ac:	d8f2      	bhi.n	8011494 <__lshift+0x70>
 80114ae:	1b03      	subs	r3, r0, r4
 80114b0:	3b15      	subs	r3, #21
 80114b2:	f023 0303 	bic.w	r3, r3, #3
 80114b6:	3304      	adds	r3, #4
 80114b8:	f104 0215 	add.w	r2, r4, #21
 80114bc:	4290      	cmp	r0, r2
 80114be:	bf38      	it	cc
 80114c0:	2304      	movcc	r3, #4
 80114c2:	f841 c003 	str.w	ip, [r1, r3]
 80114c6:	f1bc 0f00 	cmp.w	ip, #0
 80114ca:	d001      	beq.n	80114d0 <__lshift+0xac>
 80114cc:	f108 0602 	add.w	r6, r8, #2
 80114d0:	3e01      	subs	r6, #1
 80114d2:	4638      	mov	r0, r7
 80114d4:	612e      	str	r6, [r5, #16]
 80114d6:	4621      	mov	r1, r4
 80114d8:	f7ff fd88 	bl	8010fec <_Bfree>
 80114dc:	4628      	mov	r0, r5
 80114de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80114e6:	3301      	adds	r3, #1
 80114e8:	e7c1      	b.n	801146e <__lshift+0x4a>
 80114ea:	3904      	subs	r1, #4
 80114ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80114f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80114f4:	4298      	cmp	r0, r3
 80114f6:	d8f9      	bhi.n	80114ec <__lshift+0xc8>
 80114f8:	e7ea      	b.n	80114d0 <__lshift+0xac>
 80114fa:	bf00      	nop
 80114fc:	08014340 	.word	0x08014340
 8011500:	080143cc 	.word	0x080143cc

08011504 <__mcmp>:
 8011504:	b530      	push	{r4, r5, lr}
 8011506:	6902      	ldr	r2, [r0, #16]
 8011508:	690c      	ldr	r4, [r1, #16]
 801150a:	1b12      	subs	r2, r2, r4
 801150c:	d10e      	bne.n	801152c <__mcmp+0x28>
 801150e:	f100 0314 	add.w	r3, r0, #20
 8011512:	3114      	adds	r1, #20
 8011514:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801151c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011520:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011524:	42a5      	cmp	r5, r4
 8011526:	d003      	beq.n	8011530 <__mcmp+0x2c>
 8011528:	d305      	bcc.n	8011536 <__mcmp+0x32>
 801152a:	2201      	movs	r2, #1
 801152c:	4610      	mov	r0, r2
 801152e:	bd30      	pop	{r4, r5, pc}
 8011530:	4283      	cmp	r3, r0
 8011532:	d3f3      	bcc.n	801151c <__mcmp+0x18>
 8011534:	e7fa      	b.n	801152c <__mcmp+0x28>
 8011536:	f04f 32ff 	mov.w	r2, #4294967295
 801153a:	e7f7      	b.n	801152c <__mcmp+0x28>

0801153c <__mdiff>:
 801153c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011540:	460c      	mov	r4, r1
 8011542:	4606      	mov	r6, r0
 8011544:	4611      	mov	r1, r2
 8011546:	4620      	mov	r0, r4
 8011548:	4690      	mov	r8, r2
 801154a:	f7ff ffdb 	bl	8011504 <__mcmp>
 801154e:	1e05      	subs	r5, r0, #0
 8011550:	d110      	bne.n	8011574 <__mdiff+0x38>
 8011552:	4629      	mov	r1, r5
 8011554:	4630      	mov	r0, r6
 8011556:	f7ff fd09 	bl	8010f6c <_Balloc>
 801155a:	b930      	cbnz	r0, 801156a <__mdiff+0x2e>
 801155c:	4b3a      	ldr	r3, [pc, #232]	; (8011648 <__mdiff+0x10c>)
 801155e:	4602      	mov	r2, r0
 8011560:	f240 2132 	movw	r1, #562	; 0x232
 8011564:	4839      	ldr	r0, [pc, #228]	; (801164c <__mdiff+0x110>)
 8011566:	f001 f867 	bl	8012638 <__assert_func>
 801156a:	2301      	movs	r3, #1
 801156c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011574:	bfa4      	itt	ge
 8011576:	4643      	movge	r3, r8
 8011578:	46a0      	movge	r8, r4
 801157a:	4630      	mov	r0, r6
 801157c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011580:	bfa6      	itte	ge
 8011582:	461c      	movge	r4, r3
 8011584:	2500      	movge	r5, #0
 8011586:	2501      	movlt	r5, #1
 8011588:	f7ff fcf0 	bl	8010f6c <_Balloc>
 801158c:	b920      	cbnz	r0, 8011598 <__mdiff+0x5c>
 801158e:	4b2e      	ldr	r3, [pc, #184]	; (8011648 <__mdiff+0x10c>)
 8011590:	4602      	mov	r2, r0
 8011592:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011596:	e7e5      	b.n	8011564 <__mdiff+0x28>
 8011598:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801159c:	6926      	ldr	r6, [r4, #16]
 801159e:	60c5      	str	r5, [r0, #12]
 80115a0:	f104 0914 	add.w	r9, r4, #20
 80115a4:	f108 0514 	add.w	r5, r8, #20
 80115a8:	f100 0e14 	add.w	lr, r0, #20
 80115ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80115b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80115b4:	f108 0210 	add.w	r2, r8, #16
 80115b8:	46f2      	mov	sl, lr
 80115ba:	2100      	movs	r1, #0
 80115bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80115c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80115c4:	fa1f f883 	uxth.w	r8, r3
 80115c8:	fa11 f18b 	uxtah	r1, r1, fp
 80115cc:	0c1b      	lsrs	r3, r3, #16
 80115ce:	eba1 0808 	sub.w	r8, r1, r8
 80115d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80115d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80115da:	fa1f f888 	uxth.w	r8, r8
 80115de:	1419      	asrs	r1, r3, #16
 80115e0:	454e      	cmp	r6, r9
 80115e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80115e6:	f84a 3b04 	str.w	r3, [sl], #4
 80115ea:	d8e7      	bhi.n	80115bc <__mdiff+0x80>
 80115ec:	1b33      	subs	r3, r6, r4
 80115ee:	3b15      	subs	r3, #21
 80115f0:	f023 0303 	bic.w	r3, r3, #3
 80115f4:	3304      	adds	r3, #4
 80115f6:	3415      	adds	r4, #21
 80115f8:	42a6      	cmp	r6, r4
 80115fa:	bf38      	it	cc
 80115fc:	2304      	movcc	r3, #4
 80115fe:	441d      	add	r5, r3
 8011600:	4473      	add	r3, lr
 8011602:	469e      	mov	lr, r3
 8011604:	462e      	mov	r6, r5
 8011606:	4566      	cmp	r6, ip
 8011608:	d30e      	bcc.n	8011628 <__mdiff+0xec>
 801160a:	f10c 0203 	add.w	r2, ip, #3
 801160e:	1b52      	subs	r2, r2, r5
 8011610:	f022 0203 	bic.w	r2, r2, #3
 8011614:	3d03      	subs	r5, #3
 8011616:	45ac      	cmp	ip, r5
 8011618:	bf38      	it	cc
 801161a:	2200      	movcc	r2, #0
 801161c:	441a      	add	r2, r3
 801161e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011622:	b17b      	cbz	r3, 8011644 <__mdiff+0x108>
 8011624:	6107      	str	r7, [r0, #16]
 8011626:	e7a3      	b.n	8011570 <__mdiff+0x34>
 8011628:	f856 8b04 	ldr.w	r8, [r6], #4
 801162c:	fa11 f288 	uxtah	r2, r1, r8
 8011630:	1414      	asrs	r4, r2, #16
 8011632:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011636:	b292      	uxth	r2, r2
 8011638:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801163c:	f84e 2b04 	str.w	r2, [lr], #4
 8011640:	1421      	asrs	r1, r4, #16
 8011642:	e7e0      	b.n	8011606 <__mdiff+0xca>
 8011644:	3f01      	subs	r7, #1
 8011646:	e7ea      	b.n	801161e <__mdiff+0xe2>
 8011648:	08014340 	.word	0x08014340
 801164c:	080143cc 	.word	0x080143cc

08011650 <__ulp>:
 8011650:	b082      	sub	sp, #8
 8011652:	ed8d 0b00 	vstr	d0, [sp]
 8011656:	9b01      	ldr	r3, [sp, #4]
 8011658:	4912      	ldr	r1, [pc, #72]	; (80116a4 <__ulp+0x54>)
 801165a:	4019      	ands	r1, r3
 801165c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011660:	2900      	cmp	r1, #0
 8011662:	dd05      	ble.n	8011670 <__ulp+0x20>
 8011664:	2200      	movs	r2, #0
 8011666:	460b      	mov	r3, r1
 8011668:	ec43 2b10 	vmov	d0, r2, r3
 801166c:	b002      	add	sp, #8
 801166e:	4770      	bx	lr
 8011670:	4249      	negs	r1, r1
 8011672:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011676:	ea4f 5021 	mov.w	r0, r1, asr #20
 801167a:	f04f 0200 	mov.w	r2, #0
 801167e:	f04f 0300 	mov.w	r3, #0
 8011682:	da04      	bge.n	801168e <__ulp+0x3e>
 8011684:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011688:	fa41 f300 	asr.w	r3, r1, r0
 801168c:	e7ec      	b.n	8011668 <__ulp+0x18>
 801168e:	f1a0 0114 	sub.w	r1, r0, #20
 8011692:	291e      	cmp	r1, #30
 8011694:	bfda      	itte	le
 8011696:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801169a:	fa20 f101 	lsrle.w	r1, r0, r1
 801169e:	2101      	movgt	r1, #1
 80116a0:	460a      	mov	r2, r1
 80116a2:	e7e1      	b.n	8011668 <__ulp+0x18>
 80116a4:	7ff00000 	.word	0x7ff00000

080116a8 <__b2d>:
 80116a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116aa:	6905      	ldr	r5, [r0, #16]
 80116ac:	f100 0714 	add.w	r7, r0, #20
 80116b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80116b4:	1f2e      	subs	r6, r5, #4
 80116b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80116ba:	4620      	mov	r0, r4
 80116bc:	f7ff fd48 	bl	8011150 <__hi0bits>
 80116c0:	f1c0 0320 	rsb	r3, r0, #32
 80116c4:	280a      	cmp	r0, #10
 80116c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011744 <__b2d+0x9c>
 80116ca:	600b      	str	r3, [r1, #0]
 80116cc:	dc14      	bgt.n	80116f8 <__b2d+0x50>
 80116ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80116d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80116d6:	42b7      	cmp	r7, r6
 80116d8:	ea41 030c 	orr.w	r3, r1, ip
 80116dc:	bf34      	ite	cc
 80116de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80116e2:	2100      	movcs	r1, #0
 80116e4:	3015      	adds	r0, #21
 80116e6:	fa04 f000 	lsl.w	r0, r4, r0
 80116ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80116ee:	ea40 0201 	orr.w	r2, r0, r1
 80116f2:	ec43 2b10 	vmov	d0, r2, r3
 80116f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116f8:	42b7      	cmp	r7, r6
 80116fa:	bf3a      	itte	cc
 80116fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011700:	f1a5 0608 	subcc.w	r6, r5, #8
 8011704:	2100      	movcs	r1, #0
 8011706:	380b      	subs	r0, #11
 8011708:	d017      	beq.n	801173a <__b2d+0x92>
 801170a:	f1c0 0c20 	rsb	ip, r0, #32
 801170e:	fa04 f500 	lsl.w	r5, r4, r0
 8011712:	42be      	cmp	r6, r7
 8011714:	fa21 f40c 	lsr.w	r4, r1, ip
 8011718:	ea45 0504 	orr.w	r5, r5, r4
 801171c:	bf8c      	ite	hi
 801171e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011722:	2400      	movls	r4, #0
 8011724:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011728:	fa01 f000 	lsl.w	r0, r1, r0
 801172c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011730:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011734:	ea40 0204 	orr.w	r2, r0, r4
 8011738:	e7db      	b.n	80116f2 <__b2d+0x4a>
 801173a:	ea44 030c 	orr.w	r3, r4, ip
 801173e:	460a      	mov	r2, r1
 8011740:	e7d7      	b.n	80116f2 <__b2d+0x4a>
 8011742:	bf00      	nop
 8011744:	3ff00000 	.word	0x3ff00000

08011748 <__d2b>:
 8011748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801174c:	4689      	mov	r9, r1
 801174e:	2101      	movs	r1, #1
 8011750:	ec57 6b10 	vmov	r6, r7, d0
 8011754:	4690      	mov	r8, r2
 8011756:	f7ff fc09 	bl	8010f6c <_Balloc>
 801175a:	4604      	mov	r4, r0
 801175c:	b930      	cbnz	r0, 801176c <__d2b+0x24>
 801175e:	4602      	mov	r2, r0
 8011760:	4b25      	ldr	r3, [pc, #148]	; (80117f8 <__d2b+0xb0>)
 8011762:	4826      	ldr	r0, [pc, #152]	; (80117fc <__d2b+0xb4>)
 8011764:	f240 310a 	movw	r1, #778	; 0x30a
 8011768:	f000 ff66 	bl	8012638 <__assert_func>
 801176c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011770:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011774:	bb35      	cbnz	r5, 80117c4 <__d2b+0x7c>
 8011776:	2e00      	cmp	r6, #0
 8011778:	9301      	str	r3, [sp, #4]
 801177a:	d028      	beq.n	80117ce <__d2b+0x86>
 801177c:	4668      	mov	r0, sp
 801177e:	9600      	str	r6, [sp, #0]
 8011780:	f7ff fd06 	bl	8011190 <__lo0bits>
 8011784:	9900      	ldr	r1, [sp, #0]
 8011786:	b300      	cbz	r0, 80117ca <__d2b+0x82>
 8011788:	9a01      	ldr	r2, [sp, #4]
 801178a:	f1c0 0320 	rsb	r3, r0, #32
 801178e:	fa02 f303 	lsl.w	r3, r2, r3
 8011792:	430b      	orrs	r3, r1
 8011794:	40c2      	lsrs	r2, r0
 8011796:	6163      	str	r3, [r4, #20]
 8011798:	9201      	str	r2, [sp, #4]
 801179a:	9b01      	ldr	r3, [sp, #4]
 801179c:	61a3      	str	r3, [r4, #24]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	bf14      	ite	ne
 80117a2:	2202      	movne	r2, #2
 80117a4:	2201      	moveq	r2, #1
 80117a6:	6122      	str	r2, [r4, #16]
 80117a8:	b1d5      	cbz	r5, 80117e0 <__d2b+0x98>
 80117aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80117ae:	4405      	add	r5, r0
 80117b0:	f8c9 5000 	str.w	r5, [r9]
 80117b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80117b8:	f8c8 0000 	str.w	r0, [r8]
 80117bc:	4620      	mov	r0, r4
 80117be:	b003      	add	sp, #12
 80117c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117c8:	e7d5      	b.n	8011776 <__d2b+0x2e>
 80117ca:	6161      	str	r1, [r4, #20]
 80117cc:	e7e5      	b.n	801179a <__d2b+0x52>
 80117ce:	a801      	add	r0, sp, #4
 80117d0:	f7ff fcde 	bl	8011190 <__lo0bits>
 80117d4:	9b01      	ldr	r3, [sp, #4]
 80117d6:	6163      	str	r3, [r4, #20]
 80117d8:	2201      	movs	r2, #1
 80117da:	6122      	str	r2, [r4, #16]
 80117dc:	3020      	adds	r0, #32
 80117de:	e7e3      	b.n	80117a8 <__d2b+0x60>
 80117e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80117e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80117e8:	f8c9 0000 	str.w	r0, [r9]
 80117ec:	6918      	ldr	r0, [r3, #16]
 80117ee:	f7ff fcaf 	bl	8011150 <__hi0bits>
 80117f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80117f6:	e7df      	b.n	80117b8 <__d2b+0x70>
 80117f8:	08014340 	.word	0x08014340
 80117fc:	080143cc 	.word	0x080143cc

08011800 <__ratio>:
 8011800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011804:	4688      	mov	r8, r1
 8011806:	4669      	mov	r1, sp
 8011808:	4681      	mov	r9, r0
 801180a:	f7ff ff4d 	bl	80116a8 <__b2d>
 801180e:	a901      	add	r1, sp, #4
 8011810:	4640      	mov	r0, r8
 8011812:	ec55 4b10 	vmov	r4, r5, d0
 8011816:	ee10 aa10 	vmov	sl, s0
 801181a:	f7ff ff45 	bl	80116a8 <__b2d>
 801181e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011822:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011826:	1a59      	subs	r1, r3, r1
 8011828:	e9dd 2300 	ldrd	r2, r3, [sp]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011832:	ec57 6b10 	vmov	r6, r7, d0
 8011836:	2b00      	cmp	r3, #0
 8011838:	bfd6      	itet	le
 801183a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801183e:	462a      	movgt	r2, r5
 8011840:	463a      	movle	r2, r7
 8011842:	46ab      	mov	fp, r5
 8011844:	bfd6      	itet	le
 8011846:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801184a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801184e:	ee00 3a90 	vmovle	s1, r3
 8011852:	ec4b ab17 	vmov	d7, sl, fp
 8011856:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801185a:	b003      	add	sp, #12
 801185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011860 <__copybits>:
 8011860:	3901      	subs	r1, #1
 8011862:	b570      	push	{r4, r5, r6, lr}
 8011864:	1149      	asrs	r1, r1, #5
 8011866:	6914      	ldr	r4, [r2, #16]
 8011868:	3101      	adds	r1, #1
 801186a:	f102 0314 	add.w	r3, r2, #20
 801186e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011872:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011876:	1f05      	subs	r5, r0, #4
 8011878:	42a3      	cmp	r3, r4
 801187a:	d30c      	bcc.n	8011896 <__copybits+0x36>
 801187c:	1aa3      	subs	r3, r4, r2
 801187e:	3b11      	subs	r3, #17
 8011880:	f023 0303 	bic.w	r3, r3, #3
 8011884:	3211      	adds	r2, #17
 8011886:	42a2      	cmp	r2, r4
 8011888:	bf88      	it	hi
 801188a:	2300      	movhi	r3, #0
 801188c:	4418      	add	r0, r3
 801188e:	2300      	movs	r3, #0
 8011890:	4288      	cmp	r0, r1
 8011892:	d305      	bcc.n	80118a0 <__copybits+0x40>
 8011894:	bd70      	pop	{r4, r5, r6, pc}
 8011896:	f853 6b04 	ldr.w	r6, [r3], #4
 801189a:	f845 6f04 	str.w	r6, [r5, #4]!
 801189e:	e7eb      	b.n	8011878 <__copybits+0x18>
 80118a0:	f840 3b04 	str.w	r3, [r0], #4
 80118a4:	e7f4      	b.n	8011890 <__copybits+0x30>

080118a6 <__any_on>:
 80118a6:	f100 0214 	add.w	r2, r0, #20
 80118aa:	6900      	ldr	r0, [r0, #16]
 80118ac:	114b      	asrs	r3, r1, #5
 80118ae:	4298      	cmp	r0, r3
 80118b0:	b510      	push	{r4, lr}
 80118b2:	db11      	blt.n	80118d8 <__any_on+0x32>
 80118b4:	dd0a      	ble.n	80118cc <__any_on+0x26>
 80118b6:	f011 011f 	ands.w	r1, r1, #31
 80118ba:	d007      	beq.n	80118cc <__any_on+0x26>
 80118bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80118c0:	fa24 f001 	lsr.w	r0, r4, r1
 80118c4:	fa00 f101 	lsl.w	r1, r0, r1
 80118c8:	428c      	cmp	r4, r1
 80118ca:	d10b      	bne.n	80118e4 <__any_on+0x3e>
 80118cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d803      	bhi.n	80118dc <__any_on+0x36>
 80118d4:	2000      	movs	r0, #0
 80118d6:	bd10      	pop	{r4, pc}
 80118d8:	4603      	mov	r3, r0
 80118da:	e7f7      	b.n	80118cc <__any_on+0x26>
 80118dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118e0:	2900      	cmp	r1, #0
 80118e2:	d0f5      	beq.n	80118d0 <__any_on+0x2a>
 80118e4:	2001      	movs	r0, #1
 80118e6:	e7f6      	b.n	80118d6 <__any_on+0x30>

080118e8 <_calloc_r>:
 80118e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118ea:	fba1 2402 	umull	r2, r4, r1, r2
 80118ee:	b94c      	cbnz	r4, 8011904 <_calloc_r+0x1c>
 80118f0:	4611      	mov	r1, r2
 80118f2:	9201      	str	r2, [sp, #4]
 80118f4:	f000 f87a 	bl	80119ec <_malloc_r>
 80118f8:	9a01      	ldr	r2, [sp, #4]
 80118fa:	4605      	mov	r5, r0
 80118fc:	b930      	cbnz	r0, 801190c <_calloc_r+0x24>
 80118fe:	4628      	mov	r0, r5
 8011900:	b003      	add	sp, #12
 8011902:	bd30      	pop	{r4, r5, pc}
 8011904:	220c      	movs	r2, #12
 8011906:	6002      	str	r2, [r0, #0]
 8011908:	2500      	movs	r5, #0
 801190a:	e7f8      	b.n	80118fe <_calloc_r+0x16>
 801190c:	4621      	mov	r1, r4
 801190e:	f7fc fbbf 	bl	800e090 <memset>
 8011912:	e7f4      	b.n	80118fe <_calloc_r+0x16>

08011914 <_free_r>:
 8011914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011916:	2900      	cmp	r1, #0
 8011918:	d044      	beq.n	80119a4 <_free_r+0x90>
 801191a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801191e:	9001      	str	r0, [sp, #4]
 8011920:	2b00      	cmp	r3, #0
 8011922:	f1a1 0404 	sub.w	r4, r1, #4
 8011926:	bfb8      	it	lt
 8011928:	18e4      	addlt	r4, r4, r3
 801192a:	f001 f889 	bl	8012a40 <__malloc_lock>
 801192e:	4a1e      	ldr	r2, [pc, #120]	; (80119a8 <_free_r+0x94>)
 8011930:	9801      	ldr	r0, [sp, #4]
 8011932:	6813      	ldr	r3, [r2, #0]
 8011934:	b933      	cbnz	r3, 8011944 <_free_r+0x30>
 8011936:	6063      	str	r3, [r4, #4]
 8011938:	6014      	str	r4, [r2, #0]
 801193a:	b003      	add	sp, #12
 801193c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011940:	f001 b884 	b.w	8012a4c <__malloc_unlock>
 8011944:	42a3      	cmp	r3, r4
 8011946:	d908      	bls.n	801195a <_free_r+0x46>
 8011948:	6825      	ldr	r5, [r4, #0]
 801194a:	1961      	adds	r1, r4, r5
 801194c:	428b      	cmp	r3, r1
 801194e:	bf01      	itttt	eq
 8011950:	6819      	ldreq	r1, [r3, #0]
 8011952:	685b      	ldreq	r3, [r3, #4]
 8011954:	1949      	addeq	r1, r1, r5
 8011956:	6021      	streq	r1, [r4, #0]
 8011958:	e7ed      	b.n	8011936 <_free_r+0x22>
 801195a:	461a      	mov	r2, r3
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	b10b      	cbz	r3, 8011964 <_free_r+0x50>
 8011960:	42a3      	cmp	r3, r4
 8011962:	d9fa      	bls.n	801195a <_free_r+0x46>
 8011964:	6811      	ldr	r1, [r2, #0]
 8011966:	1855      	adds	r5, r2, r1
 8011968:	42a5      	cmp	r5, r4
 801196a:	d10b      	bne.n	8011984 <_free_r+0x70>
 801196c:	6824      	ldr	r4, [r4, #0]
 801196e:	4421      	add	r1, r4
 8011970:	1854      	adds	r4, r2, r1
 8011972:	42a3      	cmp	r3, r4
 8011974:	6011      	str	r1, [r2, #0]
 8011976:	d1e0      	bne.n	801193a <_free_r+0x26>
 8011978:	681c      	ldr	r4, [r3, #0]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	6053      	str	r3, [r2, #4]
 801197e:	4421      	add	r1, r4
 8011980:	6011      	str	r1, [r2, #0]
 8011982:	e7da      	b.n	801193a <_free_r+0x26>
 8011984:	d902      	bls.n	801198c <_free_r+0x78>
 8011986:	230c      	movs	r3, #12
 8011988:	6003      	str	r3, [r0, #0]
 801198a:	e7d6      	b.n	801193a <_free_r+0x26>
 801198c:	6825      	ldr	r5, [r4, #0]
 801198e:	1961      	adds	r1, r4, r5
 8011990:	428b      	cmp	r3, r1
 8011992:	bf04      	itt	eq
 8011994:	6819      	ldreq	r1, [r3, #0]
 8011996:	685b      	ldreq	r3, [r3, #4]
 8011998:	6063      	str	r3, [r4, #4]
 801199a:	bf04      	itt	eq
 801199c:	1949      	addeq	r1, r1, r5
 801199e:	6021      	streq	r1, [r4, #0]
 80119a0:	6054      	str	r4, [r2, #4]
 80119a2:	e7ca      	b.n	801193a <_free_r+0x26>
 80119a4:	b003      	add	sp, #12
 80119a6:	bd30      	pop	{r4, r5, pc}
 80119a8:	24005128 	.word	0x24005128

080119ac <sbrk_aligned>:
 80119ac:	b570      	push	{r4, r5, r6, lr}
 80119ae:	4e0e      	ldr	r6, [pc, #56]	; (80119e8 <sbrk_aligned+0x3c>)
 80119b0:	460c      	mov	r4, r1
 80119b2:	6831      	ldr	r1, [r6, #0]
 80119b4:	4605      	mov	r5, r0
 80119b6:	b911      	cbnz	r1, 80119be <sbrk_aligned+0x12>
 80119b8:	f000 fd26 	bl	8012408 <_sbrk_r>
 80119bc:	6030      	str	r0, [r6, #0]
 80119be:	4621      	mov	r1, r4
 80119c0:	4628      	mov	r0, r5
 80119c2:	f000 fd21 	bl	8012408 <_sbrk_r>
 80119c6:	1c43      	adds	r3, r0, #1
 80119c8:	d00a      	beq.n	80119e0 <sbrk_aligned+0x34>
 80119ca:	1cc4      	adds	r4, r0, #3
 80119cc:	f024 0403 	bic.w	r4, r4, #3
 80119d0:	42a0      	cmp	r0, r4
 80119d2:	d007      	beq.n	80119e4 <sbrk_aligned+0x38>
 80119d4:	1a21      	subs	r1, r4, r0
 80119d6:	4628      	mov	r0, r5
 80119d8:	f000 fd16 	bl	8012408 <_sbrk_r>
 80119dc:	3001      	adds	r0, #1
 80119de:	d101      	bne.n	80119e4 <sbrk_aligned+0x38>
 80119e0:	f04f 34ff 	mov.w	r4, #4294967295
 80119e4:	4620      	mov	r0, r4
 80119e6:	bd70      	pop	{r4, r5, r6, pc}
 80119e8:	2400512c 	.word	0x2400512c

080119ec <_malloc_r>:
 80119ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119f0:	1ccd      	adds	r5, r1, #3
 80119f2:	f025 0503 	bic.w	r5, r5, #3
 80119f6:	3508      	adds	r5, #8
 80119f8:	2d0c      	cmp	r5, #12
 80119fa:	bf38      	it	cc
 80119fc:	250c      	movcc	r5, #12
 80119fe:	2d00      	cmp	r5, #0
 8011a00:	4607      	mov	r7, r0
 8011a02:	db01      	blt.n	8011a08 <_malloc_r+0x1c>
 8011a04:	42a9      	cmp	r1, r5
 8011a06:	d905      	bls.n	8011a14 <_malloc_r+0x28>
 8011a08:	230c      	movs	r3, #12
 8011a0a:	603b      	str	r3, [r7, #0]
 8011a0c:	2600      	movs	r6, #0
 8011a0e:	4630      	mov	r0, r6
 8011a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a14:	4e2e      	ldr	r6, [pc, #184]	; (8011ad0 <_malloc_r+0xe4>)
 8011a16:	f001 f813 	bl	8012a40 <__malloc_lock>
 8011a1a:	6833      	ldr	r3, [r6, #0]
 8011a1c:	461c      	mov	r4, r3
 8011a1e:	bb34      	cbnz	r4, 8011a6e <_malloc_r+0x82>
 8011a20:	4629      	mov	r1, r5
 8011a22:	4638      	mov	r0, r7
 8011a24:	f7ff ffc2 	bl	80119ac <sbrk_aligned>
 8011a28:	1c43      	adds	r3, r0, #1
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	d14d      	bne.n	8011aca <_malloc_r+0xde>
 8011a2e:	6834      	ldr	r4, [r6, #0]
 8011a30:	4626      	mov	r6, r4
 8011a32:	2e00      	cmp	r6, #0
 8011a34:	d140      	bne.n	8011ab8 <_malloc_r+0xcc>
 8011a36:	6823      	ldr	r3, [r4, #0]
 8011a38:	4631      	mov	r1, r6
 8011a3a:	4638      	mov	r0, r7
 8011a3c:	eb04 0803 	add.w	r8, r4, r3
 8011a40:	f000 fce2 	bl	8012408 <_sbrk_r>
 8011a44:	4580      	cmp	r8, r0
 8011a46:	d13a      	bne.n	8011abe <_malloc_r+0xd2>
 8011a48:	6821      	ldr	r1, [r4, #0]
 8011a4a:	3503      	adds	r5, #3
 8011a4c:	1a6d      	subs	r5, r5, r1
 8011a4e:	f025 0503 	bic.w	r5, r5, #3
 8011a52:	3508      	adds	r5, #8
 8011a54:	2d0c      	cmp	r5, #12
 8011a56:	bf38      	it	cc
 8011a58:	250c      	movcc	r5, #12
 8011a5a:	4629      	mov	r1, r5
 8011a5c:	4638      	mov	r0, r7
 8011a5e:	f7ff ffa5 	bl	80119ac <sbrk_aligned>
 8011a62:	3001      	adds	r0, #1
 8011a64:	d02b      	beq.n	8011abe <_malloc_r+0xd2>
 8011a66:	6823      	ldr	r3, [r4, #0]
 8011a68:	442b      	add	r3, r5
 8011a6a:	6023      	str	r3, [r4, #0]
 8011a6c:	e00e      	b.n	8011a8c <_malloc_r+0xa0>
 8011a6e:	6822      	ldr	r2, [r4, #0]
 8011a70:	1b52      	subs	r2, r2, r5
 8011a72:	d41e      	bmi.n	8011ab2 <_malloc_r+0xc6>
 8011a74:	2a0b      	cmp	r2, #11
 8011a76:	d916      	bls.n	8011aa6 <_malloc_r+0xba>
 8011a78:	1961      	adds	r1, r4, r5
 8011a7a:	42a3      	cmp	r3, r4
 8011a7c:	6025      	str	r5, [r4, #0]
 8011a7e:	bf18      	it	ne
 8011a80:	6059      	strne	r1, [r3, #4]
 8011a82:	6863      	ldr	r3, [r4, #4]
 8011a84:	bf08      	it	eq
 8011a86:	6031      	streq	r1, [r6, #0]
 8011a88:	5162      	str	r2, [r4, r5]
 8011a8a:	604b      	str	r3, [r1, #4]
 8011a8c:	4638      	mov	r0, r7
 8011a8e:	f104 060b 	add.w	r6, r4, #11
 8011a92:	f000 ffdb 	bl	8012a4c <__malloc_unlock>
 8011a96:	f026 0607 	bic.w	r6, r6, #7
 8011a9a:	1d23      	adds	r3, r4, #4
 8011a9c:	1af2      	subs	r2, r6, r3
 8011a9e:	d0b6      	beq.n	8011a0e <_malloc_r+0x22>
 8011aa0:	1b9b      	subs	r3, r3, r6
 8011aa2:	50a3      	str	r3, [r4, r2]
 8011aa4:	e7b3      	b.n	8011a0e <_malloc_r+0x22>
 8011aa6:	6862      	ldr	r2, [r4, #4]
 8011aa8:	42a3      	cmp	r3, r4
 8011aaa:	bf0c      	ite	eq
 8011aac:	6032      	streq	r2, [r6, #0]
 8011aae:	605a      	strne	r2, [r3, #4]
 8011ab0:	e7ec      	b.n	8011a8c <_malloc_r+0xa0>
 8011ab2:	4623      	mov	r3, r4
 8011ab4:	6864      	ldr	r4, [r4, #4]
 8011ab6:	e7b2      	b.n	8011a1e <_malloc_r+0x32>
 8011ab8:	4634      	mov	r4, r6
 8011aba:	6876      	ldr	r6, [r6, #4]
 8011abc:	e7b9      	b.n	8011a32 <_malloc_r+0x46>
 8011abe:	230c      	movs	r3, #12
 8011ac0:	603b      	str	r3, [r7, #0]
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	f000 ffc2 	bl	8012a4c <__malloc_unlock>
 8011ac8:	e7a1      	b.n	8011a0e <_malloc_r+0x22>
 8011aca:	6025      	str	r5, [r4, #0]
 8011acc:	e7de      	b.n	8011a8c <_malloc_r+0xa0>
 8011ace:	bf00      	nop
 8011ad0:	24005128 	.word	0x24005128

08011ad4 <__ssputs_r>:
 8011ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ad8:	688e      	ldr	r6, [r1, #8]
 8011ada:	429e      	cmp	r6, r3
 8011adc:	4682      	mov	sl, r0
 8011ade:	460c      	mov	r4, r1
 8011ae0:	4690      	mov	r8, r2
 8011ae2:	461f      	mov	r7, r3
 8011ae4:	d838      	bhi.n	8011b58 <__ssputs_r+0x84>
 8011ae6:	898a      	ldrh	r2, [r1, #12]
 8011ae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011aec:	d032      	beq.n	8011b54 <__ssputs_r+0x80>
 8011aee:	6825      	ldr	r5, [r4, #0]
 8011af0:	6909      	ldr	r1, [r1, #16]
 8011af2:	eba5 0901 	sub.w	r9, r5, r1
 8011af6:	6965      	ldr	r5, [r4, #20]
 8011af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011afc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b00:	3301      	adds	r3, #1
 8011b02:	444b      	add	r3, r9
 8011b04:	106d      	asrs	r5, r5, #1
 8011b06:	429d      	cmp	r5, r3
 8011b08:	bf38      	it	cc
 8011b0a:	461d      	movcc	r5, r3
 8011b0c:	0553      	lsls	r3, r2, #21
 8011b0e:	d531      	bpl.n	8011b74 <__ssputs_r+0xa0>
 8011b10:	4629      	mov	r1, r5
 8011b12:	f7ff ff6b 	bl	80119ec <_malloc_r>
 8011b16:	4606      	mov	r6, r0
 8011b18:	b950      	cbnz	r0, 8011b30 <__ssputs_r+0x5c>
 8011b1a:	230c      	movs	r3, #12
 8011b1c:	f8ca 3000 	str.w	r3, [sl]
 8011b20:	89a3      	ldrh	r3, [r4, #12]
 8011b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b26:	81a3      	strh	r3, [r4, #12]
 8011b28:	f04f 30ff 	mov.w	r0, #4294967295
 8011b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b30:	6921      	ldr	r1, [r4, #16]
 8011b32:	464a      	mov	r2, r9
 8011b34:	f7fc fa9e 	bl	800e074 <memcpy>
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b42:	81a3      	strh	r3, [r4, #12]
 8011b44:	6126      	str	r6, [r4, #16]
 8011b46:	6165      	str	r5, [r4, #20]
 8011b48:	444e      	add	r6, r9
 8011b4a:	eba5 0509 	sub.w	r5, r5, r9
 8011b4e:	6026      	str	r6, [r4, #0]
 8011b50:	60a5      	str	r5, [r4, #8]
 8011b52:	463e      	mov	r6, r7
 8011b54:	42be      	cmp	r6, r7
 8011b56:	d900      	bls.n	8011b5a <__ssputs_r+0x86>
 8011b58:	463e      	mov	r6, r7
 8011b5a:	6820      	ldr	r0, [r4, #0]
 8011b5c:	4632      	mov	r2, r6
 8011b5e:	4641      	mov	r1, r8
 8011b60:	f000 ff54 	bl	8012a0c <memmove>
 8011b64:	68a3      	ldr	r3, [r4, #8]
 8011b66:	1b9b      	subs	r3, r3, r6
 8011b68:	60a3      	str	r3, [r4, #8]
 8011b6a:	6823      	ldr	r3, [r4, #0]
 8011b6c:	4433      	add	r3, r6
 8011b6e:	6023      	str	r3, [r4, #0]
 8011b70:	2000      	movs	r0, #0
 8011b72:	e7db      	b.n	8011b2c <__ssputs_r+0x58>
 8011b74:	462a      	mov	r2, r5
 8011b76:	f000 ff6f 	bl	8012a58 <_realloc_r>
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	d1e1      	bne.n	8011b44 <__ssputs_r+0x70>
 8011b80:	6921      	ldr	r1, [r4, #16]
 8011b82:	4650      	mov	r0, sl
 8011b84:	f7ff fec6 	bl	8011914 <_free_r>
 8011b88:	e7c7      	b.n	8011b1a <__ssputs_r+0x46>
	...

08011b8c <_svfiprintf_r>:
 8011b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b90:	4698      	mov	r8, r3
 8011b92:	898b      	ldrh	r3, [r1, #12]
 8011b94:	061b      	lsls	r3, r3, #24
 8011b96:	b09d      	sub	sp, #116	; 0x74
 8011b98:	4607      	mov	r7, r0
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	4614      	mov	r4, r2
 8011b9e:	d50e      	bpl.n	8011bbe <_svfiprintf_r+0x32>
 8011ba0:	690b      	ldr	r3, [r1, #16]
 8011ba2:	b963      	cbnz	r3, 8011bbe <_svfiprintf_r+0x32>
 8011ba4:	2140      	movs	r1, #64	; 0x40
 8011ba6:	f7ff ff21 	bl	80119ec <_malloc_r>
 8011baa:	6028      	str	r0, [r5, #0]
 8011bac:	6128      	str	r0, [r5, #16]
 8011bae:	b920      	cbnz	r0, 8011bba <_svfiprintf_r+0x2e>
 8011bb0:	230c      	movs	r3, #12
 8011bb2:	603b      	str	r3, [r7, #0]
 8011bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bb8:	e0d1      	b.n	8011d5e <_svfiprintf_r+0x1d2>
 8011bba:	2340      	movs	r3, #64	; 0x40
 8011bbc:	616b      	str	r3, [r5, #20]
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8011bc2:	2320      	movs	r3, #32
 8011bc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bcc:	2330      	movs	r3, #48	; 0x30
 8011bce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011d78 <_svfiprintf_r+0x1ec>
 8011bd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bd6:	f04f 0901 	mov.w	r9, #1
 8011bda:	4623      	mov	r3, r4
 8011bdc:	469a      	mov	sl, r3
 8011bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011be2:	b10a      	cbz	r2, 8011be8 <_svfiprintf_r+0x5c>
 8011be4:	2a25      	cmp	r2, #37	; 0x25
 8011be6:	d1f9      	bne.n	8011bdc <_svfiprintf_r+0x50>
 8011be8:	ebba 0b04 	subs.w	fp, sl, r4
 8011bec:	d00b      	beq.n	8011c06 <_svfiprintf_r+0x7a>
 8011bee:	465b      	mov	r3, fp
 8011bf0:	4622      	mov	r2, r4
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	4638      	mov	r0, r7
 8011bf6:	f7ff ff6d 	bl	8011ad4 <__ssputs_r>
 8011bfa:	3001      	adds	r0, #1
 8011bfc:	f000 80aa 	beq.w	8011d54 <_svfiprintf_r+0x1c8>
 8011c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c02:	445a      	add	r2, fp
 8011c04:	9209      	str	r2, [sp, #36]	; 0x24
 8011c06:	f89a 3000 	ldrb.w	r3, [sl]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	f000 80a2 	beq.w	8011d54 <_svfiprintf_r+0x1c8>
 8011c10:	2300      	movs	r3, #0
 8011c12:	f04f 32ff 	mov.w	r2, #4294967295
 8011c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c1a:	f10a 0a01 	add.w	sl, sl, #1
 8011c1e:	9304      	str	r3, [sp, #16]
 8011c20:	9307      	str	r3, [sp, #28]
 8011c22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c26:	931a      	str	r3, [sp, #104]	; 0x68
 8011c28:	4654      	mov	r4, sl
 8011c2a:	2205      	movs	r2, #5
 8011c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c30:	4851      	ldr	r0, [pc, #324]	; (8011d78 <_svfiprintf_r+0x1ec>)
 8011c32:	f7ee fb5d 	bl	80002f0 <memchr>
 8011c36:	9a04      	ldr	r2, [sp, #16]
 8011c38:	b9d8      	cbnz	r0, 8011c72 <_svfiprintf_r+0xe6>
 8011c3a:	06d0      	lsls	r0, r2, #27
 8011c3c:	bf44      	itt	mi
 8011c3e:	2320      	movmi	r3, #32
 8011c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c44:	0711      	lsls	r1, r2, #28
 8011c46:	bf44      	itt	mi
 8011c48:	232b      	movmi	r3, #43	; 0x2b
 8011c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c52:	2b2a      	cmp	r3, #42	; 0x2a
 8011c54:	d015      	beq.n	8011c82 <_svfiprintf_r+0xf6>
 8011c56:	9a07      	ldr	r2, [sp, #28]
 8011c58:	4654      	mov	r4, sl
 8011c5a:	2000      	movs	r0, #0
 8011c5c:	f04f 0c0a 	mov.w	ip, #10
 8011c60:	4621      	mov	r1, r4
 8011c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c66:	3b30      	subs	r3, #48	; 0x30
 8011c68:	2b09      	cmp	r3, #9
 8011c6a:	d94e      	bls.n	8011d0a <_svfiprintf_r+0x17e>
 8011c6c:	b1b0      	cbz	r0, 8011c9c <_svfiprintf_r+0x110>
 8011c6e:	9207      	str	r2, [sp, #28]
 8011c70:	e014      	b.n	8011c9c <_svfiprintf_r+0x110>
 8011c72:	eba0 0308 	sub.w	r3, r0, r8
 8011c76:	fa09 f303 	lsl.w	r3, r9, r3
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	9304      	str	r3, [sp, #16]
 8011c7e:	46a2      	mov	sl, r4
 8011c80:	e7d2      	b.n	8011c28 <_svfiprintf_r+0x9c>
 8011c82:	9b03      	ldr	r3, [sp, #12]
 8011c84:	1d19      	adds	r1, r3, #4
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	9103      	str	r1, [sp, #12]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	bfbb      	ittet	lt
 8011c8e:	425b      	neglt	r3, r3
 8011c90:	f042 0202 	orrlt.w	r2, r2, #2
 8011c94:	9307      	strge	r3, [sp, #28]
 8011c96:	9307      	strlt	r3, [sp, #28]
 8011c98:	bfb8      	it	lt
 8011c9a:	9204      	strlt	r2, [sp, #16]
 8011c9c:	7823      	ldrb	r3, [r4, #0]
 8011c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8011ca0:	d10c      	bne.n	8011cbc <_svfiprintf_r+0x130>
 8011ca2:	7863      	ldrb	r3, [r4, #1]
 8011ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8011ca6:	d135      	bne.n	8011d14 <_svfiprintf_r+0x188>
 8011ca8:	9b03      	ldr	r3, [sp, #12]
 8011caa:	1d1a      	adds	r2, r3, #4
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	9203      	str	r2, [sp, #12]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	bfb8      	it	lt
 8011cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cb8:	3402      	adds	r4, #2
 8011cba:	9305      	str	r3, [sp, #20]
 8011cbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011d88 <_svfiprintf_r+0x1fc>
 8011cc0:	7821      	ldrb	r1, [r4, #0]
 8011cc2:	2203      	movs	r2, #3
 8011cc4:	4650      	mov	r0, sl
 8011cc6:	f7ee fb13 	bl	80002f0 <memchr>
 8011cca:	b140      	cbz	r0, 8011cde <_svfiprintf_r+0x152>
 8011ccc:	2340      	movs	r3, #64	; 0x40
 8011cce:	eba0 000a 	sub.w	r0, r0, sl
 8011cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8011cd6:	9b04      	ldr	r3, [sp, #16]
 8011cd8:	4303      	orrs	r3, r0
 8011cda:	3401      	adds	r4, #1
 8011cdc:	9304      	str	r3, [sp, #16]
 8011cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ce2:	4826      	ldr	r0, [pc, #152]	; (8011d7c <_svfiprintf_r+0x1f0>)
 8011ce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ce8:	2206      	movs	r2, #6
 8011cea:	f7ee fb01 	bl	80002f0 <memchr>
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	d038      	beq.n	8011d64 <_svfiprintf_r+0x1d8>
 8011cf2:	4b23      	ldr	r3, [pc, #140]	; (8011d80 <_svfiprintf_r+0x1f4>)
 8011cf4:	bb1b      	cbnz	r3, 8011d3e <_svfiprintf_r+0x1b2>
 8011cf6:	9b03      	ldr	r3, [sp, #12]
 8011cf8:	3307      	adds	r3, #7
 8011cfa:	f023 0307 	bic.w	r3, r3, #7
 8011cfe:	3308      	adds	r3, #8
 8011d00:	9303      	str	r3, [sp, #12]
 8011d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d04:	4433      	add	r3, r6
 8011d06:	9309      	str	r3, [sp, #36]	; 0x24
 8011d08:	e767      	b.n	8011bda <_svfiprintf_r+0x4e>
 8011d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d0e:	460c      	mov	r4, r1
 8011d10:	2001      	movs	r0, #1
 8011d12:	e7a5      	b.n	8011c60 <_svfiprintf_r+0xd4>
 8011d14:	2300      	movs	r3, #0
 8011d16:	3401      	adds	r4, #1
 8011d18:	9305      	str	r3, [sp, #20]
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	f04f 0c0a 	mov.w	ip, #10
 8011d20:	4620      	mov	r0, r4
 8011d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d26:	3a30      	subs	r2, #48	; 0x30
 8011d28:	2a09      	cmp	r2, #9
 8011d2a:	d903      	bls.n	8011d34 <_svfiprintf_r+0x1a8>
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d0c5      	beq.n	8011cbc <_svfiprintf_r+0x130>
 8011d30:	9105      	str	r1, [sp, #20]
 8011d32:	e7c3      	b.n	8011cbc <_svfiprintf_r+0x130>
 8011d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d38:	4604      	mov	r4, r0
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	e7f0      	b.n	8011d20 <_svfiprintf_r+0x194>
 8011d3e:	ab03      	add	r3, sp, #12
 8011d40:	9300      	str	r3, [sp, #0]
 8011d42:	462a      	mov	r2, r5
 8011d44:	4b0f      	ldr	r3, [pc, #60]	; (8011d84 <_svfiprintf_r+0x1f8>)
 8011d46:	a904      	add	r1, sp, #16
 8011d48:	4638      	mov	r0, r7
 8011d4a:	f7fc fa39 	bl	800e1c0 <_printf_float>
 8011d4e:	1c42      	adds	r2, r0, #1
 8011d50:	4606      	mov	r6, r0
 8011d52:	d1d6      	bne.n	8011d02 <_svfiprintf_r+0x176>
 8011d54:	89ab      	ldrh	r3, [r5, #12]
 8011d56:	065b      	lsls	r3, r3, #25
 8011d58:	f53f af2c 	bmi.w	8011bb4 <_svfiprintf_r+0x28>
 8011d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d5e:	b01d      	add	sp, #116	; 0x74
 8011d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d64:	ab03      	add	r3, sp, #12
 8011d66:	9300      	str	r3, [sp, #0]
 8011d68:	462a      	mov	r2, r5
 8011d6a:	4b06      	ldr	r3, [pc, #24]	; (8011d84 <_svfiprintf_r+0x1f8>)
 8011d6c:	a904      	add	r1, sp, #16
 8011d6e:	4638      	mov	r0, r7
 8011d70:	f7fc fcb2 	bl	800e6d8 <_printf_i>
 8011d74:	e7eb      	b.n	8011d4e <_svfiprintf_r+0x1c2>
 8011d76:	bf00      	nop
 8011d78:	08014524 	.word	0x08014524
 8011d7c:	0801452e 	.word	0x0801452e
 8011d80:	0800e1c1 	.word	0x0800e1c1
 8011d84:	08011ad5 	.word	0x08011ad5
 8011d88:	0801452a 	.word	0x0801452a

08011d8c <_sungetc_r>:
 8011d8c:	b538      	push	{r3, r4, r5, lr}
 8011d8e:	1c4b      	adds	r3, r1, #1
 8011d90:	4614      	mov	r4, r2
 8011d92:	d103      	bne.n	8011d9c <_sungetc_r+0x10>
 8011d94:	f04f 35ff 	mov.w	r5, #4294967295
 8011d98:	4628      	mov	r0, r5
 8011d9a:	bd38      	pop	{r3, r4, r5, pc}
 8011d9c:	8993      	ldrh	r3, [r2, #12]
 8011d9e:	f023 0320 	bic.w	r3, r3, #32
 8011da2:	8193      	strh	r3, [r2, #12]
 8011da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011da6:	6852      	ldr	r2, [r2, #4]
 8011da8:	b2cd      	uxtb	r5, r1
 8011daa:	b18b      	cbz	r3, 8011dd0 <_sungetc_r+0x44>
 8011dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011dae:	4293      	cmp	r3, r2
 8011db0:	dd08      	ble.n	8011dc4 <_sungetc_r+0x38>
 8011db2:	6823      	ldr	r3, [r4, #0]
 8011db4:	1e5a      	subs	r2, r3, #1
 8011db6:	6022      	str	r2, [r4, #0]
 8011db8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011dbc:	6863      	ldr	r3, [r4, #4]
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	6063      	str	r3, [r4, #4]
 8011dc2:	e7e9      	b.n	8011d98 <_sungetc_r+0xc>
 8011dc4:	4621      	mov	r1, r4
 8011dc6:	f000 fbef 	bl	80125a8 <__submore>
 8011dca:	2800      	cmp	r0, #0
 8011dcc:	d0f1      	beq.n	8011db2 <_sungetc_r+0x26>
 8011dce:	e7e1      	b.n	8011d94 <_sungetc_r+0x8>
 8011dd0:	6921      	ldr	r1, [r4, #16]
 8011dd2:	6823      	ldr	r3, [r4, #0]
 8011dd4:	b151      	cbz	r1, 8011dec <_sungetc_r+0x60>
 8011dd6:	4299      	cmp	r1, r3
 8011dd8:	d208      	bcs.n	8011dec <_sungetc_r+0x60>
 8011dda:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011dde:	42a9      	cmp	r1, r5
 8011de0:	d104      	bne.n	8011dec <_sungetc_r+0x60>
 8011de2:	3b01      	subs	r3, #1
 8011de4:	3201      	adds	r2, #1
 8011de6:	6023      	str	r3, [r4, #0]
 8011de8:	6062      	str	r2, [r4, #4]
 8011dea:	e7d5      	b.n	8011d98 <_sungetc_r+0xc>
 8011dec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011df4:	6363      	str	r3, [r4, #52]	; 0x34
 8011df6:	2303      	movs	r3, #3
 8011df8:	63a3      	str	r3, [r4, #56]	; 0x38
 8011dfa:	4623      	mov	r3, r4
 8011dfc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	2301      	movs	r3, #1
 8011e04:	e7dc      	b.n	8011dc0 <_sungetc_r+0x34>

08011e06 <__ssrefill_r>:
 8011e06:	b510      	push	{r4, lr}
 8011e08:	460c      	mov	r4, r1
 8011e0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011e0c:	b169      	cbz	r1, 8011e2a <__ssrefill_r+0x24>
 8011e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e12:	4299      	cmp	r1, r3
 8011e14:	d001      	beq.n	8011e1a <__ssrefill_r+0x14>
 8011e16:	f7ff fd7d 	bl	8011914 <_free_r>
 8011e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e1c:	6063      	str	r3, [r4, #4]
 8011e1e:	2000      	movs	r0, #0
 8011e20:	6360      	str	r0, [r4, #52]	; 0x34
 8011e22:	b113      	cbz	r3, 8011e2a <__ssrefill_r+0x24>
 8011e24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011e26:	6023      	str	r3, [r4, #0]
 8011e28:	bd10      	pop	{r4, pc}
 8011e2a:	6923      	ldr	r3, [r4, #16]
 8011e2c:	6023      	str	r3, [r4, #0]
 8011e2e:	2300      	movs	r3, #0
 8011e30:	6063      	str	r3, [r4, #4]
 8011e32:	89a3      	ldrh	r3, [r4, #12]
 8011e34:	f043 0320 	orr.w	r3, r3, #32
 8011e38:	81a3      	strh	r3, [r4, #12]
 8011e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e3e:	e7f3      	b.n	8011e28 <__ssrefill_r+0x22>

08011e40 <__ssvfiscanf_r>:
 8011e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e44:	460c      	mov	r4, r1
 8011e46:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011e4a:	2100      	movs	r1, #0
 8011e4c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011e50:	49a6      	ldr	r1, [pc, #664]	; (80120ec <__ssvfiscanf_r+0x2ac>)
 8011e52:	91a0      	str	r1, [sp, #640]	; 0x280
 8011e54:	f10d 0804 	add.w	r8, sp, #4
 8011e58:	49a5      	ldr	r1, [pc, #660]	; (80120f0 <__ssvfiscanf_r+0x2b0>)
 8011e5a:	4fa6      	ldr	r7, [pc, #664]	; (80120f4 <__ssvfiscanf_r+0x2b4>)
 8011e5c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80120f8 <__ssvfiscanf_r+0x2b8>
 8011e60:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011e64:	4606      	mov	r6, r0
 8011e66:	91a1      	str	r1, [sp, #644]	; 0x284
 8011e68:	9300      	str	r3, [sp, #0]
 8011e6a:	7813      	ldrb	r3, [r2, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f000 815a 	beq.w	8012126 <__ssvfiscanf_r+0x2e6>
 8011e72:	5dd9      	ldrb	r1, [r3, r7]
 8011e74:	f011 0108 	ands.w	r1, r1, #8
 8011e78:	f102 0501 	add.w	r5, r2, #1
 8011e7c:	d019      	beq.n	8011eb2 <__ssvfiscanf_r+0x72>
 8011e7e:	6863      	ldr	r3, [r4, #4]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	dd0f      	ble.n	8011ea4 <__ssvfiscanf_r+0x64>
 8011e84:	6823      	ldr	r3, [r4, #0]
 8011e86:	781a      	ldrb	r2, [r3, #0]
 8011e88:	5cba      	ldrb	r2, [r7, r2]
 8011e8a:	0712      	lsls	r2, r2, #28
 8011e8c:	d401      	bmi.n	8011e92 <__ssvfiscanf_r+0x52>
 8011e8e:	462a      	mov	r2, r5
 8011e90:	e7eb      	b.n	8011e6a <__ssvfiscanf_r+0x2a>
 8011e92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011e94:	3201      	adds	r2, #1
 8011e96:	9245      	str	r2, [sp, #276]	; 0x114
 8011e98:	6862      	ldr	r2, [r4, #4]
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	3a01      	subs	r2, #1
 8011e9e:	6062      	str	r2, [r4, #4]
 8011ea0:	6023      	str	r3, [r4, #0]
 8011ea2:	e7ec      	b.n	8011e7e <__ssvfiscanf_r+0x3e>
 8011ea4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011ea6:	4621      	mov	r1, r4
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	4798      	blx	r3
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d0e9      	beq.n	8011e84 <__ssvfiscanf_r+0x44>
 8011eb0:	e7ed      	b.n	8011e8e <__ssvfiscanf_r+0x4e>
 8011eb2:	2b25      	cmp	r3, #37	; 0x25
 8011eb4:	d012      	beq.n	8011edc <__ssvfiscanf_r+0x9c>
 8011eb6:	469a      	mov	sl, r3
 8011eb8:	6863      	ldr	r3, [r4, #4]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	f340 8091 	ble.w	8011fe2 <__ssvfiscanf_r+0x1a2>
 8011ec0:	6822      	ldr	r2, [r4, #0]
 8011ec2:	7813      	ldrb	r3, [r2, #0]
 8011ec4:	4553      	cmp	r3, sl
 8011ec6:	f040 812e 	bne.w	8012126 <__ssvfiscanf_r+0x2e6>
 8011eca:	6863      	ldr	r3, [r4, #4]
 8011ecc:	3b01      	subs	r3, #1
 8011ece:	6063      	str	r3, [r4, #4]
 8011ed0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011ed2:	3201      	adds	r2, #1
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	6022      	str	r2, [r4, #0]
 8011ed8:	9345      	str	r3, [sp, #276]	; 0x114
 8011eda:	e7d8      	b.n	8011e8e <__ssvfiscanf_r+0x4e>
 8011edc:	9141      	str	r1, [sp, #260]	; 0x104
 8011ede:	9143      	str	r1, [sp, #268]	; 0x10c
 8011ee0:	7853      	ldrb	r3, [r2, #1]
 8011ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8011ee4:	bf02      	ittt	eq
 8011ee6:	2310      	moveq	r3, #16
 8011ee8:	1c95      	addeq	r5, r2, #2
 8011eea:	9341      	streq	r3, [sp, #260]	; 0x104
 8011eec:	220a      	movs	r2, #10
 8011eee:	46aa      	mov	sl, r5
 8011ef0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011ef4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011ef8:	2b09      	cmp	r3, #9
 8011efa:	d91d      	bls.n	8011f38 <__ssvfiscanf_r+0xf8>
 8011efc:	487e      	ldr	r0, [pc, #504]	; (80120f8 <__ssvfiscanf_r+0x2b8>)
 8011efe:	2203      	movs	r2, #3
 8011f00:	f7ee f9f6 	bl	80002f0 <memchr>
 8011f04:	b140      	cbz	r0, 8011f18 <__ssvfiscanf_r+0xd8>
 8011f06:	2301      	movs	r3, #1
 8011f08:	eba0 0009 	sub.w	r0, r0, r9
 8011f0c:	fa03 f000 	lsl.w	r0, r3, r0
 8011f10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011f12:	4318      	orrs	r0, r3
 8011f14:	9041      	str	r0, [sp, #260]	; 0x104
 8011f16:	4655      	mov	r5, sl
 8011f18:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011f1c:	2b78      	cmp	r3, #120	; 0x78
 8011f1e:	d806      	bhi.n	8011f2e <__ssvfiscanf_r+0xee>
 8011f20:	2b57      	cmp	r3, #87	; 0x57
 8011f22:	d810      	bhi.n	8011f46 <__ssvfiscanf_r+0x106>
 8011f24:	2b25      	cmp	r3, #37	; 0x25
 8011f26:	d0c6      	beq.n	8011eb6 <__ssvfiscanf_r+0x76>
 8011f28:	d856      	bhi.n	8011fd8 <__ssvfiscanf_r+0x198>
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d064      	beq.n	8011ff8 <__ssvfiscanf_r+0x1b8>
 8011f2e:	2303      	movs	r3, #3
 8011f30:	9347      	str	r3, [sp, #284]	; 0x11c
 8011f32:	230a      	movs	r3, #10
 8011f34:	9342      	str	r3, [sp, #264]	; 0x108
 8011f36:	e071      	b.n	801201c <__ssvfiscanf_r+0x1dc>
 8011f38:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011f3a:	fb02 1103 	mla	r1, r2, r3, r1
 8011f3e:	3930      	subs	r1, #48	; 0x30
 8011f40:	9143      	str	r1, [sp, #268]	; 0x10c
 8011f42:	4655      	mov	r5, sl
 8011f44:	e7d3      	b.n	8011eee <__ssvfiscanf_r+0xae>
 8011f46:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011f4a:	2a20      	cmp	r2, #32
 8011f4c:	d8ef      	bhi.n	8011f2e <__ssvfiscanf_r+0xee>
 8011f4e:	a101      	add	r1, pc, #4	; (adr r1, 8011f54 <__ssvfiscanf_r+0x114>)
 8011f50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011f54:	08012007 	.word	0x08012007
 8011f58:	08011f2f 	.word	0x08011f2f
 8011f5c:	08011f2f 	.word	0x08011f2f
 8011f60:	08012065 	.word	0x08012065
 8011f64:	08011f2f 	.word	0x08011f2f
 8011f68:	08011f2f 	.word	0x08011f2f
 8011f6c:	08011f2f 	.word	0x08011f2f
 8011f70:	08011f2f 	.word	0x08011f2f
 8011f74:	08011f2f 	.word	0x08011f2f
 8011f78:	08011f2f 	.word	0x08011f2f
 8011f7c:	08011f2f 	.word	0x08011f2f
 8011f80:	0801207b 	.word	0x0801207b
 8011f84:	08012051 	.word	0x08012051
 8011f88:	08011fdf 	.word	0x08011fdf
 8011f8c:	08011fdf 	.word	0x08011fdf
 8011f90:	08011fdf 	.word	0x08011fdf
 8011f94:	08011f2f 	.word	0x08011f2f
 8011f98:	08012055 	.word	0x08012055
 8011f9c:	08011f2f 	.word	0x08011f2f
 8011fa0:	08011f2f 	.word	0x08011f2f
 8011fa4:	08011f2f 	.word	0x08011f2f
 8011fa8:	08011f2f 	.word	0x08011f2f
 8011fac:	0801208b 	.word	0x0801208b
 8011fb0:	0801205d 	.word	0x0801205d
 8011fb4:	08011fff 	.word	0x08011fff
 8011fb8:	08011f2f 	.word	0x08011f2f
 8011fbc:	08011f2f 	.word	0x08011f2f
 8011fc0:	08012087 	.word	0x08012087
 8011fc4:	08011f2f 	.word	0x08011f2f
 8011fc8:	08012051 	.word	0x08012051
 8011fcc:	08011f2f 	.word	0x08011f2f
 8011fd0:	08011f2f 	.word	0x08011f2f
 8011fd4:	08012007 	.word	0x08012007
 8011fd8:	3b45      	subs	r3, #69	; 0x45
 8011fda:	2b02      	cmp	r3, #2
 8011fdc:	d8a7      	bhi.n	8011f2e <__ssvfiscanf_r+0xee>
 8011fde:	2305      	movs	r3, #5
 8011fe0:	e01b      	b.n	801201a <__ssvfiscanf_r+0x1da>
 8011fe2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011fe4:	4621      	mov	r1, r4
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	4798      	blx	r3
 8011fea:	2800      	cmp	r0, #0
 8011fec:	f43f af68 	beq.w	8011ec0 <__ssvfiscanf_r+0x80>
 8011ff0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	f040 808d 	bne.w	8012112 <__ssvfiscanf_r+0x2d2>
 8011ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ffc:	e08f      	b.n	801211e <__ssvfiscanf_r+0x2de>
 8011ffe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012000:	f042 0220 	orr.w	r2, r2, #32
 8012004:	9241      	str	r2, [sp, #260]	; 0x104
 8012006:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801200c:	9241      	str	r2, [sp, #260]	; 0x104
 801200e:	2210      	movs	r2, #16
 8012010:	2b6f      	cmp	r3, #111	; 0x6f
 8012012:	9242      	str	r2, [sp, #264]	; 0x108
 8012014:	bf34      	ite	cc
 8012016:	2303      	movcc	r3, #3
 8012018:	2304      	movcs	r3, #4
 801201a:	9347      	str	r3, [sp, #284]	; 0x11c
 801201c:	6863      	ldr	r3, [r4, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	dd42      	ble.n	80120a8 <__ssvfiscanf_r+0x268>
 8012022:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012024:	0659      	lsls	r1, r3, #25
 8012026:	d404      	bmi.n	8012032 <__ssvfiscanf_r+0x1f2>
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	781a      	ldrb	r2, [r3, #0]
 801202c:	5cba      	ldrb	r2, [r7, r2]
 801202e:	0712      	lsls	r2, r2, #28
 8012030:	d441      	bmi.n	80120b6 <__ssvfiscanf_r+0x276>
 8012032:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012034:	2b02      	cmp	r3, #2
 8012036:	dc50      	bgt.n	80120da <__ssvfiscanf_r+0x29a>
 8012038:	466b      	mov	r3, sp
 801203a:	4622      	mov	r2, r4
 801203c:	a941      	add	r1, sp, #260	; 0x104
 801203e:	4630      	mov	r0, r6
 8012040:	f000 f876 	bl	8012130 <_scanf_chars>
 8012044:	2801      	cmp	r0, #1
 8012046:	d06e      	beq.n	8012126 <__ssvfiscanf_r+0x2e6>
 8012048:	2802      	cmp	r0, #2
 801204a:	f47f af20 	bne.w	8011e8e <__ssvfiscanf_r+0x4e>
 801204e:	e7cf      	b.n	8011ff0 <__ssvfiscanf_r+0x1b0>
 8012050:	220a      	movs	r2, #10
 8012052:	e7dd      	b.n	8012010 <__ssvfiscanf_r+0x1d0>
 8012054:	2300      	movs	r3, #0
 8012056:	9342      	str	r3, [sp, #264]	; 0x108
 8012058:	2303      	movs	r3, #3
 801205a:	e7de      	b.n	801201a <__ssvfiscanf_r+0x1da>
 801205c:	2308      	movs	r3, #8
 801205e:	9342      	str	r3, [sp, #264]	; 0x108
 8012060:	2304      	movs	r3, #4
 8012062:	e7da      	b.n	801201a <__ssvfiscanf_r+0x1da>
 8012064:	4629      	mov	r1, r5
 8012066:	4640      	mov	r0, r8
 8012068:	f000 f9de 	bl	8012428 <__sccl>
 801206c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801206e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012072:	9341      	str	r3, [sp, #260]	; 0x104
 8012074:	4605      	mov	r5, r0
 8012076:	2301      	movs	r3, #1
 8012078:	e7cf      	b.n	801201a <__ssvfiscanf_r+0x1da>
 801207a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801207c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012080:	9341      	str	r3, [sp, #260]	; 0x104
 8012082:	2300      	movs	r3, #0
 8012084:	e7c9      	b.n	801201a <__ssvfiscanf_r+0x1da>
 8012086:	2302      	movs	r3, #2
 8012088:	e7c7      	b.n	801201a <__ssvfiscanf_r+0x1da>
 801208a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801208c:	06c3      	lsls	r3, r0, #27
 801208e:	f53f aefe 	bmi.w	8011e8e <__ssvfiscanf_r+0x4e>
 8012092:	9b00      	ldr	r3, [sp, #0]
 8012094:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012096:	1d19      	adds	r1, r3, #4
 8012098:	9100      	str	r1, [sp, #0]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	f010 0f01 	tst.w	r0, #1
 80120a0:	bf14      	ite	ne
 80120a2:	801a      	strhne	r2, [r3, #0]
 80120a4:	601a      	streq	r2, [r3, #0]
 80120a6:	e6f2      	b.n	8011e8e <__ssvfiscanf_r+0x4e>
 80120a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80120aa:	4621      	mov	r1, r4
 80120ac:	4630      	mov	r0, r6
 80120ae:	4798      	blx	r3
 80120b0:	2800      	cmp	r0, #0
 80120b2:	d0b6      	beq.n	8012022 <__ssvfiscanf_r+0x1e2>
 80120b4:	e79c      	b.n	8011ff0 <__ssvfiscanf_r+0x1b0>
 80120b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80120b8:	3201      	adds	r2, #1
 80120ba:	9245      	str	r2, [sp, #276]	; 0x114
 80120bc:	6862      	ldr	r2, [r4, #4]
 80120be:	3a01      	subs	r2, #1
 80120c0:	2a00      	cmp	r2, #0
 80120c2:	6062      	str	r2, [r4, #4]
 80120c4:	dd02      	ble.n	80120cc <__ssvfiscanf_r+0x28c>
 80120c6:	3301      	adds	r3, #1
 80120c8:	6023      	str	r3, [r4, #0]
 80120ca:	e7ad      	b.n	8012028 <__ssvfiscanf_r+0x1e8>
 80120cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80120ce:	4621      	mov	r1, r4
 80120d0:	4630      	mov	r0, r6
 80120d2:	4798      	blx	r3
 80120d4:	2800      	cmp	r0, #0
 80120d6:	d0a7      	beq.n	8012028 <__ssvfiscanf_r+0x1e8>
 80120d8:	e78a      	b.n	8011ff0 <__ssvfiscanf_r+0x1b0>
 80120da:	2b04      	cmp	r3, #4
 80120dc:	dc0e      	bgt.n	80120fc <__ssvfiscanf_r+0x2bc>
 80120de:	466b      	mov	r3, sp
 80120e0:	4622      	mov	r2, r4
 80120e2:	a941      	add	r1, sp, #260	; 0x104
 80120e4:	4630      	mov	r0, r6
 80120e6:	f000 f87d 	bl	80121e4 <_scanf_i>
 80120ea:	e7ab      	b.n	8012044 <__ssvfiscanf_r+0x204>
 80120ec:	08011d8d 	.word	0x08011d8d
 80120f0:	08011e07 	.word	0x08011e07
 80120f4:	080141c1 	.word	0x080141c1
 80120f8:	0801452a 	.word	0x0801452a
 80120fc:	4b0b      	ldr	r3, [pc, #44]	; (801212c <__ssvfiscanf_r+0x2ec>)
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f43f aec5 	beq.w	8011e8e <__ssvfiscanf_r+0x4e>
 8012104:	466b      	mov	r3, sp
 8012106:	4622      	mov	r2, r4
 8012108:	a941      	add	r1, sp, #260	; 0x104
 801210a:	4630      	mov	r0, r6
 801210c:	f7fc fc0a 	bl	800e924 <_scanf_float>
 8012110:	e798      	b.n	8012044 <__ssvfiscanf_r+0x204>
 8012112:	89a3      	ldrh	r3, [r4, #12]
 8012114:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012118:	bf18      	it	ne
 801211a:	f04f 30ff 	movne.w	r0, #4294967295
 801211e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012126:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012128:	e7f9      	b.n	801211e <__ssvfiscanf_r+0x2de>
 801212a:	bf00      	nop
 801212c:	0800e925 	.word	0x0800e925

08012130 <_scanf_chars>:
 8012130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012134:	4615      	mov	r5, r2
 8012136:	688a      	ldr	r2, [r1, #8]
 8012138:	4680      	mov	r8, r0
 801213a:	460c      	mov	r4, r1
 801213c:	b932      	cbnz	r2, 801214c <_scanf_chars+0x1c>
 801213e:	698a      	ldr	r2, [r1, #24]
 8012140:	2a00      	cmp	r2, #0
 8012142:	bf0c      	ite	eq
 8012144:	2201      	moveq	r2, #1
 8012146:	f04f 32ff 	movne.w	r2, #4294967295
 801214a:	608a      	str	r2, [r1, #8]
 801214c:	6822      	ldr	r2, [r4, #0]
 801214e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80121e0 <_scanf_chars+0xb0>
 8012152:	06d1      	lsls	r1, r2, #27
 8012154:	bf5f      	itttt	pl
 8012156:	681a      	ldrpl	r2, [r3, #0]
 8012158:	1d11      	addpl	r1, r2, #4
 801215a:	6019      	strpl	r1, [r3, #0]
 801215c:	6816      	ldrpl	r6, [r2, #0]
 801215e:	2700      	movs	r7, #0
 8012160:	69a0      	ldr	r0, [r4, #24]
 8012162:	b188      	cbz	r0, 8012188 <_scanf_chars+0x58>
 8012164:	2801      	cmp	r0, #1
 8012166:	d107      	bne.n	8012178 <_scanf_chars+0x48>
 8012168:	682a      	ldr	r2, [r5, #0]
 801216a:	7811      	ldrb	r1, [r2, #0]
 801216c:	6962      	ldr	r2, [r4, #20]
 801216e:	5c52      	ldrb	r2, [r2, r1]
 8012170:	b952      	cbnz	r2, 8012188 <_scanf_chars+0x58>
 8012172:	2f00      	cmp	r7, #0
 8012174:	d031      	beq.n	80121da <_scanf_chars+0xaa>
 8012176:	e022      	b.n	80121be <_scanf_chars+0x8e>
 8012178:	2802      	cmp	r0, #2
 801217a:	d120      	bne.n	80121be <_scanf_chars+0x8e>
 801217c:	682b      	ldr	r3, [r5, #0]
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012184:	071b      	lsls	r3, r3, #28
 8012186:	d41a      	bmi.n	80121be <_scanf_chars+0x8e>
 8012188:	6823      	ldr	r3, [r4, #0]
 801218a:	06da      	lsls	r2, r3, #27
 801218c:	bf5e      	ittt	pl
 801218e:	682b      	ldrpl	r3, [r5, #0]
 8012190:	781b      	ldrbpl	r3, [r3, #0]
 8012192:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012196:	682a      	ldr	r2, [r5, #0]
 8012198:	686b      	ldr	r3, [r5, #4]
 801219a:	3201      	adds	r2, #1
 801219c:	602a      	str	r2, [r5, #0]
 801219e:	68a2      	ldr	r2, [r4, #8]
 80121a0:	3b01      	subs	r3, #1
 80121a2:	3a01      	subs	r2, #1
 80121a4:	606b      	str	r3, [r5, #4]
 80121a6:	3701      	adds	r7, #1
 80121a8:	60a2      	str	r2, [r4, #8]
 80121aa:	b142      	cbz	r2, 80121be <_scanf_chars+0x8e>
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	dcd7      	bgt.n	8012160 <_scanf_chars+0x30>
 80121b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80121b4:	4629      	mov	r1, r5
 80121b6:	4640      	mov	r0, r8
 80121b8:	4798      	blx	r3
 80121ba:	2800      	cmp	r0, #0
 80121bc:	d0d0      	beq.n	8012160 <_scanf_chars+0x30>
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	f013 0310 	ands.w	r3, r3, #16
 80121c4:	d105      	bne.n	80121d2 <_scanf_chars+0xa2>
 80121c6:	68e2      	ldr	r2, [r4, #12]
 80121c8:	3201      	adds	r2, #1
 80121ca:	60e2      	str	r2, [r4, #12]
 80121cc:	69a2      	ldr	r2, [r4, #24]
 80121ce:	b102      	cbz	r2, 80121d2 <_scanf_chars+0xa2>
 80121d0:	7033      	strb	r3, [r6, #0]
 80121d2:	6923      	ldr	r3, [r4, #16]
 80121d4:	443b      	add	r3, r7
 80121d6:	6123      	str	r3, [r4, #16]
 80121d8:	2000      	movs	r0, #0
 80121da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121de:	bf00      	nop
 80121e0:	080141c1 	.word	0x080141c1

080121e4 <_scanf_i>:
 80121e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e8:	4698      	mov	r8, r3
 80121ea:	4b76      	ldr	r3, [pc, #472]	; (80123c4 <_scanf_i+0x1e0>)
 80121ec:	460c      	mov	r4, r1
 80121ee:	4682      	mov	sl, r0
 80121f0:	4616      	mov	r6, r2
 80121f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80121f6:	b087      	sub	sp, #28
 80121f8:	ab03      	add	r3, sp, #12
 80121fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80121fe:	4b72      	ldr	r3, [pc, #456]	; (80123c8 <_scanf_i+0x1e4>)
 8012200:	69a1      	ldr	r1, [r4, #24]
 8012202:	4a72      	ldr	r2, [pc, #456]	; (80123cc <_scanf_i+0x1e8>)
 8012204:	2903      	cmp	r1, #3
 8012206:	bf18      	it	ne
 8012208:	461a      	movne	r2, r3
 801220a:	68a3      	ldr	r3, [r4, #8]
 801220c:	9201      	str	r2, [sp, #4]
 801220e:	1e5a      	subs	r2, r3, #1
 8012210:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012214:	bf88      	it	hi
 8012216:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801221a:	4627      	mov	r7, r4
 801221c:	bf82      	ittt	hi
 801221e:	eb03 0905 	addhi.w	r9, r3, r5
 8012222:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012226:	60a3      	strhi	r3, [r4, #8]
 8012228:	f857 3b1c 	ldr.w	r3, [r7], #28
 801222c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012230:	bf98      	it	ls
 8012232:	f04f 0900 	movls.w	r9, #0
 8012236:	6023      	str	r3, [r4, #0]
 8012238:	463d      	mov	r5, r7
 801223a:	f04f 0b00 	mov.w	fp, #0
 801223e:	6831      	ldr	r1, [r6, #0]
 8012240:	ab03      	add	r3, sp, #12
 8012242:	7809      	ldrb	r1, [r1, #0]
 8012244:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012248:	2202      	movs	r2, #2
 801224a:	f7ee f851 	bl	80002f0 <memchr>
 801224e:	b328      	cbz	r0, 801229c <_scanf_i+0xb8>
 8012250:	f1bb 0f01 	cmp.w	fp, #1
 8012254:	d159      	bne.n	801230a <_scanf_i+0x126>
 8012256:	6862      	ldr	r2, [r4, #4]
 8012258:	b92a      	cbnz	r2, 8012266 <_scanf_i+0x82>
 801225a:	6822      	ldr	r2, [r4, #0]
 801225c:	2308      	movs	r3, #8
 801225e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012262:	6063      	str	r3, [r4, #4]
 8012264:	6022      	str	r2, [r4, #0]
 8012266:	6822      	ldr	r2, [r4, #0]
 8012268:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801226c:	6022      	str	r2, [r4, #0]
 801226e:	68a2      	ldr	r2, [r4, #8]
 8012270:	1e51      	subs	r1, r2, #1
 8012272:	60a1      	str	r1, [r4, #8]
 8012274:	b192      	cbz	r2, 801229c <_scanf_i+0xb8>
 8012276:	6832      	ldr	r2, [r6, #0]
 8012278:	1c51      	adds	r1, r2, #1
 801227a:	6031      	str	r1, [r6, #0]
 801227c:	7812      	ldrb	r2, [r2, #0]
 801227e:	f805 2b01 	strb.w	r2, [r5], #1
 8012282:	6872      	ldr	r2, [r6, #4]
 8012284:	3a01      	subs	r2, #1
 8012286:	2a00      	cmp	r2, #0
 8012288:	6072      	str	r2, [r6, #4]
 801228a:	dc07      	bgt.n	801229c <_scanf_i+0xb8>
 801228c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012290:	4631      	mov	r1, r6
 8012292:	4650      	mov	r0, sl
 8012294:	4790      	blx	r2
 8012296:	2800      	cmp	r0, #0
 8012298:	f040 8085 	bne.w	80123a6 <_scanf_i+0x1c2>
 801229c:	f10b 0b01 	add.w	fp, fp, #1
 80122a0:	f1bb 0f03 	cmp.w	fp, #3
 80122a4:	d1cb      	bne.n	801223e <_scanf_i+0x5a>
 80122a6:	6863      	ldr	r3, [r4, #4]
 80122a8:	b90b      	cbnz	r3, 80122ae <_scanf_i+0xca>
 80122aa:	230a      	movs	r3, #10
 80122ac:	6063      	str	r3, [r4, #4]
 80122ae:	6863      	ldr	r3, [r4, #4]
 80122b0:	4947      	ldr	r1, [pc, #284]	; (80123d0 <_scanf_i+0x1ec>)
 80122b2:	6960      	ldr	r0, [r4, #20]
 80122b4:	1ac9      	subs	r1, r1, r3
 80122b6:	f000 f8b7 	bl	8012428 <__sccl>
 80122ba:	f04f 0b00 	mov.w	fp, #0
 80122be:	68a3      	ldr	r3, [r4, #8]
 80122c0:	6822      	ldr	r2, [r4, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d03d      	beq.n	8012342 <_scanf_i+0x15e>
 80122c6:	6831      	ldr	r1, [r6, #0]
 80122c8:	6960      	ldr	r0, [r4, #20]
 80122ca:	f891 c000 	ldrb.w	ip, [r1]
 80122ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d035      	beq.n	8012342 <_scanf_i+0x15e>
 80122d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80122da:	d124      	bne.n	8012326 <_scanf_i+0x142>
 80122dc:	0510      	lsls	r0, r2, #20
 80122de:	d522      	bpl.n	8012326 <_scanf_i+0x142>
 80122e0:	f10b 0b01 	add.w	fp, fp, #1
 80122e4:	f1b9 0f00 	cmp.w	r9, #0
 80122e8:	d003      	beq.n	80122f2 <_scanf_i+0x10e>
 80122ea:	3301      	adds	r3, #1
 80122ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80122f0:	60a3      	str	r3, [r4, #8]
 80122f2:	6873      	ldr	r3, [r6, #4]
 80122f4:	3b01      	subs	r3, #1
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	6073      	str	r3, [r6, #4]
 80122fa:	dd1b      	ble.n	8012334 <_scanf_i+0x150>
 80122fc:	6833      	ldr	r3, [r6, #0]
 80122fe:	3301      	adds	r3, #1
 8012300:	6033      	str	r3, [r6, #0]
 8012302:	68a3      	ldr	r3, [r4, #8]
 8012304:	3b01      	subs	r3, #1
 8012306:	60a3      	str	r3, [r4, #8]
 8012308:	e7d9      	b.n	80122be <_scanf_i+0xda>
 801230a:	f1bb 0f02 	cmp.w	fp, #2
 801230e:	d1ae      	bne.n	801226e <_scanf_i+0x8a>
 8012310:	6822      	ldr	r2, [r4, #0]
 8012312:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012316:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801231a:	d1bf      	bne.n	801229c <_scanf_i+0xb8>
 801231c:	2310      	movs	r3, #16
 801231e:	6063      	str	r3, [r4, #4]
 8012320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012324:	e7a2      	b.n	801226c <_scanf_i+0x88>
 8012326:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801232a:	6022      	str	r2, [r4, #0]
 801232c:	780b      	ldrb	r3, [r1, #0]
 801232e:	f805 3b01 	strb.w	r3, [r5], #1
 8012332:	e7de      	b.n	80122f2 <_scanf_i+0x10e>
 8012334:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012338:	4631      	mov	r1, r6
 801233a:	4650      	mov	r0, sl
 801233c:	4798      	blx	r3
 801233e:	2800      	cmp	r0, #0
 8012340:	d0df      	beq.n	8012302 <_scanf_i+0x11e>
 8012342:	6823      	ldr	r3, [r4, #0]
 8012344:	05db      	lsls	r3, r3, #23
 8012346:	d50d      	bpl.n	8012364 <_scanf_i+0x180>
 8012348:	42bd      	cmp	r5, r7
 801234a:	d909      	bls.n	8012360 <_scanf_i+0x17c>
 801234c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012350:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012354:	4632      	mov	r2, r6
 8012356:	4650      	mov	r0, sl
 8012358:	4798      	blx	r3
 801235a:	f105 39ff 	add.w	r9, r5, #4294967295
 801235e:	464d      	mov	r5, r9
 8012360:	42bd      	cmp	r5, r7
 8012362:	d02d      	beq.n	80123c0 <_scanf_i+0x1dc>
 8012364:	6822      	ldr	r2, [r4, #0]
 8012366:	f012 0210 	ands.w	r2, r2, #16
 801236a:	d113      	bne.n	8012394 <_scanf_i+0x1b0>
 801236c:	702a      	strb	r2, [r5, #0]
 801236e:	6863      	ldr	r3, [r4, #4]
 8012370:	9e01      	ldr	r6, [sp, #4]
 8012372:	4639      	mov	r1, r7
 8012374:	4650      	mov	r0, sl
 8012376:	47b0      	blx	r6
 8012378:	6821      	ldr	r1, [r4, #0]
 801237a:	f8d8 3000 	ldr.w	r3, [r8]
 801237e:	f011 0f20 	tst.w	r1, #32
 8012382:	d013      	beq.n	80123ac <_scanf_i+0x1c8>
 8012384:	1d1a      	adds	r2, r3, #4
 8012386:	f8c8 2000 	str.w	r2, [r8]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	6018      	str	r0, [r3, #0]
 801238e:	68e3      	ldr	r3, [r4, #12]
 8012390:	3301      	adds	r3, #1
 8012392:	60e3      	str	r3, [r4, #12]
 8012394:	1bed      	subs	r5, r5, r7
 8012396:	44ab      	add	fp, r5
 8012398:	6925      	ldr	r5, [r4, #16]
 801239a:	445d      	add	r5, fp
 801239c:	6125      	str	r5, [r4, #16]
 801239e:	2000      	movs	r0, #0
 80123a0:	b007      	add	sp, #28
 80123a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a6:	f04f 0b00 	mov.w	fp, #0
 80123aa:	e7ca      	b.n	8012342 <_scanf_i+0x15e>
 80123ac:	1d1a      	adds	r2, r3, #4
 80123ae:	f8c8 2000 	str.w	r2, [r8]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f011 0f01 	tst.w	r1, #1
 80123b8:	bf14      	ite	ne
 80123ba:	8018      	strhne	r0, [r3, #0]
 80123bc:	6018      	streq	r0, [r3, #0]
 80123be:	e7e6      	b.n	801238e <_scanf_i+0x1aa>
 80123c0:	2001      	movs	r0, #1
 80123c2:	e7ed      	b.n	80123a0 <_scanf_i+0x1bc>
 80123c4:	08014058 	.word	0x08014058
 80123c8:	080125a5 	.word	0x080125a5
 80123cc:	0800fb7d 	.word	0x0800fb7d
 80123d0:	0801454e 	.word	0x0801454e

080123d4 <_read_r>:
 80123d4:	b538      	push	{r3, r4, r5, lr}
 80123d6:	4d07      	ldr	r5, [pc, #28]	; (80123f4 <_read_r+0x20>)
 80123d8:	4604      	mov	r4, r0
 80123da:	4608      	mov	r0, r1
 80123dc:	4611      	mov	r1, r2
 80123de:	2200      	movs	r2, #0
 80123e0:	602a      	str	r2, [r5, #0]
 80123e2:	461a      	mov	r2, r3
 80123e4:	f7ef ff58 	bl	8002298 <_read>
 80123e8:	1c43      	adds	r3, r0, #1
 80123ea:	d102      	bne.n	80123f2 <_read_r+0x1e>
 80123ec:	682b      	ldr	r3, [r5, #0]
 80123ee:	b103      	cbz	r3, 80123f2 <_read_r+0x1e>
 80123f0:	6023      	str	r3, [r4, #0]
 80123f2:	bd38      	pop	{r3, r4, r5, pc}
 80123f4:	24005130 	.word	0x24005130

080123f8 <nan>:
 80123f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012400 <nan+0x8>
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	00000000 	.word	0x00000000
 8012404:	7ff80000 	.word	0x7ff80000

08012408 <_sbrk_r>:
 8012408:	b538      	push	{r3, r4, r5, lr}
 801240a:	4d06      	ldr	r5, [pc, #24]	; (8012424 <_sbrk_r+0x1c>)
 801240c:	2300      	movs	r3, #0
 801240e:	4604      	mov	r4, r0
 8012410:	4608      	mov	r0, r1
 8012412:	602b      	str	r3, [r5, #0]
 8012414:	f7ef ffae 	bl	8002374 <_sbrk>
 8012418:	1c43      	adds	r3, r0, #1
 801241a:	d102      	bne.n	8012422 <_sbrk_r+0x1a>
 801241c:	682b      	ldr	r3, [r5, #0]
 801241e:	b103      	cbz	r3, 8012422 <_sbrk_r+0x1a>
 8012420:	6023      	str	r3, [r4, #0]
 8012422:	bd38      	pop	{r3, r4, r5, pc}
 8012424:	24005130 	.word	0x24005130

08012428 <__sccl>:
 8012428:	b570      	push	{r4, r5, r6, lr}
 801242a:	780b      	ldrb	r3, [r1, #0]
 801242c:	4604      	mov	r4, r0
 801242e:	2b5e      	cmp	r3, #94	; 0x5e
 8012430:	bf0b      	itete	eq
 8012432:	784b      	ldrbeq	r3, [r1, #1]
 8012434:	1c48      	addne	r0, r1, #1
 8012436:	1c88      	addeq	r0, r1, #2
 8012438:	2200      	movne	r2, #0
 801243a:	bf08      	it	eq
 801243c:	2201      	moveq	r2, #1
 801243e:	1e61      	subs	r1, r4, #1
 8012440:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012444:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012448:	42a9      	cmp	r1, r5
 801244a:	d1fb      	bne.n	8012444 <__sccl+0x1c>
 801244c:	b90b      	cbnz	r3, 8012452 <__sccl+0x2a>
 801244e:	3801      	subs	r0, #1
 8012450:	bd70      	pop	{r4, r5, r6, pc}
 8012452:	f082 0201 	eor.w	r2, r2, #1
 8012456:	54e2      	strb	r2, [r4, r3]
 8012458:	4605      	mov	r5, r0
 801245a:	4628      	mov	r0, r5
 801245c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012460:	292d      	cmp	r1, #45	; 0x2d
 8012462:	d006      	beq.n	8012472 <__sccl+0x4a>
 8012464:	295d      	cmp	r1, #93	; 0x5d
 8012466:	d0f3      	beq.n	8012450 <__sccl+0x28>
 8012468:	b909      	cbnz	r1, 801246e <__sccl+0x46>
 801246a:	4628      	mov	r0, r5
 801246c:	e7f0      	b.n	8012450 <__sccl+0x28>
 801246e:	460b      	mov	r3, r1
 8012470:	e7f1      	b.n	8012456 <__sccl+0x2e>
 8012472:	786e      	ldrb	r6, [r5, #1]
 8012474:	2e5d      	cmp	r6, #93	; 0x5d
 8012476:	d0fa      	beq.n	801246e <__sccl+0x46>
 8012478:	42b3      	cmp	r3, r6
 801247a:	dcf8      	bgt.n	801246e <__sccl+0x46>
 801247c:	3502      	adds	r5, #2
 801247e:	4619      	mov	r1, r3
 8012480:	3101      	adds	r1, #1
 8012482:	428e      	cmp	r6, r1
 8012484:	5462      	strb	r2, [r4, r1]
 8012486:	dcfb      	bgt.n	8012480 <__sccl+0x58>
 8012488:	1af1      	subs	r1, r6, r3
 801248a:	3901      	subs	r1, #1
 801248c:	1c58      	adds	r0, r3, #1
 801248e:	42b3      	cmp	r3, r6
 8012490:	bfa8      	it	ge
 8012492:	2100      	movge	r1, #0
 8012494:	1843      	adds	r3, r0, r1
 8012496:	e7e0      	b.n	801245a <__sccl+0x32>

08012498 <strncmp>:
 8012498:	b510      	push	{r4, lr}
 801249a:	b17a      	cbz	r2, 80124bc <strncmp+0x24>
 801249c:	4603      	mov	r3, r0
 801249e:	3901      	subs	r1, #1
 80124a0:	1884      	adds	r4, r0, r2
 80124a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80124a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80124aa:	4290      	cmp	r0, r2
 80124ac:	d101      	bne.n	80124b2 <strncmp+0x1a>
 80124ae:	42a3      	cmp	r3, r4
 80124b0:	d101      	bne.n	80124b6 <strncmp+0x1e>
 80124b2:	1a80      	subs	r0, r0, r2
 80124b4:	bd10      	pop	{r4, pc}
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d1f3      	bne.n	80124a2 <strncmp+0xa>
 80124ba:	e7fa      	b.n	80124b2 <strncmp+0x1a>
 80124bc:	4610      	mov	r0, r2
 80124be:	e7f9      	b.n	80124b4 <strncmp+0x1c>

080124c0 <_strtoul_l.constprop.0>:
 80124c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124c4:	4f36      	ldr	r7, [pc, #216]	; (80125a0 <_strtoul_l.constprop.0+0xe0>)
 80124c6:	4686      	mov	lr, r0
 80124c8:	460d      	mov	r5, r1
 80124ca:	4628      	mov	r0, r5
 80124cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124d0:	5de6      	ldrb	r6, [r4, r7]
 80124d2:	f016 0608 	ands.w	r6, r6, #8
 80124d6:	d1f8      	bne.n	80124ca <_strtoul_l.constprop.0+0xa>
 80124d8:	2c2d      	cmp	r4, #45	; 0x2d
 80124da:	d12f      	bne.n	801253c <_strtoul_l.constprop.0+0x7c>
 80124dc:	782c      	ldrb	r4, [r5, #0]
 80124de:	2601      	movs	r6, #1
 80124e0:	1c85      	adds	r5, r0, #2
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d057      	beq.n	8012596 <_strtoul_l.constprop.0+0xd6>
 80124e6:	2b10      	cmp	r3, #16
 80124e8:	d109      	bne.n	80124fe <_strtoul_l.constprop.0+0x3e>
 80124ea:	2c30      	cmp	r4, #48	; 0x30
 80124ec:	d107      	bne.n	80124fe <_strtoul_l.constprop.0+0x3e>
 80124ee:	7828      	ldrb	r0, [r5, #0]
 80124f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80124f4:	2858      	cmp	r0, #88	; 0x58
 80124f6:	d149      	bne.n	801258c <_strtoul_l.constprop.0+0xcc>
 80124f8:	786c      	ldrb	r4, [r5, #1]
 80124fa:	2310      	movs	r3, #16
 80124fc:	3502      	adds	r5, #2
 80124fe:	f04f 38ff 	mov.w	r8, #4294967295
 8012502:	2700      	movs	r7, #0
 8012504:	fbb8 f8f3 	udiv	r8, r8, r3
 8012508:	fb03 f908 	mul.w	r9, r3, r8
 801250c:	ea6f 0909 	mvn.w	r9, r9
 8012510:	4638      	mov	r0, r7
 8012512:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012516:	f1bc 0f09 	cmp.w	ip, #9
 801251a:	d814      	bhi.n	8012546 <_strtoul_l.constprop.0+0x86>
 801251c:	4664      	mov	r4, ip
 801251e:	42a3      	cmp	r3, r4
 8012520:	dd22      	ble.n	8012568 <_strtoul_l.constprop.0+0xa8>
 8012522:	2f00      	cmp	r7, #0
 8012524:	db1d      	blt.n	8012562 <_strtoul_l.constprop.0+0xa2>
 8012526:	4580      	cmp	r8, r0
 8012528:	d31b      	bcc.n	8012562 <_strtoul_l.constprop.0+0xa2>
 801252a:	d101      	bne.n	8012530 <_strtoul_l.constprop.0+0x70>
 801252c:	45a1      	cmp	r9, r4
 801252e:	db18      	blt.n	8012562 <_strtoul_l.constprop.0+0xa2>
 8012530:	fb00 4003 	mla	r0, r0, r3, r4
 8012534:	2701      	movs	r7, #1
 8012536:	f815 4b01 	ldrb.w	r4, [r5], #1
 801253a:	e7ea      	b.n	8012512 <_strtoul_l.constprop.0+0x52>
 801253c:	2c2b      	cmp	r4, #43	; 0x2b
 801253e:	bf04      	itt	eq
 8012540:	782c      	ldrbeq	r4, [r5, #0]
 8012542:	1c85      	addeq	r5, r0, #2
 8012544:	e7cd      	b.n	80124e2 <_strtoul_l.constprop.0+0x22>
 8012546:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801254a:	f1bc 0f19 	cmp.w	ip, #25
 801254e:	d801      	bhi.n	8012554 <_strtoul_l.constprop.0+0x94>
 8012550:	3c37      	subs	r4, #55	; 0x37
 8012552:	e7e4      	b.n	801251e <_strtoul_l.constprop.0+0x5e>
 8012554:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012558:	f1bc 0f19 	cmp.w	ip, #25
 801255c:	d804      	bhi.n	8012568 <_strtoul_l.constprop.0+0xa8>
 801255e:	3c57      	subs	r4, #87	; 0x57
 8012560:	e7dd      	b.n	801251e <_strtoul_l.constprop.0+0x5e>
 8012562:	f04f 37ff 	mov.w	r7, #4294967295
 8012566:	e7e6      	b.n	8012536 <_strtoul_l.constprop.0+0x76>
 8012568:	2f00      	cmp	r7, #0
 801256a:	da07      	bge.n	801257c <_strtoul_l.constprop.0+0xbc>
 801256c:	2322      	movs	r3, #34	; 0x22
 801256e:	f8ce 3000 	str.w	r3, [lr]
 8012572:	f04f 30ff 	mov.w	r0, #4294967295
 8012576:	b932      	cbnz	r2, 8012586 <_strtoul_l.constprop.0+0xc6>
 8012578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801257c:	b106      	cbz	r6, 8012580 <_strtoul_l.constprop.0+0xc0>
 801257e:	4240      	negs	r0, r0
 8012580:	2a00      	cmp	r2, #0
 8012582:	d0f9      	beq.n	8012578 <_strtoul_l.constprop.0+0xb8>
 8012584:	b107      	cbz	r7, 8012588 <_strtoul_l.constprop.0+0xc8>
 8012586:	1e69      	subs	r1, r5, #1
 8012588:	6011      	str	r1, [r2, #0]
 801258a:	e7f5      	b.n	8012578 <_strtoul_l.constprop.0+0xb8>
 801258c:	2430      	movs	r4, #48	; 0x30
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1b5      	bne.n	80124fe <_strtoul_l.constprop.0+0x3e>
 8012592:	2308      	movs	r3, #8
 8012594:	e7b3      	b.n	80124fe <_strtoul_l.constprop.0+0x3e>
 8012596:	2c30      	cmp	r4, #48	; 0x30
 8012598:	d0a9      	beq.n	80124ee <_strtoul_l.constprop.0+0x2e>
 801259a:	230a      	movs	r3, #10
 801259c:	e7af      	b.n	80124fe <_strtoul_l.constprop.0+0x3e>
 801259e:	bf00      	nop
 80125a0:	080141c1 	.word	0x080141c1

080125a4 <_strtoul_r>:
 80125a4:	f7ff bf8c 	b.w	80124c0 <_strtoul_l.constprop.0>

080125a8 <__submore>:
 80125a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ac:	460c      	mov	r4, r1
 80125ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80125b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125b4:	4299      	cmp	r1, r3
 80125b6:	d11d      	bne.n	80125f4 <__submore+0x4c>
 80125b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80125bc:	f7ff fa16 	bl	80119ec <_malloc_r>
 80125c0:	b918      	cbnz	r0, 80125ca <__submore+0x22>
 80125c2:	f04f 30ff 	mov.w	r0, #4294967295
 80125c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80125d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80125d4:	6360      	str	r0, [r4, #52]	; 0x34
 80125d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80125da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80125de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80125e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80125e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80125ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80125ee:	6020      	str	r0, [r4, #0]
 80125f0:	2000      	movs	r0, #0
 80125f2:	e7e8      	b.n	80125c6 <__submore+0x1e>
 80125f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80125f6:	0077      	lsls	r7, r6, #1
 80125f8:	463a      	mov	r2, r7
 80125fa:	f000 fa2d 	bl	8012a58 <_realloc_r>
 80125fe:	4605      	mov	r5, r0
 8012600:	2800      	cmp	r0, #0
 8012602:	d0de      	beq.n	80125c2 <__submore+0x1a>
 8012604:	eb00 0806 	add.w	r8, r0, r6
 8012608:	4601      	mov	r1, r0
 801260a:	4632      	mov	r2, r6
 801260c:	4640      	mov	r0, r8
 801260e:	f7fb fd31 	bl	800e074 <memcpy>
 8012612:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012616:	f8c4 8000 	str.w	r8, [r4]
 801261a:	e7e9      	b.n	80125f0 <__submore+0x48>

0801261c <__ascii_wctomb>:
 801261c:	b149      	cbz	r1, 8012632 <__ascii_wctomb+0x16>
 801261e:	2aff      	cmp	r2, #255	; 0xff
 8012620:	bf85      	ittet	hi
 8012622:	238a      	movhi	r3, #138	; 0x8a
 8012624:	6003      	strhi	r3, [r0, #0]
 8012626:	700a      	strbls	r2, [r1, #0]
 8012628:	f04f 30ff 	movhi.w	r0, #4294967295
 801262c:	bf98      	it	ls
 801262e:	2001      	movls	r0, #1
 8012630:	4770      	bx	lr
 8012632:	4608      	mov	r0, r1
 8012634:	4770      	bx	lr
	...

08012638 <__assert_func>:
 8012638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801263a:	4614      	mov	r4, r2
 801263c:	461a      	mov	r2, r3
 801263e:	4b09      	ldr	r3, [pc, #36]	; (8012664 <__assert_func+0x2c>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	4605      	mov	r5, r0
 8012644:	68d8      	ldr	r0, [r3, #12]
 8012646:	b14c      	cbz	r4, 801265c <__assert_func+0x24>
 8012648:	4b07      	ldr	r3, [pc, #28]	; (8012668 <__assert_func+0x30>)
 801264a:	9100      	str	r1, [sp, #0]
 801264c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012650:	4906      	ldr	r1, [pc, #24]	; (801266c <__assert_func+0x34>)
 8012652:	462b      	mov	r3, r5
 8012654:	f000 f9a6 	bl	80129a4 <fiprintf>
 8012658:	f000 fc46 	bl	8012ee8 <abort>
 801265c:	4b04      	ldr	r3, [pc, #16]	; (8012670 <__assert_func+0x38>)
 801265e:	461c      	mov	r4, r3
 8012660:	e7f3      	b.n	801264a <__assert_func+0x12>
 8012662:	bf00      	nop
 8012664:	24000020 	.word	0x24000020
 8012668:	08014550 	.word	0x08014550
 801266c:	0801455d 	.word	0x0801455d
 8012670:	0801458b 	.word	0x0801458b

08012674 <__sflush_r>:
 8012674:	898a      	ldrh	r2, [r1, #12]
 8012676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801267a:	4605      	mov	r5, r0
 801267c:	0710      	lsls	r0, r2, #28
 801267e:	460c      	mov	r4, r1
 8012680:	d458      	bmi.n	8012734 <__sflush_r+0xc0>
 8012682:	684b      	ldr	r3, [r1, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	dc05      	bgt.n	8012694 <__sflush_r+0x20>
 8012688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801268a:	2b00      	cmp	r3, #0
 801268c:	dc02      	bgt.n	8012694 <__sflush_r+0x20>
 801268e:	2000      	movs	r0, #0
 8012690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012696:	2e00      	cmp	r6, #0
 8012698:	d0f9      	beq.n	801268e <__sflush_r+0x1a>
 801269a:	2300      	movs	r3, #0
 801269c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80126a0:	682f      	ldr	r7, [r5, #0]
 80126a2:	602b      	str	r3, [r5, #0]
 80126a4:	d032      	beq.n	801270c <__sflush_r+0x98>
 80126a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80126a8:	89a3      	ldrh	r3, [r4, #12]
 80126aa:	075a      	lsls	r2, r3, #29
 80126ac:	d505      	bpl.n	80126ba <__sflush_r+0x46>
 80126ae:	6863      	ldr	r3, [r4, #4]
 80126b0:	1ac0      	subs	r0, r0, r3
 80126b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80126b4:	b10b      	cbz	r3, 80126ba <__sflush_r+0x46>
 80126b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80126b8:	1ac0      	subs	r0, r0, r3
 80126ba:	2300      	movs	r3, #0
 80126bc:	4602      	mov	r2, r0
 80126be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126c0:	6a21      	ldr	r1, [r4, #32]
 80126c2:	4628      	mov	r0, r5
 80126c4:	47b0      	blx	r6
 80126c6:	1c43      	adds	r3, r0, #1
 80126c8:	89a3      	ldrh	r3, [r4, #12]
 80126ca:	d106      	bne.n	80126da <__sflush_r+0x66>
 80126cc:	6829      	ldr	r1, [r5, #0]
 80126ce:	291d      	cmp	r1, #29
 80126d0:	d82c      	bhi.n	801272c <__sflush_r+0xb8>
 80126d2:	4a2a      	ldr	r2, [pc, #168]	; (801277c <__sflush_r+0x108>)
 80126d4:	40ca      	lsrs	r2, r1
 80126d6:	07d6      	lsls	r6, r2, #31
 80126d8:	d528      	bpl.n	801272c <__sflush_r+0xb8>
 80126da:	2200      	movs	r2, #0
 80126dc:	6062      	str	r2, [r4, #4]
 80126de:	04d9      	lsls	r1, r3, #19
 80126e0:	6922      	ldr	r2, [r4, #16]
 80126e2:	6022      	str	r2, [r4, #0]
 80126e4:	d504      	bpl.n	80126f0 <__sflush_r+0x7c>
 80126e6:	1c42      	adds	r2, r0, #1
 80126e8:	d101      	bne.n	80126ee <__sflush_r+0x7a>
 80126ea:	682b      	ldr	r3, [r5, #0]
 80126ec:	b903      	cbnz	r3, 80126f0 <__sflush_r+0x7c>
 80126ee:	6560      	str	r0, [r4, #84]	; 0x54
 80126f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126f2:	602f      	str	r7, [r5, #0]
 80126f4:	2900      	cmp	r1, #0
 80126f6:	d0ca      	beq.n	801268e <__sflush_r+0x1a>
 80126f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126fc:	4299      	cmp	r1, r3
 80126fe:	d002      	beq.n	8012706 <__sflush_r+0x92>
 8012700:	4628      	mov	r0, r5
 8012702:	f7ff f907 	bl	8011914 <_free_r>
 8012706:	2000      	movs	r0, #0
 8012708:	6360      	str	r0, [r4, #52]	; 0x34
 801270a:	e7c1      	b.n	8012690 <__sflush_r+0x1c>
 801270c:	6a21      	ldr	r1, [r4, #32]
 801270e:	2301      	movs	r3, #1
 8012710:	4628      	mov	r0, r5
 8012712:	47b0      	blx	r6
 8012714:	1c41      	adds	r1, r0, #1
 8012716:	d1c7      	bne.n	80126a8 <__sflush_r+0x34>
 8012718:	682b      	ldr	r3, [r5, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d0c4      	beq.n	80126a8 <__sflush_r+0x34>
 801271e:	2b1d      	cmp	r3, #29
 8012720:	d001      	beq.n	8012726 <__sflush_r+0xb2>
 8012722:	2b16      	cmp	r3, #22
 8012724:	d101      	bne.n	801272a <__sflush_r+0xb6>
 8012726:	602f      	str	r7, [r5, #0]
 8012728:	e7b1      	b.n	801268e <__sflush_r+0x1a>
 801272a:	89a3      	ldrh	r3, [r4, #12]
 801272c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012730:	81a3      	strh	r3, [r4, #12]
 8012732:	e7ad      	b.n	8012690 <__sflush_r+0x1c>
 8012734:	690f      	ldr	r7, [r1, #16]
 8012736:	2f00      	cmp	r7, #0
 8012738:	d0a9      	beq.n	801268e <__sflush_r+0x1a>
 801273a:	0793      	lsls	r3, r2, #30
 801273c:	680e      	ldr	r6, [r1, #0]
 801273e:	bf08      	it	eq
 8012740:	694b      	ldreq	r3, [r1, #20]
 8012742:	600f      	str	r7, [r1, #0]
 8012744:	bf18      	it	ne
 8012746:	2300      	movne	r3, #0
 8012748:	eba6 0807 	sub.w	r8, r6, r7
 801274c:	608b      	str	r3, [r1, #8]
 801274e:	f1b8 0f00 	cmp.w	r8, #0
 8012752:	dd9c      	ble.n	801268e <__sflush_r+0x1a>
 8012754:	6a21      	ldr	r1, [r4, #32]
 8012756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012758:	4643      	mov	r3, r8
 801275a:	463a      	mov	r2, r7
 801275c:	4628      	mov	r0, r5
 801275e:	47b0      	blx	r6
 8012760:	2800      	cmp	r0, #0
 8012762:	dc06      	bgt.n	8012772 <__sflush_r+0xfe>
 8012764:	89a3      	ldrh	r3, [r4, #12]
 8012766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801276a:	81a3      	strh	r3, [r4, #12]
 801276c:	f04f 30ff 	mov.w	r0, #4294967295
 8012770:	e78e      	b.n	8012690 <__sflush_r+0x1c>
 8012772:	4407      	add	r7, r0
 8012774:	eba8 0800 	sub.w	r8, r8, r0
 8012778:	e7e9      	b.n	801274e <__sflush_r+0xda>
 801277a:	bf00      	nop
 801277c:	20400001 	.word	0x20400001

08012780 <_fflush_r>:
 8012780:	b538      	push	{r3, r4, r5, lr}
 8012782:	690b      	ldr	r3, [r1, #16]
 8012784:	4605      	mov	r5, r0
 8012786:	460c      	mov	r4, r1
 8012788:	b913      	cbnz	r3, 8012790 <_fflush_r+0x10>
 801278a:	2500      	movs	r5, #0
 801278c:	4628      	mov	r0, r5
 801278e:	bd38      	pop	{r3, r4, r5, pc}
 8012790:	b118      	cbz	r0, 801279a <_fflush_r+0x1a>
 8012792:	6983      	ldr	r3, [r0, #24]
 8012794:	b90b      	cbnz	r3, 801279a <_fflush_r+0x1a>
 8012796:	f000 f887 	bl	80128a8 <__sinit>
 801279a:	4b14      	ldr	r3, [pc, #80]	; (80127ec <_fflush_r+0x6c>)
 801279c:	429c      	cmp	r4, r3
 801279e:	d11b      	bne.n	80127d8 <_fflush_r+0x58>
 80127a0:	686c      	ldr	r4, [r5, #4]
 80127a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d0ef      	beq.n	801278a <_fflush_r+0xa>
 80127aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127ac:	07d0      	lsls	r0, r2, #31
 80127ae:	d404      	bmi.n	80127ba <_fflush_r+0x3a>
 80127b0:	0599      	lsls	r1, r3, #22
 80127b2:	d402      	bmi.n	80127ba <_fflush_r+0x3a>
 80127b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127b6:	f000 f927 	bl	8012a08 <__retarget_lock_acquire_recursive>
 80127ba:	4628      	mov	r0, r5
 80127bc:	4621      	mov	r1, r4
 80127be:	f7ff ff59 	bl	8012674 <__sflush_r>
 80127c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127c4:	07da      	lsls	r2, r3, #31
 80127c6:	4605      	mov	r5, r0
 80127c8:	d4e0      	bmi.n	801278c <_fflush_r+0xc>
 80127ca:	89a3      	ldrh	r3, [r4, #12]
 80127cc:	059b      	lsls	r3, r3, #22
 80127ce:	d4dd      	bmi.n	801278c <_fflush_r+0xc>
 80127d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127d2:	f000 f91a 	bl	8012a0a <__retarget_lock_release_recursive>
 80127d6:	e7d9      	b.n	801278c <_fflush_r+0xc>
 80127d8:	4b05      	ldr	r3, [pc, #20]	; (80127f0 <_fflush_r+0x70>)
 80127da:	429c      	cmp	r4, r3
 80127dc:	d101      	bne.n	80127e2 <_fflush_r+0x62>
 80127de:	68ac      	ldr	r4, [r5, #8]
 80127e0:	e7df      	b.n	80127a2 <_fflush_r+0x22>
 80127e2:	4b04      	ldr	r3, [pc, #16]	; (80127f4 <_fflush_r+0x74>)
 80127e4:	429c      	cmp	r4, r3
 80127e6:	bf08      	it	eq
 80127e8:	68ec      	ldreq	r4, [r5, #12]
 80127ea:	e7da      	b.n	80127a2 <_fflush_r+0x22>
 80127ec:	080145ac 	.word	0x080145ac
 80127f0:	080145cc 	.word	0x080145cc
 80127f4:	0801458c 	.word	0x0801458c

080127f8 <std>:
 80127f8:	2300      	movs	r3, #0
 80127fa:	b510      	push	{r4, lr}
 80127fc:	4604      	mov	r4, r0
 80127fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012806:	6083      	str	r3, [r0, #8]
 8012808:	8181      	strh	r1, [r0, #12]
 801280a:	6643      	str	r3, [r0, #100]	; 0x64
 801280c:	81c2      	strh	r2, [r0, #14]
 801280e:	6183      	str	r3, [r0, #24]
 8012810:	4619      	mov	r1, r3
 8012812:	2208      	movs	r2, #8
 8012814:	305c      	adds	r0, #92	; 0x5c
 8012816:	f7fb fc3b 	bl	800e090 <memset>
 801281a:	4b05      	ldr	r3, [pc, #20]	; (8012830 <std+0x38>)
 801281c:	6263      	str	r3, [r4, #36]	; 0x24
 801281e:	4b05      	ldr	r3, [pc, #20]	; (8012834 <std+0x3c>)
 8012820:	62a3      	str	r3, [r4, #40]	; 0x28
 8012822:	4b05      	ldr	r3, [pc, #20]	; (8012838 <std+0x40>)
 8012824:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012826:	4b05      	ldr	r3, [pc, #20]	; (801283c <std+0x44>)
 8012828:	6224      	str	r4, [r4, #32]
 801282a:	6323      	str	r3, [r4, #48]	; 0x30
 801282c:	bd10      	pop	{r4, pc}
 801282e:	bf00      	nop
 8012830:	0800ee3d 	.word	0x0800ee3d
 8012834:	0800ee63 	.word	0x0800ee63
 8012838:	0800ee9b 	.word	0x0800ee9b
 801283c:	0800eebf 	.word	0x0800eebf

08012840 <_cleanup_r>:
 8012840:	4901      	ldr	r1, [pc, #4]	; (8012848 <_cleanup_r+0x8>)
 8012842:	f000 b8c1 	b.w	80129c8 <_fwalk_reent>
 8012846:	bf00      	nop
 8012848:	08012781 	.word	0x08012781

0801284c <__sfmoreglue>:
 801284c:	b570      	push	{r4, r5, r6, lr}
 801284e:	2268      	movs	r2, #104	; 0x68
 8012850:	1e4d      	subs	r5, r1, #1
 8012852:	4355      	muls	r5, r2
 8012854:	460e      	mov	r6, r1
 8012856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801285a:	f7ff f8c7 	bl	80119ec <_malloc_r>
 801285e:	4604      	mov	r4, r0
 8012860:	b140      	cbz	r0, 8012874 <__sfmoreglue+0x28>
 8012862:	2100      	movs	r1, #0
 8012864:	e9c0 1600 	strd	r1, r6, [r0]
 8012868:	300c      	adds	r0, #12
 801286a:	60a0      	str	r0, [r4, #8]
 801286c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012870:	f7fb fc0e 	bl	800e090 <memset>
 8012874:	4620      	mov	r0, r4
 8012876:	bd70      	pop	{r4, r5, r6, pc}

08012878 <__sfp_lock_acquire>:
 8012878:	4801      	ldr	r0, [pc, #4]	; (8012880 <__sfp_lock_acquire+0x8>)
 801287a:	f000 b8c5 	b.w	8012a08 <__retarget_lock_acquire_recursive>
 801287e:	bf00      	nop
 8012880:	24005135 	.word	0x24005135

08012884 <__sfp_lock_release>:
 8012884:	4801      	ldr	r0, [pc, #4]	; (801288c <__sfp_lock_release+0x8>)
 8012886:	f000 b8c0 	b.w	8012a0a <__retarget_lock_release_recursive>
 801288a:	bf00      	nop
 801288c:	24005135 	.word	0x24005135

08012890 <__sinit_lock_acquire>:
 8012890:	4801      	ldr	r0, [pc, #4]	; (8012898 <__sinit_lock_acquire+0x8>)
 8012892:	f000 b8b9 	b.w	8012a08 <__retarget_lock_acquire_recursive>
 8012896:	bf00      	nop
 8012898:	24005136 	.word	0x24005136

0801289c <__sinit_lock_release>:
 801289c:	4801      	ldr	r0, [pc, #4]	; (80128a4 <__sinit_lock_release+0x8>)
 801289e:	f000 b8b4 	b.w	8012a0a <__retarget_lock_release_recursive>
 80128a2:	bf00      	nop
 80128a4:	24005136 	.word	0x24005136

080128a8 <__sinit>:
 80128a8:	b510      	push	{r4, lr}
 80128aa:	4604      	mov	r4, r0
 80128ac:	f7ff fff0 	bl	8012890 <__sinit_lock_acquire>
 80128b0:	69a3      	ldr	r3, [r4, #24]
 80128b2:	b11b      	cbz	r3, 80128bc <__sinit+0x14>
 80128b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128b8:	f7ff bff0 	b.w	801289c <__sinit_lock_release>
 80128bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80128c0:	6523      	str	r3, [r4, #80]	; 0x50
 80128c2:	4b13      	ldr	r3, [pc, #76]	; (8012910 <__sinit+0x68>)
 80128c4:	4a13      	ldr	r2, [pc, #76]	; (8012914 <__sinit+0x6c>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80128ca:	42a3      	cmp	r3, r4
 80128cc:	bf04      	itt	eq
 80128ce:	2301      	moveq	r3, #1
 80128d0:	61a3      	streq	r3, [r4, #24]
 80128d2:	4620      	mov	r0, r4
 80128d4:	f000 f820 	bl	8012918 <__sfp>
 80128d8:	6060      	str	r0, [r4, #4]
 80128da:	4620      	mov	r0, r4
 80128dc:	f000 f81c 	bl	8012918 <__sfp>
 80128e0:	60a0      	str	r0, [r4, #8]
 80128e2:	4620      	mov	r0, r4
 80128e4:	f000 f818 	bl	8012918 <__sfp>
 80128e8:	2200      	movs	r2, #0
 80128ea:	60e0      	str	r0, [r4, #12]
 80128ec:	2104      	movs	r1, #4
 80128ee:	6860      	ldr	r0, [r4, #4]
 80128f0:	f7ff ff82 	bl	80127f8 <std>
 80128f4:	68a0      	ldr	r0, [r4, #8]
 80128f6:	2201      	movs	r2, #1
 80128f8:	2109      	movs	r1, #9
 80128fa:	f7ff ff7d 	bl	80127f8 <std>
 80128fe:	68e0      	ldr	r0, [r4, #12]
 8012900:	2202      	movs	r2, #2
 8012902:	2112      	movs	r1, #18
 8012904:	f7ff ff78 	bl	80127f8 <std>
 8012908:	2301      	movs	r3, #1
 801290a:	61a3      	str	r3, [r4, #24]
 801290c:	e7d2      	b.n	80128b4 <__sinit+0xc>
 801290e:	bf00      	nop
 8012910:	08014134 	.word	0x08014134
 8012914:	08012841 	.word	0x08012841

08012918 <__sfp>:
 8012918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801291a:	4607      	mov	r7, r0
 801291c:	f7ff ffac 	bl	8012878 <__sfp_lock_acquire>
 8012920:	4b1e      	ldr	r3, [pc, #120]	; (801299c <__sfp+0x84>)
 8012922:	681e      	ldr	r6, [r3, #0]
 8012924:	69b3      	ldr	r3, [r6, #24]
 8012926:	b913      	cbnz	r3, 801292e <__sfp+0x16>
 8012928:	4630      	mov	r0, r6
 801292a:	f7ff ffbd 	bl	80128a8 <__sinit>
 801292e:	3648      	adds	r6, #72	; 0x48
 8012930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012934:	3b01      	subs	r3, #1
 8012936:	d503      	bpl.n	8012940 <__sfp+0x28>
 8012938:	6833      	ldr	r3, [r6, #0]
 801293a:	b30b      	cbz	r3, 8012980 <__sfp+0x68>
 801293c:	6836      	ldr	r6, [r6, #0]
 801293e:	e7f7      	b.n	8012930 <__sfp+0x18>
 8012940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012944:	b9d5      	cbnz	r5, 801297c <__sfp+0x64>
 8012946:	4b16      	ldr	r3, [pc, #88]	; (80129a0 <__sfp+0x88>)
 8012948:	60e3      	str	r3, [r4, #12]
 801294a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801294e:	6665      	str	r5, [r4, #100]	; 0x64
 8012950:	f000 f859 	bl	8012a06 <__retarget_lock_init_recursive>
 8012954:	f7ff ff96 	bl	8012884 <__sfp_lock_release>
 8012958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801295c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012960:	6025      	str	r5, [r4, #0]
 8012962:	61a5      	str	r5, [r4, #24]
 8012964:	2208      	movs	r2, #8
 8012966:	4629      	mov	r1, r5
 8012968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801296c:	f7fb fb90 	bl	800e090 <memset>
 8012970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012978:	4620      	mov	r0, r4
 801297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801297c:	3468      	adds	r4, #104	; 0x68
 801297e:	e7d9      	b.n	8012934 <__sfp+0x1c>
 8012980:	2104      	movs	r1, #4
 8012982:	4638      	mov	r0, r7
 8012984:	f7ff ff62 	bl	801284c <__sfmoreglue>
 8012988:	4604      	mov	r4, r0
 801298a:	6030      	str	r0, [r6, #0]
 801298c:	2800      	cmp	r0, #0
 801298e:	d1d5      	bne.n	801293c <__sfp+0x24>
 8012990:	f7ff ff78 	bl	8012884 <__sfp_lock_release>
 8012994:	230c      	movs	r3, #12
 8012996:	603b      	str	r3, [r7, #0]
 8012998:	e7ee      	b.n	8012978 <__sfp+0x60>
 801299a:	bf00      	nop
 801299c:	08014134 	.word	0x08014134
 80129a0:	ffff0001 	.word	0xffff0001

080129a4 <fiprintf>:
 80129a4:	b40e      	push	{r1, r2, r3}
 80129a6:	b503      	push	{r0, r1, lr}
 80129a8:	4601      	mov	r1, r0
 80129aa:	ab03      	add	r3, sp, #12
 80129ac:	4805      	ldr	r0, [pc, #20]	; (80129c4 <fiprintf+0x20>)
 80129ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80129b2:	6800      	ldr	r0, [r0, #0]
 80129b4:	9301      	str	r3, [sp, #4]
 80129b6:	f000 f8a7 	bl	8012b08 <_vfiprintf_r>
 80129ba:	b002      	add	sp, #8
 80129bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80129c0:	b003      	add	sp, #12
 80129c2:	4770      	bx	lr
 80129c4:	24000020 	.word	0x24000020

080129c8 <_fwalk_reent>:
 80129c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129cc:	4606      	mov	r6, r0
 80129ce:	4688      	mov	r8, r1
 80129d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80129d4:	2700      	movs	r7, #0
 80129d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80129da:	f1b9 0901 	subs.w	r9, r9, #1
 80129de:	d505      	bpl.n	80129ec <_fwalk_reent+0x24>
 80129e0:	6824      	ldr	r4, [r4, #0]
 80129e2:	2c00      	cmp	r4, #0
 80129e4:	d1f7      	bne.n	80129d6 <_fwalk_reent+0xe>
 80129e6:	4638      	mov	r0, r7
 80129e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129ec:	89ab      	ldrh	r3, [r5, #12]
 80129ee:	2b01      	cmp	r3, #1
 80129f0:	d907      	bls.n	8012a02 <_fwalk_reent+0x3a>
 80129f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80129f6:	3301      	adds	r3, #1
 80129f8:	d003      	beq.n	8012a02 <_fwalk_reent+0x3a>
 80129fa:	4629      	mov	r1, r5
 80129fc:	4630      	mov	r0, r6
 80129fe:	47c0      	blx	r8
 8012a00:	4307      	orrs	r7, r0
 8012a02:	3568      	adds	r5, #104	; 0x68
 8012a04:	e7e9      	b.n	80129da <_fwalk_reent+0x12>

08012a06 <__retarget_lock_init_recursive>:
 8012a06:	4770      	bx	lr

08012a08 <__retarget_lock_acquire_recursive>:
 8012a08:	4770      	bx	lr

08012a0a <__retarget_lock_release_recursive>:
 8012a0a:	4770      	bx	lr

08012a0c <memmove>:
 8012a0c:	4288      	cmp	r0, r1
 8012a0e:	b510      	push	{r4, lr}
 8012a10:	eb01 0402 	add.w	r4, r1, r2
 8012a14:	d902      	bls.n	8012a1c <memmove+0x10>
 8012a16:	4284      	cmp	r4, r0
 8012a18:	4623      	mov	r3, r4
 8012a1a:	d807      	bhi.n	8012a2c <memmove+0x20>
 8012a1c:	1e43      	subs	r3, r0, #1
 8012a1e:	42a1      	cmp	r1, r4
 8012a20:	d008      	beq.n	8012a34 <memmove+0x28>
 8012a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a2a:	e7f8      	b.n	8012a1e <memmove+0x12>
 8012a2c:	4402      	add	r2, r0
 8012a2e:	4601      	mov	r1, r0
 8012a30:	428a      	cmp	r2, r1
 8012a32:	d100      	bne.n	8012a36 <memmove+0x2a>
 8012a34:	bd10      	pop	{r4, pc}
 8012a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a3e:	e7f7      	b.n	8012a30 <memmove+0x24>

08012a40 <__malloc_lock>:
 8012a40:	4801      	ldr	r0, [pc, #4]	; (8012a48 <__malloc_lock+0x8>)
 8012a42:	f7ff bfe1 	b.w	8012a08 <__retarget_lock_acquire_recursive>
 8012a46:	bf00      	nop
 8012a48:	24005134 	.word	0x24005134

08012a4c <__malloc_unlock>:
 8012a4c:	4801      	ldr	r0, [pc, #4]	; (8012a54 <__malloc_unlock+0x8>)
 8012a4e:	f7ff bfdc 	b.w	8012a0a <__retarget_lock_release_recursive>
 8012a52:	bf00      	nop
 8012a54:	24005134 	.word	0x24005134

08012a58 <_realloc_r>:
 8012a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a5c:	4680      	mov	r8, r0
 8012a5e:	4614      	mov	r4, r2
 8012a60:	460e      	mov	r6, r1
 8012a62:	b921      	cbnz	r1, 8012a6e <_realloc_r+0x16>
 8012a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a68:	4611      	mov	r1, r2
 8012a6a:	f7fe bfbf 	b.w	80119ec <_malloc_r>
 8012a6e:	b92a      	cbnz	r2, 8012a7c <_realloc_r+0x24>
 8012a70:	f7fe ff50 	bl	8011914 <_free_r>
 8012a74:	4625      	mov	r5, r4
 8012a76:	4628      	mov	r0, r5
 8012a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a7c:	f000 faa0 	bl	8012fc0 <_malloc_usable_size_r>
 8012a80:	4284      	cmp	r4, r0
 8012a82:	4607      	mov	r7, r0
 8012a84:	d802      	bhi.n	8012a8c <_realloc_r+0x34>
 8012a86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012a8a:	d812      	bhi.n	8012ab2 <_realloc_r+0x5a>
 8012a8c:	4621      	mov	r1, r4
 8012a8e:	4640      	mov	r0, r8
 8012a90:	f7fe ffac 	bl	80119ec <_malloc_r>
 8012a94:	4605      	mov	r5, r0
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d0ed      	beq.n	8012a76 <_realloc_r+0x1e>
 8012a9a:	42bc      	cmp	r4, r7
 8012a9c:	4622      	mov	r2, r4
 8012a9e:	4631      	mov	r1, r6
 8012aa0:	bf28      	it	cs
 8012aa2:	463a      	movcs	r2, r7
 8012aa4:	f7fb fae6 	bl	800e074 <memcpy>
 8012aa8:	4631      	mov	r1, r6
 8012aaa:	4640      	mov	r0, r8
 8012aac:	f7fe ff32 	bl	8011914 <_free_r>
 8012ab0:	e7e1      	b.n	8012a76 <_realloc_r+0x1e>
 8012ab2:	4635      	mov	r5, r6
 8012ab4:	e7df      	b.n	8012a76 <_realloc_r+0x1e>

08012ab6 <__sfputc_r>:
 8012ab6:	6893      	ldr	r3, [r2, #8]
 8012ab8:	3b01      	subs	r3, #1
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	b410      	push	{r4}
 8012abe:	6093      	str	r3, [r2, #8]
 8012ac0:	da08      	bge.n	8012ad4 <__sfputc_r+0x1e>
 8012ac2:	6994      	ldr	r4, [r2, #24]
 8012ac4:	42a3      	cmp	r3, r4
 8012ac6:	db01      	blt.n	8012acc <__sfputc_r+0x16>
 8012ac8:	290a      	cmp	r1, #10
 8012aca:	d103      	bne.n	8012ad4 <__sfputc_r+0x1e>
 8012acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ad0:	f000 b94a 	b.w	8012d68 <__swbuf_r>
 8012ad4:	6813      	ldr	r3, [r2, #0]
 8012ad6:	1c58      	adds	r0, r3, #1
 8012ad8:	6010      	str	r0, [r2, #0]
 8012ada:	7019      	strb	r1, [r3, #0]
 8012adc:	4608      	mov	r0, r1
 8012ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ae2:	4770      	bx	lr

08012ae4 <__sfputs_r>:
 8012ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ae6:	4606      	mov	r6, r0
 8012ae8:	460f      	mov	r7, r1
 8012aea:	4614      	mov	r4, r2
 8012aec:	18d5      	adds	r5, r2, r3
 8012aee:	42ac      	cmp	r4, r5
 8012af0:	d101      	bne.n	8012af6 <__sfputs_r+0x12>
 8012af2:	2000      	movs	r0, #0
 8012af4:	e007      	b.n	8012b06 <__sfputs_r+0x22>
 8012af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012afa:	463a      	mov	r2, r7
 8012afc:	4630      	mov	r0, r6
 8012afe:	f7ff ffda 	bl	8012ab6 <__sfputc_r>
 8012b02:	1c43      	adds	r3, r0, #1
 8012b04:	d1f3      	bne.n	8012aee <__sfputs_r+0xa>
 8012b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b08 <_vfiprintf_r>:
 8012b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b0c:	460d      	mov	r5, r1
 8012b0e:	b09d      	sub	sp, #116	; 0x74
 8012b10:	4614      	mov	r4, r2
 8012b12:	4698      	mov	r8, r3
 8012b14:	4606      	mov	r6, r0
 8012b16:	b118      	cbz	r0, 8012b20 <_vfiprintf_r+0x18>
 8012b18:	6983      	ldr	r3, [r0, #24]
 8012b1a:	b90b      	cbnz	r3, 8012b20 <_vfiprintf_r+0x18>
 8012b1c:	f7ff fec4 	bl	80128a8 <__sinit>
 8012b20:	4b89      	ldr	r3, [pc, #548]	; (8012d48 <_vfiprintf_r+0x240>)
 8012b22:	429d      	cmp	r5, r3
 8012b24:	d11b      	bne.n	8012b5e <_vfiprintf_r+0x56>
 8012b26:	6875      	ldr	r5, [r6, #4]
 8012b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b2a:	07d9      	lsls	r1, r3, #31
 8012b2c:	d405      	bmi.n	8012b3a <_vfiprintf_r+0x32>
 8012b2e:	89ab      	ldrh	r3, [r5, #12]
 8012b30:	059a      	lsls	r2, r3, #22
 8012b32:	d402      	bmi.n	8012b3a <_vfiprintf_r+0x32>
 8012b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b36:	f7ff ff67 	bl	8012a08 <__retarget_lock_acquire_recursive>
 8012b3a:	89ab      	ldrh	r3, [r5, #12]
 8012b3c:	071b      	lsls	r3, r3, #28
 8012b3e:	d501      	bpl.n	8012b44 <_vfiprintf_r+0x3c>
 8012b40:	692b      	ldr	r3, [r5, #16]
 8012b42:	b9eb      	cbnz	r3, 8012b80 <_vfiprintf_r+0x78>
 8012b44:	4629      	mov	r1, r5
 8012b46:	4630      	mov	r0, r6
 8012b48:	f000 f960 	bl	8012e0c <__swsetup_r>
 8012b4c:	b1c0      	cbz	r0, 8012b80 <_vfiprintf_r+0x78>
 8012b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b50:	07dc      	lsls	r4, r3, #31
 8012b52:	d50e      	bpl.n	8012b72 <_vfiprintf_r+0x6a>
 8012b54:	f04f 30ff 	mov.w	r0, #4294967295
 8012b58:	b01d      	add	sp, #116	; 0x74
 8012b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b5e:	4b7b      	ldr	r3, [pc, #492]	; (8012d4c <_vfiprintf_r+0x244>)
 8012b60:	429d      	cmp	r5, r3
 8012b62:	d101      	bne.n	8012b68 <_vfiprintf_r+0x60>
 8012b64:	68b5      	ldr	r5, [r6, #8]
 8012b66:	e7df      	b.n	8012b28 <_vfiprintf_r+0x20>
 8012b68:	4b79      	ldr	r3, [pc, #484]	; (8012d50 <_vfiprintf_r+0x248>)
 8012b6a:	429d      	cmp	r5, r3
 8012b6c:	bf08      	it	eq
 8012b6e:	68f5      	ldreq	r5, [r6, #12]
 8012b70:	e7da      	b.n	8012b28 <_vfiprintf_r+0x20>
 8012b72:	89ab      	ldrh	r3, [r5, #12]
 8012b74:	0598      	lsls	r0, r3, #22
 8012b76:	d4ed      	bmi.n	8012b54 <_vfiprintf_r+0x4c>
 8012b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b7a:	f7ff ff46 	bl	8012a0a <__retarget_lock_release_recursive>
 8012b7e:	e7e9      	b.n	8012b54 <_vfiprintf_r+0x4c>
 8012b80:	2300      	movs	r3, #0
 8012b82:	9309      	str	r3, [sp, #36]	; 0x24
 8012b84:	2320      	movs	r3, #32
 8012b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b8e:	2330      	movs	r3, #48	; 0x30
 8012b90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012d54 <_vfiprintf_r+0x24c>
 8012b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b98:	f04f 0901 	mov.w	r9, #1
 8012b9c:	4623      	mov	r3, r4
 8012b9e:	469a      	mov	sl, r3
 8012ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ba4:	b10a      	cbz	r2, 8012baa <_vfiprintf_r+0xa2>
 8012ba6:	2a25      	cmp	r2, #37	; 0x25
 8012ba8:	d1f9      	bne.n	8012b9e <_vfiprintf_r+0x96>
 8012baa:	ebba 0b04 	subs.w	fp, sl, r4
 8012bae:	d00b      	beq.n	8012bc8 <_vfiprintf_r+0xc0>
 8012bb0:	465b      	mov	r3, fp
 8012bb2:	4622      	mov	r2, r4
 8012bb4:	4629      	mov	r1, r5
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	f7ff ff94 	bl	8012ae4 <__sfputs_r>
 8012bbc:	3001      	adds	r0, #1
 8012bbe:	f000 80aa 	beq.w	8012d16 <_vfiprintf_r+0x20e>
 8012bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bc4:	445a      	add	r2, fp
 8012bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8012bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	f000 80a2 	beq.w	8012d16 <_vfiprintf_r+0x20e>
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8012bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bdc:	f10a 0a01 	add.w	sl, sl, #1
 8012be0:	9304      	str	r3, [sp, #16]
 8012be2:	9307      	str	r3, [sp, #28]
 8012be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012be8:	931a      	str	r3, [sp, #104]	; 0x68
 8012bea:	4654      	mov	r4, sl
 8012bec:	2205      	movs	r2, #5
 8012bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bf2:	4858      	ldr	r0, [pc, #352]	; (8012d54 <_vfiprintf_r+0x24c>)
 8012bf4:	f7ed fb7c 	bl	80002f0 <memchr>
 8012bf8:	9a04      	ldr	r2, [sp, #16]
 8012bfa:	b9d8      	cbnz	r0, 8012c34 <_vfiprintf_r+0x12c>
 8012bfc:	06d1      	lsls	r1, r2, #27
 8012bfe:	bf44      	itt	mi
 8012c00:	2320      	movmi	r3, #32
 8012c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c06:	0713      	lsls	r3, r2, #28
 8012c08:	bf44      	itt	mi
 8012c0a:	232b      	movmi	r3, #43	; 0x2b
 8012c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c10:	f89a 3000 	ldrb.w	r3, [sl]
 8012c14:	2b2a      	cmp	r3, #42	; 0x2a
 8012c16:	d015      	beq.n	8012c44 <_vfiprintf_r+0x13c>
 8012c18:	9a07      	ldr	r2, [sp, #28]
 8012c1a:	4654      	mov	r4, sl
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	f04f 0c0a 	mov.w	ip, #10
 8012c22:	4621      	mov	r1, r4
 8012c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c28:	3b30      	subs	r3, #48	; 0x30
 8012c2a:	2b09      	cmp	r3, #9
 8012c2c:	d94e      	bls.n	8012ccc <_vfiprintf_r+0x1c4>
 8012c2e:	b1b0      	cbz	r0, 8012c5e <_vfiprintf_r+0x156>
 8012c30:	9207      	str	r2, [sp, #28]
 8012c32:	e014      	b.n	8012c5e <_vfiprintf_r+0x156>
 8012c34:	eba0 0308 	sub.w	r3, r0, r8
 8012c38:	fa09 f303 	lsl.w	r3, r9, r3
 8012c3c:	4313      	orrs	r3, r2
 8012c3e:	9304      	str	r3, [sp, #16]
 8012c40:	46a2      	mov	sl, r4
 8012c42:	e7d2      	b.n	8012bea <_vfiprintf_r+0xe2>
 8012c44:	9b03      	ldr	r3, [sp, #12]
 8012c46:	1d19      	adds	r1, r3, #4
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	9103      	str	r1, [sp, #12]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	bfbb      	ittet	lt
 8012c50:	425b      	neglt	r3, r3
 8012c52:	f042 0202 	orrlt.w	r2, r2, #2
 8012c56:	9307      	strge	r3, [sp, #28]
 8012c58:	9307      	strlt	r3, [sp, #28]
 8012c5a:	bfb8      	it	lt
 8012c5c:	9204      	strlt	r2, [sp, #16]
 8012c5e:	7823      	ldrb	r3, [r4, #0]
 8012c60:	2b2e      	cmp	r3, #46	; 0x2e
 8012c62:	d10c      	bne.n	8012c7e <_vfiprintf_r+0x176>
 8012c64:	7863      	ldrb	r3, [r4, #1]
 8012c66:	2b2a      	cmp	r3, #42	; 0x2a
 8012c68:	d135      	bne.n	8012cd6 <_vfiprintf_r+0x1ce>
 8012c6a:	9b03      	ldr	r3, [sp, #12]
 8012c6c:	1d1a      	adds	r2, r3, #4
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	9203      	str	r2, [sp, #12]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	bfb8      	it	lt
 8012c76:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c7a:	3402      	adds	r4, #2
 8012c7c:	9305      	str	r3, [sp, #20]
 8012c7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012d64 <_vfiprintf_r+0x25c>
 8012c82:	7821      	ldrb	r1, [r4, #0]
 8012c84:	2203      	movs	r2, #3
 8012c86:	4650      	mov	r0, sl
 8012c88:	f7ed fb32 	bl	80002f0 <memchr>
 8012c8c:	b140      	cbz	r0, 8012ca0 <_vfiprintf_r+0x198>
 8012c8e:	2340      	movs	r3, #64	; 0x40
 8012c90:	eba0 000a 	sub.w	r0, r0, sl
 8012c94:	fa03 f000 	lsl.w	r0, r3, r0
 8012c98:	9b04      	ldr	r3, [sp, #16]
 8012c9a:	4303      	orrs	r3, r0
 8012c9c:	3401      	adds	r4, #1
 8012c9e:	9304      	str	r3, [sp, #16]
 8012ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca4:	482c      	ldr	r0, [pc, #176]	; (8012d58 <_vfiprintf_r+0x250>)
 8012ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012caa:	2206      	movs	r2, #6
 8012cac:	f7ed fb20 	bl	80002f0 <memchr>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d03f      	beq.n	8012d34 <_vfiprintf_r+0x22c>
 8012cb4:	4b29      	ldr	r3, [pc, #164]	; (8012d5c <_vfiprintf_r+0x254>)
 8012cb6:	bb1b      	cbnz	r3, 8012d00 <_vfiprintf_r+0x1f8>
 8012cb8:	9b03      	ldr	r3, [sp, #12]
 8012cba:	3307      	adds	r3, #7
 8012cbc:	f023 0307 	bic.w	r3, r3, #7
 8012cc0:	3308      	adds	r3, #8
 8012cc2:	9303      	str	r3, [sp, #12]
 8012cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cc6:	443b      	add	r3, r7
 8012cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8012cca:	e767      	b.n	8012b9c <_vfiprintf_r+0x94>
 8012ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cd0:	460c      	mov	r4, r1
 8012cd2:	2001      	movs	r0, #1
 8012cd4:	e7a5      	b.n	8012c22 <_vfiprintf_r+0x11a>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	3401      	adds	r4, #1
 8012cda:	9305      	str	r3, [sp, #20]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	f04f 0c0a 	mov.w	ip, #10
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ce8:	3a30      	subs	r2, #48	; 0x30
 8012cea:	2a09      	cmp	r2, #9
 8012cec:	d903      	bls.n	8012cf6 <_vfiprintf_r+0x1ee>
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d0c5      	beq.n	8012c7e <_vfiprintf_r+0x176>
 8012cf2:	9105      	str	r1, [sp, #20]
 8012cf4:	e7c3      	b.n	8012c7e <_vfiprintf_r+0x176>
 8012cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e7f0      	b.n	8012ce2 <_vfiprintf_r+0x1da>
 8012d00:	ab03      	add	r3, sp, #12
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	462a      	mov	r2, r5
 8012d06:	4b16      	ldr	r3, [pc, #88]	; (8012d60 <_vfiprintf_r+0x258>)
 8012d08:	a904      	add	r1, sp, #16
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f7fb fa58 	bl	800e1c0 <_printf_float>
 8012d10:	4607      	mov	r7, r0
 8012d12:	1c78      	adds	r0, r7, #1
 8012d14:	d1d6      	bne.n	8012cc4 <_vfiprintf_r+0x1bc>
 8012d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d18:	07d9      	lsls	r1, r3, #31
 8012d1a:	d405      	bmi.n	8012d28 <_vfiprintf_r+0x220>
 8012d1c:	89ab      	ldrh	r3, [r5, #12]
 8012d1e:	059a      	lsls	r2, r3, #22
 8012d20:	d402      	bmi.n	8012d28 <_vfiprintf_r+0x220>
 8012d22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d24:	f7ff fe71 	bl	8012a0a <__retarget_lock_release_recursive>
 8012d28:	89ab      	ldrh	r3, [r5, #12]
 8012d2a:	065b      	lsls	r3, r3, #25
 8012d2c:	f53f af12 	bmi.w	8012b54 <_vfiprintf_r+0x4c>
 8012d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d32:	e711      	b.n	8012b58 <_vfiprintf_r+0x50>
 8012d34:	ab03      	add	r3, sp, #12
 8012d36:	9300      	str	r3, [sp, #0]
 8012d38:	462a      	mov	r2, r5
 8012d3a:	4b09      	ldr	r3, [pc, #36]	; (8012d60 <_vfiprintf_r+0x258>)
 8012d3c:	a904      	add	r1, sp, #16
 8012d3e:	4630      	mov	r0, r6
 8012d40:	f7fb fcca 	bl	800e6d8 <_printf_i>
 8012d44:	e7e4      	b.n	8012d10 <_vfiprintf_r+0x208>
 8012d46:	bf00      	nop
 8012d48:	080145ac 	.word	0x080145ac
 8012d4c:	080145cc 	.word	0x080145cc
 8012d50:	0801458c 	.word	0x0801458c
 8012d54:	08014524 	.word	0x08014524
 8012d58:	0801452e 	.word	0x0801452e
 8012d5c:	0800e1c1 	.word	0x0800e1c1
 8012d60:	08012ae5 	.word	0x08012ae5
 8012d64:	0801452a 	.word	0x0801452a

08012d68 <__swbuf_r>:
 8012d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d6a:	460e      	mov	r6, r1
 8012d6c:	4614      	mov	r4, r2
 8012d6e:	4605      	mov	r5, r0
 8012d70:	b118      	cbz	r0, 8012d7a <__swbuf_r+0x12>
 8012d72:	6983      	ldr	r3, [r0, #24]
 8012d74:	b90b      	cbnz	r3, 8012d7a <__swbuf_r+0x12>
 8012d76:	f7ff fd97 	bl	80128a8 <__sinit>
 8012d7a:	4b21      	ldr	r3, [pc, #132]	; (8012e00 <__swbuf_r+0x98>)
 8012d7c:	429c      	cmp	r4, r3
 8012d7e:	d12b      	bne.n	8012dd8 <__swbuf_r+0x70>
 8012d80:	686c      	ldr	r4, [r5, #4]
 8012d82:	69a3      	ldr	r3, [r4, #24]
 8012d84:	60a3      	str	r3, [r4, #8]
 8012d86:	89a3      	ldrh	r3, [r4, #12]
 8012d88:	071a      	lsls	r2, r3, #28
 8012d8a:	d52f      	bpl.n	8012dec <__swbuf_r+0x84>
 8012d8c:	6923      	ldr	r3, [r4, #16]
 8012d8e:	b36b      	cbz	r3, 8012dec <__swbuf_r+0x84>
 8012d90:	6923      	ldr	r3, [r4, #16]
 8012d92:	6820      	ldr	r0, [r4, #0]
 8012d94:	1ac0      	subs	r0, r0, r3
 8012d96:	6963      	ldr	r3, [r4, #20]
 8012d98:	b2f6      	uxtb	r6, r6
 8012d9a:	4283      	cmp	r3, r0
 8012d9c:	4637      	mov	r7, r6
 8012d9e:	dc04      	bgt.n	8012daa <__swbuf_r+0x42>
 8012da0:	4621      	mov	r1, r4
 8012da2:	4628      	mov	r0, r5
 8012da4:	f7ff fcec 	bl	8012780 <_fflush_r>
 8012da8:	bb30      	cbnz	r0, 8012df8 <__swbuf_r+0x90>
 8012daa:	68a3      	ldr	r3, [r4, #8]
 8012dac:	3b01      	subs	r3, #1
 8012dae:	60a3      	str	r3, [r4, #8]
 8012db0:	6823      	ldr	r3, [r4, #0]
 8012db2:	1c5a      	adds	r2, r3, #1
 8012db4:	6022      	str	r2, [r4, #0]
 8012db6:	701e      	strb	r6, [r3, #0]
 8012db8:	6963      	ldr	r3, [r4, #20]
 8012dba:	3001      	adds	r0, #1
 8012dbc:	4283      	cmp	r3, r0
 8012dbe:	d004      	beq.n	8012dca <__swbuf_r+0x62>
 8012dc0:	89a3      	ldrh	r3, [r4, #12]
 8012dc2:	07db      	lsls	r3, r3, #31
 8012dc4:	d506      	bpl.n	8012dd4 <__swbuf_r+0x6c>
 8012dc6:	2e0a      	cmp	r6, #10
 8012dc8:	d104      	bne.n	8012dd4 <__swbuf_r+0x6c>
 8012dca:	4621      	mov	r1, r4
 8012dcc:	4628      	mov	r0, r5
 8012dce:	f7ff fcd7 	bl	8012780 <_fflush_r>
 8012dd2:	b988      	cbnz	r0, 8012df8 <__swbuf_r+0x90>
 8012dd4:	4638      	mov	r0, r7
 8012dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd8:	4b0a      	ldr	r3, [pc, #40]	; (8012e04 <__swbuf_r+0x9c>)
 8012dda:	429c      	cmp	r4, r3
 8012ddc:	d101      	bne.n	8012de2 <__swbuf_r+0x7a>
 8012dde:	68ac      	ldr	r4, [r5, #8]
 8012de0:	e7cf      	b.n	8012d82 <__swbuf_r+0x1a>
 8012de2:	4b09      	ldr	r3, [pc, #36]	; (8012e08 <__swbuf_r+0xa0>)
 8012de4:	429c      	cmp	r4, r3
 8012de6:	bf08      	it	eq
 8012de8:	68ec      	ldreq	r4, [r5, #12]
 8012dea:	e7ca      	b.n	8012d82 <__swbuf_r+0x1a>
 8012dec:	4621      	mov	r1, r4
 8012dee:	4628      	mov	r0, r5
 8012df0:	f000 f80c 	bl	8012e0c <__swsetup_r>
 8012df4:	2800      	cmp	r0, #0
 8012df6:	d0cb      	beq.n	8012d90 <__swbuf_r+0x28>
 8012df8:	f04f 37ff 	mov.w	r7, #4294967295
 8012dfc:	e7ea      	b.n	8012dd4 <__swbuf_r+0x6c>
 8012dfe:	bf00      	nop
 8012e00:	080145ac 	.word	0x080145ac
 8012e04:	080145cc 	.word	0x080145cc
 8012e08:	0801458c 	.word	0x0801458c

08012e0c <__swsetup_r>:
 8012e0c:	4b32      	ldr	r3, [pc, #200]	; (8012ed8 <__swsetup_r+0xcc>)
 8012e0e:	b570      	push	{r4, r5, r6, lr}
 8012e10:	681d      	ldr	r5, [r3, #0]
 8012e12:	4606      	mov	r6, r0
 8012e14:	460c      	mov	r4, r1
 8012e16:	b125      	cbz	r5, 8012e22 <__swsetup_r+0x16>
 8012e18:	69ab      	ldr	r3, [r5, #24]
 8012e1a:	b913      	cbnz	r3, 8012e22 <__swsetup_r+0x16>
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	f7ff fd43 	bl	80128a8 <__sinit>
 8012e22:	4b2e      	ldr	r3, [pc, #184]	; (8012edc <__swsetup_r+0xd0>)
 8012e24:	429c      	cmp	r4, r3
 8012e26:	d10f      	bne.n	8012e48 <__swsetup_r+0x3c>
 8012e28:	686c      	ldr	r4, [r5, #4]
 8012e2a:	89a3      	ldrh	r3, [r4, #12]
 8012e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e30:	0719      	lsls	r1, r3, #28
 8012e32:	d42c      	bmi.n	8012e8e <__swsetup_r+0x82>
 8012e34:	06dd      	lsls	r5, r3, #27
 8012e36:	d411      	bmi.n	8012e5c <__swsetup_r+0x50>
 8012e38:	2309      	movs	r3, #9
 8012e3a:	6033      	str	r3, [r6, #0]
 8012e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012e40:	81a3      	strh	r3, [r4, #12]
 8012e42:	f04f 30ff 	mov.w	r0, #4294967295
 8012e46:	e03e      	b.n	8012ec6 <__swsetup_r+0xba>
 8012e48:	4b25      	ldr	r3, [pc, #148]	; (8012ee0 <__swsetup_r+0xd4>)
 8012e4a:	429c      	cmp	r4, r3
 8012e4c:	d101      	bne.n	8012e52 <__swsetup_r+0x46>
 8012e4e:	68ac      	ldr	r4, [r5, #8]
 8012e50:	e7eb      	b.n	8012e2a <__swsetup_r+0x1e>
 8012e52:	4b24      	ldr	r3, [pc, #144]	; (8012ee4 <__swsetup_r+0xd8>)
 8012e54:	429c      	cmp	r4, r3
 8012e56:	bf08      	it	eq
 8012e58:	68ec      	ldreq	r4, [r5, #12]
 8012e5a:	e7e6      	b.n	8012e2a <__swsetup_r+0x1e>
 8012e5c:	0758      	lsls	r0, r3, #29
 8012e5e:	d512      	bpl.n	8012e86 <__swsetup_r+0x7a>
 8012e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e62:	b141      	cbz	r1, 8012e76 <__swsetup_r+0x6a>
 8012e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e68:	4299      	cmp	r1, r3
 8012e6a:	d002      	beq.n	8012e72 <__swsetup_r+0x66>
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	f7fe fd51 	bl	8011914 <_free_r>
 8012e72:	2300      	movs	r3, #0
 8012e74:	6363      	str	r3, [r4, #52]	; 0x34
 8012e76:	89a3      	ldrh	r3, [r4, #12]
 8012e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012e7c:	81a3      	strh	r3, [r4, #12]
 8012e7e:	2300      	movs	r3, #0
 8012e80:	6063      	str	r3, [r4, #4]
 8012e82:	6923      	ldr	r3, [r4, #16]
 8012e84:	6023      	str	r3, [r4, #0]
 8012e86:	89a3      	ldrh	r3, [r4, #12]
 8012e88:	f043 0308 	orr.w	r3, r3, #8
 8012e8c:	81a3      	strh	r3, [r4, #12]
 8012e8e:	6923      	ldr	r3, [r4, #16]
 8012e90:	b94b      	cbnz	r3, 8012ea6 <__swsetup_r+0x9a>
 8012e92:	89a3      	ldrh	r3, [r4, #12]
 8012e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e9c:	d003      	beq.n	8012ea6 <__swsetup_r+0x9a>
 8012e9e:	4621      	mov	r1, r4
 8012ea0:	4630      	mov	r0, r6
 8012ea2:	f000 f84d 	bl	8012f40 <__smakebuf_r>
 8012ea6:	89a0      	ldrh	r0, [r4, #12]
 8012ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012eac:	f010 0301 	ands.w	r3, r0, #1
 8012eb0:	d00a      	beq.n	8012ec8 <__swsetup_r+0xbc>
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	60a3      	str	r3, [r4, #8]
 8012eb6:	6963      	ldr	r3, [r4, #20]
 8012eb8:	425b      	negs	r3, r3
 8012eba:	61a3      	str	r3, [r4, #24]
 8012ebc:	6923      	ldr	r3, [r4, #16]
 8012ebe:	b943      	cbnz	r3, 8012ed2 <__swsetup_r+0xc6>
 8012ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012ec4:	d1ba      	bne.n	8012e3c <__swsetup_r+0x30>
 8012ec6:	bd70      	pop	{r4, r5, r6, pc}
 8012ec8:	0781      	lsls	r1, r0, #30
 8012eca:	bf58      	it	pl
 8012ecc:	6963      	ldrpl	r3, [r4, #20]
 8012ece:	60a3      	str	r3, [r4, #8]
 8012ed0:	e7f4      	b.n	8012ebc <__swsetup_r+0xb0>
 8012ed2:	2000      	movs	r0, #0
 8012ed4:	e7f7      	b.n	8012ec6 <__swsetup_r+0xba>
 8012ed6:	bf00      	nop
 8012ed8:	24000020 	.word	0x24000020
 8012edc:	080145ac 	.word	0x080145ac
 8012ee0:	080145cc 	.word	0x080145cc
 8012ee4:	0801458c 	.word	0x0801458c

08012ee8 <abort>:
 8012ee8:	b508      	push	{r3, lr}
 8012eea:	2006      	movs	r0, #6
 8012eec:	f000 f898 	bl	8013020 <raise>
 8012ef0:	2001      	movs	r0, #1
 8012ef2:	f7ef f9c7 	bl	8002284 <_exit>

08012ef6 <__swhatbuf_r>:
 8012ef6:	b570      	push	{r4, r5, r6, lr}
 8012ef8:	460e      	mov	r6, r1
 8012efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012efe:	2900      	cmp	r1, #0
 8012f00:	b096      	sub	sp, #88	; 0x58
 8012f02:	4614      	mov	r4, r2
 8012f04:	461d      	mov	r5, r3
 8012f06:	da08      	bge.n	8012f1a <__swhatbuf_r+0x24>
 8012f08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	602a      	str	r2, [r5, #0]
 8012f10:	061a      	lsls	r2, r3, #24
 8012f12:	d410      	bmi.n	8012f36 <__swhatbuf_r+0x40>
 8012f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f18:	e00e      	b.n	8012f38 <__swhatbuf_r+0x42>
 8012f1a:	466a      	mov	r2, sp
 8012f1c:	f000 f89c 	bl	8013058 <_fstat_r>
 8012f20:	2800      	cmp	r0, #0
 8012f22:	dbf1      	blt.n	8012f08 <__swhatbuf_r+0x12>
 8012f24:	9a01      	ldr	r2, [sp, #4]
 8012f26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012f2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012f2e:	425a      	negs	r2, r3
 8012f30:	415a      	adcs	r2, r3
 8012f32:	602a      	str	r2, [r5, #0]
 8012f34:	e7ee      	b.n	8012f14 <__swhatbuf_r+0x1e>
 8012f36:	2340      	movs	r3, #64	; 0x40
 8012f38:	2000      	movs	r0, #0
 8012f3a:	6023      	str	r3, [r4, #0]
 8012f3c:	b016      	add	sp, #88	; 0x58
 8012f3e:	bd70      	pop	{r4, r5, r6, pc}

08012f40 <__smakebuf_r>:
 8012f40:	898b      	ldrh	r3, [r1, #12]
 8012f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f44:	079d      	lsls	r5, r3, #30
 8012f46:	4606      	mov	r6, r0
 8012f48:	460c      	mov	r4, r1
 8012f4a:	d507      	bpl.n	8012f5c <__smakebuf_r+0x1c>
 8012f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f50:	6023      	str	r3, [r4, #0]
 8012f52:	6123      	str	r3, [r4, #16]
 8012f54:	2301      	movs	r3, #1
 8012f56:	6163      	str	r3, [r4, #20]
 8012f58:	b002      	add	sp, #8
 8012f5a:	bd70      	pop	{r4, r5, r6, pc}
 8012f5c:	ab01      	add	r3, sp, #4
 8012f5e:	466a      	mov	r2, sp
 8012f60:	f7ff ffc9 	bl	8012ef6 <__swhatbuf_r>
 8012f64:	9900      	ldr	r1, [sp, #0]
 8012f66:	4605      	mov	r5, r0
 8012f68:	4630      	mov	r0, r6
 8012f6a:	f7fe fd3f 	bl	80119ec <_malloc_r>
 8012f6e:	b948      	cbnz	r0, 8012f84 <__smakebuf_r+0x44>
 8012f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f74:	059a      	lsls	r2, r3, #22
 8012f76:	d4ef      	bmi.n	8012f58 <__smakebuf_r+0x18>
 8012f78:	f023 0303 	bic.w	r3, r3, #3
 8012f7c:	f043 0302 	orr.w	r3, r3, #2
 8012f80:	81a3      	strh	r3, [r4, #12]
 8012f82:	e7e3      	b.n	8012f4c <__smakebuf_r+0xc>
 8012f84:	4b0d      	ldr	r3, [pc, #52]	; (8012fbc <__smakebuf_r+0x7c>)
 8012f86:	62b3      	str	r3, [r6, #40]	; 0x28
 8012f88:	89a3      	ldrh	r3, [r4, #12]
 8012f8a:	6020      	str	r0, [r4, #0]
 8012f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f90:	81a3      	strh	r3, [r4, #12]
 8012f92:	9b00      	ldr	r3, [sp, #0]
 8012f94:	6163      	str	r3, [r4, #20]
 8012f96:	9b01      	ldr	r3, [sp, #4]
 8012f98:	6120      	str	r0, [r4, #16]
 8012f9a:	b15b      	cbz	r3, 8012fb4 <__smakebuf_r+0x74>
 8012f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	f000 f86b 	bl	801307c <_isatty_r>
 8012fa6:	b128      	cbz	r0, 8012fb4 <__smakebuf_r+0x74>
 8012fa8:	89a3      	ldrh	r3, [r4, #12]
 8012faa:	f023 0303 	bic.w	r3, r3, #3
 8012fae:	f043 0301 	orr.w	r3, r3, #1
 8012fb2:	81a3      	strh	r3, [r4, #12]
 8012fb4:	89a0      	ldrh	r0, [r4, #12]
 8012fb6:	4305      	orrs	r5, r0
 8012fb8:	81a5      	strh	r5, [r4, #12]
 8012fba:	e7cd      	b.n	8012f58 <__smakebuf_r+0x18>
 8012fbc:	08012841 	.word	0x08012841

08012fc0 <_malloc_usable_size_r>:
 8012fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fc4:	1f18      	subs	r0, r3, #4
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	bfbc      	itt	lt
 8012fca:	580b      	ldrlt	r3, [r1, r0]
 8012fcc:	18c0      	addlt	r0, r0, r3
 8012fce:	4770      	bx	lr

08012fd0 <_raise_r>:
 8012fd0:	291f      	cmp	r1, #31
 8012fd2:	b538      	push	{r3, r4, r5, lr}
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	460d      	mov	r5, r1
 8012fd8:	d904      	bls.n	8012fe4 <_raise_r+0x14>
 8012fda:	2316      	movs	r3, #22
 8012fdc:	6003      	str	r3, [r0, #0]
 8012fde:	f04f 30ff 	mov.w	r0, #4294967295
 8012fe2:	bd38      	pop	{r3, r4, r5, pc}
 8012fe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012fe6:	b112      	cbz	r2, 8012fee <_raise_r+0x1e>
 8012fe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012fec:	b94b      	cbnz	r3, 8013002 <_raise_r+0x32>
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f000 f830 	bl	8013054 <_getpid_r>
 8012ff4:	462a      	mov	r2, r5
 8012ff6:	4601      	mov	r1, r0
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ffe:	f000 b817 	b.w	8013030 <_kill_r>
 8013002:	2b01      	cmp	r3, #1
 8013004:	d00a      	beq.n	801301c <_raise_r+0x4c>
 8013006:	1c59      	adds	r1, r3, #1
 8013008:	d103      	bne.n	8013012 <_raise_r+0x42>
 801300a:	2316      	movs	r3, #22
 801300c:	6003      	str	r3, [r0, #0]
 801300e:	2001      	movs	r0, #1
 8013010:	e7e7      	b.n	8012fe2 <_raise_r+0x12>
 8013012:	2400      	movs	r4, #0
 8013014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013018:	4628      	mov	r0, r5
 801301a:	4798      	blx	r3
 801301c:	2000      	movs	r0, #0
 801301e:	e7e0      	b.n	8012fe2 <_raise_r+0x12>

08013020 <raise>:
 8013020:	4b02      	ldr	r3, [pc, #8]	; (801302c <raise+0xc>)
 8013022:	4601      	mov	r1, r0
 8013024:	6818      	ldr	r0, [r3, #0]
 8013026:	f7ff bfd3 	b.w	8012fd0 <_raise_r>
 801302a:	bf00      	nop
 801302c:	24000020 	.word	0x24000020

08013030 <_kill_r>:
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	4d07      	ldr	r5, [pc, #28]	; (8013050 <_kill_r+0x20>)
 8013034:	2300      	movs	r3, #0
 8013036:	4604      	mov	r4, r0
 8013038:	4608      	mov	r0, r1
 801303a:	4611      	mov	r1, r2
 801303c:	602b      	str	r3, [r5, #0]
 801303e:	f7ef f911 	bl	8002264 <_kill>
 8013042:	1c43      	adds	r3, r0, #1
 8013044:	d102      	bne.n	801304c <_kill_r+0x1c>
 8013046:	682b      	ldr	r3, [r5, #0]
 8013048:	b103      	cbz	r3, 801304c <_kill_r+0x1c>
 801304a:	6023      	str	r3, [r4, #0]
 801304c:	bd38      	pop	{r3, r4, r5, pc}
 801304e:	bf00      	nop
 8013050:	24005130 	.word	0x24005130

08013054 <_getpid_r>:
 8013054:	f7ef b8fe 	b.w	8002254 <_getpid>

08013058 <_fstat_r>:
 8013058:	b538      	push	{r3, r4, r5, lr}
 801305a:	4d07      	ldr	r5, [pc, #28]	; (8013078 <_fstat_r+0x20>)
 801305c:	2300      	movs	r3, #0
 801305e:	4604      	mov	r4, r0
 8013060:	4608      	mov	r0, r1
 8013062:	4611      	mov	r1, r2
 8013064:	602b      	str	r3, [r5, #0]
 8013066:	f7ef f95c 	bl	8002322 <_fstat>
 801306a:	1c43      	adds	r3, r0, #1
 801306c:	d102      	bne.n	8013074 <_fstat_r+0x1c>
 801306e:	682b      	ldr	r3, [r5, #0]
 8013070:	b103      	cbz	r3, 8013074 <_fstat_r+0x1c>
 8013072:	6023      	str	r3, [r4, #0]
 8013074:	bd38      	pop	{r3, r4, r5, pc}
 8013076:	bf00      	nop
 8013078:	24005130 	.word	0x24005130

0801307c <_isatty_r>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	4d06      	ldr	r5, [pc, #24]	; (8013098 <_isatty_r+0x1c>)
 8013080:	2300      	movs	r3, #0
 8013082:	4604      	mov	r4, r0
 8013084:	4608      	mov	r0, r1
 8013086:	602b      	str	r3, [r5, #0]
 8013088:	f7ef f95b 	bl	8002342 <_isatty>
 801308c:	1c43      	adds	r3, r0, #1
 801308e:	d102      	bne.n	8013096 <_isatty_r+0x1a>
 8013090:	682b      	ldr	r3, [r5, #0]
 8013092:	b103      	cbz	r3, 8013096 <_isatty_r+0x1a>
 8013094:	6023      	str	r3, [r4, #0]
 8013096:	bd38      	pop	{r3, r4, r5, pc}
 8013098:	24005130 	.word	0x24005130

0801309c <checkint>:
 801309c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80130a0:	2b7e      	cmp	r3, #126	; 0x7e
 80130a2:	dd10      	ble.n	80130c6 <checkint+0x2a>
 80130a4:	2b96      	cmp	r3, #150	; 0x96
 80130a6:	dc0c      	bgt.n	80130c2 <checkint+0x26>
 80130a8:	2201      	movs	r2, #1
 80130aa:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80130ae:	fa02 f303 	lsl.w	r3, r2, r3
 80130b2:	1e5a      	subs	r2, r3, #1
 80130b4:	4202      	tst	r2, r0
 80130b6:	d106      	bne.n	80130c6 <checkint+0x2a>
 80130b8:	4203      	tst	r3, r0
 80130ba:	bf0c      	ite	eq
 80130bc:	2002      	moveq	r0, #2
 80130be:	2001      	movne	r0, #1
 80130c0:	4770      	bx	lr
 80130c2:	2002      	movs	r0, #2
 80130c4:	4770      	bx	lr
 80130c6:	2000      	movs	r0, #0
 80130c8:	4770      	bx	lr
 80130ca:	0000      	movs	r0, r0
 80130cc:	0000      	movs	r0, r0
	...

080130d0 <powf>:
 80130d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130d2:	ee10 1a10 	vmov	r1, s0
 80130d6:	ee10 4a90 	vmov	r4, s1
 80130da:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80130de:	0062      	lsls	r2, r4, #1
 80130e0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80130e4:	eef0 7a40 	vmov.f32	s15, s0
 80130e8:	f102 30ff 	add.w	r0, r2, #4294967295
 80130ec:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80130f0:	d252      	bcs.n	8013198 <powf+0xc8>
 80130f2:	4298      	cmp	r0, r3
 80130f4:	d252      	bcs.n	801319c <powf+0xcc>
 80130f6:	2000      	movs	r0, #0
 80130f8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80130fc:	4ca0      	ldr	r4, [pc, #640]	; (8013380 <powf+0x2b0>)
 80130fe:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8013102:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8013106:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801310a:	0dd2      	lsrs	r2, r2, #23
 801310c:	05d2      	lsls	r2, r2, #23
 801310e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8013112:	1a8b      	subs	r3, r1, r2
 8013114:	ed95 6b00 	vldr	d6, [r5]
 8013118:	ee07 3a90 	vmov	s15, r3
 801311c:	15d2      	asrs	r2, r2, #23
 801311e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013122:	eea6 5b07 	vfma.f64	d5, d6, d7
 8013126:	ed95 6b02 	vldr	d6, [r5, #8]
 801312a:	ee25 2b05 	vmul.f64	d2, d5, d5
 801312e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8013132:	ee07 2a90 	vmov	s15, r2
 8013136:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801313a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801313e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013142:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8013146:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801314a:	eea5 3b06 	vfma.f64	d3, d5, d6
 801314e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8013152:	eea5 6b04 	vfma.f64	d6, d5, d4
 8013156:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801315a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801315e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8013162:	eea2 7b06 	vfma.f64	d7, d2, d6
 8013166:	eea3 7b01 	vfma.f64	d7, d3, d1
 801316a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801316e:	ee10 3a90 	vmov	r3, s1
 8013172:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8013176:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801317a:	429a      	cmp	r2, r3
 801317c:	f0c0 80b1 	bcc.w	80132e2 <powf+0x212>
 8013180:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8013360 <powf+0x290>
 8013184:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318c:	dd79      	ble.n	8013282 <powf+0x1b2>
 801318e:	b003      	add	sp, #12
 8013190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013194:	f000 bddc 	b.w	8013d50 <__math_oflowf>
 8013198:	4298      	cmp	r0, r3
 801319a:	d32d      	bcc.n	80131f8 <powf+0x128>
 801319c:	b952      	cbnz	r2, 80131b4 <powf+0xe4>
 801319e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80131a2:	005b      	lsls	r3, r3, #1
 80131a4:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80131a8:	f240 80c9 	bls.w	801333e <powf+0x26e>
 80131ac:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80131b0:	b003      	add	sp, #12
 80131b2:	bd30      	pop	{r4, r5, pc}
 80131b4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80131b8:	d105      	bne.n	80131c6 <powf+0xf6>
 80131ba:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80131be:	0064      	lsls	r4, r4, #1
 80131c0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80131c4:	e7f0      	b.n	80131a8 <powf+0xd8>
 80131c6:	004b      	lsls	r3, r1, #1
 80131c8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80131cc:	d8ee      	bhi.n	80131ac <powf+0xdc>
 80131ce:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80131d2:	d1eb      	bne.n	80131ac <powf+0xdc>
 80131d4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80131d8:	f000 80b1 	beq.w	801333e <powf+0x26e>
 80131dc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80131e0:	ea6f 0404 	mvn.w	r4, r4
 80131e4:	bf34      	ite	cc
 80131e6:	2300      	movcc	r3, #0
 80131e8:	2301      	movcs	r3, #1
 80131ea:	0fe4      	lsrs	r4, r4, #31
 80131ec:	42a3      	cmp	r3, r4
 80131ee:	f040 80a9 	bne.w	8013344 <powf+0x274>
 80131f2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80131f6:	e7db      	b.n	80131b0 <powf+0xe0>
 80131f8:	004d      	lsls	r5, r1, #1
 80131fa:	1e6a      	subs	r2, r5, #1
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d31c      	bcc.n	801323a <powf+0x16a>
 8013200:	2900      	cmp	r1, #0
 8013202:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013206:	da0f      	bge.n	8013228 <powf+0x158>
 8013208:	ee10 0a90 	vmov	r0, s1
 801320c:	f7ff ff46 	bl	801309c <checkint>
 8013210:	2801      	cmp	r0, #1
 8013212:	d109      	bne.n	8013228 <powf+0x158>
 8013214:	eeb1 0a40 	vneg.f32	s0, s0
 8013218:	b945      	cbnz	r5, 801322c <powf+0x15c>
 801321a:	2c00      	cmp	r4, #0
 801321c:	dac8      	bge.n	80131b0 <powf+0xe0>
 801321e:	b003      	add	sp, #12
 8013220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013224:	f000 bd9a 	b.w	8013d5c <__math_divzerof>
 8013228:	2000      	movs	r0, #0
 801322a:	e7f5      	b.n	8013218 <powf+0x148>
 801322c:	2c00      	cmp	r4, #0
 801322e:	dabf      	bge.n	80131b0 <powf+0xe0>
 8013230:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013234:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013238:	e7ba      	b.n	80131b0 <powf+0xe0>
 801323a:	2900      	cmp	r1, #0
 801323c:	da1f      	bge.n	801327e <powf+0x1ae>
 801323e:	ee10 0a90 	vmov	r0, s1
 8013242:	f7ff ff2b 	bl	801309c <checkint>
 8013246:	b920      	cbnz	r0, 8013252 <powf+0x182>
 8013248:	b003      	add	sp, #12
 801324a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801324e:	f000 bd95 	b.w	8013d7c <__math_invalidf>
 8013252:	2801      	cmp	r0, #1
 8013254:	bf14      	ite	ne
 8013256:	2000      	movne	r0, #0
 8013258:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801325c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8013264:	f4bf af48 	bcs.w	80130f8 <powf+0x28>
 8013268:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8013384 <powf+0x2b4>
 801326c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013270:	ee10 3a10 	vmov	r3, s0
 8013274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013278:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801327c:	e73c      	b.n	80130f8 <powf+0x28>
 801327e:	2000      	movs	r0, #0
 8013280:	e7ee      	b.n	8013260 <powf+0x190>
 8013282:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8013368 <powf+0x298>
 8013286:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328e:	dd10      	ble.n	80132b2 <powf+0x1e2>
 8013290:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8013294:	2800      	cmp	r0, #0
 8013296:	d158      	bne.n	801334a <powf+0x27a>
 8013298:	9300      	str	r3, [sp, #0]
 801329a:	eddd 7a00 	vldr	s15, [sp]
 801329e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80132a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80132a6:	eef4 7a47 	vcmp.f32	s15, s14
 80132aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ae:	f47f af6e 	bne.w	801318e <powf+0xbe>
 80132b2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013370 <powf+0x2a0>
 80132b6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80132ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132be:	d804      	bhi.n	80132ca <powf+0x1fa>
 80132c0:	b003      	add	sp, #12
 80132c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132c6:	f000 bd37 	b.w	8013d38 <__math_uflowf>
 80132ca:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8013378 <powf+0x2a8>
 80132ce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80132d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d6:	d504      	bpl.n	80132e2 <powf+0x212>
 80132d8:	b003      	add	sp, #12
 80132da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132de:	f000 bd31 	b.w	8013d44 <__math_may_uflowf>
 80132e2:	4b29      	ldr	r3, [pc, #164]	; (8013388 <powf+0x2b8>)
 80132e4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80132e8:	ee30 6b07 	vadd.f64	d6, d0, d7
 80132ec:	ee16 2a10 	vmov	r2, s12
 80132f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80132f4:	f002 011f 	and.w	r1, r2, #31
 80132f8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80132fc:	ee30 7b47 	vsub.f64	d7, d0, d7
 8013300:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013304:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8013308:	ee27 4b07 	vmul.f64	d4, d7, d7
 801330c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8013310:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8013314:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013318:	686d      	ldr	r5, [r5, #4]
 801331a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801331e:	1882      	adds	r2, r0, r2
 8013320:	2300      	movs	r3, #0
 8013322:	1918      	adds	r0, r3, r4
 8013324:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8013328:	eea7 0b05 	vfma.f64	d0, d7, d5
 801332c:	ec41 0b17 	vmov	d7, r0, r1
 8013330:	eea6 0b04 	vfma.f64	d0, d6, d4
 8013334:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013338:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801333c:	e738      	b.n	80131b0 <powf+0xe0>
 801333e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013342:	e735      	b.n	80131b0 <powf+0xe0>
 8013344:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801338c <powf+0x2bc>
 8013348:	e732      	b.n	80131b0 <powf+0xe0>
 801334a:	9301      	str	r3, [sp, #4]
 801334c:	eddd 7a01 	vldr	s15, [sp, #4]
 8013350:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013358:	e7a5      	b.n	80132a6 <powf+0x1d6>
 801335a:	bf00      	nop
 801335c:	f3af 8000 	nop.w
 8013360:	ffd1d571 	.word	0xffd1d571
 8013364:	405fffff 	.word	0x405fffff
 8013368:	ffa3aae2 	.word	0xffa3aae2
 801336c:	405fffff 	.word	0x405fffff
 8013370:	00000000 	.word	0x00000000
 8013374:	c062c000 	.word	0xc062c000
 8013378:	00000000 	.word	0x00000000
 801337c:	c062a000 	.word	0xc062a000
 8013380:	080145f0 	.word	0x080145f0
 8013384:	4b000000 	.word	0x4b000000
 8013388:	08014ae8 	.word	0x08014ae8
 801338c:	00000000 	.word	0x00000000

08013390 <tanf>:
 8013390:	ee10 3a10 	vmov	r3, s0
 8013394:	b507      	push	{r0, r1, r2, lr}
 8013396:	4a12      	ldr	r2, [pc, #72]	; (80133e0 <tanf+0x50>)
 8013398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801339c:	4293      	cmp	r3, r2
 801339e:	dc07      	bgt.n	80133b0 <tanf+0x20>
 80133a0:	eddf 0a10 	vldr	s1, [pc, #64]	; 80133e4 <tanf+0x54>
 80133a4:	2001      	movs	r0, #1
 80133a6:	b003      	add	sp, #12
 80133a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80133ac:	f000 bbce 	b.w	8013b4c <__kernel_tanf>
 80133b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80133b4:	db04      	blt.n	80133c0 <tanf+0x30>
 80133b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80133ba:	b003      	add	sp, #12
 80133bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80133c0:	4668      	mov	r0, sp
 80133c2:	f000 f811 	bl	80133e8 <__ieee754_rem_pio2f>
 80133c6:	0040      	lsls	r0, r0, #1
 80133c8:	f000 0002 	and.w	r0, r0, #2
 80133cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80133d0:	ed9d 0a00 	vldr	s0, [sp]
 80133d4:	f1c0 0001 	rsb	r0, r0, #1
 80133d8:	f000 fbb8 	bl	8013b4c <__kernel_tanf>
 80133dc:	e7ed      	b.n	80133ba <tanf+0x2a>
 80133de:	bf00      	nop
 80133e0:	3f490fda 	.word	0x3f490fda
 80133e4:	00000000 	.word	0x00000000

080133e8 <__ieee754_rem_pio2f>:
 80133e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ea:	ee10 6a10 	vmov	r6, s0
 80133ee:	4b8e      	ldr	r3, [pc, #568]	; (8013628 <__ieee754_rem_pio2f+0x240>)
 80133f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80133f4:	429d      	cmp	r5, r3
 80133f6:	b087      	sub	sp, #28
 80133f8:	eef0 7a40 	vmov.f32	s15, s0
 80133fc:	4604      	mov	r4, r0
 80133fe:	dc05      	bgt.n	801340c <__ieee754_rem_pio2f+0x24>
 8013400:	2300      	movs	r3, #0
 8013402:	ed80 0a00 	vstr	s0, [r0]
 8013406:	6043      	str	r3, [r0, #4]
 8013408:	2000      	movs	r0, #0
 801340a:	e01a      	b.n	8013442 <__ieee754_rem_pio2f+0x5a>
 801340c:	4b87      	ldr	r3, [pc, #540]	; (801362c <__ieee754_rem_pio2f+0x244>)
 801340e:	429d      	cmp	r5, r3
 8013410:	dc46      	bgt.n	80134a0 <__ieee754_rem_pio2f+0xb8>
 8013412:	2e00      	cmp	r6, #0
 8013414:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013630 <__ieee754_rem_pio2f+0x248>
 8013418:	4b86      	ldr	r3, [pc, #536]	; (8013634 <__ieee754_rem_pio2f+0x24c>)
 801341a:	f025 050f 	bic.w	r5, r5, #15
 801341e:	dd1f      	ble.n	8013460 <__ieee754_rem_pio2f+0x78>
 8013420:	429d      	cmp	r5, r3
 8013422:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013426:	d00e      	beq.n	8013446 <__ieee754_rem_pio2f+0x5e>
 8013428:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013638 <__ieee754_rem_pio2f+0x250>
 801342c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013430:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013434:	ed80 0a00 	vstr	s0, [r0]
 8013438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801343c:	2001      	movs	r0, #1
 801343e:	edc4 7a01 	vstr	s15, [r4, #4]
 8013442:	b007      	add	sp, #28
 8013444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013446:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801363c <__ieee754_rem_pio2f+0x254>
 801344a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013640 <__ieee754_rem_pio2f+0x258>
 801344e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013452:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013456:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801345a:	edc0 6a00 	vstr	s13, [r0]
 801345e:	e7eb      	b.n	8013438 <__ieee754_rem_pio2f+0x50>
 8013460:	429d      	cmp	r5, r3
 8013462:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013466:	d00e      	beq.n	8013486 <__ieee754_rem_pio2f+0x9e>
 8013468:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013638 <__ieee754_rem_pio2f+0x250>
 801346c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013470:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013474:	ed80 0a00 	vstr	s0, [r0]
 8013478:	ee77 7a87 	vadd.f32	s15, s15, s14
 801347c:	f04f 30ff 	mov.w	r0, #4294967295
 8013480:	edc4 7a01 	vstr	s15, [r4, #4]
 8013484:	e7dd      	b.n	8013442 <__ieee754_rem_pio2f+0x5a>
 8013486:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801363c <__ieee754_rem_pio2f+0x254>
 801348a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013640 <__ieee754_rem_pio2f+0x258>
 801348e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013492:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801349a:	edc0 6a00 	vstr	s13, [r0]
 801349e:	e7eb      	b.n	8013478 <__ieee754_rem_pio2f+0x90>
 80134a0:	4b68      	ldr	r3, [pc, #416]	; (8013644 <__ieee754_rem_pio2f+0x25c>)
 80134a2:	429d      	cmp	r5, r3
 80134a4:	dc72      	bgt.n	801358c <__ieee754_rem_pio2f+0x1a4>
 80134a6:	f000 fc78 	bl	8013d9a <fabsf>
 80134aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013648 <__ieee754_rem_pio2f+0x260>
 80134ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80134b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80134b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80134be:	ee17 0a90 	vmov	r0, s15
 80134c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013630 <__ieee754_rem_pio2f+0x248>
 80134c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80134ca:	281f      	cmp	r0, #31
 80134cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013638 <__ieee754_rem_pio2f+0x250>
 80134d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134d4:	eeb1 6a47 	vneg.f32	s12, s14
 80134d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80134dc:	ee16 2a90 	vmov	r2, s13
 80134e0:	dc1c      	bgt.n	801351c <__ieee754_rem_pio2f+0x134>
 80134e2:	495a      	ldr	r1, [pc, #360]	; (801364c <__ieee754_rem_pio2f+0x264>)
 80134e4:	1e47      	subs	r7, r0, #1
 80134e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80134ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80134ee:	428b      	cmp	r3, r1
 80134f0:	d014      	beq.n	801351c <__ieee754_rem_pio2f+0x134>
 80134f2:	6022      	str	r2, [r4, #0]
 80134f4:	ed94 7a00 	vldr	s14, [r4]
 80134f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80134fc:	2e00      	cmp	r6, #0
 80134fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013502:	ed84 0a01 	vstr	s0, [r4, #4]
 8013506:	da9c      	bge.n	8013442 <__ieee754_rem_pio2f+0x5a>
 8013508:	eeb1 7a47 	vneg.f32	s14, s14
 801350c:	eeb1 0a40 	vneg.f32	s0, s0
 8013510:	ed84 7a00 	vstr	s14, [r4]
 8013514:	ed84 0a01 	vstr	s0, [r4, #4]
 8013518:	4240      	negs	r0, r0
 801351a:	e792      	b.n	8013442 <__ieee754_rem_pio2f+0x5a>
 801351c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013520:	15eb      	asrs	r3, r5, #23
 8013522:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8013526:	2d08      	cmp	r5, #8
 8013528:	dde3      	ble.n	80134f2 <__ieee754_rem_pio2f+0x10a>
 801352a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801363c <__ieee754_rem_pio2f+0x254>
 801352e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013640 <__ieee754_rem_pio2f+0x258>
 8013532:	eef0 6a40 	vmov.f32	s13, s0
 8013536:	eee6 6a27 	vfma.f32	s13, s12, s15
 801353a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801353e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8013542:	eef0 7a40 	vmov.f32	s15, s0
 8013546:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801354a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801354e:	ee15 2a90 	vmov	r2, s11
 8013552:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013556:	1a5b      	subs	r3, r3, r1
 8013558:	2b19      	cmp	r3, #25
 801355a:	dc04      	bgt.n	8013566 <__ieee754_rem_pio2f+0x17e>
 801355c:	edc4 5a00 	vstr	s11, [r4]
 8013560:	eeb0 0a66 	vmov.f32	s0, s13
 8013564:	e7c6      	b.n	80134f4 <__ieee754_rem_pio2f+0x10c>
 8013566:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013650 <__ieee754_rem_pio2f+0x268>
 801356a:	eeb0 0a66 	vmov.f32	s0, s13
 801356e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013572:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013576:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013654 <__ieee754_rem_pio2f+0x26c>
 801357a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801357e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013582:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013586:	ed84 7a00 	vstr	s14, [r4]
 801358a:	e7b3      	b.n	80134f4 <__ieee754_rem_pio2f+0x10c>
 801358c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013590:	db06      	blt.n	80135a0 <__ieee754_rem_pio2f+0x1b8>
 8013592:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013596:	edc0 7a01 	vstr	s15, [r0, #4]
 801359a:	edc0 7a00 	vstr	s15, [r0]
 801359e:	e733      	b.n	8013408 <__ieee754_rem_pio2f+0x20>
 80135a0:	15ea      	asrs	r2, r5, #23
 80135a2:	3a86      	subs	r2, #134	; 0x86
 80135a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80135a8:	ee07 3a90 	vmov	s15, r3
 80135ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80135b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013658 <__ieee754_rem_pio2f+0x270>
 80135b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 80135c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80135c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80135d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80135dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e0:	edcd 7a05 	vstr	s15, [sp, #20]
 80135e4:	d11e      	bne.n	8013624 <__ieee754_rem_pio2f+0x23c>
 80135e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80135ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ee:	bf14      	ite	ne
 80135f0:	2302      	movne	r3, #2
 80135f2:	2301      	moveq	r3, #1
 80135f4:	4919      	ldr	r1, [pc, #100]	; (801365c <__ieee754_rem_pio2f+0x274>)
 80135f6:	9101      	str	r1, [sp, #4]
 80135f8:	2102      	movs	r1, #2
 80135fa:	9100      	str	r1, [sp, #0]
 80135fc:	a803      	add	r0, sp, #12
 80135fe:	4621      	mov	r1, r4
 8013600:	f000 f82e 	bl	8013660 <__kernel_rem_pio2f>
 8013604:	2e00      	cmp	r6, #0
 8013606:	f6bf af1c 	bge.w	8013442 <__ieee754_rem_pio2f+0x5a>
 801360a:	edd4 7a00 	vldr	s15, [r4]
 801360e:	eef1 7a67 	vneg.f32	s15, s15
 8013612:	edc4 7a00 	vstr	s15, [r4]
 8013616:	edd4 7a01 	vldr	s15, [r4, #4]
 801361a:	eef1 7a67 	vneg.f32	s15, s15
 801361e:	edc4 7a01 	vstr	s15, [r4, #4]
 8013622:	e779      	b.n	8013518 <__ieee754_rem_pio2f+0x130>
 8013624:	2303      	movs	r3, #3
 8013626:	e7e5      	b.n	80135f4 <__ieee754_rem_pio2f+0x20c>
 8013628:	3f490fd8 	.word	0x3f490fd8
 801362c:	4016cbe3 	.word	0x4016cbe3
 8013630:	3fc90f80 	.word	0x3fc90f80
 8013634:	3fc90fd0 	.word	0x3fc90fd0
 8013638:	37354443 	.word	0x37354443
 801363c:	37354400 	.word	0x37354400
 8013640:	2e85a308 	.word	0x2e85a308
 8013644:	43490f80 	.word	0x43490f80
 8013648:	3f22f984 	.word	0x3f22f984
 801364c:	08014718 	.word	0x08014718
 8013650:	2e85a300 	.word	0x2e85a300
 8013654:	248d3132 	.word	0x248d3132
 8013658:	43800000 	.word	0x43800000
 801365c:	08014798 	.word	0x08014798

08013660 <__kernel_rem_pio2f>:
 8013660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013664:	ed2d 8b04 	vpush	{d8-d9}
 8013668:	b0d9      	sub	sp, #356	; 0x164
 801366a:	4688      	mov	r8, r1
 801366c:	9002      	str	r0, [sp, #8]
 801366e:	49bb      	ldr	r1, [pc, #748]	; (801395c <__kernel_rem_pio2f+0x2fc>)
 8013670:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013672:	9301      	str	r3, [sp, #4]
 8013674:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013678:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801367c:	1e59      	subs	r1, r3, #1
 801367e:	1d13      	adds	r3, r2, #4
 8013680:	db27      	blt.n	80136d2 <__kernel_rem_pio2f+0x72>
 8013682:	f1b2 0b03 	subs.w	fp, r2, #3
 8013686:	bf48      	it	mi
 8013688:	f102 0b04 	addmi.w	fp, r2, #4
 801368c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013690:	1c45      	adds	r5, r0, #1
 8013692:	00ec      	lsls	r4, r5, #3
 8013694:	1a47      	subs	r7, r0, r1
 8013696:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801396c <__kernel_rem_pio2f+0x30c>
 801369a:	9403      	str	r4, [sp, #12]
 801369c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80136a0:	eb0a 0c01 	add.w	ip, sl, r1
 80136a4:	ae1c      	add	r6, sp, #112	; 0x70
 80136a6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80136aa:	2400      	movs	r4, #0
 80136ac:	4564      	cmp	r4, ip
 80136ae:	dd12      	ble.n	80136d6 <__kernel_rem_pio2f+0x76>
 80136b0:	9b01      	ldr	r3, [sp, #4]
 80136b2:	ac1c      	add	r4, sp, #112	; 0x70
 80136b4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80136b8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80136bc:	f04f 0c00 	mov.w	ip, #0
 80136c0:	45d4      	cmp	ip, sl
 80136c2:	dc27      	bgt.n	8013714 <__kernel_rem_pio2f+0xb4>
 80136c4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80136c8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801396c <__kernel_rem_pio2f+0x30c>
 80136cc:	4627      	mov	r7, r4
 80136ce:	2600      	movs	r6, #0
 80136d0:	e016      	b.n	8013700 <__kernel_rem_pio2f+0xa0>
 80136d2:	2000      	movs	r0, #0
 80136d4:	e7dc      	b.n	8013690 <__kernel_rem_pio2f+0x30>
 80136d6:	42e7      	cmn	r7, r4
 80136d8:	bf5d      	ittte	pl
 80136da:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80136de:	ee07 3a90 	vmovpl	s15, r3
 80136e2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80136e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80136ea:	ece6 7a01 	vstmia	r6!, {s15}
 80136ee:	3401      	adds	r4, #1
 80136f0:	e7dc      	b.n	80136ac <__kernel_rem_pio2f+0x4c>
 80136f2:	ecf9 6a01 	vldmia	r9!, {s13}
 80136f6:	ed97 7a00 	vldr	s14, [r7]
 80136fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80136fe:	3601      	adds	r6, #1
 8013700:	428e      	cmp	r6, r1
 8013702:	f1a7 0704 	sub.w	r7, r7, #4
 8013706:	ddf4      	ble.n	80136f2 <__kernel_rem_pio2f+0x92>
 8013708:	eceb 7a01 	vstmia	fp!, {s15}
 801370c:	f10c 0c01 	add.w	ip, ip, #1
 8013710:	3404      	adds	r4, #4
 8013712:	e7d5      	b.n	80136c0 <__kernel_rem_pio2f+0x60>
 8013714:	ab08      	add	r3, sp, #32
 8013716:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801371a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8013968 <__kernel_rem_pio2f+0x308>
 801371e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013964 <__kernel_rem_pio2f+0x304>
 8013722:	9304      	str	r3, [sp, #16]
 8013724:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013728:	4656      	mov	r6, sl
 801372a:	00b3      	lsls	r3, r6, #2
 801372c:	9305      	str	r3, [sp, #20]
 801372e:	ab58      	add	r3, sp, #352	; 0x160
 8013730:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013734:	ac08      	add	r4, sp, #32
 8013736:	ab44      	add	r3, sp, #272	; 0x110
 8013738:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801373c:	46a4      	mov	ip, r4
 801373e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013742:	4637      	mov	r7, r6
 8013744:	2f00      	cmp	r7, #0
 8013746:	f1a0 0004 	sub.w	r0, r0, #4
 801374a:	dc4f      	bgt.n	80137ec <__kernel_rem_pio2f+0x18c>
 801374c:	4628      	mov	r0, r5
 801374e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013752:	f000 fb6b 	bl	8013e2c <scalbnf>
 8013756:	eeb0 8a40 	vmov.f32	s16, s0
 801375a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801375e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013762:	f000 fb21 	bl	8013da8 <floorf>
 8013766:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801376a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801376e:	2d00      	cmp	r5, #0
 8013770:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013774:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013778:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801377c:	ee17 9a90 	vmov	r9, s15
 8013780:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013784:	dd44      	ble.n	8013810 <__kernel_rem_pio2f+0x1b0>
 8013786:	f106 3cff 	add.w	ip, r6, #4294967295
 801378a:	ab08      	add	r3, sp, #32
 801378c:	f1c5 0e08 	rsb	lr, r5, #8
 8013790:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013794:	fa47 f00e 	asr.w	r0, r7, lr
 8013798:	4481      	add	r9, r0
 801379a:	fa00 f00e 	lsl.w	r0, r0, lr
 801379e:	1a3f      	subs	r7, r7, r0
 80137a0:	f1c5 0007 	rsb	r0, r5, #7
 80137a4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80137a8:	4107      	asrs	r7, r0
 80137aa:	2f00      	cmp	r7, #0
 80137ac:	dd3f      	ble.n	801382e <__kernel_rem_pio2f+0x1ce>
 80137ae:	f04f 0e00 	mov.w	lr, #0
 80137b2:	f109 0901 	add.w	r9, r9, #1
 80137b6:	4673      	mov	r3, lr
 80137b8:	4576      	cmp	r6, lr
 80137ba:	dc6b      	bgt.n	8013894 <__kernel_rem_pio2f+0x234>
 80137bc:	2d00      	cmp	r5, #0
 80137be:	dd04      	ble.n	80137ca <__kernel_rem_pio2f+0x16a>
 80137c0:	2d01      	cmp	r5, #1
 80137c2:	d078      	beq.n	80138b6 <__kernel_rem_pio2f+0x256>
 80137c4:	2d02      	cmp	r5, #2
 80137c6:	f000 8081 	beq.w	80138cc <__kernel_rem_pio2f+0x26c>
 80137ca:	2f02      	cmp	r7, #2
 80137cc:	d12f      	bne.n	801382e <__kernel_rem_pio2f+0x1ce>
 80137ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80137d2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80137d6:	b353      	cbz	r3, 801382e <__kernel_rem_pio2f+0x1ce>
 80137d8:	4628      	mov	r0, r5
 80137da:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80137de:	f000 fb25 	bl	8013e2c <scalbnf>
 80137e2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80137e6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80137ea:	e020      	b.n	801382e <__kernel_rem_pio2f+0x1ce>
 80137ec:	ee60 7a28 	vmul.f32	s15, s0, s17
 80137f0:	3f01      	subs	r7, #1
 80137f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137fa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80137fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013802:	ecac 0a01 	vstmia	ip!, {s0}
 8013806:	ed90 0a00 	vldr	s0, [r0]
 801380a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801380e:	e799      	b.n	8013744 <__kernel_rem_pio2f+0xe4>
 8013810:	d105      	bne.n	801381e <__kernel_rem_pio2f+0x1be>
 8013812:	1e70      	subs	r0, r6, #1
 8013814:	ab08      	add	r3, sp, #32
 8013816:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801381a:	11ff      	asrs	r7, r7, #7
 801381c:	e7c5      	b.n	80137aa <__kernel_rem_pio2f+0x14a>
 801381e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013822:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801382a:	da31      	bge.n	8013890 <__kernel_rem_pio2f+0x230>
 801382c:	2700      	movs	r7, #0
 801382e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013836:	f040 809b 	bne.w	8013970 <__kernel_rem_pio2f+0x310>
 801383a:	1e74      	subs	r4, r6, #1
 801383c:	46a4      	mov	ip, r4
 801383e:	2000      	movs	r0, #0
 8013840:	45d4      	cmp	ip, sl
 8013842:	da4a      	bge.n	80138da <__kernel_rem_pio2f+0x27a>
 8013844:	2800      	cmp	r0, #0
 8013846:	d07a      	beq.n	801393e <__kernel_rem_pio2f+0x2de>
 8013848:	ab08      	add	r3, sp, #32
 801384a:	3d08      	subs	r5, #8
 801384c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013850:	2b00      	cmp	r3, #0
 8013852:	f000 8081 	beq.w	8013958 <__kernel_rem_pio2f+0x2f8>
 8013856:	4628      	mov	r0, r5
 8013858:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801385c:	00a5      	lsls	r5, r4, #2
 801385e:	f000 fae5 	bl	8013e2c <scalbnf>
 8013862:	aa44      	add	r2, sp, #272	; 0x110
 8013864:	1d2b      	adds	r3, r5, #4
 8013866:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013968 <__kernel_rem_pio2f+0x308>
 801386a:	18d1      	adds	r1, r2, r3
 801386c:	4622      	mov	r2, r4
 801386e:	2a00      	cmp	r2, #0
 8013870:	f280 80ae 	bge.w	80139d0 <__kernel_rem_pio2f+0x370>
 8013874:	4622      	mov	r2, r4
 8013876:	2a00      	cmp	r2, #0
 8013878:	f2c0 80cc 	blt.w	8013a14 <__kernel_rem_pio2f+0x3b4>
 801387c:	a944      	add	r1, sp, #272	; 0x110
 801387e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013882:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013960 <__kernel_rem_pio2f+0x300>
 8013886:	eddf 7a39 	vldr	s15, [pc, #228]	; 801396c <__kernel_rem_pio2f+0x30c>
 801388a:	2000      	movs	r0, #0
 801388c:	1aa1      	subs	r1, r4, r2
 801388e:	e0b6      	b.n	80139fe <__kernel_rem_pio2f+0x39e>
 8013890:	2702      	movs	r7, #2
 8013892:	e78c      	b.n	80137ae <__kernel_rem_pio2f+0x14e>
 8013894:	6820      	ldr	r0, [r4, #0]
 8013896:	b94b      	cbnz	r3, 80138ac <__kernel_rem_pio2f+0x24c>
 8013898:	b118      	cbz	r0, 80138a2 <__kernel_rem_pio2f+0x242>
 801389a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801389e:	6020      	str	r0, [r4, #0]
 80138a0:	2001      	movs	r0, #1
 80138a2:	f10e 0e01 	add.w	lr, lr, #1
 80138a6:	3404      	adds	r4, #4
 80138a8:	4603      	mov	r3, r0
 80138aa:	e785      	b.n	80137b8 <__kernel_rem_pio2f+0x158>
 80138ac:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80138b0:	6020      	str	r0, [r4, #0]
 80138b2:	4618      	mov	r0, r3
 80138b4:	e7f5      	b.n	80138a2 <__kernel_rem_pio2f+0x242>
 80138b6:	1e74      	subs	r4, r6, #1
 80138b8:	a808      	add	r0, sp, #32
 80138ba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80138be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80138c2:	f10d 0c20 	add.w	ip, sp, #32
 80138c6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80138ca:	e77e      	b.n	80137ca <__kernel_rem_pio2f+0x16a>
 80138cc:	1e74      	subs	r4, r6, #1
 80138ce:	a808      	add	r0, sp, #32
 80138d0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80138d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80138d8:	e7f3      	b.n	80138c2 <__kernel_rem_pio2f+0x262>
 80138da:	ab08      	add	r3, sp, #32
 80138dc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80138e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80138e4:	4318      	orrs	r0, r3
 80138e6:	e7ab      	b.n	8013840 <__kernel_rem_pio2f+0x1e0>
 80138e8:	f10c 0c01 	add.w	ip, ip, #1
 80138ec:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80138f0:	2c00      	cmp	r4, #0
 80138f2:	d0f9      	beq.n	80138e8 <__kernel_rem_pio2f+0x288>
 80138f4:	9b05      	ldr	r3, [sp, #20]
 80138f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80138fa:	eb0d 0003 	add.w	r0, sp, r3
 80138fe:	9b01      	ldr	r3, [sp, #4]
 8013900:	18f4      	adds	r4, r6, r3
 8013902:	ab1c      	add	r3, sp, #112	; 0x70
 8013904:	1c77      	adds	r7, r6, #1
 8013906:	384c      	subs	r0, #76	; 0x4c
 8013908:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801390c:	4466      	add	r6, ip
 801390e:	42be      	cmp	r6, r7
 8013910:	f6ff af0b 	blt.w	801372a <__kernel_rem_pio2f+0xca>
 8013914:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013918:	f8dd e008 	ldr.w	lr, [sp, #8]
 801391c:	ee07 3a90 	vmov	s15, r3
 8013920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013924:	f04f 0c00 	mov.w	ip, #0
 8013928:	ece4 7a01 	vstmia	r4!, {s15}
 801392c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801396c <__kernel_rem_pio2f+0x30c>
 8013930:	46a1      	mov	r9, r4
 8013932:	458c      	cmp	ip, r1
 8013934:	dd07      	ble.n	8013946 <__kernel_rem_pio2f+0x2e6>
 8013936:	ece0 7a01 	vstmia	r0!, {s15}
 801393a:	3701      	adds	r7, #1
 801393c:	e7e7      	b.n	801390e <__kernel_rem_pio2f+0x2ae>
 801393e:	9804      	ldr	r0, [sp, #16]
 8013940:	f04f 0c01 	mov.w	ip, #1
 8013944:	e7d2      	b.n	80138ec <__kernel_rem_pio2f+0x28c>
 8013946:	ecfe 6a01 	vldmia	lr!, {s13}
 801394a:	ed39 7a01 	vldmdb	r9!, {s14}
 801394e:	f10c 0c01 	add.w	ip, ip, #1
 8013952:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013956:	e7ec      	b.n	8013932 <__kernel_rem_pio2f+0x2d2>
 8013958:	3c01      	subs	r4, #1
 801395a:	e775      	b.n	8013848 <__kernel_rem_pio2f+0x1e8>
 801395c:	08014adc 	.word	0x08014adc
 8013960:	08014ab0 	.word	0x08014ab0
 8013964:	43800000 	.word	0x43800000
 8013968:	3b800000 	.word	0x3b800000
 801396c:	00000000 	.word	0x00000000
 8013970:	9b03      	ldr	r3, [sp, #12]
 8013972:	eeb0 0a48 	vmov.f32	s0, s16
 8013976:	1a98      	subs	r0, r3, r2
 8013978:	f000 fa58 	bl	8013e2c <scalbnf>
 801397c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013964 <__kernel_rem_pio2f+0x304>
 8013980:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013988:	db19      	blt.n	80139be <__kernel_rem_pio2f+0x35e>
 801398a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013968 <__kernel_rem_pio2f+0x308>
 801398e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013992:	aa08      	add	r2, sp, #32
 8013994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013998:	1c74      	adds	r4, r6, #1
 801399a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801399e:	3508      	adds	r5, #8
 80139a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80139a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80139ac:	ee10 3a10 	vmov	r3, s0
 80139b0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80139b4:	ee17 3a90 	vmov	r3, s15
 80139b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80139bc:	e74b      	b.n	8013856 <__kernel_rem_pio2f+0x1f6>
 80139be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80139c2:	aa08      	add	r2, sp, #32
 80139c4:	ee10 3a10 	vmov	r3, s0
 80139c8:	4634      	mov	r4, r6
 80139ca:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80139ce:	e742      	b.n	8013856 <__kernel_rem_pio2f+0x1f6>
 80139d0:	a808      	add	r0, sp, #32
 80139d2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80139d6:	9001      	str	r0, [sp, #4]
 80139d8:	ee07 0a90 	vmov	s15, r0
 80139dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139e0:	3a01      	subs	r2, #1
 80139e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80139e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80139ea:	ed61 7a01 	vstmdb	r1!, {s15}
 80139ee:	e73e      	b.n	801386e <__kernel_rem_pio2f+0x20e>
 80139f0:	ecfc 6a01 	vldmia	ip!, {s13}
 80139f4:	ecb6 7a01 	vldmia	r6!, {s14}
 80139f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80139fc:	3001      	adds	r0, #1
 80139fe:	4550      	cmp	r0, sl
 8013a00:	dc01      	bgt.n	8013a06 <__kernel_rem_pio2f+0x3a6>
 8013a02:	4288      	cmp	r0, r1
 8013a04:	ddf4      	ble.n	80139f0 <__kernel_rem_pio2f+0x390>
 8013a06:	a858      	add	r0, sp, #352	; 0x160
 8013a08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a0c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013a10:	3a01      	subs	r2, #1
 8013a12:	e730      	b.n	8013876 <__kernel_rem_pio2f+0x216>
 8013a14:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013a16:	2a02      	cmp	r2, #2
 8013a18:	dc09      	bgt.n	8013a2e <__kernel_rem_pio2f+0x3ce>
 8013a1a:	2a00      	cmp	r2, #0
 8013a1c:	dc2a      	bgt.n	8013a74 <__kernel_rem_pio2f+0x414>
 8013a1e:	d043      	beq.n	8013aa8 <__kernel_rem_pio2f+0x448>
 8013a20:	f009 0007 	and.w	r0, r9, #7
 8013a24:	b059      	add	sp, #356	; 0x164
 8013a26:	ecbd 8b04 	vpop	{d8-d9}
 8013a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a2e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013a30:	2b03      	cmp	r3, #3
 8013a32:	d1f5      	bne.n	8013a20 <__kernel_rem_pio2f+0x3c0>
 8013a34:	ab30      	add	r3, sp, #192	; 0xc0
 8013a36:	442b      	add	r3, r5
 8013a38:	461a      	mov	r2, r3
 8013a3a:	4619      	mov	r1, r3
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	2800      	cmp	r0, #0
 8013a40:	f1a1 0104 	sub.w	r1, r1, #4
 8013a44:	dc51      	bgt.n	8013aea <__kernel_rem_pio2f+0x48a>
 8013a46:	4621      	mov	r1, r4
 8013a48:	2901      	cmp	r1, #1
 8013a4a:	f1a2 0204 	sub.w	r2, r2, #4
 8013a4e:	dc5c      	bgt.n	8013b0a <__kernel_rem_pio2f+0x4aa>
 8013a50:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801396c <__kernel_rem_pio2f+0x30c>
 8013a54:	3304      	adds	r3, #4
 8013a56:	2c01      	cmp	r4, #1
 8013a58:	dc67      	bgt.n	8013b2a <__kernel_rem_pio2f+0x4ca>
 8013a5a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013a5e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013a62:	2f00      	cmp	r7, #0
 8013a64:	d167      	bne.n	8013b36 <__kernel_rem_pio2f+0x4d6>
 8013a66:	edc8 6a00 	vstr	s13, [r8]
 8013a6a:	ed88 7a01 	vstr	s14, [r8, #4]
 8013a6e:	edc8 7a02 	vstr	s15, [r8, #8]
 8013a72:	e7d5      	b.n	8013a20 <__kernel_rem_pio2f+0x3c0>
 8013a74:	aa30      	add	r2, sp, #192	; 0xc0
 8013a76:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801396c <__kernel_rem_pio2f+0x30c>
 8013a7a:	4413      	add	r3, r2
 8013a7c:	4622      	mov	r2, r4
 8013a7e:	2a00      	cmp	r2, #0
 8013a80:	da24      	bge.n	8013acc <__kernel_rem_pio2f+0x46c>
 8013a82:	b34f      	cbz	r7, 8013ad8 <__kernel_rem_pio2f+0x478>
 8013a84:	eef1 7a47 	vneg.f32	s15, s14
 8013a88:	edc8 7a00 	vstr	s15, [r8]
 8013a8c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a94:	aa31      	add	r2, sp, #196	; 0xc4
 8013a96:	2301      	movs	r3, #1
 8013a98:	429c      	cmp	r4, r3
 8013a9a:	da20      	bge.n	8013ade <__kernel_rem_pio2f+0x47e>
 8013a9c:	b10f      	cbz	r7, 8013aa2 <__kernel_rem_pio2f+0x442>
 8013a9e:	eef1 7a67 	vneg.f32	s15, s15
 8013aa2:	edc8 7a01 	vstr	s15, [r8, #4]
 8013aa6:	e7bb      	b.n	8013a20 <__kernel_rem_pio2f+0x3c0>
 8013aa8:	aa30      	add	r2, sp, #192	; 0xc0
 8013aaa:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801396c <__kernel_rem_pio2f+0x30c>
 8013aae:	4413      	add	r3, r2
 8013ab0:	2c00      	cmp	r4, #0
 8013ab2:	da05      	bge.n	8013ac0 <__kernel_rem_pio2f+0x460>
 8013ab4:	b10f      	cbz	r7, 8013aba <__kernel_rem_pio2f+0x45a>
 8013ab6:	eef1 7a67 	vneg.f32	s15, s15
 8013aba:	edc8 7a00 	vstr	s15, [r8]
 8013abe:	e7af      	b.n	8013a20 <__kernel_rem_pio2f+0x3c0>
 8013ac0:	ed33 7a01 	vldmdb	r3!, {s14}
 8013ac4:	3c01      	subs	r4, #1
 8013ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013aca:	e7f1      	b.n	8013ab0 <__kernel_rem_pio2f+0x450>
 8013acc:	ed73 7a01 	vldmdb	r3!, {s15}
 8013ad0:	3a01      	subs	r2, #1
 8013ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013ad6:	e7d2      	b.n	8013a7e <__kernel_rem_pio2f+0x41e>
 8013ad8:	eef0 7a47 	vmov.f32	s15, s14
 8013adc:	e7d4      	b.n	8013a88 <__kernel_rem_pio2f+0x428>
 8013ade:	ecb2 7a01 	vldmia	r2!, {s14}
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ae8:	e7d6      	b.n	8013a98 <__kernel_rem_pio2f+0x438>
 8013aea:	edd1 7a00 	vldr	s15, [r1]
 8013aee:	edd1 6a01 	vldr	s13, [r1, #4]
 8013af2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013af6:	3801      	subs	r0, #1
 8013af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013afc:	ed81 7a00 	vstr	s14, [r1]
 8013b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b04:	edc1 7a01 	vstr	s15, [r1, #4]
 8013b08:	e799      	b.n	8013a3e <__kernel_rem_pio2f+0x3de>
 8013b0a:	edd2 7a00 	vldr	s15, [r2]
 8013b0e:	edd2 6a01 	vldr	s13, [r2, #4]
 8013b12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013b16:	3901      	subs	r1, #1
 8013b18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b1c:	ed82 7a00 	vstr	s14, [r2]
 8013b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b24:	edc2 7a01 	vstr	s15, [r2, #4]
 8013b28:	e78e      	b.n	8013a48 <__kernel_rem_pio2f+0x3e8>
 8013b2a:	ed33 7a01 	vldmdb	r3!, {s14}
 8013b2e:	3c01      	subs	r4, #1
 8013b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013b34:	e78f      	b.n	8013a56 <__kernel_rem_pio2f+0x3f6>
 8013b36:	eef1 6a66 	vneg.f32	s13, s13
 8013b3a:	eeb1 7a47 	vneg.f32	s14, s14
 8013b3e:	edc8 6a00 	vstr	s13, [r8]
 8013b42:	ed88 7a01 	vstr	s14, [r8, #4]
 8013b46:	eef1 7a67 	vneg.f32	s15, s15
 8013b4a:	e790      	b.n	8013a6e <__kernel_rem_pio2f+0x40e>

08013b4c <__kernel_tanf>:
 8013b4c:	b508      	push	{r3, lr}
 8013b4e:	ee10 3a10 	vmov	r3, s0
 8013b52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013b56:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8013b5a:	eef0 7a40 	vmov.f32	s15, s0
 8013b5e:	da17      	bge.n	8013b90 <__kernel_tanf+0x44>
 8013b60:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013b64:	ee17 1a10 	vmov	r1, s14
 8013b68:	bb41      	cbnz	r1, 8013bbc <__kernel_tanf+0x70>
 8013b6a:	1c43      	adds	r3, r0, #1
 8013b6c:	4313      	orrs	r3, r2
 8013b6e:	d108      	bne.n	8013b82 <__kernel_tanf+0x36>
 8013b70:	f000 f913 	bl	8013d9a <fabsf>
 8013b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013b78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8013b80:	bd08      	pop	{r3, pc}
 8013b82:	2801      	cmp	r0, #1
 8013b84:	d0fa      	beq.n	8013b7c <__kernel_tanf+0x30>
 8013b86:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013b8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013b8e:	e7f5      	b.n	8013b7c <__kernel_tanf+0x30>
 8013b90:	494c      	ldr	r1, [pc, #304]	; (8013cc4 <__kernel_tanf+0x178>)
 8013b92:	428a      	cmp	r2, r1
 8013b94:	db12      	blt.n	8013bbc <__kernel_tanf+0x70>
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	bfb8      	it	lt
 8013b9a:	eef1 7a40 	vneglt.f32	s15, s0
 8013b9e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8013cc8 <__kernel_tanf+0x17c>
 8013ba2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013ba6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8013ccc <__kernel_tanf+0x180>
 8013baa:	bfb8      	it	lt
 8013bac:	eef1 0a60 	vneglt.f32	s1, s1
 8013bb0:	ee70 0a60 	vsub.f32	s1, s0, s1
 8013bb4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8013bb8:	eddf 0a45 	vldr	s1, [pc, #276]	; 8013cd0 <__kernel_tanf+0x184>
 8013bbc:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013cd4 <__kernel_tanf+0x188>
 8013bc0:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8013cd8 <__kernel_tanf+0x18c>
 8013bc4:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8013cdc <__kernel_tanf+0x190>
 8013bc8:	493e      	ldr	r1, [pc, #248]	; (8013cc4 <__kernel_tanf+0x178>)
 8013bca:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013bce:	428a      	cmp	r2, r1
 8013bd0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013bd4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013bd8:	eddf 5a41 	vldr	s11, [pc, #260]	; 8013ce0 <__kernel_tanf+0x194>
 8013bdc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013be0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8013ce4 <__kernel_tanf+0x198>
 8013be4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013be8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013ce8 <__kernel_tanf+0x19c>
 8013bec:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013bf0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8013cec <__kernel_tanf+0x1a0>
 8013bf4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013bf8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8013cf0 <__kernel_tanf+0x1a4>
 8013bfc:	eee7 5a05 	vfma.f32	s11, s14, s10
 8013c00:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013cf4 <__kernel_tanf+0x1a8>
 8013c04:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013c08:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8013cf8 <__kernel_tanf+0x1ac>
 8013c0c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013c10:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8013cfc <__kernel_tanf+0x1b0>
 8013c14:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013c18:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013d00 <__kernel_tanf+0x1b4>
 8013c1c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013c20:	eeb0 7a46 	vmov.f32	s14, s12
 8013c24:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013c28:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8013c2c:	eeb0 6a60 	vmov.f32	s12, s1
 8013c30:	eea7 6a05 	vfma.f32	s12, s14, s10
 8013c34:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013d04 <__kernel_tanf+0x1b8>
 8013c38:	eee6 0a26 	vfma.f32	s1, s12, s13
 8013c3c:	eee5 0a07 	vfma.f32	s1, s10, s14
 8013c40:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013c44:	db1d      	blt.n	8013c82 <__kernel_tanf+0x136>
 8013c46:	ee06 0a90 	vmov	s13, r0
 8013c4a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8013c4e:	ee27 6a07 	vmul.f32	s12, s14, s14
 8013c52:	ee37 7a00 	vadd.f32	s14, s14, s0
 8013c56:	179b      	asrs	r3, r3, #30
 8013c58:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8013c5c:	f003 0302 	and.w	r3, r3, #2
 8013c60:	f1c3 0301 	rsb	r3, r3, #1
 8013c64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013c68:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8013c6c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013c70:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013c74:	ee07 3a90 	vmov	s15, r3
 8013c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c7c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013c80:	e77c      	b.n	8013b7c <__kernel_tanf+0x30>
 8013c82:	2801      	cmp	r0, #1
 8013c84:	d01b      	beq.n	8013cbe <__kernel_tanf+0x172>
 8013c86:	4b20      	ldr	r3, [pc, #128]	; (8013d08 <__kernel_tanf+0x1bc>)
 8013c88:	ee17 2a10 	vmov	r2, s14
 8013c8c:	401a      	ands	r2, r3
 8013c8e:	ee06 2a10 	vmov	s12, r2
 8013c92:	ee76 7a67 	vsub.f32	s15, s12, s15
 8013c96:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013c9a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013c9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ca6:	ee16 2a90 	vmov	r2, s13
 8013caa:	4013      	ands	r3, r2
 8013cac:	ee07 3a90 	vmov	s15, r3
 8013cb0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013cb4:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8013cb8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013cbc:	e75e      	b.n	8013b7c <__kernel_tanf+0x30>
 8013cbe:	eef0 7a47 	vmov.f32	s15, s14
 8013cc2:	e75b      	b.n	8013b7c <__kernel_tanf+0x30>
 8013cc4:	3f2ca140 	.word	0x3f2ca140
 8013cc8:	3f490fda 	.word	0x3f490fda
 8013ccc:	33222168 	.word	0x33222168
 8013cd0:	00000000 	.word	0x00000000
 8013cd4:	b79bae5f 	.word	0xb79bae5f
 8013cd8:	38a3f445 	.word	0x38a3f445
 8013cdc:	37d95384 	.word	0x37d95384
 8013ce0:	3a1a26c8 	.word	0x3a1a26c8
 8013ce4:	3b6b6916 	.word	0x3b6b6916
 8013ce8:	3cb327a4 	.word	0x3cb327a4
 8013cec:	3e088889 	.word	0x3e088889
 8013cf0:	3895c07a 	.word	0x3895c07a
 8013cf4:	398137b9 	.word	0x398137b9
 8013cf8:	3abede48 	.word	0x3abede48
 8013cfc:	3c11371f 	.word	0x3c11371f
 8013d00:	3d5d0dd1 	.word	0x3d5d0dd1
 8013d04:	3eaaaaab 	.word	0x3eaaaaab
 8013d08:	fffff000 	.word	0xfffff000

08013d0c <with_errnof>:
 8013d0c:	b513      	push	{r0, r1, r4, lr}
 8013d0e:	4604      	mov	r4, r0
 8013d10:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013d14:	f7fa f984 	bl	800e020 <__errno>
 8013d18:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013d1c:	6004      	str	r4, [r0, #0]
 8013d1e:	b002      	add	sp, #8
 8013d20:	bd10      	pop	{r4, pc}

08013d22 <xflowf>:
 8013d22:	b130      	cbz	r0, 8013d32 <xflowf+0x10>
 8013d24:	eef1 7a40 	vneg.f32	s15, s0
 8013d28:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013d2c:	2022      	movs	r0, #34	; 0x22
 8013d2e:	f7ff bfed 	b.w	8013d0c <with_errnof>
 8013d32:	eef0 7a40 	vmov.f32	s15, s0
 8013d36:	e7f7      	b.n	8013d28 <xflowf+0x6>

08013d38 <__math_uflowf>:
 8013d38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d40 <__math_uflowf+0x8>
 8013d3c:	f7ff bff1 	b.w	8013d22 <xflowf>
 8013d40:	10000000 	.word	0x10000000

08013d44 <__math_may_uflowf>:
 8013d44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d4c <__math_may_uflowf+0x8>
 8013d48:	f7ff bfeb 	b.w	8013d22 <xflowf>
 8013d4c:	1a200000 	.word	0x1a200000

08013d50 <__math_oflowf>:
 8013d50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d58 <__math_oflowf+0x8>
 8013d54:	f7ff bfe5 	b.w	8013d22 <xflowf>
 8013d58:	70000000 	.word	0x70000000

08013d5c <__math_divzerof>:
 8013d5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013d60:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013d64:	2800      	cmp	r0, #0
 8013d66:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8013d6a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013d78 <__math_divzerof+0x1c>
 8013d6e:	2022      	movs	r0, #34	; 0x22
 8013d70:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013d74:	f7ff bfca 	b.w	8013d0c <with_errnof>
 8013d78:	00000000 	.word	0x00000000

08013d7c <__math_invalidf>:
 8013d7c:	eef0 7a40 	vmov.f32	s15, s0
 8013d80:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013d84:	eef4 7a67 	vcmp.f32	s15, s15
 8013d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8013d90:	d602      	bvs.n	8013d98 <__math_invalidf+0x1c>
 8013d92:	2021      	movs	r0, #33	; 0x21
 8013d94:	f7ff bfba 	b.w	8013d0c <with_errnof>
 8013d98:	4770      	bx	lr

08013d9a <fabsf>:
 8013d9a:	ee10 3a10 	vmov	r3, s0
 8013d9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013da2:	ee00 3a10 	vmov	s0, r3
 8013da6:	4770      	bx	lr

08013da8 <floorf>:
 8013da8:	ee10 3a10 	vmov	r3, s0
 8013dac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013db0:	3a7f      	subs	r2, #127	; 0x7f
 8013db2:	2a16      	cmp	r2, #22
 8013db4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013db8:	dc2a      	bgt.n	8013e10 <floorf+0x68>
 8013dba:	2a00      	cmp	r2, #0
 8013dbc:	da11      	bge.n	8013de2 <floorf+0x3a>
 8013dbe:	eddf 7a18 	vldr	s15, [pc, #96]	; 8013e20 <floorf+0x78>
 8013dc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013dc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dce:	dd05      	ble.n	8013ddc <floorf+0x34>
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	da23      	bge.n	8013e1c <floorf+0x74>
 8013dd4:	4a13      	ldr	r2, [pc, #76]	; (8013e24 <floorf+0x7c>)
 8013dd6:	2900      	cmp	r1, #0
 8013dd8:	bf18      	it	ne
 8013dda:	4613      	movne	r3, r2
 8013ddc:	ee00 3a10 	vmov	s0, r3
 8013de0:	4770      	bx	lr
 8013de2:	4911      	ldr	r1, [pc, #68]	; (8013e28 <floorf+0x80>)
 8013de4:	4111      	asrs	r1, r2
 8013de6:	420b      	tst	r3, r1
 8013de8:	d0fa      	beq.n	8013de0 <floorf+0x38>
 8013dea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013e20 <floorf+0x78>
 8013dee:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013df2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dfa:	ddef      	ble.n	8013ddc <floorf+0x34>
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	bfbe      	ittt	lt
 8013e00:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8013e04:	fa40 f202 	asrlt.w	r2, r0, r2
 8013e08:	189b      	addlt	r3, r3, r2
 8013e0a:	ea23 0301 	bic.w	r3, r3, r1
 8013e0e:	e7e5      	b.n	8013ddc <floorf+0x34>
 8013e10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013e14:	d3e4      	bcc.n	8013de0 <floorf+0x38>
 8013e16:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e1a:	4770      	bx	lr
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	e7dd      	b.n	8013ddc <floorf+0x34>
 8013e20:	7149f2ca 	.word	0x7149f2ca
 8013e24:	bf800000 	.word	0xbf800000
 8013e28:	007fffff 	.word	0x007fffff

08013e2c <scalbnf>:
 8013e2c:	ee10 3a10 	vmov	r3, s0
 8013e30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013e34:	d024      	beq.n	8013e80 <scalbnf+0x54>
 8013e36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013e3a:	d302      	bcc.n	8013e42 <scalbnf+0x16>
 8013e3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e40:	4770      	bx	lr
 8013e42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013e46:	d121      	bne.n	8013e8c <scalbnf+0x60>
 8013e48:	4b29      	ldr	r3, [pc, #164]	; (8013ef0 <scalbnf+0xc4>)
 8013e4a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8013ef4 <scalbnf+0xc8>
 8013e4e:	4298      	cmp	r0, r3
 8013e50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013e54:	db15      	blt.n	8013e82 <scalbnf+0x56>
 8013e56:	ee10 3a10 	vmov	r3, s0
 8013e5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013e5e:	3a19      	subs	r2, #25
 8013e60:	4402      	add	r2, r0
 8013e62:	2afe      	cmp	r2, #254	; 0xfe
 8013e64:	dd14      	ble.n	8013e90 <scalbnf+0x64>
 8013e66:	eddf 7a24 	vldr	s15, [pc, #144]	; 8013ef8 <scalbnf+0xcc>
 8013e6a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013efc <scalbnf+0xd0>
 8013e6e:	ee10 3a10 	vmov	r3, s0
 8013e72:	eeb0 7a67 	vmov.f32	s14, s15
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8013e7c:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013e80:	4770      	bx	lr
 8013e82:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013f00 <scalbnf+0xd4>
 8013e86:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013e8a:	4770      	bx	lr
 8013e8c:	0dd2      	lsrs	r2, r2, #23
 8013e8e:	e7e7      	b.n	8013e60 <scalbnf+0x34>
 8013e90:	2a00      	cmp	r2, #0
 8013e92:	dd06      	ble.n	8013ea2 <scalbnf+0x76>
 8013e94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013e98:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013e9c:	ee00 3a10 	vmov	s0, r3
 8013ea0:	4770      	bx	lr
 8013ea2:	f112 0f16 	cmn.w	r2, #22
 8013ea6:	da19      	bge.n	8013edc <scalbnf+0xb0>
 8013ea8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013eac:	4298      	cmp	r0, r3
 8013eae:	ee10 3a10 	vmov	r3, s0
 8013eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013eb6:	dd09      	ble.n	8013ecc <scalbnf+0xa0>
 8013eb8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8013ef8 <scalbnf+0xcc>
 8013ebc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8013efc <scalbnf+0xd0>
 8013ec0:	eef0 7a40 	vmov.f32	s15, s0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	fe00 0a07 	vseleq.f32	s0, s0, s14
 8013eca:	e7dc      	b.n	8013e86 <scalbnf+0x5a>
 8013ecc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013f00 <scalbnf+0xd4>
 8013ed0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013f04 <scalbnf+0xd8>
 8013ed4:	eef0 7a40 	vmov.f32	s15, s0
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	e7f4      	b.n	8013ec6 <scalbnf+0x9a>
 8013edc:	3219      	adds	r2, #25
 8013ede:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013ee2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013ee6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013f08 <scalbnf+0xdc>
 8013eea:	ee07 3a10 	vmov	s14, r3
 8013eee:	e7c5      	b.n	8013e7c <scalbnf+0x50>
 8013ef0:	ffff3cb0 	.word	0xffff3cb0
 8013ef4:	4c000000 	.word	0x4c000000
 8013ef8:	7149f2ca 	.word	0x7149f2ca
 8013efc:	f149f2ca 	.word	0xf149f2ca
 8013f00:	0da24260 	.word	0x0da24260
 8013f04:	8da24260 	.word	0x8da24260
 8013f08:	33000000 	.word	0x33000000

08013f0c <_init>:
 8013f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f0e:	bf00      	nop
 8013f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f12:	bc08      	pop	{r3}
 8013f14:	469e      	mov	lr, r3
 8013f16:	4770      	bx	lr

08013f18 <_fini>:
 8013f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f1a:	bf00      	nop
 8013f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f1e:	bc08      	pop	{r3}
 8013f20:	469e      	mov	lr, r3
 8013f22:	4770      	bx	lr
